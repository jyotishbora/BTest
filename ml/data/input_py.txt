def Common_Calculation():{n}{t}if get_bool(IAF1040.MFJ) == True:{n}{t}{t}return get_string(USWBasicInfo.CombFirst){n}{t}else:{n}{t}{t}return get_string(USWBasicInfo.TPCommon){n}{n}
def MEF100SP_Calculation():{n}{t}if get_bool(IA100.Spouse) == True and get_bool(IA100.Print) == True:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def MEF100TP_Calculation():{n}{t}if get_bool(IA100.Taxpayer) == True and get_bool(IA100.Print) == True:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def Names_Calculation():{n}{t}if get_bool(IA100.Spouse) == True:{n}{t}{t}return get_string(IAREQUIRED.SPCombName){n}{t}else:{n}{t}{t}return get_string(IAREQUIRED.TPCombName){n}{n}
def P2Gain_Calculation():{n}{t}return max_value(0, get_currency(IA100.P2SalesPx) - get_currency(IA100.P2Cost)){n}{n}
def P2TPSharePerc_Calculation():{n}{t}return get_float(IA100.P2TPShare) * 100{n}{n}
def Print_Calculation():{n}{t}if get_currency(IA100.P6CGD) > 0:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def SpouseCommon_Calculation():{n}{t}if get_bool(IAF1040.CombMFS) == True:{n}{t}{t}return get_string(USWBasicInfo.SPCommon){n}{t}else:{n}{t}{t}return 'Not Applicable'{n}{n}
def SSN_Calculation():{n}{t}if get_bool(IA100.Spouse) == True:{n}{t}{t}return get_string(IAF1040.SpouseSSN){n}{t}else:{n}{t}{t}return get_string(IAF1040.SSN){n}{n}def Add_Calculation():{n}{t}return get_string(IAF1040.Add){n}{n}
def CityComb_Calculation():{n}{t}return get_string(IAF1040.CityComb){n}{n}
def CombNames_Calculation():{n}{t}return get_string(IAREQUIRED.CombNames){n}{n}
def Desc_Calculation():{n}{t}return 'Payment Voucher - ' + get_string(IA1040V.TotDue){n}{n}
def PeriodEnd_Calculation():{n}{t}return '123118'{n}{n}
def Phone_Calculation():{n}{t}return get_string(IAF1040.Phone){n}{n}
def PrVou_Calculation():{n}{t}if get_currency(IA1040V.TotDue) > 0 and get_bool(IAEFWKSHT.Yes) == True:{n}{t}{t}return 1{n}{t}elif get_currency(IA1040V.TotDue) > 0 and get_bool(IAEFWKSHT.EFW) == False:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def SSN_Calculation():{n}{t}return get_string(IAF1040.SSN){n}{n}
def TotDue_Calculation():{n}{t}return get_currency(IAF1040.TotDue){n}{n}def AAltTax_Calculation():{n}{t}# 1st condition added for situation when MFS return and reporting spouse income causes an alternate tax calculation yet taxpayer has zero income{n}{t}# See saved return IA MFS Alternate Tax Issue.ta2{n}{t}if get_bool(IA1040X.MFS) == True and get_currency(IA1040X.ATaxInc) == 0:{n}{t}{t}return 0{n}{t}elif  ( get_currency(IAWKALTTAX.Mult) < get_currency(IA1040X.TotTaxSch) )  and get_bool(IAWKALTTAX.Qualify) == True:{n}{t}{t}return get_currency(IAF1040.ATax){n}{t}else:{n}{t}{t}return get_currency(IA1040X.ARegTax){n}{n}
def ABalance14_Calculation():{n}{t}return max_value(0, get_currency(IA1040X.ATotTax) - get_currency(IA1040X.ATotCr50)){n}{n}
def ABalance16_Calculation():{n}{t}return max_value(0, get_currency(IA1040X.ABalance14) - get_currency(IA1040X.ACrNon)){n}{n}
def ABalance18_Calculation():{n}{t}return max_value(0, get_currency(IA1040X.ABalance16) - get_currency(IA1040X.AOthIACr)){n}{n}
def ABalance7_Calculation():{n}{t}return get_currency(IA1040X.ATotInc) - get_currency(IA1040X.AFedDed){n}{n}
def AContrib_Calculation():{n}{t}if get_bool(IA1040X.CombMFS) == True:{n}{t}{t}return get_currency(IAF1040.TotContrib) - get_currency(IA1040X.BContrib){n}{t}else:{n}{t}{t}return get_currency(IAF1040.TotContrib){n}{n}
def ACrNon_Calculation():{n}{t}return get_currency(IAF1040.ACrNon){n}{n}
def Add_Calculation():{n}{t}return get_string(IAF1040.Add){n}{n}
def ADedBox_Calculation():{n}{t}return get_currency(IAF1040.ADedBox){n}{n}
def AdjRef_Calculation():{n}{t}return max_value(0, get_currency(IA1040X.CalcOP) - get_currency(IA1040X.TotCF)){n}{n}
def AFedDed_Calculation():{n}{t}return get_currency(IAF1040.AFedDed){n}{n}
def AFedTax_Calculation():{n}{t}return get_currency(IAF1040.AFedTax){n}{n}
def AGross_Calculation():{n}{t}return get_currency(IAF1040.AGross){n}{n}
def ALumpMin_Calculation():{n}{t}return get_currency(IAF1040.ALump) + get_currency(IAF1040.AIAMin){n}{n}
def ANet_Calculation():{n}{t}return get_currency(IAF1040.ANet){n}{n}
def AOthIACr_Calculation():{n}{t}return get_currency(IAF1040.AOutState) + get_currency(IAF1040.AOthIACr){n}{n}
def APenExcl_Calculation():{n}{t}return get_currency(IAF1040.APenExcl){n}{n}
def ARegTax_Calculation():{n}{t}TotTaxInc = Currency(){n}{t}TotTaxInc = get_currency(IA1040X.ATaxInc){n}{t}return Tax(TotTaxInc){n}{n}
def ARepSSB_Calculation():{n}{t}return get_currency(IAF1040.ARepSSB){n}{n}
def ASch_Calculation():{n}{t}return get_currency(IAF1040.ASch){n}{n}
def ATaxInc_Calculation():{n}{t}return get_currency(IAF1040.ATaxInc){n}{n}
def ATotAdj_Calculation():{n}{t}return get_currency(IAF1040.ATotAdj){n}{n}
def ATotCr50_Calculation():{n}{t}return get_currency(IAF1040.ACredits){n}{n}
def ATotInc_Calculation():{n}{t}return get_currency(IA1040X.ANet) + get_currency(IA1040X.AFedTax){n}{n}
def ATotTax_Calculation():{n}{t}return get_currency(IA1040X.AAltTax) + get_currency(IA1040X.ALumpMin){n}{n}
def ATotTax2_Calculation():{n}{t}return get_currency(IA1040X.ABalance18) + get_currency(IA1040X.ASch) + get_currency(IA1040X.AContrib){n}{n}
def Balance27_Calculation():{n}{t}return max_value(0, get_currency(IA1040X.TotPay) - get_currency(IA1040X.PrevOP)){n}{n}
def BAltTax_Calculation():{n}{t}if IAFS() == 3:{n}{t}{t}if ( get_currency(IAWKALTTAX.Mult) < get_currency(IA1040X.TotTaxSch) )  and get_bool(IAWKALTTAX.Qualify) == True:{n}{t}{t}{t}return get_currency(IAF1040.BTax){n}{t}{t}else:{n}{t}{t}{t}return get_currency(IA1040X.BRegTax){n}{t}else:{n}{t}{t}return 0{n}{n}
def BBalance14_Calculation():{n}{t}return max_value(0, get_currency(IA1040X.BTotTax) - get_currency(IA1040X.BTotCr50)){n}{n}
def BBalance16_Calculation():{n}{t}return max_value(0, get_currency(IA1040X.BBalance14) - get_currency(IA1040X.BCrNon)){n}{n}
def BBalance18_Calculation():{n}{t}return max_value(0, get_currency(IA1040X.BBalance16) - get_currency(IA1040X.BOthIACr)){n}{n}
def BBalance7_Calculation():{n}{t}return get_currency(IA1040X.BTotInc) - get_currency(IA1040X.BFedDed){n}{n}
def BContrib_Calculation():{n}{t}if get_bool(IA1040X.CombMFS) == True:{n}{t}{t}return c_dollar(get_float(IAF1040.TotContrib) * 0.5){n}{t}else:{n}{t}{t}return 0{n}{n}
def BCrNon_Calculation():{n}{t}return get_currency(IAF1040.BCrNon){n}{n}
def BDedBox_Calculation():{n}{t}return get_currency(IAF1040.BDedBox){n}{n}
def BFedDed_Calculation():{n}{t}return get_currency(IAF1040.BFedDed){n}{n}
def BFedTax_Calculation():{n}{t}return get_currency(IAF1040.BFedTax){n}{n}
def BGross_Calculation():{n}{t}return get_currency(IAF1040.BGross){n}{n}
def BLumpMin_Calculation():{n}{t}return get_currency(IAF1040.BLump) + get_currency(IAF1040.BIAMin){n}{n}
def BNet_Calculation():{n}{t}return get_currency(IAF1040.BNet){n}{n}
def BOthIACr_Calculation():{n}{t}return get_currency(IAF1040.BOutState) + get_currency(IAF1040.BOthIACr){n}{n}
def BPenExcl_Calculation():{n}{t}return get_currency(IAF1040.BPenExcl){n}{n}
def BRegTax_Calculation():{n}{t}TotTaxInc = Currency(){n}{t}if get_bool(IAF1040.MFS) == True:{n}{t}{t}TotTaxInc = get_currency(IAF1040.SpTaxInc){n}{t}else:{n}{t}{t}TotTaxInc = get_currency(IA1040X.BTaxInc){n}{t}return Tax(TotTaxInc){n}{n}
def BRepSSB_Calculation():{n}{t}return get_currency(IAF1040.BRepSSB){n}{n}
def BSch_Calculation():{n}{t}return get_currency(IAF1040.BSch){n}{n}
def BTaxInc_Calculation():{n}{t}return get_currency(IAF1040.BTaxInc){n}{n}
def BTotAdj_Calculation():{n}{t}return get_currency(IAF1040.BTotAdj){n}{n}
def BTotCr50_Calculation():{n}{t}return get_currency(IAF1040.BCredits){n}{n}
def BTotInc_Calculation():{n}{t}return get_currency(IA1040X.BNet) + get_currency(IA1040X.BFedTax){n}{n}
def BTotTax_Calculation():{n}{t}return get_currency(IA1040X.BAltTax) + get_currency(IA1040X.BLumpMin){n}{n}
def BTotTax2_Calculation():{n}{t}return get_currency(IA1040X.BBalance18) + get_currency(IA1040X.BSch) + get_currency(IA1040X.BContrib){n}{n}
def CalcOP_Calculation():{n}{t}PrevOP = Currency(){n}{t}PrevOP = max_value(0, get_currency(IA1040X.PrevOP) - get_currency(IA1040X.TotPay)){n}{t}return max_value(0, get_currency(IA1040X.Balance27) - get_currency(IA1040X.Total) - PrevOP){n}{n}
def City_Calculation():{n}{t}return get_string(IAF1040.CityComb){n}{n}
def CombMFS_Calculation():{n}{t}return get_bool(IAF1040.CombMFS){n}{n}
def CountyNo_Calculation():{n}{t}return get_string(IAF1040.CountyNo){n}{n}
def DC1_Calculation():{n}{t}return get_number(IAF1040.DC1){n}{n}
def DC2_Calculation():{n}{t}return get_number(IAF1040.DC2){n}{n}
def DepN_Calculation():{n}{t}return get_bool(IAF1040.DepN){n}{n}
def DepNames_Calculation():{n}{t}return get_string(IAF1040.DepNames){n}{n}
def DepY_Calculation():{n}{t}return get_bool(IAF1040.DepY){n}{n}
def Desc_Calculation():{n}{t}return get_string(IAREQUIRED.CombNames){n}{n}
def EFExplanation_Calculation():{n}{t}t = String(){n}{n}{t}a = Integer(){n}{t}t = ''{n}{t}a = 0{n}{t}while a < 18:{n}{t}{t}t = t + ' ' + get_string(IA1040X.Explanation(a)){n}{t}{t}a = a + 1{n}{t}if get_bool(IA1040X.EFAmend) == True:{n}{t}{t}return trim(t){n}{t}else:{n}{t}{t}return ''{n}{n}
def ExempA_Calculation():{n}{t}return get_currency(IAF1040.ExempA){n}{n}
def ExempB_Calculation():{n}{t}return get_currency(IAF1040.ExempB){n}{n}
def Exist_Calculation():{n}{t}return 1{n}{n}
def FirstName_Calculation():{n}{t}return get_string(IAF1040.FirstName){n}{n}
def HOH_Calculation():{n}{t}return get_bool(IAF1040.HOH){n}{n}
def HOHDep_Calculation():{n}{t}return get_string(IAF1040.HOHDep){n}{n}
def HOHSSN_Calculation():{n}{t}return get_string(IAF1040.HOHSSN){n}{n}
def Int_Calculation():{n}{t}return get_currency(IAF1040.Int74){n}{n}
def ItemCheck_Calculation():{n}{t}return get_bool(IAF1040.ItemCheck){n}{n}
def LastName_Calculation():{n}{t}return get_string(IAF1040.LastName){n}{n}
def Lesser_Calculation():{n}{t}if IAFS() == 1:{n}{t}{t}return get_currency(IA1040X.TotTaxSch){n}{t}else:{n}{t}{t}if get_bool(IAWKALTTAX.Qualify) == True:{n}{t}{t}{t}return min_value(get_currency(IAWKALTTAX.Mult), get_currency(IA1040X.TotTaxSch)){n}{t}{t}else:{n}{t}{t}{t}return get_currency(IA1040X.TotTaxSch){n}{n}
def MFJ_Calculation():{n}{t}return get_bool(IAF1040.MFJ){n}{n}
def MFS_Calculation():{n}{t}return get_bool(IAF1040.MFS){n}{n}
def MFSName_Calculation():{n}{t}return get_string(IAF1040.MFSName){n}{n}
def MFSSSN_Calculation():{n}{t}return get_string(IAF1040.MFSSSN){n}{n}
def Over65_Calculation():{n}{t}return get_bool(IAF1040.Over65){n}{n}
def Owe_Calculation():{n}{t}PrevOP = Currency(){n}{t}PrevOP = max_value(0, get_currency(IA1040X.PrevOP) - get_currency(IA1040X.TotPay)){n}{t}return max_value(0, get_currency(IA1040X.Total) + PrevOP - get_currency(IA1040X.Balance27)){n}{n}
def PC1a_Calculation():{n}{t}return get_number(IAF1040.PC1a){n}{n}
def PC1b_Calculation():{n}{t}return get_number(IAF1040.PC1b){n}{n}
def PC2a_Calculation():{n}{t}return get_number(IAF1040.PC2a){n}{n}
def PC2b_Calculation():{n}{t}return get_number(IAF1040.PC2b){n}{n}
def Pen_Calculation():{n}{t}return get_currency(IAF1040.Pen74){n}{n}
def PenInt_Calculation():{n}{t}if get_currency(IA1040X.Refund) > 0:{n}{t}{t}return 0{n}{t}else:{n}{t}{t}return get_currency(IA1040X.Pen) + get_currency(IA1040X.Int){n}{n}
def Phone_Calculation():{n}{t}return get_string(IAF1040.Phone){n}{n}
def PrepAdd_Calculation():{n}{t}return get_string(USWBasicInfo.PrepAdd){n}{n}
def PrepCitySt_Calculation():{n}{t}return get_string(USWBasicInfo.CombPrepCityStZipFor){n}{n}
def PrepFirm_Calculation():{n}{t}return get_string(USWBasicInfo.PrepName){n}{n}
def PrepID_Calculation():{n}{t}return get_string(IAF1040.PrepID){n}{n}
def PrepPhone_Calculation():{n}{t}return get_string(IAF1040.PrepPhone){n}{n}
def QualWidow_Calculation():{n}{t}return get_bool(IAF1040.QualWidow){n}{n}
def Refund_Calculation():{n}{t}PrevOP = Currency(){n}{t}PrevOP = max_value(0, get_currency(IA1040X.PrevOP) - get_currency(IA1040X.TotPay)){n}{t}if get_currency(IA1040X.TotCF) > 0:{n}{t}{t}return get_currency(IA1040X.AdjRef){n}{t}else:{n}{t}{t}return max_value(0, get_currency(IA1040X.Balance27) - get_currency(IA1040X.Total) - PrevOP){n}{n}
def SchNo_Calculation():{n}{t}return get_string(IAF1040.SchNo){n}{n}
def Single_Calculation():{n}{t}return get_bool(IAF1040.Single){n}{n}
def SpIncome_Calculation():{n}{t}return get_currency(IAF1040.SpIncome){n}{n}
def SpouseFirst_Calculation():{n}{t}return get_string(IAF1040.SpouseFirst){n}{n}
def SpouseLast_Calculation():{n}{t}return get_string(IAF1040.SpouseLast){n}{n}
def SpouseSSN_Calculation():{n}{t}return get_string(IAF1040.SpouseSSN){n}{n}
def SSN_Calculation():{n}{t}return get_string(IAF1040.SSN){n}{n}
def StadCheck_Calculation():{n}{t}return get_bool(IAF1040.StadCheck){n}{n}
def TaxYear_Calculation():{n}{t}TaxYear = Integer(){n}{t}TaxYear = YearNumber{n}{t}return CStr(TaxYear){n}{n}
def Tot67_Calculation():{n}{t}if get_bool(IA1040X.EFAmend) == True:{n}{t}{t}return get_currency(IAF1040.BTot67) + get_currency(IAF1040.ATot67) - get_currency(IA1040X.TotPrevTax){n}{t}else:{n}{t}{t}return get_currency(IAF1040.BTot67) + get_currency(IAF1040.ATot67){n}{n}
def Total_Calculation():{n}{t}return get_currency(IA1040X.BTotTax2) + get_currency(IA1040X.ATotTax2){n}{n}
def TotCF_Calculation():{n}{t}return get_currency(IA1040X.TPElectCF) + get_currency(IA1040X.SPElectCF){n}{n}
def TotDC1_Calculation():{n}{t}return get_currency(IAF1040.TotDC1){n}{n}
def TotDC2_Calculation():{n}{t}return get_currency(IAF1040.TotDC2){n}{n}
def TotDue_Calculation():{n}{t}return get_currency(IA1040X.Owe) + get_currency(IA1040X.PenInt){n}{n}
def TotPay_Calculation():{n}{t}return get_currency(IA1040X.Tot67) + get_currency(IA1040X.TotPrevTax){n}{n}
def TotPC2a_Calculation():{n}{t}return get_currency(IAF1040.TotPC2a){n}{n}
def TotPC2b_Calculation():{n}{t}return get_currency(IAF1040.TotPC2b){n}{n}
def TotPCa_Calculation():{n}{t}return get_currency(IAF1040.TotPCa){n}{n}
def TotPCb_Calculation():{n}{t}return get_currency(IAF1040.TotPCb){n}{n}
def TotTaxSch_Calculation():{n}{t}return get_currency(IA1040X.ARegTax) + get_currency(IA1040X.BRegTax){n}{n}def Add_Calculation():{n}{t}return get_string(IA1040X.Add){n}{n}
def CityComb_Calculation():{n}{t}return get_string(IA1040X.City){n}{n}
def CombNames_Calculation():{n}{t}return get_string(IAREQUIRED.CombNames){n}{n}
def Desc_Calculation():{n}{t}return 'Payment Voucher - ' + get_string(IA1040XV.TotDue){n}{n}
def PeriodEnd_Calculation():{n}{t}return '123118'{n}{n}
def Phone_Calculation():{n}{t}return get_string(IA1040X.Phone){n}{n}
def PrVou_Calculation():{n}{t}if get_currency(IA1040XV.TotDue) > 0:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def SSN_Calculation():{n}{t}return get_string(IA1040X.SSN){n}{n}
def TotDue_Calculation():{n}{t}return get_currency(IA1040X.TotDue){n}{n}def Alert10_Calculation():{n}{t}if get_bool(IA130.MEF130TP) == True and trim(get_string(IA130.EFTPState)) == '':{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def Alert20_Calculation():{n}{t}if get_bool(IA130.MEF130SP) == True and trim(get_string(IA130.EFTPState)) == '':{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def Common_Calculation():{n}{t}if get_bool(IAF1040.MFJ) == True:{n}{t}{t}return get_string(USWBasicInfo.CombFirst){n}{t}else:{n}{t}{t}return get_string(USWBasicInfo.TPCommon){n}{n}
def Credit_Calculation():{n}{t}return get_currency(IA130.Small) + get_currency(IA130.PY130Cr){n}{n}
def Description_Calculation():{n}{t}Total = Currency(){n}{t}Total = get_currency(IA130.Small) + get_currency(IA130.PY130Cr){n}{t}return CStr(Total) + ' Credit'{n}{n}
def Div_Calculation():{n}{t}TopLim = Double(){n}{t}if get_currency(IA130.Inc15) == 0:{n}{t}{t}return 0{n}{t}else:{n}{t}{t}TopLim = min_value(1, Round(get_float(IA130.GrInc) / get_float(IA130.Inc15), 3)){n}{t}{t}return max_value(0, TopLim){n}{n}
def EFTPState_Calculation():{n}{t}if trim(get_string(IA130.YouFC)) != '':{n}{t}{t}return ForeignCode(trim(get_string(IA130.YouFC))){n}{t}else:{n}{t}{t}return get_string(IA130.YouState){n}{n}
def Exist_Calculation():{n}{t}return 1{n}{n}
def Inc15_Calculation():{n}{t}if get_bool(IA130.TPRes) == True:{n}{t}{t}return get_currency(IAF1040.AGross){n}{t}elif get_bool(IA130.TPPY) == True:{n}{t}{t}return get_currency(IAF126.GrossInc){n}{t}elif get_bool(IA130.SPRes) == True:{n}{t}{t}return get_currency(IAF1040.BGross){n}{t}elif get_bool(IA130.SPPY) == True:{n}{t}{t}return get_currency(IAF126.BGross){n}{t}else:{n}{t}{t}return 0{n}{n}
def MEF130SP_Calculation():{n}{t}if get_bool(IA130.SPRes) == True and get_currency(IA130.Small) != 0:{n}{t}{t}return 1{n}{t}elif get_bool(IA130.SPPY) == True and get_currency(IA130.PY130Cr) != 0:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def MEF130TP_Calculation():{n}{t}if get_bool(IA130.TPRes) == True and get_currency(IA130.Small) != 0:{n}{t}{t}return 1{n}{t}elif get_bool(IA130.TPPY) == True and get_currency(IA130.PY130Cr) != 0:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def Mult_Calculation():{n}{t}return c_dollar(get_float(IA130.Div) * get_float(IA130.Tax55)){n}{n}
def Names_Calculation():{n}{t}if get_bool(IAF1040.CombMFS) == True:{n}{t}{t}if get_bool(IA130.Spouse) == True:{n}{t}{t}{t}return get_string(IAREQUIRED.SPCombName){n}{t}{t}else:{n}{t}{t}{t}return get_string(IAREQUIRED.TPCombName){n}{t}else:{n}{t}{t}return get_string(IAREQUIRED.CombNames){n}{n}
def PartYear_Calculation():{n}{t}if get_number(IA130.TPPY) > 0 or get_number(IA130.SPPY) > 0:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def PrintMe_Calculation():{n}{t}if get_currency(IA130.Small) + get_currency(IA130.PY130Cr) > 0:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def PY130Cr_Calculation():{n}{t}if get_bool(IA130.TPPY) == True or get_bool(IA130.SPPY) == True:{n}{t}{t}return min_value(get_currency(IA130.Mult), get_currency(IA130.PYTax)){n}{t}else:{n}{t}{t}return 0{n}{n}
def PYPer_Calculation():{n}{t}TopLim = Double(){n}{t}if get_bool(IA130.TPPY) == True or get_bool(IA130.SPPY) == True:{n}{t}{t}if get_float(IA130.PYSmall) == 0:{n}{t}{t}{t}return 0{n}{t}{t}else:{n}{t}{t}{t}TopLim = min_value(1, Round(get_float(IA130.GrInc) / get_float(IA130.PYSmall), 3)){n}{t}{t}{t}return max_value(0, TopLim){n}{t}else:{n}{t}{t}return 0{n}{n}
def PYTax_Calculation():{n}{t}if get_bool(IA130.TPPY) == True or get_bool(IA130.SPPY) == True:{n}{t}{t}return c_dollar(get_float(IA130.OthTax) * get_float(IA130.PYPer)){n}{t}else:{n}{t}{t}return 0{n}{n}
def Small_Calculation():{n}{t}if get_bool(IA130.TPRes) == True or get_bool(IA130.SPRes) == True:{n}{t}{t}return min_value(get_currency(IA130.Mult), get_currency(IA130.OthTax)){n}{t}else:{n}{t}{t}return 0{n}{n}
def SPCredit_Calculation():{n}{t}if get_number(IA130.SPRes) > 0 or get_number(IA130.SPPY) > 0:{n}{t}{t}return get_currency(IA130.Small) + get_currency(IA130.PY130Cr){n}{t}else:{n}{t}{t}return 0{n}{n}
def SpouseCommon_Calculation():{n}{t}if get_bool(IAF1040.CombMFS) == True:{n}{t}{t}return get_string(USWBasicInfo.SPCommon){n}{t}else:{n}{t}{t}return 'Not Applicable'{n}{n}
def SPPY_Calculation():{n}{t}if get_bool(IAF1040.CombMFS) == True and get_bool(IAF126.SpPYRes) == True and get_bool(IA130.Spouse) == True:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def SPRes_Calculation():{n}{t}if get_bool(IAF1040.CombMFS) == True and get_bool(IA130.Spouse) == True:{n}{t}{t}if get_bool(IAF126.Exist) == False:{n}{t}{t}{t}return 1{n}{t}{t}elif get_bool(IAF126.SpRes) == True:{n}{t}{t}{t}return 1{n}{t}{t}else:{n}{t}{t}{t}return 0{n}{t}else:{n}{t}{t}return 0{n}{n}
def SSN_Calculation():{n}{t}if get_bool(IA130.Spouse) == True:{n}{t}{t}return get_string(IAF1040.SpouseSSN){n}{t}else:{n}{t}{t}return get_string(IAF1040.SSN){n}{n}
def Tax55_Calculation():{n}{t}if get_bool(IA130.TPRes) == True or get_bool(IA130.TPPY) == True:{n}{t}{t}return max_value(0, get_currency(IAF1040.ABal2) -  ( get_currency(IAF1040.ALump) + get_currency(IAF1040.AIAMin) )){n}{t}elif get_bool(IA130.SPRes) == True or get_bool(IA130.SPPY) == True:{n}{t}{t}return max_value(0, get_currency(IAF1040.BBal2) -  ( get_currency(IAF1040.BLump) + get_currency(IAF1040.BIAMin) )){n}{t}else:{n}{t}{t}return 0{n}{n}
def TPCredit_Calculation():{n}{t}if get_number(IA130.TPRes) > 0 or get_number(IA130.TPPY) > 0:{n}{t}{t}return get_currency(IA130.Small) + get_currency(IA130.PY130Cr){n}{t}else:{n}{t}{t}return 0{n}{n}
def TPPY_Calculation():{n}{t}if get_bool(IA130.Spouse) == True:{n}{t}{t}return 0{n}{t}elif get_bool(IAF1040.MFJ) == True:{n}{t}{t}if get_bool(IAF126.TpPYRes) == True or get_bool(IAF126.SpPYRes) == True:{n}{t}{t}{t}return 1{n}{t}{t}else:{n}{t}{t}{t}return 0{n}{t}elif get_bool(IAF126.TpPYRes) == True:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def TPRes_Calculation():{n}{t}Only1NR = Long(){n}{t}if get_bool(IAF126.TpNonRes) == True and get_bool(IAF126.SPRes) == True:{n}{t}{t}Only1NR = 1{n}{t}elif get_bool(IAF126.TPRes) == True and get_bool(IAF126.SpNonRes) == True:{n}{t}{t}Only1NR = 1{n}{t}else:{n}{t}{t}Only1NR = 0{n}{t}if get_bool(IA130.Spouse) == True:{n}{t}{t}return 0{n}{t}elif get_bool(IAF126.Exist) == False:{n}{t}{t}return 1{n}{t}elif get_bool(IAF1040.MFJ) == True and Only1NR == 1:{n}{t}{t}return 1{n}{t}elif get_bool(IAF1040.MFJ) == True and get_bool(IAF126.TPRes) == True and get_bool(IAF126.SPRes) == True:{n}{t}{t}return 1{n}{t}elif get_bool(IAF1040.MFJ) != True and get_bool(IAF126.TPRes) == True:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}def Common_Calculation():{n}{t}if get_bool(IAF1040.MFJ) == True:{n}{t}{t}return get_string(USWBasicInfo.CombFirst){n}{t}else:{n}{t}{t}return get_string(USWBasicInfo.TPCommon){n}{n}
def IA133Applied_Calculation():{n}{t}return get_currency(IA133.NewJobCr){n}{n}
def IncreaseEmpPerc_Calculation():{n}{t}TopLim = Double(){n}{t}if get_float(IA133.Base) <= 0:{n}{t}{t}return 0.10{n}{t}else:{n}{t}{t}TopLim = Round(get_float(IA133.TotEligNewJobs) / get_float(IA133.Base), 3){n}{t}{t}return max_value(0, TopLim){n}{n}
def MEF133SP_Calculation():{n}{t}if get_bool(IA133.Spouse) == True and get_bool(IA133.Print) == True:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def MEF133TP_Calculation():{n}{t}if get_bool(IA133.Taxpayer) == True and get_bool(IA133.Print) == True:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def Names_Calculation():{n}{t}if get_bool(IA100.Spouse) == True:{n}{t}{t}return get_string(IAREQUIRED.SPCombName){n}{t}else:{n}{t}{t}return get_string(IAREQUIRED.TPCombName){n}{n}
def ProjectJobs_Calculation():{n}{t}return get_number(IA133.SchATotHours){n}{n}
def SchATotHours_Calculation():{n}{t}count = Integer(){n}{n}{t}SubTot = Integer(){n}{t}count = 0{n}{t}SubTot = 0{n}{t}while count < 14:{n}{t}{t}SubTot = SubTot + get_number(IA133.SchAHours(count)){n}{t}{t}count = count + 1{n}{t}return SubTot{n}{n}
def SchATotTaxWages_Calculation():{n}{t}count = Integer(){n}{n}{t}SubTot = Currency(){n}{t}count = 0{n}{t}SubTot = 0{n}{t}while count < 14:{n}{t}{t}SubTot = SubTot + get_currency(IA133.SchATaxWages(count)){n}{t}{t}count = count + 1{n}{t}return SubTot{n}{n}
def SpouseCommon_Calculation():{n}{t}if get_bool(IAF1040.CombMFS) == True:{n}{t}{t}return get_string(USWBasicInfo.SPCommon){n}{t}else:{n}{t}{t}return 'Not Applicable'{n}{n}
def SSN_Calculation():{n}{t}if get_bool(IA100.Spouse) == True:{n}{t}{t}return get_string(IAF1040.SpouseSSN){n}{t}else:{n}{t}{t}return get_string(IAF1040.SSN){n}{n}
def TotEligNewJobs_Calculation():{n}{t}return min_value(get_number(IA133.TotSchBHoursShare), get_number(IA133.TotEmplGain)){n}{n}
def TotEmplGain_Calculation():{n}{t}return get_number(IA133.TotNewJobs) - get_number(IA133.Base){n}{n}
def TotSchBHoursShare_Calculation():{n}{t}return get_number(IA133.ProjectJobs) + get_number(IA133.TotSchAHoursShare){n}{n}def Alert10_Calculation():{n}{t}if get_number(IA134SP.Print) > 0:{n}{t}{t}if trim(get_string(IA134SP.SCorpName)) == '':{n}{t}{t}{t}return 1{n}{t}{t}elif get_string(IA134SP.SCorpEIN) == '':{n}{t}{t}{t}return 1{n}{t}{t}else:{n}{t}{t}{t}return 0{n}{t}else:{n}{t}{t}return 0{n}{n}
def Alert20_Calculation():{n}{t}if get_number(IA134SP.Print) > 0:{n}{t}{t}if get_currency(IA134SP.StateAdj) != 0 and trim(get_string(IA134SP.StateAdjExpl)) == '':{n}{t}{t}{t}return 1{n}{t}{t}else:{n}{t}{t}{t}return 0{n}{t}else:{n}{t}{t}return 0{n}{n}
def Alert30_Calculation():{n}{t}if get_number(IA134SP.Print) > 0:{n}{t}{t}if get_currency(IA134SP.FedRegTax) == 0:{n}{t}{t}{t}return 1{n}{t}{t}else:{n}{t}{t}{t}return 0{n}{t}else:{n}{t}{t}return 0{n}{n}
def BiggerInc_Calculation():{n}{t}return max_value(get_currency(IA134SP.IASourceInc), get_currency(IA134SP.NetDist)){n}{n}
def Credit_Calculation():{n}{t}return c_dollar(( ( ( Round(get_float(IA134SP.CreditPercent) * 100) )  / 100 )  * get_float(IA134SP.NetTax) )  / 100){n}{n}
def CreditPercent_Calculation():{n}{t}if get_float(IA134SP.BusRatio) > 0:{n}{t}{t}return max_value(0, 100 - get_float(IA134SP.TaxPercent)){n}{t}else:{n}{t}{t}return 0{n}{n}
def Description_Calculation():{n}{t}Total = Currency(){n}{t}Total = get_currency(IA134SP.Credit){n}{t}return CStr(Total) + ' Credit'{n}{n}
def Dividends_Calculation():{n}{t}return get_currency(USDSCorpK1.Dividends, ParentCopy()) -  ( c_dollar(get_float(USDSCorpK1.Dividends, ParentCopy()) * get_float(IA134SP.TPRatio)) ){n}{n}
def Exist_Calculation():{n}{t}return 1{n}{n}
def FedAGI_Calculation():{n}{t}if get_float(IA134SP.BusRatio) > 0:{n}{t}{t}if get_bool(IAF1040.CombMFS) == True:{n}{t}{t}{t}return get_currency(USWRec.SAGI){n}{t}{t}else:{n}{t}{t}{t}return 0{n}{t}else:{n}{t}{t}return 0{n}{n}
def FedTax_Calculation():{n}{t}return get_currency(IA134SP.K1FedTax){n}{n}
def IAApportion_Calculation():{n}{t}return c_dollar(( ( ( Round(get_float(IA134SP.IABusRatio) * 100) )  / 100 )  * get_float(IA134SP.NetIAInc) )  / 100){n}{n}
def IABusRatio_Calculation():{n}{t}return get_float(IA134SP.BusRatio) * 100{n}{n}
def IAInc_Calculation():{n}{t}if get_float(IA134SP.BusRatio) > 0:{n}{t}{t}if get_bool(IAF1040.CombMFS) == True:{n}{t}{t}{t}return get_currency(IAF1040.BNet) + get_currency(IAOTHADJ.SIANOL){n}{t}{t}else:{n}{t}{t}{t}return 0{n}{t}else:{n}{t}{t}return 0{n}{n}
def IASCorpInc_Calculation():{n}{t}if get_float(IA134SP.BusRatio) > 0:{n}{t}{t}return get_currency(IA134SP.K1Inc) + get_currency(IA134SP.StateAdj){n}{t}else:{n}{t}{t}return 0{n}{n}
def IASourceInc_Calculation():{n}{t}if get_float(IA134SP.BusRatio) > 0:{n}{t}{t}return get_currency(IA134SP.IAApportion) + get_currency(IA134SP.IANonBusInc){n}{t}else:{n}{t}{t}return 0{n}{n}
def Interest_Calculation():{n}{t}return get_currency(USDSCorpK1.Interest, ParentCopy()) -  ( c_dollar(get_float(USDSCorpK1.Interest, ParentCopy()) * get_float(IA134SP.TPRatio)) ){n}{n}
def IntSCorp_Calculation():{n}{t}if trim(get_string(IA134SP.SCorpName)) != '':{n}{t}{t}return get_string(IA134SP.SCorpName){n}{t}else:{n}{t}{t}return 'this S corporation'{n}{n}
def K1FedTax_Calculation():{n}{t}return max_value(0, get_currency(IA134SP.K1Tax) - get_currency(IA134SP.K1FedCredits)){n}{n}
def K1Inc_Calculation():{n}{t}return get_currency(IA134SP.TotInc) - get_currency(IA134SP.TotDed){n}{n}
def K1Inc2_Calculation():{n}{t}return get_currency(IA134SP.K1Inc){n}{n}
def K1IncPercent_Calculation():{n}{t}return get_float(IA134SP.K1IncRatio) * 100{n}{n}
def K1IncRatio_Calculation():{n}{t}TopLim = Double(){n}{t}if get_float(IA134SP.BusRatio) == 0:{n}{t}{t}return 0{n}{t}elif get_float(IA134SP.FedAGI) <= 0:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}TopLim = min_value(1, Round(get_float(IA134SP.K1Inc2) / get_float(IA134SP.FedAGI), 6)){n}{t}{t}return max_value(0, TopLim){n}{n}
def K1Tax_Calculation():{n}{t}return Round(c_dollar(get_float(IA134SP.NetFedTax) *  ( get_float(IA134SP.K1IncPercent) / 100 ))){n}{n}
def LtGain_Calculation():{n}{t}return get_currency(USDSCorpK1.LtGain, ParentCopy()) -  ( c_dollar(get_float(USDSCorpK1.LtGain, ParentCopy()) * get_float(IA134SP.TPRatio)) ){n}{n}
def Names_Calculation():{n}{t}return get_string(IAREQUIRED.SPCombName){n}{n}
def NetDist_Calculation():{n}{t}if get_float(IA134SP.BusRatio) > 0:{n}{t}{t}return max_value(0, get_currency(IA134SP.Distributions) - get_currency(IA134SP.FedTax)){n}{t}else:{n}{t}{t}return 0{n}{n}
def NetFedTax_Calculation():{n}{t}return get_currency(IA134SP.FedRegTax) + get_currency(IA134SP.FedAMT){n}{n}
def NetIAInc_Calculation():{n}{t}if get_float(IA134SP.BusRatio) > 0:{n}{t}{t}return get_currency(IA134SP.IASCorpInc) - get_currency(IA134SP.NonBusInc){n}{t}else:{n}{t}{t}return 0{n}{n}
def NetTax_Calculation():{n}{t}if get_float(IA134SP.BusRatio) > 0:{n}{t}{t}return get_currency(IAF1040.BTotIATax){n}{t}else:{n}{t}{t}return 0{n}{n}
def Numerator_Calculation():{n}{t}return get_currency(IA134SP.BiggerInc) + get_currency(IA134SP.Remainder){n}{n}
def Ordinary_Calculation():{n}{t}return get_currency(USDSCorpK1.OrdAmt, ParentCopy()) -  ( c_dollar(get_float(USDSCorpK1.OrdAmt, ParentCopy()) * get_float(IA134SP.TPRatio)) ){n}{n}
def OthDed_Calculation():{n}{t}return get_currency(USDSCorpK1.SCOthDed, ParentCopy()) -  ( c_dollar(get_float(USDSCorpK1.SCOthDed, ParentCopy()) * get_float(IA134SP.TPRatio)) ){n}{n}
def OtherInc_Calculation():{n}{t}PortInc = Currency(){n}{n}{t}Sec1256 = Currency(){n}{n}{t}MineCost = Currency(){n}{n}{t}OthInc = Currency(){n}{t}PortInc = get_currency(USDSCorpK1.PortInc, ParentCopy()) -  ( c_dollar(get_float(USDSCorpK1.PortInc, ParentCopy()) * get_float(IA134SP.TPRatio)) ){n}{t}Sec1256 = get_currency(USDSCorpK1.Sec1256, ParentCopy()) -  ( c_dollar(get_float(USDSCorpK1.Sec1256, ParentCopy()) * get_float(IA134SP.TPRatio)) ){n}{t}MineCost = get_currency(USDSCorpK1.MineCost, ParentCopy()) -  ( c_dollar(get_float(USDSCorpK1.MineCost, ParentCopy()) * get_float(IA134SP.TPRatio)) ){n}{t}OthInc = get_currency(USDSCorpK1.OthInc, ParentCopy()) -  ( c_dollar(get_float(USDSCorpK1.OthInc, ParentCopy()) * get_float(IA134SP.TPRatio)) ){n}{t}return PortInc + Sec1256 + MineCost + OthInc{n}{n}
def Print_Calculation():{n}{t}if get_bool(IAF1040.CombMFS) == False:{n}{t}{t}return 0{n}{t}elif get_currency(IA134SP.Credit) > 0:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def RealEstate_Calculation():{n}{t}return get_currency(USDSCorpK1.RentAmt, ParentCopy()) -  ( c_dollar(get_float(USDSCorpK1.RentAmt, ParentCopy()) * get_float(IA134SP.TPRatio)) ){n}{n}
def Remainder_Calculation():{n}{t}return get_currency(IA134SP.IAInc) - get_currency(IA134SP.IASCorpInc){n}{n}
def Rental_Calculation():{n}{t}return get_currency(USDSCorpK1.Rental, ParentCopy()) -  ( c_dollar(get_float(USDSCorpK1.Rental, ParentCopy()) * get_float(IA134SP.TPRatio)) ){n}{n}
def Royalties_Calculation():{n}{t}return get_currency(USDSCorpK1.Royalties, ParentCopy()) -  ( c_dollar(get_float(USDSCorpK1.Royalties, ParentCopy()) * get_float(IA134SP.TPRatio)) ){n}{n}
def SCorpEIN_Calculation():{n}{t}return get_string(USDSCorpK1.EIN, ParentCopy()){n}{n}
def SCorpName_Calculation():{n}{t}return get_string(USDSCorpK1.CoName, ParentCopy()){n}{n}
def Sec1231_Calculation():{n}{t}return get_currency(USDSCorpK1.Sec1231, ParentCopy()) -  ( c_dollar(get_float(USDSCorpK1.Sec1231, ParentCopy()) * get_float(IA134SP.TPRatio)) ){n}{n}
def Sec179_Calculation():{n}{t}return get_currency(USDSCorpK1.Sec179, ParentCopy()) -  ( c_dollar(get_float(USDSCorpK1.Sec179, ParentCopy()) * get_float(IA134SP.TPRatio)) ){n}{n}
def SPApplied_Calculation():{n}{t}count = Integer(){n}{n}{t}count2 = Integer(){n}{t}count = 0{n}{t}while count <= 9:{n}{t}{t}if get_string(IA148SP.NonRefCode(count)) == '11' and get_currency(IA148SP.CYCredit(count)) == get_currency(IA134SP.Credit):{n}{t}{t}{t}return get_currency(IA148SP.ArrayNonRefCr(count)){n}{t}{t}count = count + 1{n}{t}count2 = 0{n}{t}while count <= 28:{n}{t}{t}if get_string(IAWBP148SP.NonRefCode(count2)) == '11' and get_currency(IAWBP148SP.CYCredit(count2)) == get_currency(IA134SP.Credit):{n}{t}{t}{t}return get_currency(IAWBP148SP.ArrayNonRefCr(count2)){n}{t}{t}count = count + 1{n}{t}return 0{n}{n}
def SPExpired_Calculation():{n}{t}count = Integer(){n}{n}{t}count2 = Integer(){n}{t}count = 0{n}{t}while count <= 9:{n}{t}{t}if get_string(IA148SP.NonRefCode(count)) == '11' and get_currency(IA148SP.CYCredit(count)) == get_currency(IA134SP.Credit):{n}{t}{t}{t}return get_currency(IA148SP.ExpCr(count)){n}{t}{t}count = count + 1{n}{t}count2 = 0{n}{t}while count <= 28:{n}{t}{t}if get_string(IAWBP148SP.NonRefCode(count2)) == '11' and get_currency(IAWBP148SP.CYCredit(count2)) == get_currency(IA134SP.Credit):{n}{t}{t}{t}return get_currency(IAWBP148SP.ExpCr(count2)){n}{t}{t}count = count + 1{n}{t}return 0{n}{n}
def SSN_Calculation():{n}{t}return get_string(IAF1040.SpouseSSN){n}{n}
def StGain_Calculation():{n}{t}return get_currency(USDSCorpK1.StGain, ParentCopy()) -  ( c_dollar(get_float(USDSCorpK1.StGain, ParentCopy()) * get_float(IA134SP.TPRatio)) ){n}{n}
def TaxPercent_Calculation():{n}{t}return get_float(IA134SP.TaxRatio) * 100{n}{n}
def TaxRatio_Calculation():{n}{t}TopLim = Double(){n}{t}if get_float(IA134SP.BusRatio) == 0:{n}{t}{t}return 0{n}{t}elif get_float(IA134SP.IAInc) == 0:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}TopLim = min_value(1, Round(get_float(IA134SP.Numerator) / get_float(IA134SP.IAInc), 6)){n}{t}{t}return max_value(0, TopLim){n}{n}
def TotDed_Calculation():{n}{t}if get_float(IA134SP.BusRatio) > 0:{n}{t}{t}return get_currency(IA134SP.Sec179) + get_currency(IA134SP.OthDed){n}{t}else:{n}{t}{t}return 0{n}{n}
def TotInc_Calculation():{n}{t}if get_float(IA134SP.BusRatio) > 0:{n}{t}{t}return get_currency(IA134SP.Ordinary) + get_currency(IA134SP.RealEstate) + get_currency(IA134SP.Rental) + get_currency(IA134SP.Interest) + get_currency(IA134SP.Dividends) + get_currency(IA134SP.Royalties) + get_currency(IA134SP.StGain) + get_currency(IA134SP.LtGain) + get_currency(IA134SP.Sec1231) + get_currency(IA134SP.OtherInc){n}{t}else:{n}{t}{t}return 0{n}{n}
def TPRatio_Calculation():{n}{t}if get_bool(IAF1040.CombMFS) == True and get_bool(USDSCorpK1.Joint, ParentCopy()) == True:{n}{t}{t}return 0.5{n}{t}elif get_bool(IAF1040.CombMFS) == True and get_bool(USDSCorpK1.Spouse, ParentCopy()) == True:{n}{t}{t}return 0{n}{t}else:{n}{t}{t}return 1{n}{n}def Alert10_Calculation():{n}{t}RetailZip = Integer(){n}{t}if trim(get_string(IA137.StateAbb)) == '':{n}{t}{t}RetailZip = 0{n}{t}elif  ( IsValidZIP(get_string(IA137.ZipCode), get_string(IA137.StateAbb)) ) :{n}{t}{t}RetailZip = 0{n}{t}else:{n}{t}{t}RetailZip = 1{n}{t}if get_bool(IA137.Print) == False or get_bool(IA137.Site) == False:{n}{t}{t}return 0{n}{t}elif not IsValidEFileString(get_string(IA137.RetailName)):{n}{t}{t}return 1{n}{t}elif not IsValidEFileString(get_string(IA137.RetailAdd)):{n}{t}{t}return 1{n}{t}elif not IsValidEFileString(get_string(IA137.City)):{n}{t}{t}return 1{n}{t}elif trim(get_string(IA137.StateAbb)) == '':{n}{t}{t}return 1{n}{t}elif RetailZip == 1:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def AllSitesTotal_Calculation():{n}{t}if get_bool(IA137.Site) == True:{n}{t}{t}return 0{n}{t}else:{n}{t}{t}return get_number(IA137.TotGas){n}{n}
def BioDisparity_Calculation():{n}{t}return max_value(0, Round(get_float(IA137.BioThresPer) - get_float(IA137.BioDistPer), 4)){n}{n}
def BioDistPer_Calculation():{n}{t}if get_number(IA137.TotGas) <= 0:{n}{t}{t}return 0{n}{t}else:{n}{t}{t}return Round(get_float(IA137.TotGal) / get_float(IA137.TotGas), 4){n}{n}
def BioThresPer_Calculation():{n}{t}# updated for 2018{n}{t}if get_number(IA137.AllSitesTotal) <= 0:{n}{t}{t}return 0{n}{t}elif get_number(IA137.AllSitesTotal) <= 200000:{n}{t}{t}return 0.19{n}{t}else:{n}{t}{t}return 0.23{n}{n}
def Common_Calculation():{n}{t}if get_bool(IAF1040.MFJ) == True:{n}{t}{t}return get_string(USWBasicInfo.CombFirst){n}{t}else:{n}{t}{t}return get_string(USWBasicInfo.TPCommon){n}{n}
def CreditRate_Calculation():{n}{t}if get_float(IA137.BioDisparity) == 0:{n}{t}{t}return '0.080'{n}{t}elif get_float(IA137.BioDisparity) >= 0.0001 and get_float(IA137.BioDisparity) <= 0.02:{n}{t}{t}return '0.060'{n}{t}elif get_float(IA137.BioDisparity) >= 0.0201 and get_float(IA137.BioDisparity) <= 0.04:{n}{t}{t}return '0.040'{n}{t}else:{n}{t}{t}return '0'{n}{n}
def Description_Calculation():{n}{t}Total = Currency(){n}{t}Total = get_currency(IA137.TotEthSoldCr) + get_currency(IA137.PassThruCr){n}{t}return CStr(Total) + ' Credit'{n}{n}
def EthPromoteCr_Calculation():{n}{t}return get_currency(IA137.IndEthPromoteCr) + get_currency(IA137.PassThruCr){n}{n}
def EthSoldCr_Calculation():{n}{t}if get_float(IA137.BioDisparity) == 0:{n}{t}{t}return c_dollar(get_float(IA137.TotEth) * 8){n}{t}elif get_float(IA137.BioDisparity) >= 0.0001 and get_float(IA137.BioDisparity) <= 0.02:{n}{t}{t}return c_dollar(get_float(IA137.TotEth) * 6){n}{t}elif get_float(IA137.BioDisparity) >= 0.0201 and get_float(IA137.BioDisparity) <= 0.04:{n}{t}{t}return c_dollar(get_float(IA137.TotEth) * 4){n}{t}else:{n}{t}{t}return 0{n}{n}
def IndEthPromoteCr_Calculation():{n}{t}if get_bool(IA137.Company) == True and get_bool(IA137.Taxpayer) == True:{n}{t}{t}return get_currency(IA148.TotCode64){n}{t}elif get_bool(IA137.Company) == True and get_bool(IA137.Spouse) == True:{n}{t}{t}return get_currency(IA148SP.TotCode64){n}{t}elif GetCopy() == get_number(IA148.FirstCopy137Site) and get_bool(IA137.Taxpayer) == True:{n}{t}{t}return get_currency(IA148.TotCode64){n}{t}elif GetCopy() == get_number(IA148SP.FirstCopy137Site) and get_bool(IA137.Spouse) == True:{n}{t}{t}return get_currency(IA148SP.TotCode64){n}{t}else:{n}{t}{t}return 0{n}{n}
def MEF137SP_Calculation():{n}{t}if get_bool(IA137.Spouse) == True and get_currency(IA137.TotEthSoldCr) > 0:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def MEF137SPPTE_Calculation():{n}{t}if get_bool(IA137.Spouse) == True and get_currency(IA137.PassThruCr) > 0:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def MEF137TP_Calculation():{n}{t}if get_bool(IA137.Taxpayer) == True and get_currency(IA137.TotEthSoldCr) > 0:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def MEF137TPPTE_Calculation():{n}{t}if get_bool(IA137.Taxpayer) == True and get_currency(IA137.PassThruCr) > 0:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def MeFBioDisparity_Calculation():{n}{t}return get_float(IA137.BioDisparity) * 100{n}{n}
def Names_Calculation():{n}{t}if get_bool(IA137.Spouse) == True:{n}{t}{t}return get_string(IAREQUIRED.SPCombName){n}{t}else:{n}{t}{t}return get_string(IAREQUIRED.TPCombName){n}{n}
def Owner_Calculation():{n}{t}if get_bool(IA137.Taxpayer) == True:{n}{t}{t}return get_string(USWBasicInfo.TPTheName){n}{t}else:{n}{t}{t}return get_string(USWBasicInfo.SPTheName){n}{n}
def PassThruCr_Calculation():{n}{t}return get_currency(IA137.PTECredit(0)){n}{n}
def Print_Calculation():{n}{t}if get_bool(IA137.Spouse) == True and get_bool(IAF1040.CombMFS) == False:{n}{t}{t}return 0{n}{t}elif get_currency(IA137.TotEthSoldCr) > 0 or get_currency(IA137.PassThruCr) > 0:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def PTEFEIN_Calculation():{n}{t}if get_currency(IA137.PassThruCr) > 0:{n}{t}{t}return get_string(IA137.PTEEIN(0)){n}{t}else:{n}{t}{t}return ''{n}{n}
def PTEName_Calculation(Index):{n}{t}if get_currency(IA137.PassThruCr) > 0:{n}{t}{t}return get_string(IA137.PTEEntity(0)){n}{t}else:{n}{t}{t}return ''{n}{n}
def RetailCityStZip_Calculation():{n}{t}return get_string(IA137.City) + ', ' + get_string(IA137.StateAbb) + ' ' + get_string(IA137.ZipCode){n}{n}
def SpouseCommon_Calculation():{n}{t}if get_bool(IAF1040.CombMFS) == True:{n}{t}{t}return get_string(USWBasicInfo.SPCommon){n}{t}else:{n}{t}{t}return 'Not Applicable'{n}{n}
def SSN_Calculation():{n}{t}if get_bool(IA137.Spouse) == True:{n}{t}{t}return get_string(IAF1040.SpouseSSN){n}{t}else:{n}{t}{t}return get_string(IAF1040.SSN){n}{n}
def TotB10Gal_Calculation():{n}{t}return CLng(Round(get_number(IA137.B10Gal) * 0.11)){n}{n}
def TotB20Gal_Calculation():{n}{t}return CLng(Round(get_number(IA137.B20Gal) * 0.2)){n}{n}
def TotB2Gal_Calculation():{n}{t}return CLng(Round(get_number(IA137.B2Gal) * 0.02)){n}{n}
def TotB5Gal_Calculation():{n}{t}return CLng(Round(get_number(IA137.B5Gal) * 0.05)){n}{n}
def TotBTypeGal_Calculation():{n}{t}return CLng(Round(get_float(IA137.BTypeGal) *  ( get_float(IA137.BTypeGalPer) / 100 ))){n}{n}
def TotE10Gal_Calculation():{n}{t}return CLng(Round(get_number(IA137.E10Gal) * 0.1)){n}{n}
def TotE15Gal_Calculation():{n}{t}return CLng(Round(get_number(IA137.E15Gal) * 0.15)){n}{n}
def TotE85Gal_Calculation():{n}{t}return CLng(Round(get_number(IA137.E85Gal) * 0.79)){n}{n}
def TotEth_Calculation():{n}{t}return get_number(IA137.TotEthGal){n}{n}
def TotEthGal_Calculation():{n}{t}return get_number(IA137.TotE10Gal) + get_number(IA137.TotE15Gal) + get_number(IA137.TotE85Gal) + get_number(IA137.TotOthGal){n}{n}
def TotEthGalColA_Calculation():{n}{t}return get_number(IA137.E10Gal) + get_number(IA137.E15Gal) + get_number(IA137.E85Gal) + get_number(IA137.OthGal){n}{n}
def TotEthSoldCr_Calculation():{n}{t}return get_currency(IA137.EthSoldCr){n}{n}
def TotGas_Calculation():{n}{t}return get_number(IA137.E10Gal) + get_number(IA137.E15Gal) + get_number(IA137.E85Gal) + get_number(IA137.OthGal) + get_number(IA137.NonEthGal){n}{n}
def TotGal_Calculation():{n}{t}return get_number(IA137.TotEthGal) + get_number(IA137.TotB2Gal) + get_number(IA137.TotB5Gal) + get_number(IA137.TotB10Gal) + get_number(IA137.TotB20Gal) + get_number(IA137.TotBTypeGal){n}{n}
def TotOthGal_Calculation():{n}{t}return CLng(Round(get_float(IA137.OthGal) *  ( get_float(IA137.OthGalPer) / 100 ))){n}{n}def PTECode_Calculation(Index):{n}{t}strindex = Long(){n}{n}{t}copystr = String(){n}{n}{t}Copy = Long(){n}{t}if get_number(IA148SP.NonRefNbr) > 10 and Index > 9:{n}{t}{t}strindex = ( ( Index - 1 )  * 4 )  + 1{n}{t}else:{n}{t}{t}strindex = ( ( Index )  * 4 )  + 1{n}{t}copystr = trim(Mid(get_string(IA148SP.NonRefCopiesStr), strindex, 4)){n}{t}if Index == 9 and get_number(IA148SP.NonRefNbr) > 10:{n}{t}{t}return 'Stmt'{n}{t}elif copystr != '':{n}{t}{t}Copy = CLng(copystr){n}{t}{t}if ( Copy > 100 )  and  ( Copy <= 200 ) :{n}{t}{t}{t}return '04'{n}{t}{t}elif  ( Copy > 200 )  and  ( Copy <= 300 ) :{n}{t}{t}{t}return '11'{n}{t}{t}elif  ( Copy > 300 )  and  ( Copy <= 400 ) :{n}{t}{t}{t}return get_string(IACred.Code, ( Copy )  - 300){n}{t}{t}elif  ( Copy > 400 )  and  ( Copy <= 500 ) :{n}{t}{t}{t}return get_string(IACred.Code, ( Copy )  - 400){n}{t}{t}elif  ( Copy > 500 )  and  ( Copy <= 600 ) :{n}{t}{t}{t}return get_string(IACred.Code, ( Copy )  - 500){n}{t}{t}elif  ( Copy > 600 )  and  ( Copy <= 700 ) :{n}{t}{t}{t}return get_string(IACred.Code, ( Copy )  - 600){n}{t}{t}elif  ( Copy > 700 )  and  ( Copy <= 800 ) :{n}{t}{t}{t}return get_string(IACred.Code, ( Copy )  - 700){n}{t}{t}elif  ( Copy > 800 )  and  ( Copy <= 900 ) :{n}{t}{t}{t}return get_string(IACred.Code, ( Copy )  - 800){n}{t}{t}elif  ( Copy > 900 )  and  ( Copy <= 1000 ) :{n}{t}{t}{t}return get_string(IACred.Code, ( Copy )  - 900){n}{t}{t}elif  ( Copy > 1000 )  and  ( Copy <= 1100 ) :{n}{t}{t}{t}return get_string(IACred.Code, ( Copy )  - 1000){n}{t}{t}elif  ( Copy > 1100 )  and  ( Copy <= 1200 ) :{n}{t}{t}{t}return get_string(IACred.Code, ( Copy )  - 1100){n}{t}{t}elif  ( Copy > 1200 )  and  ( Copy <= 1300 ) :{n}{t}{t}{t}return get_string(IACred.Code, ( Copy )  - 1200){n}{t}{t}elif  ( Copy > 1300 )  and  ( Copy <= 1400 ) :{n}{t}{t}{t}return get_string(IACred.Code, ( Copy )  - 1300){n}{t}{t}elif  ( Copy > 1400 )  and  ( Copy <= 1500 ) :{n}{t}{t}{t}return get_string(IACred.Code, ( Copy )  - 1400){n}{t}{t}elif  ( Copy > 1500 )  and  ( Copy <= 1600 ) :{n}{t}{t}{t}return get_string(IACred.Code, ( Copy )  - 1500){n}{t}{t}elif  ( Copy > 1600 )  and  ( Copy <= 1700 ) :{n}{t}{t}{t}return get_string(IACred.Code, ( Copy )  - 1600){n}{t}{t}elif  ( Copy > 1700 )  and  ( Copy <= 1800 ) :{n}{t}{t}{t}return get_string(IACred.Code, ( Copy )  - 1700){n}{t}{t}elif  ( Copy > 1800 )  and  ( Copy <= 1900 ) :{n}{t}{t}{t}return get_string(IACred.Code, ( Copy )  - 1800){n}{t}{t}elif  ( Copy > 1900 )  and  ( Copy <= 2000 ) :{n}{t}{t}{t}return get_string(IACred.Code, ( Copy )  - 1900){n}{t}{t}elif  ( Copy > 2000 )  and  ( Copy <= 2100 ) :{n}{t}{t}{t}return get_string(IACred.Code, ( Copy )  - 2000){n}{t}{t}elif  ( Copy > 2100 )  and  ( Copy <= 2200 ) :{n}{t}{t}{t}return get_string(IACred.Code, ( Copy )  - 2100){n}{t}{t}elif  ( Copy > 2200 )  and  ( Copy <= 2300 ) :{n}{t}{t}{t}return get_string(IACred.Code, ( Copy )  - 2200){n}{t}{t}elif  ( Copy > 2300 )  and  ( Copy <= 2400 ) :{n}{t}{t}{t}return get_string(IACred.Code, ( Copy )  - 2300){n}{t}{t}elif  ( Copy > 2400 )  and  ( Copy <= 2500 ) :{n}{t}{t}{t}return '09'{n}{t}return ''{n}{n}
def PTEEIN_Calculation(Index):{n}{t}strindex = Long(){n}{n}{t}copystr = String(){n}{n}{t}Copy = Long(){n}{t}if get_number(IA148SP.NonRefNbr) > 10 and Index > 9:{n}{t}{t}strindex = ( ( Index - 1 )  * 4 )  + 1{n}{t}else:{n}{t}{t}strindex = ( ( Index )  * 4 )  + 1{n}{t}copystr = trim(Mid(get_string(IA148SP.NonRefCopiesStr), strindex, 4)){n}{t}if Index == 9 and get_number(IA148SP.NonRefNbr) > 10:{n}{t}{t}return ''{n}{t}elif copystr != '':{n}{t}{t}Copy = CLng(copystr){n}{t}{t}if ( Copy > 100 )  and  ( Copy <= 200 ) :{n}{t}{t}{t}return ''{n}{t}{t}elif  ( Copy > 200 )  and  ( Copy <= 300 ) :{n}{t}{t}{t}return get_string(IA134.SCorpEIN, ( Copy )  - 200){n}{t}{t}elif  ( Copy > 300 )  and  ( Copy <= 400 ) :{n}{t}{t}{t}return get_string(IACred.PTEEIN, ( Copy )  - 300){n}{t}{t}elif  ( Copy > 400 )  and  ( Copy <= 500 ) :{n}{t}{t}{t}return get_string(IACred.PTEEIN, ( Copy )  - 400){n}{t}{t}elif  ( Copy > 500 )  and  ( Copy <= 600 ) :{n}{t}{t}{t}return get_string(IACred.PTEEIN, ( Copy )  - 500){n}{t}{t}elif  ( Copy > 600 )  and  ( Copy <= 700 ) :{n}{t}{t}{t}return get_string(IACred.PTEEIN, ( Copy )  - 600){n}{t}{t}elif  ( Copy > 700 )  and  ( Copy <= 800 ) :{n}{t}{t}{t}return get_string(IACred.PTEEIN, ( Copy )  - 700){n}{t}{t}elif  ( Copy > 800 )  and  ( Copy <= 900 ) :{n}{t}{t}{t}return get_string(IACred.PTEEIN, ( Copy )  - 800){n}{t}{t}elif  ( Copy > 900 )  and  ( Copy <= 1000 ) :{n}{t}{t}{t}return get_string(IACred.PTEEIN, ( Copy )  - 900){n}{t}{t}elif  ( Copy > 1000 )  and  ( Copy <= 1100 ) :{n}{t}{t}{t}return get_string(IACred.PTEEIN, ( Copy )  - 1000){n}{t}{t}elif  ( Copy > 1100 )  and  ( Copy <= 1200 ) :{n}{t}{t}{t}return get_string(IACred.PTEEIN, ( Copy )  - 1100){n}{t}{t}elif  ( Copy > 1200 )  and  ( Copy <= 1300 ) :{n}{t}{t}{t}return get_string(IACred.PTEEIN, ( Copy )  - 1200){n}{t}{t}elif  ( Copy > 1300 )  and  ( Copy <= 1400 ) :{n}{t}{t}{t}return get_string(IACred.PTEEIN, ( Copy )  - 1300){n}{t}{t}elif  ( Copy > 1400 )  and  ( Copy <= 1500 ) :{n}{t}{t}{t}return get_string(IACred.PTEEIN, ( Copy )  - 1400){n}{t}{t}elif  ( Copy > 1500 )  and  ( Copy <= 1600 ) :{n}{t}{t}{t}return get_string(IACred.PTEEIN, ( Copy )  - 1500){n}{t}{t}elif  ( Copy > 1600 )  and  ( Copy <= 1700 ) :{n}{t}{t}{t}return get_string(IACred.PTEEIN, ( Copy )  - 1600){n}{t}{t}elif  ( Copy > 1700 )  and  ( Copy <= 1800 ) :{n}{t}{t}{t}return get_string(IACred.PTEEIN, ( Copy )  - 1700){n}{t}{t}elif  ( Copy > 1800 )  and  ( Copy <= 1900 ) :{n}{t}{t}{t}return get_string(IACred.PTEEIN, ( Copy )  - 1800){n}{t}{t}elif  ( Copy > 1900 )  and  ( Copy <= 2000 ) :{n}{t}{t}{t}return get_string(IACred.PTEEIN, ( Copy )  - 1900){n}{t}{t}elif  ( Copy > 2000 )  and  ( Copy <= 2100 ) :{n}{t}{t}{t}return get_string(IACred.PTEEIN, ( Copy )  - 2000){n}{t}{t}elif  ( Copy > 2100 )  and  ( Copy <= 2200 ) :{n}{t}{t}{t}return get_string(IACred.PTEEIN, ( Copy )  - 2100){n}{t}{t}elif  ( Copy > 2200 )  and  ( Copy <= 2300 ) :{n}{t}{t}{t}return get_string(IACred.PTEEIN, ( Copy )  - 2200){n}{t}{t}elif  ( Copy > 2300 )  and  ( Copy <= 2400 ) :{n}{t}{t}{t}return get_string(IACred.PTEEIN, ( Copy )  - 2300){n}{t}{t}elif  ( Copy > 2400 )  and  ( Copy <= 2500 ) :{n}{t}{t}{t}return ''{n}{t}return ''{n}{n}
def PTEIndexNbr_Calculation(Index):{n}{t}count = Long(){n}{n}{t}max = Long(){n}{n}{t}listedcount = Long(){n}{t}listedcount = 0{n}{t}count = 0{n}{t}while count < 98:{n}{t}{t}if trim(get_string(IA148BUMPSP.PTEName(count))) != '':{n}{t}{t}{t}if listedcount == Index:{n}{t}{t}{t}{t}return count{n}{t}{t}{t}else:{n}{t}{t}{t}{t}listedcount = listedcount + 1{n}{t}{t}count = count + 1{n}{t}return 0{n}{n}
def PTELine_Calculation(Index):{n}{t}Hold = Long(){n}{t}Hold = Index + 1{n}{t}if Index > 9:{n}{t}{t}return 'Attached stmt'{n}{t}else:{n}{t}{t}return CStr(Hold){n}{n}
def PTEName_Calculation(Index):{n}{t}strindex = Long(){n}{n}{t}copystr = String(){n}{n}{t}Copy = Long(){n}{t}if get_number(IA148SP.NonRefNbr) > 10 and Index > 9:{n}{t}{t}strindex = ( ( Index - 1 )  * 4 )  + 1{n}{t}else:{n}{t}{t}strindex = ( ( Index )  * 4 )  + 1{n}{t}copystr = trim(Mid(get_string(IA148SP.NonRefCopiesStr), strindex, 4)){n}{t}if Index == 9 and get_number(IA148SP.NonRefNbr) > 10:{n}{t}{t}return ''{n}{t}elif copystr != '':{n}{t}{t}Copy = CLng(copystr){n}{t}{t}if ( Copy > 100 )  and  ( Copy <= 200 ) :{n}{t}{t}{t}return ''{n}{t}{t}elif  ( Copy > 200 )  and  ( Copy <= 300 ) :{n}{t}{t}{t}return get_string(IA134.SCorpName, ( Copy )  - 200){n}{t}{t}elif  ( Copy > 300 )  and  ( Copy <= 400 ) :{n}{t}{t}{t}return get_string(IACred.PTEEntity, ( Copy )  - 300){n}{t}{t}elif  ( Copy > 400 )  and  ( Copy <= 500 ) :{n}{t}{t}{t}return get_string(IACred.PTEEntity, ( Copy )  - 400){n}{t}{t}elif  ( Copy > 500 )  and  ( Copy <= 600 ) :{n}{t}{t}{t}return get_string(IACred.PTEEntity, ( Copy )  - 500){n}{t}{t}elif  ( Copy > 600 )  and  ( Copy <= 700 ) :{n}{t}{t}{t}return get_string(IACred.PTEEntity, ( Copy )  - 600){n}{t}{t}elif  ( Copy > 700 )  and  ( Copy <= 800 ) :{n}{t}{t}{t}return get_string(IACred.PTEEntity, ( Copy )  - 700){n}{t}{t}elif  ( Copy > 800 )  and  ( Copy <= 900 ) :{n}{t}{t}{t}return get_string(IACred.PTEEntity, ( Copy )  - 800){n}{t}{t}elif  ( Copy > 900 )  and  ( Copy <= 1000 ) :{n}{t}{t}{t}return get_string(IACred.PTEEntity, ( Copy )  - 900){n}{t}{t}elif  ( Copy > 1000 )  and  ( Copy <= 1100 ) :{n}{t}{t}{t}return get_string(IACred.PTEEntity, ( Copy )  - 1000){n}{t}{t}elif  ( Copy > 1100 )  and  ( Copy <= 1200 ) :{n}{t}{t}{t}return get_string(IACred.PTEEntity, ( Copy )  - 1100){n}{t}{t}elif  ( Copy > 1200 )  and  ( Copy <= 1300 ) :{n}{t}{t}{t}return get_string(IACred.PTEEntity, ( Copy )  - 1200){n}{t}{t}elif  ( Copy > 1300 )  and  ( Copy <= 1400 ) :{n}{t}{t}{t}return get_string(IACred.PTEEntity, ( Copy )  - 1300){n}{t}{t}elif  ( Copy > 1400 )  and  ( Copy <= 1500 ) :{n}{t}{t}{t}return get_string(IACred.PTEEntity, ( Copy )  - 1400){n}{t}{t}elif  ( Copy > 1500 )  and  ( Copy <= 1600 ) :{n}{t}{t}{t}return get_string(IACred.PTEEntity, ( Copy )  - 1500){n}{t}{t}elif  ( Copy > 1600 )  and  ( Copy <= 1700 ) :{n}{t}{t}{t}return get_string(IACred.PTEEntity, ( Copy )  - 1600){n}{t}{t}elif  ( Copy > 1700 )  and  ( Copy <= 1800 ) :{n}{t}{t}{t}return get_string(IACred.PTEEntity, ( Copy )  - 1700){n}{t}{t}elif  ( Copy > 1800 )  and  ( Copy <= 1900 ) :{n}{t}{t}{t}return get_string(IACred.PTEEntity, ( Copy )  - 1800){n}{t}{t}elif  ( Copy > 1900 )  and  ( Copy <= 2000 ) :{n}{t}{t}{t}return get_string(IACred.PTEEntity, ( Copy )  - 1900){n}{t}{t}elif  ( Copy > 2000 )  and  ( Copy <= 2100 ) :{n}{t}{t}{t}return get_string(IACred.PTEEntity, ( Copy )  - 2000){n}{t}{t}elif  ( Copy > 2100 )  and  ( Copy <= 2200 ) :{n}{t}{t}{t}return get_string(IACred.PTEEntity, ( Copy )  - 2100){n}{t}{t}elif  ( Copy > 2200 )  and  ( Copy <= 2300 ) :{n}{t}{t}{t}return get_string(IACred.PTEEntity, ( Copy )  - 2200){n}{t}{t}elif  ( Copy > 2300 )  and  ( Copy <= 2400 ) :{n}{t}{t}{t}return get_string(IACred.PTEEntity, ( Copy )  - 2300){n}{t}{t}elif  ( Copy > 2400 )  and  ( Copy <= 2500 ) :{n}{t}{t}{t}return ''{n}{t}return ''{n}{n}
def PTENRTrig_Calculation(Index):{n}{t}if get_string(IA148BUMPSP.PTECode(Index)) == '04' or get_string(IA148BUMPSP.PTECode(Index)) == '11' or get_string(IA148BUMPSP.PTECode(Index)) == '09':{n}{t}{t}return 0{n}{t}elif trim(get_string(IA148BUMPSP.PTEName(Index))) != '':{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def PTERefTrig_Calculation(Index):{n}{t}if get_string(IA148BUMPSP.RefPTECode(Index)) == '64' or get_string(IA148BUMPSP.RefPTECode(Index)) == '58' or get_string(IA148BUMPSP.RefPTECode(Index)) == '55' or get_string(IA148BUMPSP.RefPTECode(Index)) == '52' or get_string(IA148BUMPSP.RefPTECode(Index)) == '59' or get_string(IA148BUMPSP.RefPTECode(Index)) == '65' or get_string(IA148BUMPSP.RefPTECode(Index)) == '66':{n}{t}{t}return 0{n}{t}elif trim(get_string(IA148BUMPSP.RefPTEName(Index))) != '':{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def RefPTECode_Calculation(Index):{n}{t}strindex = Long(){n}{n}{t}copystr = String(){n}{n}{t}Copy = Long(){n}{t}if get_number(IA148SP.NonRefNbr) > 10 and Index > 9:{n}{t}{t}strindex = ( ( Index - 1 )  * 4 )  + 1{n}{t}else:{n}{t}{t}strindex = ( ( Index )  * 4 )  + 1{n}{t}copystr = trim(Mid(get_string(IA148SP.RefCopiesStr), strindex, 4)){n}{t}if Index == 6 and get_number(IA148SP.RefNbr) > 7:{n}{t}{t}return 'See Statement Attached'{n}{t}elif copystr != '':{n}{t}{t}Copy = CLng(copystr){n}{t}{t}if ( Copy > 100 )  and  ( Copy <= 200 ) :{n}{t}{t}{t}return '52'{n}{t}{t}elif  ( Copy > 200 )  and  ( Copy <= 300 ) :{n}{t}{t}{t}return get_string(IACred.Code, ( Copy )  - 200){n}{t}{t}elif  ( Copy > 300 )  and  ( Copy <= 400 ) :{n}{t}{t}{t}return '55'{n}{t}{t}elif  ( Copy > 400 )  and  ( Copy <= 500 ) :{n}{t}{t}{t}return get_string(IACred.Code, ( Copy )  - 400){n}{t}{t}elif  ( Copy > 500 )  and  ( Copy <= 600 ) :{n}{t}{t}{t}return '58'{n}{t}{t}elif  ( Copy > 600 )  and  ( Copy <= 700 ) :{n}{t}{t}{t}return '58'{n}{t}{t}elif  ( Copy > 700 )  and  ( Copy <= 800 ) :{n}{t}{t}{t}return '59'{n}{t}{t}elif  ( Copy > 800 )  and  ( Copy <= 900 ) :{n}{t}{t}{t}return '59'{n}{t}{t}elif  ( Copy > 900 )  and  ( Copy <= 1000 ) :{n}{t}{t}{t}return '64'{n}{t}{t}elif  ( Copy > 1000 )  and  ( Copy <= 1100 ) :{n}{t}{t}{t}return '65'{n}{t}{t}elif  ( Copy > 1100 )  and  ( Copy <= 1200 ) :{n}{t}{t}{t}return '66'{n}{t}{t}elif  ( Copy > 1200 )  and  ( Copy <= 1300 ) :{n}{t}{t}{t}return get_string(IACred.Code, ( Copy )  - 1200){n}{t}{t}elif  ( Copy > 1300 )  and  ( Copy <= 1400 ) :{n}{t}{t}{t}return get_string(IACred.Code, ( Copy )  - 1300){n}{t}{t}elif  ( Copy > 1400 )  and  ( Copy <= 1500 ) :{n}{t}{t}{t}return get_string(IACred.Code, ( Copy )  - 1400){n}{t}return ''{n}{n}
def RefPTEEIN_Calculation(Index):{n}{t}strindex = Long(){n}{n}{t}copystr = String(){n}{n}{t}Copy = Long(){n}{t}if get_number(IA148SP.NonRefNbr) > 10 and Index > 9:{n}{t}{t}strindex = ( ( Index - 1 )  * 4 )  + 1{n}{t}else:{n}{t}{t}strindex = ( ( Index )  * 4 )  + 1{n}{t}copystr = trim(Mid(get_string(IA148SP.RefCopiesStr), strindex, 4)){n}{t}if Index == 6 and get_number(IA148SP.RefNbr) > 7:{n}{t}{t}return ''{n}{t}elif copystr != '':{n}{t}{t}Copy = CLng(copystr){n}{t}{t}if ( Copy > 100 )  and  ( Copy <= 200 ) :{n}{t}{t}{t}return get_string(IA8864.PTEEIN(0), ( Copy )  - 100){n}{t}{t}elif  ( Copy > 200 )  and  ( Copy <= 300 ) :{n}{t}{t}{t}return get_string(IACred.PTEEIN, ( Copy )  - 200){n}{t}{t}elif  ( Copy > 300 )  and  ( Copy <= 400 ) :{n}{t}{t}{t}return get_string(IA135.PTEEIN(0), ( Copy )  - 300){n}{t}{t}elif  ( Copy > 400 )  and  ( Copy <= 500 ) :{n}{t}{t}{t}return get_string(IACred.PTEEIN, ( Copy )  - 400){n}{t}{t}elif  ( Copy > 500 )  and  ( Copy <= 600 ) :{n}{t}{t}{t}return get_string(IA128.PTEEIN(0), ( Copy )  - 500){n}{t}{t}elif  ( Copy > 600 )  and  ( Copy <= 700 ) :{n}{t}{t}{t}return get_string(IA128S.PTEEIN(0), ( Copy )  - 600){n}{t}{t}elif  ( Copy > 700 )  and  ( Copy <= 800 ) :{n}{t}{t}{t}return get_string(IA128.PTEEIN(0), ( Copy )  - 700){n}{t}{t}elif  ( Copy > 800 )  and  ( Copy <= 900 ) :{n}{t}{t}{t}return get_string(IA128S.PTEEIN(0), ( Copy )  - 800){n}{t}{t}elif  ( Copy > 900 )  and  ( Copy <= 1000 ) :{n}{t}{t}{t}return get_string(IA137.PTEEIN(0), ( Copy )  - 900){n}{t}{t}elif  ( Copy > 1000 )  and  ( Copy <= 1100 ) :{n}{t}{t}{t}return get_string(IA138.PTEEIN(0), ( Copy )  - 1000){n}{t}{t}elif  ( Copy > 1100 )  and  ( Copy <= 1200 ) :{n}{t}{t}{t}return ''{n}{t}{t}elif  ( Copy > 1200 )  and  ( Copy <= 1300 ) :{n}{t}{t}{t}return get_string(IACred.PTEEIN, ( Copy )  - 1200){n}{t}{t}elif  ( Copy > 1300 )  and  ( Copy <= 1400 ) :{n}{t}{t}{t}return get_string(IACred.PTEEIN, ( Copy )  - 1300){n}{t}{t}elif  ( Copy > 1400 )  and  ( Copy <= 1500 ) :{n}{t}{t}{t}return get_string(IACred.PTEEIN, ( Copy )  - 1400){n}{t}return ''{n}{n}
def RefPTEIndexNbr_Calculation(Index):{n}{t}count = Long(){n}{n}{t}max = Long(){n}{n}{t}listedcount = Long(){n}{t}listedcount = 0{n}{t}count = 0{n}{t}while count < 69:{n}{t}{t}if trim(get_string(IA148BUMPSP.RefPTEName(count))) != '':{n}{t}{t}{t}if listedcount == Index:{n}{t}{t}{t}{t}return count{n}{t}{t}{t}else:{n}{t}{t}{t}{t}listedcount = listedcount + 1{n}{t}{t}count = count + 1{n}{t}return 0{n}{n}
def RefPTELine_Calculation(Index):{n}{t}Hold = Long(){n}{t}Hold = Index + 11{n}{t}if Index > 9:{n}{t}{t}return 'Attached stmt'{n}{t}else:{n}{t}{t}return CStr(Hold){n}{n}
def RefPTEName_Calculation(Index):{n}{t}strindex = Long(){n}{n}{t}copystr = String(){n}{n}{t}Copy = Long(){n}{t}if get_number(IA148SP.NonRefNbr) > 10 and Index > 9:{n}{t}{t}strindex = ( ( Index - 1 )  * 4 )  + 1{n}{t}else:{n}{t}{t}strindex = ( ( Index )  * 4 )  + 1{n}{t}copystr = trim(Mid(get_string(IA148SP.RefCopiesStr), strindex, 4)){n}{t}if Index == 6 and get_number(IA148SP.RefNbr) > 7:{n}{t}{t}return ''{n}{t}elif copystr != '':{n}{t}{t}Copy = CLng(copystr){n}{t}{t}if ( Copy > 100 )  and  ( Copy <= 200 ) :{n}{t}{t}{t}return get_string(IA8864.PTEEntity(0), ( Copy )  - 100){n}{t}{t}elif  ( Copy > 200 )  and  ( Copy <= 300 ) :{n}{t}{t}{t}return get_string(IACred.PTEEntity, ( Copy )  - 200){n}{t}{t}elif  ( Copy > 300 )  and  ( Copy <= 400 ) :{n}{t}{t}{t}return get_string(IA135.PTEEntity(0), ( Copy )  - 300){n}{t}{t}elif  ( Copy > 400 )  and  ( Copy <= 500 ) :{n}{t}{t}{t}return get_string(IACred.PTEEntity, ( Copy )  - 400){n}{t}{t}elif  ( Copy > 500 )  and  ( Copy <= 600 ) :{n}{t}{t}{t}return get_string(IA128.PTEEntity(0), ( Copy )  - 500){n}{t}{t}elif  ( Copy > 600 )  and  ( Copy <= 700 ) :{n}{t}{t}{t}return get_string(IA128S.PTEEntity(0), ( Copy )  - 600){n}{t}{t}elif  ( Copy > 700 )  and  ( Copy <= 800 ) :{n}{t}{t}{t}return get_string(IA128.PTEEntity(0), ( Copy )  - 700){n}{t}{t}elif  ( Copy > 800 )  and  ( Copy <= 900 ) :{n}{t}{t}{t}return get_string(IA128S.PTEEntity(0), ( Copy )  - 800){n}{t}{t}elif  ( Copy > 900 )  and  ( Copy <= 1000 ) :{n}{t}{t}{t}return get_string(IA137.PTEEntity(0), ( Copy )  - 900){n}{t}{t}elif  ( Copy > 1000 )  and  ( Copy <= 1100 ) :{n}{t}{t}{t}return get_string(IA138.PTEEntity(0), ( Copy )  - 1000){n}{t}{t}elif  ( Copy > 1100 )  and  ( Copy <= 1200 ) :{n}{t}{t}{t}return ''{n}{t}{t}elif  ( Copy > 1200 )  and  ( Copy <= 1300 ) :{n}{t}{t}{t}return get_string(IACred.PTEEntity, ( Copy )  - 1200){n}{t}{t}elif  ( Copy > 1300 )  and  ( Copy <= 1400 ) :{n}{t}{t}{t}return get_string(IACred.PTEEntity, ( Copy )  - 1300){n}{t}{t}elif  ( Copy > 1400 )  and  ( Copy <= 1500 ) :{n}{t}{t}{t}return get_string(IACred.PTEEntity, ( Copy )  - 1400){n}{t}return ''{n}{n}
def RefTPPerc_Calculation(Index):{n}{t}strindex = Long(){n}{n}{t}copystr = String(){n}{n}{t}Copy = Long(){n}{t}if get_number(IA148SP.NonRefNbr) > 10 and Index > 9:{n}{t}{t}strindex = ( ( Index - 1 )  * 4 )  + 1{n}{t}else:{n}{t}{t}strindex = ( ( Index )  * 4 )  + 1{n}{t}copystr = trim(Mid(get_string(IA148SP.RefCopiesStr), strindex, 4)){n}{t}if Index == 6 and get_number(IA148SP.RefNbr) > 7:{n}{t}{t}return 0{n}{t}elif copystr != '':{n}{t}{t}Copy = CLng(copystr){n}{t}{t}if ( Copy > 100 )  and  ( Copy <= 200 ) :{n}{t}{t}{t}return get_float(IA8864.TPPerc(0), ( Copy )  - 100){n}{t}{t}elif  ( Copy > 200 )  and  ( Copy <= 300 ) :{n}{t}{t}{t}return get_float(IACred.TPPerc, ( Copy )  - 200){n}{t}{t}elif  ( Copy > 300 )  and  ( Copy <= 400 ) :{n}{t}{t}{t}return get_float(IA135.TPPerc(0), ( Copy )  - 300){n}{t}{t}elif  ( Copy > 400 )  and  ( Copy <= 500 ) :{n}{t}{t}{t}return get_float(IACred.TPPerc, ( Copy )  - 400){n}{t}{t}elif  ( Copy > 500 )  and  ( Copy <= 600 ) :{n}{t}{t}{t}return get_float(IA128.TPPerc(0), ( Copy )  - 500){n}{t}{t}elif  ( Copy > 600 )  and  ( Copy <= 700 ) :{n}{t}{t}{t}return get_float(IA128S.TPPerc(0), ( Copy )  - 600){n}{t}{t}elif  ( Copy > 700 )  and  ( Copy <= 800 ) :{n}{t}{t}{t}return get_float(IA128.TPPerc(0), ( Copy )  - 700){n}{t}{t}elif  ( Copy > 800 )  and  ( Copy <= 900 ) :{n}{t}{t}{t}return get_float(IA128S.TPPerc(0), ( Copy )  - 800){n}{t}{t}elif  ( Copy > 900 )  and  ( Copy <= 1000 ) :{n}{t}{t}{t}return get_float(IA137.TPPerc(0), ( Copy )  - 900){n}{t}{t}elif  ( Copy > 1000 )  and  ( Copy <= 1100 ) :{n}{t}{t}{t}return get_float(IA138.TPPerc(0), ( Copy )  - 1000){n}{t}{t}elif  ( Copy > 1100 )  and  ( Copy <= 1200 ) :{n}{t}{t}{t}return 0{n}{t}{t}elif  ( Copy > 1200 )  and  ( Copy <= 1300 ) :{n}{t}{t}{t}return get_float(IACred.TPPerc, ( Copy )  - 1200){n}{t}{t}elif  ( Copy > 1300 )  and  ( Copy <= 1400 ) :{n}{t}{t}{t}return get_float(IACred.TPPerc, ( Copy )  - 1300){n}{t}{t}elif  ( Copy > 1400 )  and  ( Copy <= 1500 ) :{n}{t}{t}{t}return get_float(IACred.TPPerc, ( Copy )  - 1400){n}{t}return 0{n}{n}
def TotPTE_Calculation():{n}{t}count = Integer(){n}{n}{t}Total = Integer(){n}{t}count = 0{n}{t}Total = 0{n}{t}while count < 98:{n}{t}{t}if trim(get_string(IA148BUMPSP.PTEName(count))) != '':{n}{t}{t}{t}Total = Total + 1{n}{t}{t}else:{n}{t}{t}{t}Total = Total{n}{t}{t}count = count + 1{n}{t}return Total{n}{n}
def TotRefPTE_Calculation():{n}{t}count = Integer(){n}{n}{t}Total = Integer(){n}{t}count = 0{n}{t}Total = 0{n}{t}while count < 69:{n}{t}{t}if trim(get_string(IA148BUMPSP.RefPTEName(count))) != '':{n}{t}{t}{t}Total = Total + 1{n}{t}{t}else:{n}{t}{t}{t}Total = Total{n}{t}{t}count = count + 1{n}{t}return Total{n}{n}
def TPPerc_Calculation(Index):{n}{t}strindex = Long(){n}{n}{t}copystr = String(){n}{n}{t}Copy = Long(){n}{t}if get_number(IA148SP.NonRefNbr) > 10 and Index > 9:{n}{t}{t}strindex = ( ( Index - 1 )  * 4 )  + 1{n}{t}else:{n}{t}{t}strindex = ( ( Index )  * 4 )  + 1{n}{t}copystr = trim(Mid(get_string(IA148SP.NonRefCopiesStr), strindex, 4)){n}{t}if Index == 9 and get_number(IA148SP.NonRefNbr) > 10:{n}{t}{t}return 0{n}{t}elif copystr != '':{n}{t}{t}Copy = CLng(copystr){n}{t}{t}if ( Copy > 100 )  and  ( Copy <= 200 ) :{n}{t}{t}{t}return 0{n}{t}{t}elif  ( Copy > 200 )  and  ( Copy <= 300 ) :{n}{t}{t}{t}return get_float(IA134.SCorpPerc, ( Copy )  - 200){n}{t}{t}elif  ( Copy > 300 )  and  ( Copy <= 400 ) :{n}{t}{t}{t}return get_float(IACred.TPPerc, ( Copy )  - 300){n}{t}{t}elif  ( Copy > 400 )  and  ( Copy <= 500 ) :{n}{t}{t}{t}return get_float(IACred.TPPerc, ( Copy )  - 400){n}{t}{t}elif  ( Copy > 500 )  and  ( Copy <= 600 ) :{n}{t}{t}{t}return get_float(IACred.TPPerc, ( Copy )  - 500){n}{t}{t}elif  ( Copy > 600 )  and  ( Copy <= 700 ) :{n}{t}{t}{t}return get_float(IACred.TPPerc, ( Copy )  - 600){n}{t}{t}elif  ( Copy > 700 )  and  ( Copy <= 800 ) :{n}{t}{t}{t}return get_float(IACred.TPPerc, ( Copy )  - 700){n}{t}{t}elif  ( Copy > 800 )  and  ( Copy <= 900 ) :{n}{t}{t}{t}return get_float(IACred.TPPerc, ( Copy )  - 800){n}{t}{t}elif  ( Copy > 900 )  and  ( Copy <= 1000 ) :{n}{t}{t}{t}return get_float(IACred.TPPerc, ( Copy )  - 900){n}{t}{t}elif  ( Copy > 1000 )  and  ( Copy <= 1100 ) :{n}{t}{t}{t}return get_float(IACred.TPPerc, ( Copy )  - 1000){n}{t}{t}elif  ( Copy > 1100 )  and  ( Copy <= 1200 ) :{n}{t}{t}{t}return get_float(IACred.TPPerc, ( Copy )  - 1100){n}{t}{t}elif  ( Copy > 1200 )  and  ( Copy <= 1300 ) :{n}{t}{t}{t}return get_float(IACred.TPPerc, ( Copy )  - 1200){n}{t}{t}elif  ( Copy > 1300 )  and  ( Copy <= 1400 ) :{n}{t}{t}{t}return get_float(IACred.TPPerc, ( Copy )  - 1300){n}{t}{t}elif  ( Copy > 1400 )  and  ( Copy <= 1500 ) :{n}{t}{t}{t}return get_float(IACred.TPPerc, ( Copy )  - 1400){n}{t}{t}elif  ( Copy > 1500 )  and  ( Copy <= 1600 ) :{n}{t}{t}{t}return get_float(IACred.TPPerc, ( Copy )  - 1500){n}{t}{t}elif  ( Copy > 1600 )  and  ( Copy <= 1700 ) :{n}{t}{t}{t}return get_float(IACred.TPPerc, ( Copy )  - 1600){n}{t}{t}elif  ( Copy > 1700 )  and  ( Copy <= 1800 ) :{n}{t}{t}{t}return get_float(IACred.TPPerc, ( Copy )  - 1700){n}{t}{t}elif  ( Copy > 1800 )  and  ( Copy <= 1900 ) :{n}{t}{t}{t}return get_float(IACred.TPPerc, ( Copy )  - 1800){n}{t}{t}elif  ( Copy > 1900 )  and  ( Copy <= 2000 ) :{n}{t}{t}{t}return get_float(IACred.TPPerc, ( Copy )  - 1900){n}{t}{t}elif  ( Copy > 2000 )  and  ( Copy <= 2100 ) :{n}{t}{t}{t}return get_float(IACred.TPPerc, ( Copy )  - 2000){n}{t}{t}elif  ( Copy > 2100 )  and  ( Copy <= 2200 ) :{n}{t}{t}{t}return get_float(IACred.TPPerc, ( Copy )  - 2100){n}{t}{t}elif  ( Copy > 2200 )  and  ( Copy <= 2300 ) :{n}{t}{t}{t}return get_float(IACred.TPPerc, ( Copy )  - 2200){n}{t}{t}elif  ( Copy > 2300 )  and  ( Copy <= 2400 ) :{n}{t}{t}{t}return get_float(IACred.TPPerc, ( Copy )  - 2300){n}{t}{t}elif  ( Copy > 2400 )  and  ( Copy <= 2500 ) :{n}{t}{t}{t}return 0{n}{t}return 0{n}{n}def ArrayNonRefCr_Calculation(Index):{n}{t}if Index == 0:{n}{t}{t}return get_currency(IA148SP.NonRefCr1){n}{t}elif Index == 1:{n}{t}{t}return get_currency(IA148SP.NonRefCr2){n}{t}elif Index == 2:{n}{t}{t}return get_currency(IA148SP.NonRefCr3){n}{t}elif Index == 3:{n}{t}{t}return get_currency(IA148SP.NonRefCr4){n}{t}elif Index == 4:{n}{t}{t}return get_currency(IA148SP.NonRefCr5){n}{t}elif Index == 5:{n}{t}{t}return get_currency(IA148SP.NonRefCr6){n}{t}elif Index == 6:{n}{t}{t}return get_currency(IA148SP.NonRefCr7){n}{t}elif Index == 7:{n}{t}{t}return get_currency(IA148SP.NonRefCr8){n}{t}elif Index == 8:{n}{t}{t}return get_currency(IA148SP.NonRefCr9){n}{t}else:{n}{t}{t}return get_currency(IA148SP.NonRefCr10){n}{n}
def AvailCr_Calculation(Index):{n}{t}if get_string(IA148SP.NonRefCode(Index)) == '09':{n}{t}{t}return get_currency(IA8801SP.AMTCR){n}{t}else:{n}{t}{t}return get_currency(IA148SP.PYCarry(Index)) + get_currency(IA148SP.CYCredit(Index)){n}{n}
def CreateBPNonRef1_Calculation():{n}{t}if get_number(IA148SP.NonRefNbr) > 10:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def CreateBPNonRef2_Calculation():{n}{t}if get_number(IA148SP.NonRefNbr) > 38:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def CreateBPNonRef3_Calculation():{n}{t}if get_number(IA148SP.NonRefNbr) > 67:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def CreateBPNonRef4_Calculation():{n}{t}if get_number(IA148SP.NonRefNbr) > 96:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def CreateBPPTE1_Calculation():{n}{t}if get_number(IA148SP.TotPTE) > 6:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def CreateBPPTE2_Calculation():{n}{t}if get_number(IA148SP.TotPTE) > 35:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def CreateBPPTE3_Calculation():{n}{t}if get_number(IA148SP.TotPTE) > 65:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def CreateBPPTE4_Calculation():{n}{t}if get_number(IA148SP.TotPTE) > 95:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def CreateBPPTE5_Calculation():{n}{t}if get_number(IA148SP.TotPTE) > 125:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def CreateBPRef1_Calculation():{n}{t}if get_number(IA148SP.RefNbr) > 7:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def CreateBPRef2_Calculation():{n}{t}if get_number(IA148SP.RefNbr) > 56:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def CYCarry_Calculation(Index):{n}{t}if get_string(IA148SP.NonRefCode(Index)) == '09':{n}{t}{t}return get_currency(IA8801SP.CYCarryforward){n}{t}else:{n}{t}{t}return max_value(0, get_currency(IA148SP.AvailCr(Index)) - get_currency(IA148SP.ArrayNonRefCr(Index)) - get_currency(IA148SP.ExpCr(Index))){n}{n}
def CYCredit_Calculation(Index):{n}{t}strindex = Long(){n}{n}{t}copystr = String(){n}{n}{t}Copy = Long(){n}{t}strindex = ( ( Index )  * 4 )  + 1{n}{t}copystr = trim(Mid(get_string(IA148SP.NonRefCopiesStr), strindex, 4)){n}{t}if Index == 9 and get_number(IA148SP.NonRefNbr) > 10:{n}{t}{t}return 0{n}{t}elif copystr != '':{n}{t}{t}Copy = CLng(copystr){n}{t}{t}if ( Copy > 100 )  and  ( Copy <= 200 ) :{n}{t}{t}{t}return get_currency(IA147.FranchiseCr, ( Copy )  - 100){n}{t}{t}elif  ( Copy > 200 )  and  ( Copy <= 300 ) :{n}{t}{t}{t}return get_currency(IA134SP.Credit, ( Copy )  - 200){n}{t}{t}elif  ( Copy > 300 )  and  ( Copy <= 400 ) :{n}{t}{t}{t}return get_currency(IACred.CYCredit, ( Copy )  - 300){n}{t}{t}elif  ( Copy > 400 )  and  ( Copy <= 500 ) :{n}{t}{t}{t}return get_currency(IACred.CYCredit, ( Copy )  - 400){n}{t}{t}elif  ( Copy > 500 )  and  ( Copy <= 600 ) :{n}{t}{t}{t}return get_currency(IACred.CYCredit, ( Copy )  - 500){n}{t}{t}elif  ( Copy > 600 )  and  ( Copy <= 700 ) :{n}{t}{t}{t}return get_currency(IACred.CYCredit, ( Copy )  - 600){n}{t}{t}elif  ( Copy > 700 )  and  ( Copy <= 800 ) :{n}{t}{t}{t}return get_currency(IACred.CYCredit, ( Copy )  - 700){n}{t}{t}elif  ( Copy > 800 )  and  ( Copy <= 900 ) :{n}{t}{t}{t}return get_currency(IACred.CYCredit, ( Copy )  - 800){n}{t}{t}elif  ( Copy > 900 )  and  ( Copy <= 1000 ) :{n}{t}{t}{t}return get_currency(IACred.CYCredit, ( Copy )  - 900){n}{t}{t}elif  ( Copy > 1000 )  and  ( Copy <= 1100 ) :{n}{t}{t}{t}return get_currency(IACred.CYCredit, ( Copy )  - 1000){n}{t}{t}elif  ( Copy > 1100 )  and  ( Copy <= 1200 ) :{n}{t}{t}{t}return get_currency(IACred.CYCredit, ( Copy )  - 1100){n}{t}{t}elif  ( Copy > 1200 )  and  ( Copy <= 1300 ) :{n}{t}{t}{t}return get_currency(IACred.CYCredit, ( Copy )  - 1200){n}{t}{t}elif  ( Copy > 1300 )  and  ( Copy <= 1400 ) :{n}{t}{t}{t}return get_currency(IACred.CYCredit, ( Copy )  - 1300){n}{t}{t}elif  ( Copy > 1400 )  and  ( Copy <= 1500 ) :{n}{t}{t}{t}return get_currency(IACred.CYCredit, ( Copy )  - 1400){n}{t}{t}elif  ( Copy > 1500 )  and  ( Copy <= 1600 ) :{n}{t}{t}{t}return get_currency(IACred.CYCredit, ( Copy )  - 1500){n}{t}{t}elif  ( Copy > 1600 )  and  ( Copy <= 1700 ) :{n}{t}{t}{t}return get_currency(IACred.CYCredit, ( Copy )  - 1600){n}{t}{t}elif  ( Copy > 1700 )  and  ( Copy <= 1800 ) :{n}{t}{t}{t}return get_currency(IACred.CYCredit, ( Copy )  - 1700){n}{t}{t}elif  ( Copy > 1800 )  and  ( Copy <= 1900 ) :{n}{t}{t}{t}return get_currency(IACred.CYCredit, ( Copy )  - 1800){n}{t}{t}elif  ( Copy > 1900 )  and  ( Copy <= 2000 ) :{n}{t}{t}{t}return get_currency(IACred.CYCredit, ( Copy )  - 1900){n}{t}{t}elif  ( Copy > 2000 )  and  ( Copy <= 2100 ) :{n}{t}{t}{t}return get_currency(IACred.CYCredit, ( Copy )  - 2000){n}{t}{t}elif  ( Copy > 2100 )  and  ( Copy <= 2200 ) :{n}{t}{t}{t}return get_currency(IACred.CYCredit, ( Copy )  - 2100){n}{t}{t}elif  ( Copy > 2200 )  and  ( Copy <= 2300 ) :{n}{t}{t}{t}return get_currency(IACred.CYCredit, ( Copy )  - 2200){n}{t}{t}elif  ( Copy > 2300 )  and  ( Copy <= 2400 ) :{n}{t}{t}{t}return get_currency(IACred.CYCredit, ( Copy )  - 2300){n}{t}{t}elif  ( Copy > 2400 )  and  ( Copy <= 2500 ) :{n}{t}{t}{t}return get_currency(IA8801SP.PYAMT){n}{t}return 0{n}{n}
def Desc_Calculation():{n}{t}Total1 = Currency(){n}{n}{t}Total2 = Currency(){n}{t}Total1 = get_currency(IA148SP.TotNonRefCr){n}{t}Total2 = get_currency(IA148SP.TotRefCr){n}{t}if Total1 > 0 and Total2 == 0:{n}{t}{t}return CStr(Total1) + ' Nonrefundable Credits'{n}{t}elif Total1 == 0 and Total2 > 0:{n}{t}{t}return CStr(Total2) + ' Refundable Credits'{n}{t}elif Total1 > 0 and Total2 > 0:{n}{t}{t}return CStr(Total1) + ' Nonrefundable Credits ' + CStr(Total2) + ' Refundable Credits'{n}{t}else:{n}{t}{t}return CStr(Total1) + ' Credits'{n}{n}
def ExpCr_Calculation(Index):{n}{t}strindex = Long(){n}{n}{t}copystr = String(){n}{n}{t}Copy = Long(){n}{t}strindex = ( ( Index )  * 4 )  + 1{n}{t}copystr = trim(Mid(get_string(IA148SP.NonRefCopiesStr), strindex, 4)){n}{t}if Index == 9 and get_number(IA148SP.NonRefNbr) > 10:{n}{t}{t}return 0{n}{t}elif copystr != '':{n}{t}{t}Copy = CLng(copystr){n}{t}{t}if ( Copy > 100 )  and  ( Copy <= 200 ) :{n}{t}{t}{t}return max_value(0, get_currency(IA148SP.AvailCr(Index)) - get_currency(IA148SP.ArrayNonRefCr(Index))){n}{t}{t}elif  ( Copy > 200 )  and  ( Copy <= 300 ) :{n}{t}{t}{t}return max_value(0, get_currency(IA148SP.AvailCr(Index)) - get_currency(IA148SP.ArrayNonRefCr(Index))){n}{t}{t}elif  ( Copy > 300 )  and  ( Copy <= 400 ) :{n}{t}{t}{t}return get_currency(IACred.ExpCr, ( Copy )  - 300){n}{t}{t}elif  ( Copy > 400 )  and  ( Copy <= 500 ) :{n}{t}{t}{t}return get_currency(IACred.ExpCr, ( Copy )  - 400){n}{t}{t}elif  ( Copy > 500 )  and  ( Copy <= 600 ) :{n}{t}{t}{t}return get_currency(IACred.ExpCr, ( Copy )  - 500){n}{t}{t}elif  ( Copy > 600 )  and  ( Copy <= 700 ) :{n}{t}{t}{t}return get_currency(IACred.ExpCr, ( Copy )  - 600){n}{t}{t}elif  ( Copy > 700 )  and  ( Copy <= 800 ) :{n}{t}{t}{t}return get_currency(IACred.ExpCr, ( Copy )  - 700){n}{t}{t}elif  ( Copy > 800 )  and  ( Copy <= 900 ) :{n}{t}{t}{t}return get_currency(IACred.ExpCr, ( Copy )  - 800){n}{t}{t}elif  ( Copy > 900 )  and  ( Copy <= 1000 ) :{n}{t}{t}{t}return get_currency(IACred.ExpCr, ( Copy )  - 900){n}{t}{t}elif  ( Copy > 1000 )  and  ( Copy <= 1100 ) :{n}{t}{t}{t}return get_currency(IACred.ExpCr, ( Copy )  - 1000){n}{t}{t}elif  ( Copy > 1100 )  and  ( Copy <= 1200 ) :{n}{t}{t}{t}return get_currency(IACred.ExpCr, ( Copy )  - 1100){n}{t}{t}elif  ( Copy > 1200 )  and  ( Copy <= 1300 ) :{n}{t}{t}{t}return get_currency(IACred.ExpCr, ( Copy )  - 1200){n}{t}{t}elif  ( Copy > 1300 )  and  ( Copy <= 1400 ) :{n}{t}{t}{t}return get_currency(IACred.ExpCr, ( Copy )  - 1300){n}{t}{t}elif  ( Copy > 1400 )  and  ( Copy <= 1500 ) :{n}{t}{t}{t}return get_currency(IACred.ExpCr, ( Copy )  - 1400){n}{t}{t}elif  ( Copy > 1500 )  and  ( Copy <= 1600 ) :{n}{t}{t}{t}return get_currency(IACred.ExpCr, ( Copy )  - 1500){n}{t}{t}elif  ( Copy > 1600 )  and  ( Copy <= 1700 ) :{n}{t}{t}{t}return get_currency(IACred.ExpCr, ( Copy )  - 1600){n}{t}{t}elif  ( Copy > 1700 )  and  ( Copy <= 1800 ) :{n}{t}{t}{t}return get_currency(IACred.ExpCr, ( Copy )  - 1700){n}{t}{t}elif  ( Copy > 1800 )  and  ( Copy <= 1900 ) :{n}{t}{t}{t}return get_currency(IACred.ExpCr, ( Copy )  - 1800){n}{t}{t}elif  ( Copy > 1900 )  and  ( Copy <= 2000 ) :{n}{t}{t}{t}return get_currency(IACred.ExpCr, ( Copy )  - 1900){n}{t}{t}elif  ( Copy > 2000 )  and  ( Copy <= 2100 ) :{n}{t}{t}{t}return get_currency(IACred.ExpCr, ( Copy )  - 2000){n}{t}{t}elif  ( Copy > 2100 )  and  ( Copy <= 2200 ) :{n}{t}{t}{t}return get_currency(IACred.ExpCr, ( Copy )  - 2100){n}{t}{t}elif  ( Copy > 2200 )  and  ( Copy <= 2300 ) :{n}{t}{t}{t}return get_currency(IACred.ExpCr, ( Copy )  - 2200){n}{t}{t}elif  ( Copy > 2300 )  and  ( Copy <= 2400 ) :{n}{t}{t}{t}return get_currency(IACred.ExpCr, ( Copy )  - 2300){n}{t}{t}elif  ( Copy > 2400 )  and  ( Copy <= 2500 ) :{n}{t}{t}{t}return 0{n}{t}return 0{n}{n}
def FirstCopy137Site_Calculation():{n}{t}count = Long(){n}{n}{t}max = Long(){n}{t}max = GetAllCopies(IA137){n}{t}count = 0{n}{t}while count < max:{n}{t}{t}count = count + 1{n}{t}{t}if get_bool(IA137.Spouse, count) == True and get_bool(IA137.Site, count) == True and get_currency(IA137.TotEthSoldCr, count) > 0:{n}{t}{t}{t}return count{n}{t}{t}else:{n}{t}{t}{t}count = count{n}{t}return 0{n}{n}
def Names_Calculation():{n}{t}return get_string(IAREQUIRED.SPCombName){n}{n}
def NonRefCert_Calculation(Index):{n}{t}strindex = Long(){n}{n}{t}copystr = String(){n}{n}{t}Copy = Long(){n}{t}strindex = ( ( Index )  * 4 )  + 1{n}{t}copystr = trim(Mid(get_string(IA148SP.NonRefCopiesStr), strindex, 4)){n}{t}if Index == 9 and get_number(IA148SP.NonRefNbr) > 10:{n}{t}{t}return 'Stmt Att.'{n}{t}elif copystr != '':{n}{t}{t}Copy = CLng(copystr){n}{t}{t}if ( Copy > 100 )  and  ( Copy <= 200 ) :{n}{t}{t}{t}return ''{n}{t}{t}elif  ( Copy > 200 )  and  ( Copy <= 300 ) :{n}{t}{t}{t}return ''{n}{t}{t}elif  ( Copy > 300 )  and  ( Copy <= 400 ) :{n}{t}{t}{t}return get_string(IACred.CertNumber, ( Copy )  - 300){n}{t}{t}elif  ( Copy > 400 )  and  ( Copy <= 500 ) :{n}{t}{t}{t}return get_string(IACred.CertNumber, ( Copy )  - 400){n}{t}{t}elif  ( Copy > 500 )  and  ( Copy <= 600 ) :{n}{t}{t}{t}return get_string(IACred.CertNumber, ( Copy )  - 500){n}{t}{t}elif  ( Copy > 600 )  and  ( Copy <= 700 ) :{n}{t}{t}{t}return get_string(IACred.CertNumber, ( Copy )  - 600){n}{t}{t}elif  ( Copy > 700 )  and  ( Copy <= 800 ) :{n}{t}{t}{t}return get_string(IACred.CertNumber, ( Copy )  - 700){n}{t}{t}elif  ( Copy > 800 )  and  ( Copy <= 900 ) :{n}{t}{t}{t}return get_string(IACred.CertNumber, ( Copy )  - 800){n}{t}{t}elif  ( Copy > 900 )  and  ( Copy <= 1000 ) :{n}{t}{t}{t}return get_string(IACred.CertNumber, ( Copy )  - 900){n}{t}{t}elif  ( Copy > 1000 )  and  ( Copy <= 1100 ) :{n}{t}{t}{t}return get_string(IACred.CertNumber, ( Copy )  - 1000){n}{t}{t}elif  ( Copy > 1100 )  and  ( Copy <= 1200 ) :{n}{t}{t}{t}return get_string(IACred.CertNumber, ( Copy )  - 1100){n}{t}{t}elif  ( Copy > 1200 )  and  ( Copy <= 1300 ) :{n}{t}{t}{t}return get_string(IACred.CertNumber, ( Copy )  - 1200){n}{t}{t}elif  ( Copy > 1300 )  and  ( Copy <= 1400 ) :{n}{t}{t}{t}return get_string(IACred.CertNumber, ( Copy )  - 1300){n}{t}{t}elif  ( Copy > 1400 )  and  ( Copy <= 1500 ) :{n}{t}{t}{t}return get_string(IACred.CertNumber, ( Copy )  - 1400){n}{t}{t}elif  ( Copy > 1500 )  and  ( Copy <= 1600 ) :{n}{t}{t}{t}return get_string(IACred.CertNumber, ( Copy )  - 1500){n}{t}{t}elif  ( Copy > 1600 )  and  ( Copy <= 1700 ) :{n}{t}{t}{t}return get_string(IACred.CertNumber, ( Copy )  - 1600){n}{t}{t}elif  ( Copy > 1700 )  and  ( Copy <= 1800 ) :{n}{t}{t}{t}return get_string(IACred.CertNumber, ( Copy )  - 1700){n}{t}{t}elif  ( Copy > 1800 )  and  ( Copy <= 1900 ) :{n}{t}{t}{t}return get_string(IACred.CertNumber, ( Copy )  - 1800){n}{t}{t}elif  ( Copy > 1900 )  and  ( Copy <= 2000 ) :{n}{t}{t}{t}return get_string(IACred.CertNumber, ( Copy )  - 1900){n}{t}{t}elif  ( Copy > 2000 )  and  ( Copy <= 2100 ) :{n}{t}{t}{t}return get_string(IACred.CertNumber, ( Copy )  - 2000){n}{t}{t}elif  ( Copy > 2100 )  and  ( Copy <= 2200 ) :{n}{t}{t}{t}return get_string(IACred.CertNumber, ( Copy )  - 2100){n}{t}{t}elif  ( Copy > 2200 )  and  ( Copy <= 2300 ) :{n}{t}{t}{t}return get_string(IACred.CertNumber, ( Copy )  - 2200){n}{t}{t}elif  ( Copy > 2300 )  and  ( Copy <= 2400 ) :{n}{t}{t}{t}return get_string(IACred.CertNumber, ( Copy )  - 2300){n}{t}{t}elif  ( Copy > 2400 )  and  ( Copy <= 2500 ) :{n}{t}{t}{t}return ''{n}{t}return ''{n}{n}
def NonRefCode_Calculation(Index):{n}{t}strindex = Long(){n}{n}{t}copystr = String(){n}{n}{t}Copy = Long(){n}{t}strindex = ( ( Index )  * 4 )  + 1{n}{t}copystr = trim(Mid(get_string(IA148SP.NonRefCopiesStr), strindex, 4)){n}{t}if Index == 9 and get_number(IA148SP.NonRefNbr) > 10:{n}{t}{t}return 'See'{n}{t}elif copystr != '':{n}{t}{t}Copy = CLng(copystr){n}{t}{t}if ( Copy > 100 )  and  ( Copy <= 200 ) :{n}{t}{t}{t}return '04'{n}{t}{t}elif  ( Copy > 200 )  and  ( Copy <= 300 ) :{n}{t}{t}{t}return '11'{n}{t}{t}elif  ( Copy > 300 )  and  ( Copy <= 400 ) :{n}{t}{t}{t}return get_string(IACred.Code, ( Copy )  - 300){n}{t}{t}elif  ( Copy > 400 )  and  ( Copy <= 500 ) :{n}{t}{t}{t}return get_string(IACred.Code, ( Copy )  - 400){n}{t}{t}elif  ( Copy > 500 )  and  ( Copy <= 600 ) :{n}{t}{t}{t}return get_string(IACred.Code, ( Copy )  - 500){n}{t}{t}elif  ( Copy > 600 )  and  ( Copy <= 700 ) :{n}{t}{t}{t}return get_string(IACred.Code, ( Copy )  - 600){n}{t}{t}elif  ( Copy > 700 )  and  ( Copy <= 800 ) :{n}{t}{t}{t}return get_string(IACred.Code, ( Copy )  - 700){n}{t}{t}elif  ( Copy > 800 )  and  ( Copy <= 900 ) :{n}{t}{t}{t}return get_string(IACred.Code, ( Copy )  - 800){n}{t}{t}elif  ( Copy > 900 )  and  ( Copy <= 1000 ) :{n}{t}{t}{t}return get_string(IACred.Code, ( Copy )  - 900){n}{t}{t}elif  ( Copy > 1000 )  and  ( Copy <= 1100 ) :{n}{t}{t}{t}return get_string(IACred.Code, ( Copy )  - 1000){n}{t}{t}elif  ( Copy > 1100 )  and  ( Copy <= 1200 ) :{n}{t}{t}{t}return get_string(IACred.Code, ( Copy )  - 1100){n}{t}{t}elif  ( Copy > 1200 )  and  ( Copy <= 1300 ) :{n}{t}{t}{t}return get_string(IACred.Code, ( Copy )  - 1200){n}{t}{t}elif  ( Copy > 1300 )  and  ( Copy <= 1400 ) :{n}{t}{t}{t}return get_string(IACred.Code, ( Copy )  - 1300){n}{t}{t}elif  ( Copy > 1400 )  and  ( Copy <= 1500 ) :{n}{t}{t}{t}return get_string(IACred.Code, ( Copy )  - 1400){n}{t}{t}elif  ( Copy > 1500 )  and  ( Copy <= 1600 ) :{n}{t}{t}{t}return get_string(IACred.Code, ( Copy )  - 1500){n}{t}{t}elif  ( Copy > 1600 )  and  ( Copy <= 1700 ) :{n}{t}{t}{t}return get_string(IACred.Code, ( Copy )  - 1600){n}{t}{t}elif  ( Copy > 1700 )  and  ( Copy <= 1800 ) :{n}{t}{t}{t}return get_string(IACred.Code, ( Copy )  - 1700){n}{t}{t}elif  ( Copy > 1800 )  and  ( Copy <= 1900 ) :{n}{t}{t}{t}return get_string(IACred.Code, ( Copy )  - 1800){n}{t}{t}elif  ( Copy > 1900 )  and  ( Copy <= 2000 ) :{n}{t}{t}{t}return get_string(IACred.Code, ( Copy )  - 1900){n}{t}{t}elif  ( Copy > 2000 )  and  ( Copy <= 2100 ) :{n}{t}{t}{t}return get_string(IACred.Code, ( Copy )  - 2000){n}{t}{t}elif  ( Copy > 2100 )  and  ( Copy <= 2200 ) :{n}{t}{t}{t}return get_string(IACred.Code, ( Copy )  - 2100){n}{t}{t}elif  ( Copy > 2200 )  and  ( Copy <= 2300 ) :{n}{t}{t}{t}return get_string(IACred.Code, ( Copy )  - 2200){n}{t}{t}elif  ( Copy > 2300 )  and  ( Copy <= 2400 ) :{n}{t}{t}{t}return get_string(IACred.Code, ( Copy )  - 2300){n}{t}{t}elif  ( Copy > 2400 )  and  ( Copy <= 2500 ) :{n}{t}{t}{t}return '09'{n}{t}return ''{n}{n}
def NonRefCopiesStr_Calculation():{n}{t}Copy = Long(){n}{n}{t}Copy2 = Long(){n}{n}{t}Copy3 = Long(){n}{n}{t}Copy4 = Long(){n}{n}{t}Copy5 = Long(){n}{n}{t}Copy6 = Long(){n}{n}{t}Copy7 = Long(){n}{n}{t}Copy8 = Long(){n}{n}{t}Copy9 = Long(){n}{n}{t}Copy10 = Long(){n}{n}{t}Copy11 = Long(){n}{n}{t}Copy12 = Long(){n}{n}{t}Copy13 = Long(){n}{n}{t}Copy14 = Long(){n}{n}{t}Copy15 = Long(){n}{n}{t}Copy16 = Long(){n}{n}{t}Copy17 = Long(){n}{n}{t}Copy18 = Long(){n}{n}{t}Copy19 = Long(){n}{n}{t}Copy20 = Long(){n}{n}{t}Copy21 = Long(){n}{n}{t}Copy22 = Long(){n}{n}{t}Copy23 = Long(){n}{n}{t}Copy24 = Long(){n}{n}{t}max = Long(){n}{n}{t}max2 = Long(){n}{n}{t}max3 = Long(){n}{n}{t}max4 = Long(){n}{n}{t}copystr = String(){n}{n}{t}copystr2 = String(){n}{n}{t}copystr3 = String(){n}{n}{t}copystr4 = String(){n}{n}{t}copystr5 = String(){n}{n}{t}copystr6 = String(){n}{n}{t}copystr7 = String(){n}{n}{t}copystr8 = String(){n}{n}{t}copystr9 = String(){n}{n}{t}copystr10 = String(){n}{n}{t}copystr11 = String(){n}{n}{t}copystr12 = String(){n}{n}{t}copystr13 = String(){n}{n}{t}copystr14 = String(){n}{n}{t}copystr15 = String(){n}{n}{t}copystr16 = String(){n}{n}{t}copystr17 = String(){n}{n}{t}copystr18 = String(){n}{n}{t}copystr19 = String(){n}{n}{t}copystr20 = String(){n}{n}{t}copystr21 = String(){n}{n}{t}copystr22 = String(){n}{n}{t}copystr23 = String(){n}{n}{t}copystr24 = String(){n}{n}{t}copiesstr = String(){n}{n}{t}copiesstr2 = String(){n}{n}{t}copiesstr3 = String(){n}{n}{t}copiesstr4 = String(){n}{n}{t}copiesstr5 = String(){n}{n}{t}copiesstr6 = String(){n}{n}{t}copiesstr7 = String(){n}{n}{t}copiesstr8 = String(){n}{n}{t}copiesstr9 = String(){n}{n}{t}copiesstr10 = String(){n}{n}{t}copiesstr11 = String(){n}{n}{t}copiesstr12 = String(){n}{n}{t}copiesstr13 = String(){n}{n}{t}copiesstr14 = String(){n}{n}{t}copiesstr15 = String(){n}{n}{t}copiesstr16 = String(){n}{n}{t}copiesstr17 = String(){n}{n}{t}copiesstr18 = String(){n}{n}{t}copiesstr19 = String(){n}{n}{t}copiesstr20 = String(){n}{n}{t}copiesstr21 = String(){n}{n}{t}copiesstr22 = String(){n}{n}{t}copiesstr23 = String(){n}{n}{t}copiesstr24 = String(){n}{t}#2017 removed credit codes 18 and 19 which were in credit order #10 and #11, re-used Copy10, Copystr10 and copiesstr10 for new credit code #28 and put it last in the order since no new IA Admin Rule is out, left copy11, copystr11 and copiesstr11 for future use{n}{t}copiesstr = ''{n}{t}Copy = 1{n}{t}max = GetAllCopies(IA147){n}{t}while Copy <= max:{n}{t}{t}if get_currency(IA147.FranchiseCr, Copy) > 0:{n}{t}{t}{t}if get_currency(IA147.FranchiseCr, Copy) > 0 and get_bool(IA147.Spouse, Copy) == True:{n}{t}{t}{t}{t}copystr = CStr(Copy + 100){n}{t}{t}{t}{t}while Len(copystr) < 4:{n}{t}{t}{t}{t}{t}copystr = copystr + ' '{n}{t}{t}{t}{t}copiesstr = copiesstr + copystr{n}{t}{t}Copy = Copy + 1{n}{t}copiesstr2 = ''{n}{t}Copy2 = 1{n}{t}max2 = GetAllCopies(IA134SP){n}{t}while Copy2 <= max2:{n}{t}{t}if get_currency(IA134SP.Credit, Copy2) > 0:{n}{t}{t}{t}if get_currency(IA134SP.Credit, Copy2) > 0:{n}{t}{t}{t}{t}copystr2 = CStr(Copy2 + 200) + ' '{n}{t}{t}{t}{t}copiesstr2 = copiesstr2 + copystr2{n}{t}{t}Copy2 = Copy2 + 1{n}{t}max3 = GetAllCopies(IACred){n}{t}copiesstr3 = ''{n}{t}copiesstr4 = ''{n}{t}copiesstr5 = ''{n}{t}copiesstr6 = ''{n}{t}copiesstr7 = ''{n}{t}copiesstr8 = ''{n}{t}copiesstr9 = ''{n}{t}copiesstr10 = ''{n}{t}copiesstr11 = ''{n}{t}copiesstr12 = ''{n}{t}copiesstr13 = ''{n}{t}copiesstr14 = ''{n}{t}copiesstr15 = ''{n}{t}copiesstr16 = ''{n}{t}copiesstr17 = ''{n}{t}copiesstr18 = ''{n}{t}copiesstr19 = ''{n}{t}copiesstr20 = ''{n}{t}copiesstr21 = ''{n}{t}copiesstr22 = ''{n}{t}copiesstr23 = ''{n}{t}copiesstr24 = ''{n}{t}Copy3 = 1{n}{t}Copy4 = 1{n}{t}Copy5 = 1{n}{t}Copy6 = 1{n}{t}Copy7 = 1{n}{t}Copy8 = 1{n}{t}Copy9 = 1{n}{t}Copy10 = 1{n}{t}Copy11 = 1{n}{t}Copy12 = 1{n}{t}Copy13 = 1{n}{t}Copy14 = 1{n}{t}Copy15 = 1{n}{t}Copy16 = 1{n}{t}Copy17 = 1{n}{t}Copy18 = 1{n}{t}Copy19 = 1{n}{t}Copy20 = 1{n}{t}Copy21 = 1{n}{t}Copy22 = 1{n}{t}Copy23 = 1{n}{t}while Copy3 <= max3:{n}{t}{t}if get_string(IACred.Code, Copy3) == '12':{n}{t}{t}{t}if get_bool(IACred.NonRefCr, Copy3) == True and get_bool(IACred.Spouse, Copy3) == True and get_string(IACred.Code, Copy3) == '12':{n}{t}{t}{t}{t}copystr3 = CStr(Copy3 + 300) + ' '{n}{t}{t}{t}{t}copiesstr3 = copiesstr3 + copystr3{n}{t}{t}Copy3 = Copy3 + 1{n}{t}while Copy4 <= max3:{n}{t}{t}if get_string(IACred.Code, Copy4) == '14':{n}{t}{t}{t}if get_bool(IACred.NonRefCr, Copy4) == True and get_bool(IACred.Spouse, Copy4) == True and get_string(IACred.Code, Copy4) == '14':{n}{t}{t}{t}{t}copystr4 = CStr(Copy4 + 400) + ' '{n}{t}{t}{t}{t}copiesstr4 = copiesstr4 + copystr4{n}{t}{t}Copy4 = Copy4 + 1{n}{t}while Copy5 <= max3:{n}{t}{t}if get_string(IACred.Code, Copy5) == '15':{n}{t}{t}{t}if get_bool(IACred.NonRefCr, Copy5) == True and get_bool(IACred.Spouse, Copy5) == True and get_string(IACred.Code, Copy5) == '15':{n}{t}{t}{t}{t}copystr5 = CStr(Copy5 + 500) + ' '{n}{t}{t}{t}{t}copiesstr5 = copiesstr5 + copystr5{n}{t}{t}Copy5 = Copy5 + 1{n}{t}while Copy6 <= max3:{n}{t}{t}if get_string(IACred.Code, Copy6) == '25':{n}{t}{t}{t}if get_bool(IACred.NonRefCr, Copy6) == True and get_bool(IACred.Spouse, Copy6) == True and get_string(IACred.Code, Copy6) == '25':{n}{t}{t}{t}{t}copystr6 = CStr(Copy6 + 600) + ' '{n}{t}{t}{t}{t}copiesstr6 = copiesstr6 + copystr6{n}{t}{t}Copy6 = Copy6 + 1{n}{t}while Copy7 <= max3:{n}{t}{t}if get_string(IACred.Code, Copy7) == '03':{n}{t}{t}{t}if get_bool(IACred.NonRefCr, Copy7) == True and get_bool(IACred.Spouse, Copy7) == True and get_string(IACred.Code, Copy7) == '03':{n}{t}{t}{t}{t}copystr7 = CStr(Copy7 + 700) + ' '{n}{t}{t}{t}{t}copiesstr7 = copiesstr7 + copystr7{n}{t}{t}Copy7 = Copy7 + 1{n}{t}while Copy8 <= max3:{n}{t}{t}if get_string(IACred.Code, Copy8) == '17':{n}{t}{t}{t}if get_bool(IACred.NonRefCr, Copy8) == True and get_bool(IACred.Spouse, Copy8) == True and get_string(IACred.Code, Copy8) == '17':{n}{t}{t}{t}{t}copystr8 = CStr(Copy8 + 800) + ' '{n}{t}{t}{t}{t}copiesstr8 = copiesstr8 + copystr8{n}{t}{t}Copy8 = Copy8 + 1{n}{t}while Copy9 <= max3:{n}{t}{t}if get_string(IACred.Code, Copy9) == '24':{n}{t}{t}{t}if get_bool(IACred.NonRefCr, Copy9) == True and get_bool(IACred.Spouse, Copy9) == True and get_string(IACred.Code, Copy9) == '24':{n}{t}{t}{t}{t}copystr9 = CStr(Copy9 + 900) + ' '{n}{t}{t}{t}{t}copiesstr9 = copiesstr9 + copystr9{n}{t}{t}Copy9 = Copy9 + 1{n}{t}while Copy10 <= max3:{n}{t}{t}if get_string(IACred.Code, Copy10) == '28':{n}{t}{t}{t}if get_bool(IACred.NonRefCr, Copy10) == True and get_bool(IACred.Spouse, Copy10) == True and get_string(IACred.Code, Copy10) == '28':{n}{t}{t}{t}{t}copystr10 = CStr(Copy10 + 1000){n}{t}{t}{t}{t}copiesstr10 = copiesstr10 + copystr10{n}{t}{t}Copy10 = Copy10 + 1{n}{t}while Copy12 <= max3:{n}{t}{t}if get_string(IACred.Code, Copy12) == '21':{n}{t}{t}{t}if get_bool(IACred.NonRefCr, Copy12) == True and get_bool(IACred.Spouse, Copy12) == True and get_string(IACred.Code, Copy12) == '21':{n}{t}{t}{t}{t}copystr12 = CStr(Copy12 + 1200){n}{t}{t}{t}{t}copiesstr12 = copiesstr12 + copystr12{n}{t}{t}Copy12 = Copy12 + 1{n}{t}while Copy13 <= max3:{n}{t}{t}if get_string(IACred.Code, Copy13) == '26':{n}{t}{t}{t}if get_bool(IACred.NonRefCr, Copy13) == True and get_bool(IACred.Spouse, Copy13) == True and get_string(IACred.Code, Copy13) == '26':{n}{t}{t}{t}{t}copystr13 = CStr(Copy13 + 1300){n}{t}{t}{t}{t}copiesstr13 = copiesstr13 + copystr13{n}{t}{t}Copy13 = Copy13 + 1{n}{t}while Copy14 <= max3:{n}{t}{t}if get_string(IACred.Code, Copy14) == '06':{n}{t}{t}{t}if get_bool(IACred.NonRefCr, Copy14) == True and get_bool(IACred.Spouse, Copy14) == True and get_string(IACred.Code, Copy14) == '06':{n}{t}{t}{t}{t}copystr14 = CStr(Copy14 + 1400){n}{t}{t}{t}{t}copiesstr14 = copiesstr14 + copystr14{n}{t}{t}Copy14 = Copy14 + 1{n}{t}while Copy15 <= max3:{n}{t}{t}if get_string(IACred.Code, Copy15) == '07':{n}{t}{t}{t}if get_bool(IACred.NonRefCr, Copy15) == True and get_bool(IACred.Spouse, Copy15) == True and get_string(IACred.Code, Copy15) == '07':{n}{t}{t}{t}{t}copystr15 = CStr(Copy15 + 1500){n}{t}{t}{t}{t}copiesstr15 = copiesstr15 + copystr15{n}{t}{t}Copy15 = Copy15 + 1{n}{t}while Copy16 <= max3:{n}{t}{t}if get_string(IACred.Code, Copy16) == '27':{n}{t}{t}{t}if get_bool(IACred.NonRefCr, Copy16) == True and get_bool(IACred.Spouse, Copy16) == True and get_string(IACred.Code, Copy16) == '27':{n}{t}{t}{t}{t}copystr16 = CStr(Copy16 + 1600){n}{t}{t}{t}{t}copiesstr16 = copiesstr16 + copystr16{n}{t}{t}Copy16 = Copy16 + 1{n}{t}while Copy17 <= max3:{n}{t}{t}if get_string(IACred.Code, Copy17) == '16':{n}{t}{t}{t}if get_bool(IACred.NonRefCr, Copy17) == True and get_bool(IACred.Spouse, Copy17) == True and get_string(IACred.Code, Copy17) == '16':{n}{t}{t}{t}{t}copystr17 = CStr(Copy17 + 1700){n}{t}{t}{t}{t}copiesstr17 = copiesstr17 + copystr17{n}{t}{t}Copy17 = Copy17 + 1{n}{t}while Copy18 <= max3:{n}{t}{t}if get_string(IACred.Code, Copy18) == '10':{n}{t}{t}{t}if get_bool(IACred.NonRefCr, Copy18) == True and get_bool(IACred.Spouse, Copy18) == True and get_string(IACred.Code, Copy18) == '10':{n}{t}{t}{t}{t}copystr18 = CStr(Copy18 + 1800){n}{t}{t}{t}{t}copiesstr18 = copiesstr18 + copystr18{n}{t}{t}Copy18 = Copy18 + 1{n}{t}while Copy19 <= max3:{n}{t}{t}if get_string(IACred.Code, Copy19) == '13':{n}{t}{t}{t}if get_bool(IACred.NonRefCr, Copy19) == True and get_bool(IACred.Spouse, Copy19) == True and get_string(IACred.Code, Copy19) == '13':{n}{t}{t}{t}{t}copystr19 = CStr(Copy19 + 1900){n}{t}{t}{t}{t}copiesstr19 = copiesstr19 + copystr19{n}{t}{t}Copy19 = Copy19 + 1{n}{t}while Copy20 <= max3:{n}{t}{t}if get_string(IACred.Code, Copy20) == '08':{n}{t}{t}{t}if get_bool(IACred.NonRefCr, Copy20) == True and get_bool(IACred.Spouse, Copy20) == True and get_string(IACred.Code, Copy20) == '08':{n}{t}{t}{t}{t}copystr20 = CStr(Copy20 + 2000){n}{t}{t}{t}{t}copiesstr20 = copiesstr20 + copystr20{n}{t}{t}Copy20 = Copy20 + 1{n}{t}while Copy21 <= max3:{n}{t}{t}if get_string(IACred.Code, Copy21) == '23':{n}{t}{t}{t}if get_bool(IACred.NonRefCr, Copy21) == True and get_bool(IACred.Spouse, Copy21) == True and get_string(IACred.Code, Copy21) == '23':{n}{t}{t}{t}{t}copystr21 = CStr(Copy21 + 2100){n}{t}{t}{t}{t}copiesstr21 = copiesstr21 + copystr21{n}{t}{t}Copy21 = Copy21 + 1{n}{t}while Copy22 <= max3:{n}{t}{t}if get_string(IACred.Code, Copy22) == '22':{n}{t}{t}{t}if get_bool(IACred.NonRefCr, Copy22) == True and get_bool(IACred.Spouse, Copy22) == True and get_string(IACred.Code, Copy22) == '22':{n}{t}{t}{t}{t}copystr22 = CStr(Copy22 + 2200){n}{t}{t}{t}{t}copiesstr22 = copiesstr22 + copystr22{n}{t}{t}Copy22 = Copy22 + 1{n}{t}while Copy23 <= max3:{n}{t}{t}if get_string(IACred.Code, Copy23) == '20':{n}{t}{t}{t}if get_bool(IACred.NonRefCr, Copy23) == True and get_bool(IACred.Spouse, Copy23) == True and get_string(IACred.Code, Copy23) == '20':{n}{t}{t}{t}{t}copystr23 = CStr(Copy23 + 2300){n}{t}{t}{t}{t}copiesstr23 = copiesstr23 + copystr23{n}{t}{t}Copy23 = Copy23 + 1{n}{t}copiesstr24 = ''{n}{t}Copy24 = 1{n}{t}max4 = GetAllCopies(IA8801SP){n}{t}while Copy24 <= max4:{n}{t}{t}if get_currency(IA8801SP.Print, Copy24) > 0:{n}{t}{t}{t}if get_currency(IA8801SP.Print, Copy24) > 0:{n}{t}{t}{t}{t}copystr24 = CStr(Copy24 + 2400){n}{t}{t}{t}{t}copiesstr24 = copiesstr24 + copystr24{n}{t}{t}Copy24 = Copy24 + 1{n}{t}return copiesstr + copiesstr2 + copiesstr3 + copiesstr4 + copiesstr5 + copiesstr7 + copiesstr12 + copiesstr13 + copiesstr16 + copiesstr14 + copiesstr15 + copiesstr17 + copiesstr18 + copiesstr19 + copiesstr20 + copiesstr6 + copiesstr8 + copiesstr9 + copiesstr21 + copiesstr22 + copiesstr23 + copiesstr24 + copiesstr10{n}{n}
def NonRefCr1_Calculation():{n}{t}return min_value(get_currency(IA148SP.AvailCr(0)), get_currency(IAF1040.BBal3)){n}{n}
def NonRefCr10_Calculation():{n}{t}if get_number(IA148SP.NonRefNbr) > 10:{n}{t}{t}return get_currency(IAWBP148SP.TotNonRefCr){n}{t}else:{n}{t}{t}return min_value(get_currency(IA148SP.AvailCr(9)), get_currency(IA148SP.NonRefTax10)){n}{n}
def NonRefCr2_Calculation():{n}{t}return min_value(get_currency(IA148SP.AvailCr(1)), get_currency(IA148SP.NonRefTax2)){n}{n}
def NonRefCr3_Calculation():{n}{t}return min_value(get_currency(IA148SP.AvailCr(2)), get_currency(IA148SP.NonRefTax3)){n}{n}
def NonRefCr4_Calculation():{n}{t}return min_value(get_currency(IA148SP.AvailCr(3)), get_currency(IA148SP.NonRefTax4)){n}{n}
def NonRefCr5_Calculation():{n}{t}return min_value(get_currency(IA148SP.AvailCr(4)), get_currency(IA148SP.NonRefTax5)){n}{n}
def NonRefCr6_Calculation():{n}{t}return min_value(get_currency(IA148SP.AvailCr(5)), get_currency(IA148SP.NonRefTax6)){n}{n}
def NonRefCr7_Calculation():{n}{t}return min_value(get_currency(IA148SP.AvailCr(6)), get_currency(IA148SP.NonRefTax7)){n}{n}
def NonRefCr8_Calculation():{n}{t}return min_value(get_currency(IA148SP.AvailCr(7)), get_currency(IA148SP.NonRefTax8)){n}{n}
def NonRefCr9_Calculation():{n}{t}return min_value(get_currency(IA148SP.AvailCr(8)), get_currency(IA148SP.NonRefTax9)){n}{n}
def NonRefNbr_Calculation():{n}{t}count2 = Integer(){n}{n}{t}Lim2 = Integer(){n}{n}{t}Total = Integer(){n}{n}{t}count3 = Integer(){n}{n}{t}Lim3 = Integer(){n}{n}{t}count = Integer(){n}{n}{t}Lim = Integer(){n}{n}{t}IACredit = String(){n}{t}Lim2 = GetAllCopies(IA147){n}{t}count2 = 1{n}{t}Total = 0{n}{t}while count2 <= Lim2:{n}{t}{t}if get_bool(IA147.Spouse, count2) == True and get_currency(IA147.FranchiseCr, count2) > 0:{n}{t}{t}{t}Total = Total + 1{n}{t}{t}else:{n}{t}{t}{t}Total = Total{n}{t}{t}count2 = count2 + 1{n}{t}Lim3 = GetAllCopies(IA134SP){n}{t}count3 = 1{n}{t}while count3 <= Lim3:{n}{t}{t}if get_currency(IA134SP.Credit, count3) > 0:{n}{t}{t}{t}Total = Total + 1{n}{t}{t}else:{n}{t}{t}{t}Total = Total{n}{t}{t}count3 = count3 + 1{n}{t}Lim = GetAllCopies(IACred){n}{t}count = 1{n}{t}while count <= Lim:{n}{t}{t}IACredit = get_string(IACred.Code, count){n}{t}{t}if get_bool(IACred.NonRefCr, count) == True and get_bool(IACred.Spouse, count) == True and  ( IACredit == '12' or IACredit == '14' or IACredit == '15' or IACredit == '25' or IACredit == '03' or IACredit == '17' or IACredit == '24' or IACredit == '21' or IACredit == '26' or IACredit == '06' or IACredit == '07' or IACredit == '27' or IACredit == '16' or IACredit == '10' or IACredit == '13' or IACredit == '08' or IACredit == '23' or IACredit == '22' or IACredit == '20' or IACredit == '28' ) :{n}{t}{t}{t}Total = Total + 1{n}{t}{t}else:{n}{t}{t}{t}Total = Total{n}{t}{t}count = count + 1{n}{t}return Total + get_bool(IA8801SP.Print){n}{n}
def NonRefTax10_Calculation():{n}{t}return max_value(0, get_currency(IA148SP.NonRefTax9) - get_currency(IA148SP.NonRefCr9)){n}{n}
def NonRefTax2_Calculation():{n}{t}return max_value(0, get_currency(IAF1040.BBal3) - get_currency(IA148SP.NonRefCr1)){n}{n}
def NonRefTax3_Calculation():{n}{t}return max_value(0, get_currency(IA148SP.NonRefTax2) - get_currency(IA148SP.NonRefCr2)){n}{n}
def NonRefTax4_Calculation():{n}{t}return max_value(0, get_currency(IA148SP.NonRefTax3) - get_currency(IA148SP.NonRefCr3)){n}{n}
def NonRefTax5_Calculation():{n}{t}return max_value(0, get_currency(IA148SP.NonRefTax4) - get_currency(IA148SP.NonRefCr4)){n}{n}
def NonRefTax6_Calculation():{n}{t}return max_value(0, get_currency(IA148SP.NonRefTax5) - get_currency(IA148SP.NonRefCr5)){n}{n}
def NonRefTax7_Calculation():{n}{t}return max_value(0, get_currency(IA148SP.NonRefTax6) - get_currency(IA148SP.NonRefCr6)){n}{n}
def NonRefTax8_Calculation():{n}{t}return max_value(0, get_currency(IA148SP.NonRefTax7) - get_currency(IA148SP.NonRefCr7)){n}{n}
def NonRefTax9_Calculation():{n}{t}return max_value(0, get_currency(IA148SP.NonRefTax8) - get_currency(IA148SP.NonRefCr8)){n}{n}
def NonRefTrig_Calculation(Index):{n}{t}if get_string(IA148SP.NonRefCode(Index)) == '04' or get_string(IA148SP.NonRefCode(Index)) == '11' or get_string(IA148SP.NonRefCode(Index)) == '09':{n}{t}{t}return 0{n}{t}elif get_currency(IA148SP.AvailCr(Index)) > 0:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def Print_Calculation():{n}{t}count = Integer(){n}{n}{t}SubTot = Currency(){n}{t}count = 0{n}{t}SubTot = 0{n}{t}while count < 10:{n}{t}{t}SubTot = SubTot + get_currency(IA148SP.CYCarry(count)){n}{t}{t}count = count + 1{n}{t}if get_bool(IAF1040.CombMFS) == False:{n}{t}{t}return 0{n}{t}elif get_currency(IA148SP.TotNonRefCr) > 0 or get_currency(IA148SP.TotRefCr) > 0:{n}{t}{t}return 1{n}{t}elif SubTot > 0:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def PTEEIN_Calculation(Index):{n}{t}PTE = Integer(){n}{n}{t}RefPTE = Integer(){n}{n}{t}Stuff = Integer(){n}{n}{t}Stuff2 = Integer(){n}{t}PTE = get_number(IA148BUMPSP.TotPTE){n}{t}RefPTE = get_number(IA148BUMPSP.TotRefPTE){n}{t}if Index == 5 and get_number(IA148SP.TotPTE) > 6:{n}{t}{t}return ''{n}{t}elif PTE > Index:{n}{t}{t}Stuff2 = get_number(IA148BUMPSP.PTEIndexNbr(Index)){n}{t}{t}return get_string(IA148BUMPSP.PTEEIN(Stuff2)){n}{t}elif PTE + RefPTE > Index:{n}{t}{t}Stuff = ( Index )  - PTE{n}{t}{t}Stuff2 = get_number(IA148BUMPSP.RefPTEIndexNbr(Stuff)){n}{t}{t}return get_string(IA148BUMPSP.RefPTEEIN(Stuff2)){n}{t}else:{n}{t}{t}return ''{n}{n}
def PTELine_Calculation(Index):{n}{t}PTE = Integer(){n}{n}{t}RefPTE = Integer(){n}{n}{t}Stuff = Integer(){n}{n}{t}Stuff2 = Integer(){n}{t}PTE = get_number(IA148BUMPSP.TotPTE){n}{t}RefPTE = get_number(IA148BUMPSP.TotRefPTE){n}{t}if Index == 5 and get_number(IA148SP.TotPTE) > 6:{n}{t}{t}return ''{n}{t}elif PTE > Index:{n}{t}{t}Stuff2 = get_number(IA148BUMPSP.PTEIndexNbr(Index)){n}{t}{t}return get_string(IA148BUMPSP.PTELine(Stuff2)){n}{t}elif PTE + RefPTE > Index:{n}{t}{t}Stuff = ( Index )  - PTE{n}{t}{t}Stuff2 = get_number(IA148BUMPSP.RefPTEIndexNbr(Stuff)){n}{t}{t}return get_string(IA148BUMPSP.RefPTELine(Stuff2)){n}{t}else:{n}{t}{t}return ''{n}{n}
def PTEName_Calculation(Index):{n}{t}PTE = Integer(){n}{n}{t}RefPTE = Integer(){n}{n}{t}Stuff = Integer(){n}{n}{t}Stuff2 = Integer(){n}{t}PTE = get_number(IA148BUMPSP.TotPTE){n}{t}RefPTE = get_number(IA148BUMPSP.TotRefPTE){n}{t}if Index == 5 and get_number(IA148SP.TotPTE) > 6:{n}{t}{t}return 'See Statement Attached'{n}{t}elif PTE > Index:{n}{t}{t}Stuff2 = get_number(IA148BUMPSP.PTEIndexNbr(Index)){n}{t}{t}return get_string(IA148BUMPSP.PTEName(Stuff2)){n}{t}elif PTE + RefPTE > Index:{n}{t}{t}Stuff = ( Index )  - PTE{n}{t}{t}Stuff2 = get_number(IA148BUMPSP.RefPTEIndexNbr(Stuff)){n}{t}{t}return get_string(IA148BUMPSP.RefPTEName(Stuff2)){n}{t}else:{n}{t}{t}return ''{n}{n}
def PYCarry_Calculation(Index):{n}{t}strindex = Long(){n}{n}{t}copystr = String(){n}{n}{t}Copy = Long(){n}{t}strindex = ( ( Index )  * 4 )  + 1{n}{t}copystr = trim(Mid(get_string(IA148SP.NonRefCopiesStr), strindex, 4)){n}{t}if Index == 9 and get_number(IA148SP.NonRefNbr) > 10:{n}{t}{t}return 0{n}{t}elif copystr != '':{n}{t}{t}Copy = CLng(copystr){n}{t}{t}if ( Copy > 100 )  and  ( Copy <= 200 ) :{n}{t}{t}{t}return 0{n}{t}{t}elif  ( Copy > 200 )  and  ( Copy <= 300 ) :{n}{t}{t}{t}return 0{n}{t}{t}elif  ( Copy > 300 )  and  ( Copy <= 400 ) :{n}{t}{t}{t}return get_currency(IACred.PYCarry, ( Copy )  - 300){n}{t}{t}elif  ( Copy > 400 )  and  ( Copy <= 500 ) :{n}{t}{t}{t}return get_currency(IACred.PYCarry, ( Copy )  - 400){n}{t}{t}elif  ( Copy > 500 )  and  ( Copy <= 600 ) :{n}{t}{t}{t}return get_currency(IACred.PYCarry, ( Copy )  - 500){n}{t}{t}elif  ( Copy > 600 )  and  ( Copy <= 700 ) :{n}{t}{t}{t}return get_currency(IACred.PYCarry, ( Copy )  - 600){n}{t}{t}elif  ( Copy > 700 )  and  ( Copy <= 800 ) :{n}{t}{t}{t}return get_currency(IACred.PYCarry, ( Copy )  - 700){n}{t}{t}elif  ( Copy > 800 )  and  ( Copy <= 900 ) :{n}{t}{t}{t}return get_currency(IACred.PYCarry, ( Copy )  - 800){n}{t}{t}elif  ( Copy > 900 )  and  ( Copy <= 1000 ) :{n}{t}{t}{t}return get_currency(IACred.PYCarry, ( Copy )  - 900){n}{t}{t}elif  ( Copy > 1000 )  and  ( Copy <= 1100 ) :{n}{t}{t}{t}return get_currency(IACred.PYCarry, ( Copy )  - 1000){n}{t}{t}elif  ( Copy > 1100 )  and  ( Copy <= 1200 ) :{n}{t}{t}{t}return get_currency(IACred.PYCarry, ( Copy )  - 1100){n}{t}{t}elif  ( Copy > 1200 )  and  ( Copy <= 1300 ) :{n}{t}{t}{t}return get_currency(IACred.PYCarry, ( Copy )  - 1200){n}{t}{t}elif  ( Copy > 1300 )  and  ( Copy <= 1400 ) :{n}{t}{t}{t}return get_currency(IACred.PYCarry, ( Copy )  - 1300){n}{t}{t}elif  ( Copy > 1400 )  and  ( Copy <= 1500 ) :{n}{t}{t}{t}return get_currency(IACred.PYCarry, ( Copy )  - 1400){n}{t}{t}elif  ( Copy > 1500 )  and  ( Copy <= 1600 ) :{n}{t}{t}{t}return get_currency(IACred.PYCarry, ( Copy )  - 1500){n}{t}{t}elif  ( Copy > 1600 )  and  ( Copy <= 1700 ) :{n}{t}{t}{t}return get_currency(IACred.PYCarry, ( Copy )  - 1600){n}{t}{t}elif  ( Copy > 1700 )  and  ( Copy <= 1800 ) :{n}{t}{t}{t}return get_currency(IACred.PYCarry, ( Copy )  - 1700){n}{t}{t}elif  ( Copy > 1800 )  and  ( Copy <= 1900 ) :{n}{t}{t}{t}return get_currency(IACred.PYCarry, ( Copy )  - 1800){n}{t}{t}elif  ( Copy > 1900 )  and  ( Copy <= 2000 ) :{n}{t}{t}{t}return get_currency(IACred.PYCarry, ( Copy )  - 1900){n}{t}{t}elif  ( Copy > 2000 )  and  ( Copy <= 2100 ) :{n}{t}{t}{t}return get_currency(IACred.PYCarry, ( Copy )  - 2000){n}{t}{t}elif  ( Copy > 2100 )  and  ( Copy <= 2200 ) :{n}{t}{t}{t}return get_currency(IACred.PYCarry, ( Copy )  - 2100){n}{t}{t}elif  ( Copy > 2200 )  and  ( Copy <= 2300 ) :{n}{t}{t}{t}return get_currency(IACred.PYCarry, ( Copy )  - 2200){n}{t}{t}elif  ( Copy > 2300 )  and  ( Copy <= 2400 ) :{n}{t}{t}{t}return get_currency(IACred.PYCarry, ( Copy )  - 2300){n}{t}{t}elif  ( Copy > 2400 )  and  ( Copy <= 2500 ) :{n}{t}{t}{t}return get_currency(IA8801SP.PYCarryforward){n}{t}return 0{n}{n}
def RefCert_Calculation(Index):{n}{t}strindex = Long(){n}{n}{t}copystr = String(){n}{n}{t}Copy = Long(){n}{t}strindex = ( ( Index )  * 4 )  + 1{n}{t}copystr = trim(Mid(get_string(IA148SP.RefCopiesStr), strindex, 4)){n}{t}if Index == 6 and get_number(IA148SP.RefNbr) > 7:{n}{t}{t}return 'See Statement Attached'{n}{t}elif copystr != '':{n}{t}{t}Copy = CLng(copystr){n}{t}{t}if ( Copy > 100 )  and  ( Copy <= 200 ) :{n}{t}{t}{t}return ''{n}{t}{t}elif  ( Copy > 200 )  and  ( Copy <= 300 ) :{n}{t}{t}{t}return get_string(IACred.CertNumber, ( Copy )  - 200){n}{t}{t}elif  ( Copy > 300 )  and  ( Copy <= 400 ) :{n}{t}{t}{t}return ''{n}{t}{t}elif  ( Copy > 400 )  and  ( Copy <= 500 ) :{n}{t}{t}{t}return get_string(IACred.CertNumber, ( Copy )  - 400){n}{t}{t}elif  ( Copy > 500 )  and  ( Copy <= 600 ) :{n}{t}{t}{t}return ''{n}{t}{t}elif  ( Copy > 600 )  and  ( Copy <= 700 ) :{n}{t}{t}{t}return ''{n}{t}{t}elif  ( Copy > 700 )  and  ( Copy <= 800 ) :{n}{t}{t}{t}return get_string(IA128.SuppCertNbr, ( Copy )  - 700){n}{t}{t}elif  ( Copy > 800 )  and  ( Copy <= 900 ) :{n}{t}{t}{t}return get_string(IA128S.SuppCertNbr, ( Copy )  - 800){n}{t}{t}elif  ( Copy > 900 )  and  ( Copy <= 1000 ) :{n}{t}{t}{t}return ''{n}{t}{t}elif  ( Copy > 1000 )  and  ( Copy <= 1100 ) :{n}{t}{t}{t}return ''{n}{t}{t}elif  ( Copy > 1100 )  and  ( Copy <= 1200 ) :{n}{t}{t}{t}return ''{n}{t}{t}elif  ( Copy > 1200 )  and  ( Copy <= 1300 ) :{n}{t}{t}{t}return get_string(IACred.CertNumber, ( Copy )  - 1200){n}{t}{t}elif  ( Copy > 1300 )  and  ( Copy <= 1400 ) :{n}{t}{t}{t}return get_string(IACred.CertNumber, ( Copy )  - 1300){n}{t}{t}elif  ( Copy > 1400 )  and  ( Copy <= 1500 ) :{n}{t}{t}{t}return get_string(IACred.CertNumber, ( Copy )  - 1400){n}{t}return ''{n}{n}
def RefCode_Calculation(Index):{n}{t}strindex = Long(){n}{n}{t}copystr = String(){n}{n}{t}Copy = Long(){n}{t}strindex = ( ( Index )  * 4 )  + 1{n}{t}copystr = trim(Mid(get_string(IA148SP.RefCopiesStr), strindex, 4)){n}{t}if Index == 6 and get_number(IA148SP.RefNbr) > 7:{n}{t}{t}return ''{n}{t}elif copystr != '':{n}{t}{t}Copy = CLng(copystr){n}{t}{t}if ( Copy > 100 )  and  ( Copy <= 200 ) :{n}{t}{t}{t}return '52'{n}{t}{t}elif  ( Copy > 200 )  and  ( Copy <= 300 ) :{n}{t}{t}{t}return get_string(IACred.Code, ( Copy )  - 200){n}{t}{t}elif  ( Copy > 300 )  and  ( Copy <= 400 ) :{n}{t}{t}{t}return '55'{n}{t}{t}elif  ( Copy > 400 )  and  ( Copy <= 500 ) :{n}{t}{t}{t}return get_string(IACred.Code, ( Copy )  - 400){n}{t}{t}elif  ( Copy > 500 )  and  ( Copy <= 600 ) :{n}{t}{t}{t}return '58'{n}{t}{t}elif  ( Copy > 600 )  and  ( Copy <= 700 ) :{n}{t}{t}{t}return '58'{n}{t}{t}elif  ( Copy > 700 )  and  ( Copy <= 800 ) :{n}{t}{t}{t}return '59'{n}{t}{t}elif  ( Copy > 800 )  and  ( Copy <= 900 ) :{n}{t}{t}{t}return '59'{n}{t}{t}elif  ( Copy > 900 )  and  ( Copy <= 1000 ) :{n}{t}{t}{t}return '64'{n}{t}{t}elif  ( Copy > 1000 )  and  ( Copy <= 1100 ) :{n}{t}{t}{t}return '65'{n}{t}{t}elif  ( Copy > 1100 )  and  ( Copy <= 1200 ) :{n}{t}{t}{t}return '66'{n}{t}{t}elif  ( Copy > 1200 )  and  ( Copy <= 1300 ) :{n}{t}{t}{t}return get_string(IACred.Code, ( Copy )  - 1200){n}{t}{t}elif  ( Copy > 1300 )  and  ( Copy <= 1400 ) :{n}{t}{t}{t}return get_string(IACred.Code, ( Copy )  - 1300){n}{t}{t}elif  ( Copy > 1400 )  and  ( Copy <= 1500 ) :{n}{t}{t}{t}return get_string(IACred.Code, ( Copy )  - 1400){n}{t}return ''{n}{n}
def RefCopiesStr_Calculation():{n}{t}Copy = Long(){n}{n}{t}Copy2 = Long(){n}{n}{t}Copy3 = Long(){n}{n}{t}Copy4 = Long(){n}{n}{t}Copy5 = Long(){n}{n}{t}Copy6 = Long(){n}{n}{t}Copy7 = Long(){n}{n}{t}Copy8 = Long(){n}{n}{t}Copy9 = Long(){n}{n}{t}Copy10 = Long(){n}{n}{t}Copy11 = Long(){n}{n}{t}Copy12 = Long(){n}{n}{t}Copy13 = Long(){n}{n}{t}Copy14 = Long(){n}{n}{t}max = Long(){n}{n}{t}max2 = Long(){n}{n}{t}max3 = Long(){n}{n}{t}max5 = Long(){n}{n}{t}max6 = Long(){n}{n}{t}max9 = Long(){n}{n}{t}max10 = Long(){n}{n}{t}max11 = Long(){n}{n}{t}max12 = Long(){n}{n}{t}max13 = Long(){n}{n}{t}max14 = Long(){n}{n}{t}copystr = String(){n}{n}{t}copystr2 = String(){n}{n}{t}copystr3 = String(){n}{n}{t}copystr4 = String(){n}{n}{t}copystr5 = String(){n}{n}{t}copystr6 = String(){n}{n}{t}copystr7 = String(){n}{n}{t}copystr8 = String(){n}{n}{t}copystr9 = String(){n}{n}{t}copystr10 = String(){n}{n}{t}copystr11 = String(){n}{n}{t}copystr12 = String(){n}{n}{t}copystr13 = String(){n}{n}{t}copystr14 = String(){n}{n}{t}copiesstr = String(){n}{n}{t}copiesstr2 = String(){n}{n}{t}copiesstr3 = String(){n}{n}{t}copiesstr4 = String(){n}{n}{t}copiesstr5 = String(){n}{n}{t}copiesstr6 = String(){n}{n}{t}copiesstr7 = String(){n}{n}{t}copiesstr8 = String(){n}{n}{t}copiesstr9 = String(){n}{n}{t}copiesstr10 = String(){n}{n}{t}copiesstr11 = String(){n}{n}{t}copiesstr12 = String(){n}{n}{t}copiesstr13 = String(){n}{n}{t}copiesstr14 = String(){n}{t}copiesstr = ''{n}{t}Copy = 1{n}{t}max = GetAllCopies(IA8864){n}{t}while Copy <= max:{n}{t}{t}if get_currency(IA8864.BiodieselCr, Copy) > 0:{n}{t}{t}{t}if get_currency(IA8864.BiodieselCr, Copy) > 0 and get_bool(IA8864.Spouse, Copy) == True:{n}{t}{t}{t}{t}copystr = CStr(Copy + 100){n}{t}{t}{t}{t}while Len(copystr) < 4:{n}{t}{t}{t}{t}{t}copystr = copystr + ' '{n}{t}{t}{t}{t}copiesstr = copiesstr + copystr{n}{t}{t}Copy = Copy + 1{n}{t}copiesstr2 = ''{n}{t}Copy2 = 1{n}{t}max2 = GetAllCopies(IACred){n}{t}while Copy2 <= max2:{n}{t}{t}if get_string(IACred.Code, Copy2) == '53':{n}{t}{t}{t}if get_bool(IACred.RefCr, Copy2) == True and get_bool(IACred.Spouse, Copy2) == True and get_string(IACred.Code, Copy2) == '53':{n}{t}{t}{t}{t}copystr2 = CStr(Copy2 + 200) + ' '{n}{t}{t}{t}{t}copiesstr2 = copiesstr2 + copystr2{n}{t}{t}Copy2 = Copy2 + 1{n}{t}copiesstr3 = ''{n}{t}Copy3 = 1{n}{t}max3 = GetAllCopies(IA135){n}{t}while Copy3 <= max3:{n}{t}{t}if get_currency(IA135.E85Credit, Copy3) > 0:{n}{t}{t}{t}if get_bool(IA135.Spouse, Copy3) == True and get_currency(IA135.E85Credit, Copy3) > 0:{n}{t}{t}{t}{t}copystr3 = CStr(Copy3 + 300) + ' '{n}{t}{t}{t}{t}copiesstr3 = copiesstr3 + copystr3{n}{t}{t}Copy3 = Copy3 + 1{n}{t}copiesstr4 = ''{n}{t}Copy4 = 1{n}{t}while Copy4 <= max2:{n}{t}{t}if get_string(IACred.Code, Copy4) == '56':{n}{t}{t}{t}if get_bool(IACred.RefCr, Copy4) == True and get_bool(IACred.Spouse, Copy4) == True and get_string(IACred.Code, Copy4) == '56':{n}{t}{t}{t}{t}copystr4 = CStr(Copy4 + 400) + ' '{n}{t}{t}{t}{t}copiesstr4 = copiesstr4 + copystr4{n}{t}{t}Copy4 = Copy4 + 1{n}{t}copiesstr5 = ''{n}{t}Copy5 = 1{n}{t}max5 = GetAllCopies(IA128){n}{t}while Copy5 <= max5:{n}{t}{t}if get_currency(IA128.TotResearchCr, Copy5) > 0:{n}{t}{t}{t}if get_bool(IA128.Spouse, Copy5) == True and get_currency(IA128.TotResearchCr, Copy5) > 0:{n}{t}{t}{t}{t}copystr5 = CStr(Copy5 + 500) + ' '{n}{t}{t}{t}{t}copiesstr5 = copiesstr5 + copystr5{n}{t}{t}Copy5 = Copy5 + 1{n}{t}copiesstr6 = ''{n}{t}Copy6 = 1{n}{t}max6 = GetAllCopies(IA128S){n}{t}while Copy6 <= max6:{n}{t}{t}if get_currency(IA128S.TotResearchCr, Copy6) > 0:{n}{t}{t}{t}if get_bool(IA128S.Spouse, Copy6) == True and get_currency(IA128S.TotResearchCr, Copy6) > 0:{n}{t}{t}{t}{t}copystr6 = CStr(Copy6 + 600) + ' '{n}{t}{t}{t}{t}copiesstr6 = copiesstr6 + copystr6{n}{t}{t}Copy6 = Copy6 + 1{n}{t}copiesstr7 = ''{n}{t}Copy7 = 1{n}{t}while Copy7 <= max5:{n}{t}{t}if get_currency(IA128.TotSuppResearchCr, Copy7) > 0:{n}{t}{t}{t}if get_bool(IA128.Spouse, Copy7) == True and get_currency(IA128.TotSuppResearchCr, Copy7) > 0:{n}{t}{t}{t}{t}copystr7 = CStr(Copy7 + 700) + ' '{n}{t}{t}{t}{t}copiesstr7 = copiesstr7 + copystr7{n}{t}{t}Copy7 = Copy7 + 1{n}{t}copiesstr8 = ''{n}{t}Copy8 = 1{n}{t}while Copy8 <= max6:{n}{t}{t}if get_currency(IA128S.TotSuppResearchCr, Copy8) > 0:{n}{t}{t}{t}if get_bool(IA128S.Spouse, Copy8) == True and get_currency(IA128S.TotSuppResearchCr, Copy8) > 0:{n}{t}{t}{t}{t}copystr8 = CStr(Copy8 + 800) + ' '{n}{t}{t}{t}{t}copiesstr8 = copiesstr8 + copystr8{n}{t}{t}Copy8 = Copy8 + 1{n}{t}copiesstr9 = ''{n}{t}Copy9 = 1{n}{t}max9 = GetAllCopies(IA137){n}{t}## VB2PY (CheckDirective) VB directive took path 1 on INDCALC{n}{t}while Copy9 <= max9:{n}{t}{t}if get_currency(IA137.EthPromoteCr, Copy9) > 0:{n}{t}{t}{t}if get_bool(IA137.Spouse, Copy9) == True and get_currency(IA137.EthPromoteCr, Copy9) > 0:{n}{t}{t}{t}{t}copystr9 = CStr(Copy9 + 900) + ' '{n}{t}{t}{t}{t}copiesstr9 = copiesstr9 + copystr9{n}{t}{t}Copy9 = Copy9 + 1{n}{t}copiesstr10 = ''{n}{t}Copy10 = 1{n}{t}max10 = GetAllCopies(IA138){n}{t}while Copy10 <= max10:{n}{t}{t}if get_currency(IA138.E15Credit, Copy10) > 0:{n}{t}{t}{t}if get_bool(IA138.Spouse, Copy10) == True and get_currency(IA138.E15Credit, Copy10) > 0:{n}{t}{t}{t}{t}copystr10 = CStr(Copy10 + 1000){n}{t}{t}{t}{t}copiesstr10 = copiesstr10 + copystr10{n}{t}{t}Copy10 = Copy10 + 1{n}{t}copiesstr11 = ''{n}{t}Copy11 = 1{n}{t}max11 = GetAllCopies(IA177){n}{t}while Copy11 <= max11:{n}{t}{t}if get_currency(IA177.CYAdoptionTaxCr, Copy11) > 0:{n}{t}{t}{t}if get_bool(IA177.Spouse, Copy11) == True and get_currency(IA177.CYAdoptionTaxCr, Copy11) > 0:{n}{t}{t}{t}{t}copystr11 = CStr(Copy11 + 1100){n}{t}{t}{t}{t}copiesstr11 = copiesstr11 + copystr11{n}{t}{t}Copy11 = Copy11 + 1{n}{t}copiesstr12 = ''{n}{t}Copy12 = 1{n}{t}max12 = GetAllCopies(IACred){n}{t}while Copy12 <= max12:{n}{t}{t}if get_string(IACred.Code, Copy12) == '67':{n}{t}{t}{t}if get_bool(IACred.RefCr, Copy12) == True and get_bool(IACred.Spouse, Copy12) == True and get_string(IACred.Code, Copy12) == '67':{n}{t}{t}{t}{t}copystr12 = CStr(Copy12 + 1200){n}{t}{t}{t}{t}copiesstr12 = copiesstr12 + copystr12{n}{t}{t}Copy12 = Copy12 + 1{n}{t}copiesstr13 = ''{n}{t}Copy13 = 1{n}{t}max13 = GetAllCopies(IACred){n}{t}while Copy13 <= max13:{n}{t}{t}if get_string(IACred.Code, Copy13) == '68':{n}{t}{t}{t}if get_bool(IACred.RefCr, Copy13) == True and get_bool(IACred.Spouse, Copy13) == True and get_string(IACred.Code, Copy13) == '68':{n}{t}{t}{t}{t}copystr13 = CStr(Copy13 + 1300){n}{t}{t}{t}{t}copiesstr13 = copiesstr13 + copystr13{n}{t}{t}Copy13 = Copy13 + 1{n}{t}copiesstr14 = ''{n}{t}Copy14 = 1{n}{t}max14 = GetAllCopies(IACred){n}{t}while Copy14 <= max14:{n}{t}{t}if get_string(IACred.Code, Copy14) == '69':{n}{t}{t}{t}if get_bool(IACred.RefCr, Copy14) == True and get_bool(IACred.Spouse, Copy14) == True and get_string(IACred.Code, Copy14) == '69':{n}{t}{t}{t}{t}copystr14 = CStr(Copy14 + 1400){n}{t}{t}{t}{t}copiesstr14 = copiesstr14 + copystr14{n}{t}{t}Copy14 = Copy14 + 1{n}{t}return copiesstr + copiesstr2 + copiesstr3 + copiesstr4 + copiesstr5 + copiesstr6 + copiesstr7 + copiesstr8 + copiesstr9 + copiesstr10 + copiesstr11 + copiesstr12 + copiesstr13 + copiesstr14{n}{n}
def RefCr_Calculation(Index):{n}{t}strindex = Long(){n}{n}{t}copystr = String(){n}{n}{t}Copy = Long(){n}{t}strindex = ( ( Index )  * 4 )  + 1{n}{t}copystr = trim(Mid(get_string(IA148SP.RefCopiesStr), strindex, 4)){n}{t}if Index == 6 and get_number(IA148SP.RefNbr) > 7:{n}{t}{t}return get_currency(IAWBP148REFSP.TotRefCr1) + get_currency(IAWBP148REFSP.TotRefCr2){n}{t}elif copystr != '':{n}{t}{t}Copy = CLng(copystr){n}{t}{t}if ( Copy > 100 )  and  ( Copy <= 200 ) :{n}{t}{t}{t}return get_currency(IA8864.BiodieselCr, ( Copy )  - 100){n}{t}{t}elif  ( Copy > 200 )  and  ( Copy <= 300 ) :{n}{t}{t}{t}return get_currency(IACred.CYCredit, ( Copy )  - 200){n}{t}{t}elif  ( Copy > 300 )  and  ( Copy <= 400 ) :{n}{t}{t}{t}return get_currency(IA135.E85Credit, ( Copy )  - 300){n}{t}{t}elif  ( Copy > 400 )  and  ( Copy <= 500 ) :{n}{t}{t}{t}return get_currency(IACred.CYCredit, ( Copy )  - 400){n}{t}{t}elif  ( Copy > 500 )  and  ( Copy <= 600 ) :{n}{t}{t}{t}return get_currency(IA128.TotResearchCr, ( Copy )  - 500){n}{t}{t}elif  ( Copy > 600 )  and  ( Copy <= 700 ) :{n}{t}{t}{t}return get_currency(IA128S.TotResearchCr, ( Copy )  - 600){n}{t}{t}elif  ( Copy > 700 )  and  ( Copy <= 800 ) :{n}{t}{t}{t}return get_currency(IA128.TotSuppResearchCr, ( Copy )  - 700){n}{t}{t}elif  ( Copy > 800 )  and  ( Copy <= 900 ) :{n}{t}{t}{t}return get_currency(IA128S.TotSuppResearchCr, ( Copy )  - 800){n}{t}{t}elif  ( Copy > 900 )  and  ( Copy <= 1000 ) :{n}{t}{t}{t}return get_currency(IA137.EthPromoteCr, ( Copy )  - 900){n}{t}{t}elif  ( Copy > 1000 )  and  ( Copy <= 1100 ) :{n}{t}{t}{t}return get_currency(IA138.E15Credit, ( Copy )  - 1000){n}{t}{t}elif  ( Copy > 1100 )  and  ( Copy <= 1200 ) :{n}{t}{t}{t}return get_currency(IA177.CYAdoptionTaxCr, ( Copy )  - 1100){n}{t}{t}elif  ( Copy > 1200 )  and  ( Copy <= 1300 ) :{n}{t}{t}{t}return get_currency(IACred.CYCredit, ( Copy )  - 1200){n}{t}{t}elif  ( Copy > 1300 )  and  ( Copy <= 1400 ) :{n}{t}{t}{t}return get_currency(IACred.CYCredit, ( Copy )  - 1300){n}{t}{t}elif  ( Copy > 1400 )  and  ( Copy <= 1500 ) :{n}{t}{t}{t}return get_currency(IACred.CYCredit, ( Copy )  - 1400){n}{t}return 0{n}{n}
def RefNbr_Calculation():{n}{t}count = Integer(){n}{n}{t}Lim = Integer(){n}{n}{t}Total = Integer(){n}{n}{t}count2 = Integer(){n}{n}{t}Lim2 = Integer(){n}{n}{t}IACredit = String(){n}{n}{t}count3 = Integer(){n}{n}{t}Lim3 = Integer(){n}{n}{t}count4 = Integer(){n}{n}{t}Lim4 = Integer(){n}{n}{t}count5 = Integer(){n}{n}{t}Lim5 = Integer(){n}{n}{t}count6 = Integer(){n}{n}{t}Lim6 = Integer(){n}{n}{t}count7 = Integer(){n}{n}{t}Lim7 = Integer(){n}{n}{t}count8 = Integer(){n}{n}{t}Lim8 = Integer(){n}{n}{t}count9 = Integer(){n}{n}{t}Lim9 = Integer(){n}{n}{t}count10 = Integer(){n}{n}{t}Lim10 = Integer(){n}{t}Lim = GetAllCopies(IA8864){n}{t}count = 1{n}{t}Total = 0{n}{t}while count <= Lim:{n}{t}{t}if get_bool(IA8864.Spouse, count) == True and get_currency(IA8864.BiodieselCr, count) > 0:{n}{t}{t}{t}Total = Total + 1{n}{t}{t}else:{n}{t}{t}{t}Total = Total{n}{t}{t}count = count + 1{n}{t}Lim2 = GetAllCopies(IACred){n}{t}count2 = 1{n}{t}while count2 <= Lim2:{n}{t}{t}IACredit = get_string(IACred.Code, count2){n}{t}{t}if get_bool(IACred.RefCr, count2) == True and get_bool(IACred.Spouse, count2) == True and  ( IACredit == '53' or IACredit == '56' or IACredit == '67' or IACredit == '68' or IACredit == '69' ) :{n}{t}{t}{t}Total = Total + 1{n}{t}{t}else:{n}{t}{t}{t}Total = Total{n}{t}{t}count2 = count2 + 1{n}{t}Lim3 = GetAllCopies(IA135){n}{t}count3 = 1{n}{t}while count3 <= Lim3:{n}{t}{t}if get_bool(IA135.Spouse, count3) == True and get_currency(IA135.E85Credit, count3) > 0:{n}{t}{t}{t}Total = Total + 1{n}{t}{t}else:{n}{t}{t}{t}Total = Total{n}{t}{t}count3 = count3 + 1{n}{t}Lim4 = GetAllCopies(IA128){n}{t}count4 = 1{n}{t}while count4 <= Lim4:{n}{t}{t}if get_bool(IA128.Spouse, count4) == True and get_currency(IA128.TotResearchCr, count4) > 0:{n}{t}{t}{t}Total = Total + 1{n}{t}{t}else:{n}{t}{t}{t}Total = Total{n}{t}{t}count4 = count4 + 1{n}{t}Lim5 = GetAllCopies(IA128){n}{t}count5 = 1{n}{t}while count5 <= Lim5:{n}{t}{t}if get_bool(IA128.Spouse, count5) == True and get_currency(IA128.TotSuppResearchCr, count5) > 0:{n}{t}{t}{t}Total = Total + 1{n}{t}{t}else:{n}{t}{t}{t}Total = Total{n}{t}{t}count5 = count5 + 1{n}{t}Lim6 = GetAllCopies(IA128S){n}{t}count6 = 1{n}{t}while count6 <= Lim6:{n}{t}{t}if get_bool(IA128S.Spouse, count6) == True and get_currency(IA128S.TotResearchCr, count6) > 0:{n}{t}{t}{t}Total = Total + 1{n}{t}{t}else:{n}{t}{t}{t}Total = Total{n}{t}{t}count6 = count6 + 1{n}{t}Lim7 = GetAllCopies(IA128S){n}{t}count7 = 1{n}{t}while count7 <= Lim7:{n}{t}{t}if get_bool(IA128S.Spouse, count7) == True and get_currency(IA128S.TotSuppResearchCr, count7) > 0:{n}{t}{t}{t}Total = Total + 1{n}{t}{t}else:{n}{t}{t}{t}Total = Total{n}{t}{t}count7 = count7 + 1{n}{t}Lim8 = GetAllCopies(IA137){n}{t}count8 = 1{n}{t}while count8 <= Lim8:{n}{t}{t}## VB2PY (CheckDirective) VB directive took path 1 on INDCALC{n}{t}{t}if get_bool(IA137.Spouse, count8) == True and get_currency(IA137.EthPromoteCr, count8) > 0:{n}{t}{t}{t}Total = Total + 1{n}{t}{t}else:{n}{t}{t}{t}Total = Total{n}{t}{t}count8 = count8 + 1{n}{t}Lim9 = GetAllCopies(IA138){n}{t}count9 = 1{n}{t}while count9 <= Lim9:{n}{t}{t}if get_bool(IA138.Spouse, count9) == True and get_currency(IA138.E15Credit, count9) > 0:{n}{t}{t}{t}Total = Total + 1{n}{t}{t}else:{n}{t}{t}{t}Total = Total{n}{t}{t}count9 = count9 + 1{n}{t}Lim10 = GetAllCopies(IA177){n}{t}count10 = 1{n}{t}while count10 <= Lim10:{n}{t}{t}if get_bool(IA177.Spouse, count10) == True and get_currency(IA177.CYAdoptionTaxCr, count10) > 0:{n}{t}{t}{t}Total = Total + 1{n}{t}{t}else:{n}{t}{t}{t}Total = Total{n}{t}{t}count10 = count10 + 1{n}{t}return Total{n}{n}
def RefTrig_Calculation(Index):{n}{t}if get_string(IA148SP.RefCode(Index)) == '64' or get_string(IA148SP.RefCode(Index)) == '58' or get_string(IA148SP.RefCode(Index)) == '55' or get_string(IA148SP.RefCode(Index)) == '52' or get_string(IA148SP.RefCode(Index)) == '59' or get_string(IA148SP.RefCode(Index)) == '65' or get_string(IA148SP.RefCode(Index)) == '66':{n}{t}{t}return 0{n}{t}elif get_currency(IA148SP.RefCr(Index)) > 0:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def SSN_Calculation():{n}{t}return get_string(IAF1040.SpouseSSN){n}{n}
def TotCode64_Calculation():{n}{t}count = Integer(){n}{n}{t}Lim = Integer(){n}{n}{t}Total = Currency(){n}{t}Lim = GetAllCopies(IA137){n}{t}count = 1{n}{t}Total = 0{n}{t}while count <= Lim:{n}{t}{t}if get_bool(IA137.Spouse, count) == True:{n}{t}{t}{t}Total = Total + get_currency(IA137.TotEthSoldCr, count){n}{t}{t}else:{n}{t}{t}{t}Total = Total{n}{t}{t}count = count + 1{n}{t}return Total{n}{n}
def TotNonRefCr_Calculation():{n}{t}if get_bool(IAF1040.CombMFS) == False:{n}{t}{t}return 0{n}{t}else:{n}{t}{t}return get_currency(IA148SP.NonRefCr1) + get_currency(IA148SP.NonRefCr2) + get_currency(IA148SP.NonRefCr3) + get_currency(IA148SP.NonRefCr4) + get_currency(IA148SP.NonRefCr5) + get_currency(IA148SP.NonRefCr6) + get_currency(IA148SP.NonRefCr7) + get_currency(IA148SP.NonRefCr8) + get_currency(IA148SP.NonRefCr9) + get_currency(IA148SP.NonRefCr10){n}{n}
def TotNonRefNo8801_Calculation():{n}{t}count = Integer(){n}{n}{t}Lim = Integer(){n}{n}{t}WSTotal = Currency(){n}{n}{t}Total = Currency(){n}{t}Lim = GetAllCopies(IACred){n}{t}count = 1{n}{t}WSTotal = 0{n}{t}while count <= Lim:{n}{t}{t}if get_bool(IACred.NonrefCr, count) == True and get_bool(IACred.Spouse, count) == True:{n}{t}{t}{t}WSTotal = WSTotal + get_currency(IACred.CYCredit, count) + get_currency(IACred.PYCarry, count){n}{t}{t}else:{n}{t}{t}{t}WSTotal = WSTotal{n}{t}{t}count = count + 1{n}{t}Total = WSTotal + get_currency(IA134SP.Credit) + get_currency(IA147.FranchiseCr, FieldCopies(IA147.Spouse)){n}{t}return Total{n}{n}
def TotPTE_Calculation():{n}{t}return get_number(IA148BUMPSP.TotPTE) + get_number(IA148BUMPSP.TotRefPTE){n}{n}
def TotRefCr_Calculation():{n}{t}count = Integer(){n}{n}{t}SubTot = Currency(){n}{t}count = 0{n}{t}SubTot = 0{n}{t}while count < 7:{n}{t}{t}SubTot = SubTot + get_currency(IA148SP.RefCr(count)){n}{t}{t}count = count + 1{n}{t}if get_bool(IAF1040.CombMFS) == False:{n}{t}{t}return 0{n}{t}else:{n}{t}{t}return SubTot{n}{n}
def TPPerc_Calculation(Index):{n}{t}PTE = Integer(){n}{n}{t}RefPTE = Integer(){n}{n}{t}Stuff = Integer(){n}{n}{t}Stuff2 = Integer(){n}{t}PTE = get_number(IA148BUMPSP.TotPTE){n}{t}RefPTE = get_number(IA148BUMPSP.TotRefPTE){n}{t}if Index == 5 and get_number(IA148SP.TotPTE) > 6:{n}{t}{t}return 0{n}{t}elif PTE > Index:{n}{t}{t}Stuff2 = get_number(IA148BUMPSP.PTEIndexNbr(Index)){n}{t}{t}return get_float(IA148BUMPSP.TPPerc(Stuff2)){n}{t}elif PTE + RefPTE > Index:{n}{t}{t}Stuff = ( Index )  - PTE{n}{t}{t}Stuff2 = get_number(IA148BUMPSP.RefPTEIndexNbr(Stuff)){n}{t}{t}return get_float(IA148BUMPSP.RefTPPerc(Stuff2)){n}{t}else:{n}{t}{t}return 0{n}{n}def AnotherVN_Calculation(Index):{n}{t}if get_bool(IA2106.FedQualifies) == True:{n}{t}{t}return 0{n}{t}else:{n}{t}{t}return get_bool(USF2106.AnotherVN(Index), ParentCopy()){n}{n}
def AnotherVY_Calculation(Index):{n}{t}if get_bool(IA2106.FedQualifies) == True:{n}{t}{t}return 0{n}{t}else:{n}{t}{t}return get_bool(USF2106.AnotherVY(Index), ParentCopy()){n}{n}
def Common_Calculation():{n}{t}return get_string(USWBasicInfo.TPCommon){n}{n}
def Description_Calculation():{n}{t}return get_string(IA2106.FirstName){n}{n}
def DOT_Calculation():{n}{t}if get_bool(IA2106.FedQualifies) == True:{n}{t}{t}return 0{n}{t}else:{n}{t}{t}return get_bool(USF2106.DOT, ParentCopy()){n}{n}
def DOTMeals_Calculation():{n}{t}if get_bool(IA2106.FedQualifies) == True:{n}{t}{t}return 0{n}{t}else:{n}{t}{t}if get_bool(IA2106.DOT) == True:{n}{t}{t}{t}return get_currency(USF2106.DOTMeals, ParentCopy()){n}{t}{t}else:{n}{t}{t}{t}return 0{n}{n}
def EmpExp_Calculation():{n}{t}#should clergy be factored in, see 2017 Fed 2106 line 10 calc, would need checkbox and ClergyExp added to 2018 fed 2106 state section and interviewed (looks like these fields were added to fed in 2014){n}{t}if get_bool(IA2106.FedQualifies) == True:{n}{t}{t}return 0{n}{t}else:{n}{t}{t}return get_currency(IA2106.LimMEColA) + get_currency(IA2106.LimMEColB){n}{n}
def EvidenceN_Calculation(Index):{n}{t}if get_bool(IA2106.FedQualifies) == True:{n}{t}{t}return 0{n}{t}else:{n}{t}{t}return get_bool(USF2106.EvidenceN(Index), ParentCopy()){n}{n}
def EvidenceY_Calculation(Index):{n}{t}if get_bool(IA2106.FedQualifies) == True:{n}{t}{t}return 0{n}{t}else:{n}{t}{t}return get_bool(USF2106.EvidenceY(Index), ParentCopy()){n}{n}
def Exist_Calculation():{n}{t}return 1{n}{n}
def Fed2106_Calculation():{n}{t}return 'BEGIN HERE: Open federal Form 2106{t}   Click on the folder to open the supporting document.'{n}{n}
def FedLn4_Calculation():{n}{t}if get_bool(IA2106.FedQualifies) == True:{n}{t}{t}return 0{n}{t}else:{n}{t}{t}return get_currency(USF2106.TotBusExp, ParentCopy()){n}{n}
def FirstName_Calculation():{n}{t}if get_bool(IA2106.Spouse) == True:{n}{t}{t}return get_string(IAF1040.SpouseFirst){n}{t}else:{n}{t}{t}return get_string(IAF1040.FirstName){n}{n}
def IAExcessReim_Calculation():{n}{t}if get_currency(IA2106.TotColA) - get_currency(IA2106.UnreimColA) < 0:{n}{t}{t}return Abs(get_currency(IA2106.TotColA) - get_currency(IA2106.UnreimColA)){n}{t}else:{n}{t}{t}return 0{n}{n}
def IAStateDeprAdj_Calculation():{n}{t}if get_bool(IA2106.FedQualifies) == True:{n}{t}{t}return 0{n}{t}else:{n}{t}{t}return get_currency(USF2106.IAStateDeprAdj, ParentCopy()) * - 1{n}{n}
def IAWages_Calculation():{n}{t}return max_value(0, get_currency(IA2106.IAExcessReim) - get_currency(IA2106.Wages)){n}{n}
def LastName_Calculation():{n}{t}if get_bool(IA2106.Spouse) == True:{n}{t}{t}return get_string(IAF1040.SpouseLast){n}{t}else:{n}{t}{t}return get_string(IAF1040.LastName){n}{n}
def LimMEColA_Calculation():{n}{t}if get_currency(IA2106.NetColA) > 0:{n}{t}{t}return get_currency(IA2106.NetColA){n}{t}else:{n}{t}{t}return 0{n}{n}
def LimMEColB_Calculation():{n}{t}DOTMeals = Currency(){n}{n}{t}OthMeals = Currency(){n}{t}DOTMeals = max_value(0, get_currency(IA2106.DOTMeals) - get_currency(IA2106.ReimbDOT)){n}{t}OthMeals = max_value(0, get_currency(IA2106.OthMeals) - get_currency(IA2106.ReimbOth)){n}{t}if DOTMeals + OthMeals > 0:{n}{t}{t}if get_bool(IA2106.DOT) == True:{n}{t}{t}{t}return c_dollar(CDbl(DOTMeals) * 0.8) + c_dollar(CDbl(OthMeals) * 0.5){n}{t}{t}else:{n}{t}{t}{t}return c_dollar(CDbl(OthMeals) * 0.5){n}{t}else:{n}{t}{t}return 0{n}{n}
def Meals_Calculation():{n}{t}if get_bool(IA2106.DOT) == True:{n}{t}{t}return get_currency(IA2106.DOTMeals) + get_currency(IA2106.OthMeals){n}{t}else:{n}{t}{t}return get_currency(IA2106.OthMeals){n}{n}
def NetColA_Calculation():{n}{t}return max_value(0, get_currency(IA2106.TotColA) - get_currency(IA2106.UnreimColA)){n}{n}
def NetColB_Calculation():{n}{t}return max_value(0, get_currency(IA2106.TotColB) - get_currency(IA2106.UnReimColB)){n}{n}
def Occupation_Calculation():{n}{t}if get_bool(IA2106.FedQualifies) == True:{n}{t}{t}return ''{n}{t}else:{n}{t}{t}return get_string(USF2106.Occupation, ParentCopy()){n}{n}
def OffN_Calculation(Index):{n}{t}if get_bool(IA2106.FedQualifies) == True:{n}{t}{t}return 0{n}{t}else:{n}{t}{t}return get_bool(USF2106.OffN(Index), ParentCopy()){n}{n}
def OffY_Calculation(Index):{n}{t}if get_bool(IA2106.FedQualifies) == True:{n}{t}{t}return 0{n}{t}else:{n}{t}{t}return get_bool(USF2106.OffY(Index), ParentCopy()){n}{n}
def OthMeals_Calculation():{n}{t}TotMeals = Currency(){n}{t}TotMeals = get_currency(USF2106.Meals, ParentCopy()){n}{t}if get_bool(IA2106.FedQualifies) == True:{n}{t}{t}return 0{n}{t}else:{n}{t}{t}return max_value(0, ( TotMeals - get_currency(IA2106.DOTMeals) )){n}{n}
def Parking_Calculation():{n}{t}if get_bool(IA2106.FedQualifies) == True:{n}{t}{t}return 0{n}{t}else:{n}{t}{t}return get_currency(USF2106.Parking, ParentCopy()){n}{n}
def PAvgComm_Calculation(Index):{n}{t}if get_bool(IA2106.FedQualifies) == True:{n}{t}{t}return 0{n}{t}else:{n}{t}{t}return get_number(USF2106.PAvgComm(Index), ParentCopy()){n}{n}
def PBasis_Calculation(Index):{n}{t}if get_bool(IA2106.FedQualifies) == True:{n}{t}{t}return 0{n}{t}else:{n}{t}{t}return get_currency(USF2106.PBasis(Index), ParentCopy()){n}{n}
def PBusMiles_Calculation(Index):{n}{t}if get_bool(IA2106.FedQualifies) == True:{n}{t}{t}return 0{n}{t}else:{n}{t}{t}return get_number(USF2106.PBusMiles(Index), ParentCopy()){n}{n}
def PBusPer_Calculation(Index):{n}{t}if get_bool(IA2106.FedQualifies) == True:{n}{t}{t}return 0{n}{t}else:{n}{t}{t}return get_float(USF2106.PBusPer(Index), ParentCopy()){n}{n}
def PCommute_Calculation(Index):{n}{t}if get_bool(IA2106.FedQualifies) == True:{n}{t}{t}return 0{n}{t}else:{n}{t}{t}return get_number(USF2106.PCommute(Index), ParentCopy()){n}{n}
def PDate_Calculation(Index):{n}{t}if get_bool(IA2106.FedQualifies) == True:{n}{t}{t}return ''{n}{t}else:{n}{t}{t}return get_string(USF2106.PDate(Index), ParentCopy()){n}{n}
def PDepr_Calculation(Index):{n}{t}if get_bool(IA2106.FedQualifies) == True:{n}{t}{t}return 0{n}{t}else:{n}{t}{t}return get_currency(IA2106.PTotDepr(Index)){n}{n}
def PDeprBasis_Calculation(Index):{n}{t}if get_bool(IA2106.FedQualifies) == True:{n}{t}{t}return 0{n}{t}else:{n}{t}{t}return max_value(0, c_dollar(get_float(IA2106.PBasis(Index)) * get_float(IA2106.PBusPer(Index))) - get_currency(USF2106.PStateSec179(Index), ParentCopy())){n}{n}
def PDeprVeh_Calculation(Index):{n}{t}#need to make sure sec179 is included, IA 2106 does not have a line for State sec179 and does not address in the instructions, seems this filed will have to show the depr basis x rate plus 179.{n}{t}#Verified below is calling USW2106Veh.DeprNoBonus which includes depr x bus per. plus state 179{n}{t}if get_bool(IA2106.FedQualifies) == True:{n}{t}{t}return 0{n}{t}else:{n}{t}{t}return get_currency(USF2106.PDeprVehState(Index), ParentCopy()){n}{n}
def PExp_Calculation(Index):{n}{t}if get_bool(IA2106.FedQualifies) == True:{n}{t}{t}return 0{n}{t}else:{n}{t}{t}return get_currency(USF2106.PExp(Index), ParentCopy()){n}{n}
def PGas_Calculation(Index):{n}{t}if get_bool(IA2106.FedQualifies) == True:{n}{t}{t}return 0{n}{t}else:{n}{t}{t}return get_currency(USF2106.PGas(Index), ParentCopy()){n}{n}
def PInclusion_Calculation(Index):{n}{t}if get_bool(IA2106.FedQualifies) == True:{n}{t}{t}return 0{n}{t}else:{n}{t}{t}return get_currency(USF2106.PInclusion(Index), ParentCopy()){n}{n}
def PLuxLim_Calculation(Index):{n}{t}if get_bool(IA2106.FedQualifies) == True:{n}{t}{t}return 0{n}{t}else:{n}{t}{t}return get_currency(USF2106.LuxLimState2(Index), ParentCopy()){n}{n}
def PMethod_Calculation(Index):{n}{t}if get_bool(IA2106.FedQualifies) == True:{n}{t}{t}return ''{n}{t}else:{n}{t}{t}return get_string(USF2106.PMethod(Index), ParentCopy()){n}{n}
def PNetRent_Calculation(Index):{n}{t}if get_bool(IA2106.FedQualifies) == True:{n}{t}{t}return 0{n}{t}else:{n}{t}{t}return get_currency(USF2106.PNetRent(Index), ParentCopy()){n}{n}
def POthMiles_Calculation(Index):{n}{t}if get_bool(IA2106.FedQualifies) == True:{n}{t}{t}return 0{n}{t}else:{n}{t}{t}return get_number(USF2106.POthMiles(Index), ParentCopy()){n}{n}
def PPerExp_Calculation(Index):{n}{t}if get_bool(IA2106.FedQualifies) == True:{n}{t}{t}return 0{n}{t}else:{n}{t}{t}return get_currency(USF2106.PPerExp(Index), ParentCopy()){n}{n}
def PPerLim_Calculation(Index):{n}{t}if get_bool(IA2106.FedQualifies) == True:{n}{t}{t}return 0{n}{t}else:{n}{t}{t}return get_currency(USF2106.PerLimState2(Index), ParentCopy()){n}{n}
def PRate_Calculation(Index):{n}{t}if get_bool(IA2106.FedQualifies) == True:{n}{t}{t}return ''{n}{t}else:{n}{t}{t}return get_string(USF2106.PRate(Index), ParentCopy()){n}{n}
def PRent_Calculation(Index):{n}{t}if get_bool(IA2106.FedQualifies) == True:{n}{t}{t}return 0{n}{t}else:{n}{t}{t}return get_currency(USF2106.PRent(Index), ParentCopy()){n}{n}
def PrintMe_Calculation():{n}{t}if get_currency(IA2106.EmpExp) > 0:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def PrintPg21_Calculation():{n}{t}if get_currency(IA2106.PStandard(0)) > Decimal("0") or get_currency(IA2106.PTotAct(0)) > Decimal("0"):{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def PrintPg22_Calculation():{n}{t}if get_currency(IA2106.PStandard(1)) > Decimal("0") or get_currency(IA2106.PTotAct(1)) > Decimal("0"):{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def PrintPg23_Calculation():{n}{t}if get_currency(IA2106.PStandard(2)) > Decimal("0") or get_currency(IA2106.PTotAct(2)) > Decimal("0"):{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def PrintPg24_Calculation():{n}{t}if get_currency(IA2106.PStandard(3)) > Decimal("0") or get_currency(IA2106.PTotAct(3)) > Decimal("0"):{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def PStandard_Calculation(Index):{n}{t}if get_bool(IA2106.FedQualifies) == True:{n}{t}{t}return 0{n}{t}else:{n}{t}{t}return get_currency(USF2106.PStandard(Index), ParentCopy()){n}{n}
def PTotAct_Calculation(Index):{n}{t}if get_bool(IA2106.FedQualifies) == True:{n}{t}{t}return 0{n}{t}elif get_currency(IA2106.PStandard(Index)) == 0:{n}{t}{t}return get_currency(IA2106.PPerExp(Index)) + get_currency(IA2106.PDepr(Index)){n}{t}else:{n}{t}{t}return 0{n}{n}
def PTotDepr_Calculation(Index):{n}{t}if get_bool(IA2106.FedQualifies) == True:{n}{t}{t}return 0{n}{t}elif get_currency(IA2106.PLuxLim(Index)) == 0 and get_currency(IA2106.PPerLim(Index)) == 0:{n}{t}{t}return get_currency(IA2106.PDeprVeh(Index)){n}{t}else:{n}{t}{t}return min_value(get_currency(IA2106.PDeprVeh(Index)), get_currency(IA2106.PPerLim(Index))){n}{n}
def PTotMiles_Calculation(Index):{n}{t}if get_bool(IA2106.FedQualifies) == True:{n}{t}{t}return 0{n}{t}else:{n}{t}{t}return get_number(USF2106.PTotMiles(Index), ParentCopy()){n}{n}
def PValue_Calculation(Index):{n}{t}if get_bool(IA2106.FedQualifies) == True:{n}{t}{t}return 0{n}{t}else:{n}{t}{t}return get_currency(USF2106.PValue(Index), ParentCopy()){n}{n}
def FedQualifies_Calculation():{n}{t}return get_bool(USF2106.Qualifies, ParentCopy()){n}{n}
def ReimbDOT_Calculation():{n}{t}if get_bool(IA2106.FedQualifies) == True:{n}{t}{t}return 0{n}{t}else:{n}{t}{t}if get_bool(IA2106.DOT) == True:{n}{t}{t}{t}return get_currency(USF2106.ReimbDOT, ParentCopy()){n}{t}{t}else:{n}{t}{t}{t}return 0{n}{n}
def ReimbOth_Calculation():{n}{t}TotReimb = Currency(){n}{t}TotReimb = get_currency(USF2106.UnReimColB, ParentCopy()){n}{t}if get_bool(IA2106.FedQualifies) == True:{n}{t}{t}return 0{n}{t}else:{n}{t}{t}return max_value(0, ( TotReimb - get_currency(IA2106.ReimbDOT) )){n}{n}
def SchAAMt_Calculation():{n}{t}return get_currency(IA2106.EmpExp){n}{n}
def Spouse_Calculation():{n}{t}return get_bool(USF2106.Spouse, ParentCopy()){n}{n}
def SpouseCommon_Calculation():{n}{t}return get_string(USWBasicInfo.SPCommon){n}{n}
def SSN_Calculation():{n}{t}if get_bool(IA2106.Spouse) == True:{n}{t}{t}return get_string(IAF1040.SpouseSSN){n}{t}else:{n}{t}{t}return get_string(IAF1040.SSN){n}{n}
def Taxpayer_Calculation():{n}{t}return get_bool(USF2106.Taxpayer, ParentCopy()){n}{n}
def TotBusExp_Calculation():{n}{t}if get_bool(IA2106.FedQualifies) == True:{n}{t}{t}return 0{n}{t}else:{n}{t}{t}return get_currency(IA2106.FedLn4) + get_currency(IA2106.IAStateDeprAdj){n}{n}
def TotColA_Calculation():{n}{t}return get_currency(IA2106.VehExp) + get_currency(IA2106.Parking) + get_currency(IA2106.Travel) + get_currency(IA2106.TotBusExp){n}{n}
def TotColB_Calculation():{n}{t}return get_currency(IA2106.Meals){n}{n}
def Travel_Calculation():{n}{t}if get_bool(IA2106.FedQualifies) == True:{n}{t}{t}return 0{n}{t}else:{n}{t}{t}return get_currency(USF2106.Travel, ParentCopy()){n}{n}
def UnreimColA_Calculation():{n}{t}if get_bool(IA2106.FedQualifies) == True:{n}{t}{t}return 0{n}{t}else:{n}{t}{t}return get_currency(USF2106.UnreimColA, ParentCopy()){n}{n}
def UnReimColB_Calculation():{n}{t}if get_bool(IA2106.DOT) == True:{n}{t}{t}return get_currency(IA2106.ReimbDOT) + get_currency(IA2106.ReimbOth){n}{t}else:{n}{t}{t}return get_currency(IA2106.ReimbOth){n}{n}
def VehExp_Calculation():{n}{t}if get_bool(IA2106.FedQualifies) == True:{n}{t}{t}return 0{n}{t}else:{n}{t}{t}return get_currency(IA2106.PStandard(0)) + get_currency(IA2106.PStandard(1)) + get_currency(IA2106.PStandard(2)) + get_currency(IA2106.PStandard(3)) + get_currency(IA2106.PTotAct(0)) + get_currency(IA2106.PTotAct(1)) + get_currency(IA2106.PTotAct(2)) + get_currency(IA2106.PTotAct(3)){n}{n}
def Wages_Calculation():{n}{t}return get_currency(USF2106.Wages, ParentCopy()){n}{n}
def WrittenN_Calculation(Index):{n}{t}if get_bool(IA2106.FedQualifies) == True:{n}{t}{t}return 0{n}{t}else:{n}{t}{t}return get_bool(USF2106.WrittenN(Index), ParentCopy()){n}{n}
def WrittenY_Calculation(Index):{n}{t}if get_bool(IA2106.FedQualifies) == True:{n}{t}{t}return 0{n}{t}else:{n}{t}{t}return get_bool(USF2106.WrittenY(Index), ParentCopy()){n}{n}
def YrMakeModel_Calculation(Index):{n}{t}return get_string(IA2106.Year(Index)) + ' ' + get_string(IA2106.Make(Index)) + ' ' + get_string(IA2106.Model(Index)){n}{n}def Alert10_Calculation():{n}{t}if get_currency(IA2210.Penalty) > 0 and get_currency(IA2210.PYTax) == 0 and get_bool(IA2210.PYZero) == False:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def Alert20_Calculation():{n}{t}if get_currency(IA2210SP.Penalty) > 0 and get_currency(IA2210SP.PYTax) == 0 and get_bool(IA2210SP.PYZero) == False:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def Amt8_Calculation():{n}{t}return c_dollar(get_float(IA2210.Bal) * 0.9){n}{n}
def Bal_Calculation():{n}{t}return max_value(0, get_currency(IA2210.CYTax) - get_currency(IA2210.TotCr)){n}{n}
def ChildC_Calculation():{n}{t}return get_currency(IAF1040.AChild){n}{n}
def CYTax_Calculation():{n}{t}return get_currency(IAF1040.ABal4){n}{n}
def Description_Calculation():{n}{t}return CStr(get_currency(IA2210.Penalty)) + ' Penalty'{n}{n}
def EFile_Calculation():{n}{t}if get_bool(IA1040X.EFAmend) == True:{n}{t}{t}return 0{n}{t}elif get_bool(IA2210.Print) == True:{n}{t}{t}return 1{n}{t}elif get_currency(IA2210.Amt8) >= Decimal("200"):{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def EFStQ1_Calculation():{n}{t}return get_currency(IASTATEEST.TPStApply) + get_currency(IASTATEEST.TPStQ1){n}{n}
def ExpPenalty_Calculation():{n}{t}if get_currency(IA2210.Penalty) > 0:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def Fuel_Calculation():{n}{t}return get_currency(IAF1040.AFuel){n}{n}
def IAEIC_Calculation():{n}{t}return get_currency(IAF1040.AIEIC){n}{n}
def Names_Calculation():{n}{t}if get_bool(IAF1040.CombMFS) == True:{n}{t}{t}return get_string(IAREQUIRED.TPCombName){n}{t}else:{n}{t}{t}return get_string(IAREQUIRED.CombNames){n}{n}
def NoPen_Calculation():{n}{t}return get_bool(USWPrepMnNm.AlwaysState2210){n}{n}
def Penalty_Calculation():{n}{t}if get_bool(IA2210.NoPen) == True:{n}{t}{t}return 0{n}{t}else:{n}{t}{t}return get_currency(IAPENALTY.TotPen){n}{n}
def Print_Calculation():{n}{t}if get_bool(IA2210.AnInc) == True:{n}{t}{t}return 1{n}{t}elif get_currency(IA2210.Penalty) > 0:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def PYTax_Calculation():{n}{t}PYAGILimit = Currency(){n}{n}{t}AGI = Currency(){n}{n}{t}AGIBonus = Currency(){n}{t}if get_bool(USWSpouse.MFS) == True and get_bool(USWSpouse.NonRes) == False:{n}{t}{t}PYAGILimit = Decimal("75000"){n}{t}else:{n}{t}{t}PYAGILimit = Decimal("150000"){n}{t}if get_bool(USWSpouse.NonRes) == True:{n}{t}{t}AGI = get_currency(USWRec.PYAGINR){n}{t}elif IAFS() != 3:{n}{t}{t}AGI = get_currency(USWRec.PYTAGI){n}{t}else:{n}{t}{t}AGI = get_currency(USWRec.PYAGI){n}{t}if IAFS() != 3:{n}{t}{t}AGIBonus = AGI + get_currency(USZIA1040.IATotBonus) + get_currency(USZIA1040.IATotBonusSp){n}{t}else:{n}{t}{t}AGIBonus = AGI + get_currency(USZIA1040.IATotBonus){n}{t}if AGIBonus > PYAGILimit:{n}{t}{t}return c_dollar(get_float(USZIA1040.IA2210PYTax) * 1.1){n}{t}else:{n}{t}{t}return get_currency(USZIA1040.IA2210PYTax){n}{n}
def Q1AnInc_Calculation():{n}{t}if get_bool(IA2210.AnInc) == True:{n}{t}{t}return get_currency(IA2210AN.Q1AIInstall){n}{t}else:{n}{t}{t}return 0{n}{n}
def Q1DaysB_Calculation():{n}{t}if get_currency(IA2210.Penalty) > 0:{n}{t}{t}return 'See'{n}{t}else:{n}{t}{t}return ''{n}{n}
def Q1Est_Calculation():{n}{t}return get_currency(IA2210.Q1WH) + get_currency(IASTATEEST.TPStApply) + get_currency(IASTATEEST.TPStQ1){n}{n}
def Q1Install_Calculation():{n}{t}return c_dollar(get_float(IA2210.Small) * 0.25){n}{n}
def Q1Ln11_Calculation():{n}{t}if get_bool(IA2210.AnInc) == True:{n}{t}{t}return get_currency(IA2210.Q1AnInc){n}{t}else:{n}{t}{t}return get_currency(IA2210.Q1Install){n}{n}
def Q1Ln19a_Calculation():{n}{t}if get_currency(IA2210.Penalty) > 0:{n}{t}{t}return 'Worksheet'{n}{t}else:{n}{t}{t}return ''{n}{n}
def Q1Ln19B_Calculation():{n}{t}if get_currency(IA2210.Penalty) > 0:{n}{t}{t}return 'Attached'{n}{t}else:{n}{t}{t}return ''{n}{n}
def Q1Undpay_Calculation():{n}{t}if get_currency(IA2210.Q1Est) < get_currency(IA2210.Q1Ln11):{n}{t}{t}return get_currency(IA2210.Q1Ln11) - get_currency(IA2210.Q1Est){n}{t}else:{n}{t}{t}return 0{n}{n}
def Q1WH_Calculation():{n}{t}return c_dollar(CDbl(get_currency(IAF1040.AIATaxWith)) * 0.25){n}{n}
def Q2AnInc_Calculation():{n}{t}if get_bool(IA2210.AnInc) == True:{n}{t}{t}return get_currency(IA2210AN.Q2AIInstall){n}{t}else:{n}{t}{t}return 0{n}{n}
def Q2est_Calculation():{n}{t}return get_currency(IA2210.Q2WH) + get_currency(IASTATEEST.TPStQ2){n}{n}
def Q2Install_Calculation():{n}{t}return c_dollar(CDbl(get_currency(IA2210.Small) - get_currency(IA2210.Q1Install)) * 0.3333){n}{n}
def Q2Ln11_Calculation():{n}{t}if get_bool(IA2210.AnInc) == True:{n}{t}{t}return get_currency(IA2210.Q2AnInc){n}{t}else:{n}{t}{t}return get_currency(IA2210.Q2Install){n}{n}
def Q2WH_Calculation():{n}{t}return c_dollar(CDbl(get_currency(IAF1040.AIATaxWith) - get_currency(IA2210.Q1WH)) * 0.3333){n}{n}
def Q3AnInc_Calculation():{n}{t}if get_bool(IA2210.AnInc) == True:{n}{t}{t}return get_currency(IA2210AN.Q3AIInstall){n}{t}else:{n}{t}{t}return 0{n}{n}
def Q3Est_Calculation():{n}{t}return get_currency(IA2210.Q3WH) + get_currency(IASTATEEST.TPStQ3){n}{n}
def Q3Install_Calculation():{n}{t}return c_dollar(CDbl(get_currency(IA2210.Small) - get_currency(IA2210.Q1Install) - get_currency(IA2210.Q2Install)) * 0.5){n}{n}
def Q3Ln11_Calculation():{n}{t}if get_bool(IA2210.AnInc) == True:{n}{t}{t}return get_currency(IA2210.Q3AnInc){n}{t}else:{n}{t}{t}return get_currency(IA2210.Q3Install){n}{n}
def Q3WH_Calculation():{n}{t}return c_dollar(CDbl(get_currency(IAF1040.AIATaxWith) - get_currency(IA2210.Q1WH) - get_currency(IA2210.Q2WH)) * 0.5){n}{n}
def Q4AnInc_Calculation():{n}{t}if get_bool(IA2210.AnInc) == True:{n}{t}{t}return get_currency(IA2210AN.Q4AIInstall){n}{t}else:{n}{t}{t}return 0{n}{n}
def Q4Est_Calculation():{n}{t}return get_currency(IA2210.Q4WH) + get_currency(IASTATEEST.TPStQ4){n}{n}
def Q4Install_Calculation():{n}{t}return get_currency(IA2210.Small) - get_currency(IA2210.Q1Install) - get_currency(IA2210.Q2Install) - get_currency(IA2210.Q3Install){n}{n}
def Q4Ln11_Calculation():{n}{t}if get_bool(IA2210.AnInc) == True:{n}{t}{t}return get_currency(IA2210.Q4AnInc){n}{t}else:{n}{t}{t}return get_currency(IA2210.Q4Install){n}{n}
def Q4WH_Calculation():{n}{t}return get_currency(IAF1040.AIATaxWith) - get_currency(IA2210.Q1WH) - get_currency(IA2210.Q2WH) - get_currency(IA2210.Q3WH){n}{n}
def RefundCr_Calculation():{n}{t}return get_currency(IAF1040.AOthRefCr){n}{n}
def Small_Calculation():{n}{t}if get_bool(IA2210.NoPen) == True:{n}{t}{t}return 0{n}{t}elif get_currency(IA2210.Amt8) < Decimal("200"):{n}{t}{t}return 0{n}{t}elif get_bool(IA2210.PYZero) == True:{n}{t}{t}return 0{n}{t}elif get_currency(IA2210.PYTax) == 0:{n}{t}{t}return get_currency(IA2210.Amt8){n}{t}else:{n}{t}{t}return min_value(get_currency(IA2210.Amt8), get_currency(IA2210.PYTax)){n}{n}
def SSN_Calculation():{n}{t}return get_string(IAF1040.SSN){n}{n}
def TotCr_Calculation():{n}{t}return get_currency(IA2210.Fuel) + get_currency(IA2210.ChildC) + get_currency(IA2210.IAEIC) + get_currency(IA2210.RefundCr){n}{n}def AskItmDed_Calculation():{n}{t}if get_bool(IAF1040.ItemCheck) == True:{n}{t}{t}return 1{n}{t}elif get_currency(IA2210AN.Q1ItmDed) != 0:{n}{t}{t}return 1{n}{t}elif get_currency(IA2210AN.Q2ItmDed) != 0:{n}{t}{t}return 1{n}{t}elif get_currency(IA2210AN.Q3ItmDed) != 0:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def Description_Calculation():{n}{t}return get_string(IA2210AN.Names){n}{n}
def Names_Calculation():{n}{t}if get_bool(IAF1040.CombMFS) == True:{n}{t}{t}return get_string(IAREQUIRED.TPCombName){n}{t}else:{n}{t}{t}return get_string(IAREQUIRED.CombNames){n}{n}
def Print_Calculation():{n}{t}if get_bool(IA2210.AnInc) == True:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def Q1AIInstall_Calculation():{n}{t}return min_value(get_currency(IA2210AN.Q1BalDue), get_currency(IA2210AN.Q1TotPay)){n}{n}
def Q1AnFedPay_Calculation():{n}{t}return c_dollar(get_float(IA2210AN.Q1FedPay) * 4){n}{n}
def Q1AnInc_Calculation():{n}{t}return c_dollar(get_float(IA2210AN.Q1NetInc) * 4){n}{n}
def Q1AnItmDed_Calculation():{n}{t}if get_bool(IAF1040.ItemCheck) == True:{n}{t}{t}return c_dollar(get_float(IA2210AN.Q1ItmDed) * 4){n}{t}else:{n}{t}{t}return 0{n}{n}
def Q1Balance_Calculation():{n}{t}return max_value(0, get_currency(IA2210AN.Q1TotTax) - get_currency(IA2210AN.Q1ExemCr) - get_currency(IA2210AN.Q1NonRefCr) - get_currency(IA2210AN.Q1RefCr)){n}{n}
def Q1BalDue_Calculation():{n}{t}return get_currency(IA2210AN.Q1PerTax){n}{n}
def Q1Deduct_Calculation():{n}{t}return max_value(get_currency(IA2210AN.Q1AnItmDed), get_currency(IA2210AN.Q1StndDed)){n}{n}
def Q1ExemCr_Calculation():{n}{t}return get_currency(IAF1040.AExemCr){n}{n}
def Q1PerTax_Calculation():{n}{t}return c_dollar(get_float(IA2210AN.Q1Balance) * 0.225){n}{n}
def Q1ReqPay_Calculation():{n}{t}return get_currency(IA2210.Q1Install){n}{n}
def Q1StndDed_Calculation():{n}{t}# updated for 2018{n}{t}if IAFS() == 2 or IAFS() == 5 or IAFS() == 6:{n}{t}{t}return Decimal("5000"){n}{t}else:{n}{t}{t}return Decimal("2030"){n}{n}
def Q1Tax_Calculation():{n}{t}Mid = Currency(){n}{n}{t}MidInt = Long(){n}{n}{t}TotTaxInc = Currency(){n}{t}# updated for 2018{n}{t}TotTaxInc = get_currency(IA2210AN.Q1TaxInc){n}{t}if TotTaxInc > Decimal("95650"):{n}{t}{t}Mid = TotTaxInc{n}{t}elif TotTaxInc > Decimal("150"):{n}{t}{t}MidInt = CLng(( TotTaxInc - Decimal("1") )  / Decimal("50")){n}{t}{t}Mid = ( CCur(MidInt) * Decimal("50") )  + Decimal("25"){n}{t}else:{n}{t}{t}Mid = Decimal("0"){n}{t}return Tax(Mid){n}{n}
def Q1TaxInc_Calculation():{n}{t}return max_value(0, get_currency(IA2210AN.Q1AnInc) - get_currency(IA2210AN.Q1AnFedPay) - get_currency(IA2210AN.Q1Deduct)){n}{n}
def Q1TotPay_Calculation():{n}{t}return get_currency(IA2210AN.Q1ReqPay){n}{n}
def Q1TotTax_Calculation():{n}{t}return get_currency(IA2210AN.Q1Tax) + get_currency(IA2210AN.Q1OthTax){n}{n}
def Q1Unpay_Calculation():{n}{t}return max_value(0, get_currency(IA2210AN.Q1TotPay) - get_currency(IA2210AN.Q1BalDue)){n}{n}
def Q2AIInstall_Calculation():{n}{t}return min_value(get_currency(IA2210AN.Q2BalDue), get_currency(IA2210AN.Q2TotPay)){n}{n}
def Q2AnFedPay_Calculation():{n}{t}return c_dollar(get_float(IA2210AN.Q2FedPay) * 2.4){n}{n}
def Q2AnInc_Calculation():{n}{t}return c_dollar(get_float(IA2210AN.Q2NetInc) * 2.4){n}{n}
def Q2AnItmDed_Calculation():{n}{t}if get_bool(IAF1040.ItemCheck) == True:{n}{t}{t}return c_dollar(get_float(IA2210AN.Q2ItmDed) * 2.4){n}{t}else:{n}{t}{t}return 0{n}{n}
def Q2Balance_Calculation():{n}{t}return max_value(0, get_currency(IA2210AN.Q2TotTax) - get_currency(IA2210AN.Q2ExemCr) - get_currency(IA2210AN.Q2NonRefCr) - get_currency(IA2210AN.Q2RefCr)){n}{n}
def Q2BalDue_Calculation():{n}{t}return max_value(0, get_currency(IA2210AN.Q2PerTax) - get_currency(IA2210AN.Q2PQInst)){n}{n}
def Q2Deduct_Calculation():{n}{t}return max_value(get_currency(IA2210AN.Q2AnItmDed), get_currency(IA2210AN.Q2StndDed)){n}{n}
def Q2ExemCr_Calculation():{n}{t}return get_currency(IA2210AN.Q1ExemCr){n}{n}
def Q2PerTax_Calculation():{n}{t}return c_dollar(get_float(IA2210AN.Q2Balance) * 0.45){n}{n}
def Q2PQInst_Calculation():{n}{t}return get_currency(IA2210AN.Q1AIInstall){n}{n}
def Q2PQUnpay_Calculation():{n}{t}return get_currency(IA2210AN.Q1Unpay){n}{n}
def Q2ReqPay_Calculation():{n}{t}return get_currency(IA2210.Q2Install){n}{n}
def Q2StndDed_Calculation():{n}{t}return get_currency(IA2210AN.Q1StndDed){n}{n}
def Q2Tax_Calculation():{n}{t}Mid = Currency(){n}{n}{t}MidInt = Long(){n}{n}{t}TotTaxInc = Currency(){n}{t}# updated for 2018{n}{t}TotTaxInc = get_currency(IA2210AN.Q2TaxInc){n}{t}if TotTaxInc > Decimal("95650"):{n}{t}{t}Mid = TotTaxInc{n}{t}elif TotTaxInc > Decimal("150"):{n}{t}{t}MidInt = CLng(( TotTaxInc - Decimal("1") )  / Decimal("50")){n}{t}{t}Mid = ( CCur(MidInt) * Decimal("50") )  + Decimal("25"){n}{t}else:{n}{t}{t}Mid = Decimal("0"){n}{t}return Tax(Mid){n}{n}
def Q2TaxInc_Calculation():{n}{t}return max_value(0, get_currency(IA2210AN.Q2AnInc) - get_currency(IA2210AN.Q2AnFedPay) - get_currency(IA2210AN.Q2Deduct)){n}{n}
def Q2TotPay_Calculation():{n}{t}return get_currency(IA2210AN.Q2ReqPay) + get_currency(IA2210AN.Q2PQUnpay){n}{n}
def Q2TotTax_Calculation():{n}{t}return get_currency(IA2210AN.Q2Tax) + get_currency(IA2210AN.Q2OthTax){n}{n}
def Q2Unpay_Calculation():{n}{t}return max_value(0, get_currency(IA2210AN.Q2TotPay) - get_currency(IA2210AN.Q2BalDue)){n}{n}
def Q3AIInstall_Calculation():{n}{t}return min_value(get_currency(IA2210AN.Q3BalDue), get_currency(IA2210AN.Q3TotPay)){n}{n}
def Q3AnFedPay_Calculation():{n}{t}return c_dollar(get_float(IA2210AN.Q3FedPay) * 1.5){n}{n}
def Q3AnInc_Calculation():{n}{t}return c_dollar(get_float(IA2210AN.Q3NetInc) * 1.5){n}{n}
def Q3AnItmDed_Calculation():{n}{t}if get_bool(IAF1040.ItemCheck) == True:{n}{t}{t}return c_dollar(get_float(IA2210AN.Q3ItmDed) * 1.5){n}{t}else:{n}{t}{t}return 0{n}{n}
def Q3Balance_Calculation():{n}{t}return max_value(0, get_currency(IA2210AN.Q3TotTax) - get_currency(IA2210AN.Q3ExemCr) - get_currency(IA2210AN.Q3NonRefCr) - get_currency(IA2210AN.Q3RefCr)){n}{n}
def Q3BalDue_Calculation():{n}{t}return max_value(0, get_currency(IA2210AN.Q3PerTax) - get_currency(IA2210AN.Q3PQInst)){n}{n}
def Q3Deduct_Calculation():{n}{t}return max_value(get_currency(IA2210AN.Q3AnItmDed), get_currency(IA2210AN.Q3StndDed)){n}{n}
def Q3ExemCr_Calculation():{n}{t}return get_currency(IA2210AN.Q1ExemCr){n}{n}
def Q3PerTax_Calculation():{n}{t}return c_dollar(get_float(IA2210AN.Q3Balance) * 0.675){n}{n}
def Q3PQInst_Calculation():{n}{t}return get_currency(IA2210AN.Q1AIInstall) + get_currency(IA2210AN.Q2AIInstall){n}{n}
def Q3PQUnpay_Calculation():{n}{t}return get_currency(IA2210AN.Q2Unpay){n}{n}
def Q3ReqPay_Calculation():{n}{t}return get_currency(IA2210.Q3Install){n}{n}
def Q3StndDed_Calculation():{n}{t}return get_currency(IA2210AN.Q1StndDed){n}{n}
def Q3Tax_Calculation():{n}{t}Mid = Currency(){n}{n}{t}MidInt = Long(){n}{n}{t}TotTaxInc = Currency(){n}{t}# updated for 2018{n}{t}TotTaxInc = get_currency(IA2210AN.Q3TaxInc){n}{t}if TotTaxInc > Decimal("95650"):{n}{t}{t}Mid = TotTaxInc{n}{t}elif TotTaxInc > Decimal("150"):{n}{t}{t}MidInt = CLng(( TotTaxInc - Decimal("1") )  / Decimal("50")){n}{t}{t}Mid = ( CCur(MidInt) * Decimal("50") )  + Decimal("25"){n}{t}else:{n}{t}{t}Mid = Decimal("0"){n}{t}return Tax(Mid){n}{n}
def Q3TaxInc_Calculation():{n}{t}return max_value(0, get_currency(IA2210AN.Q3AnInc) - get_currency(IA2210AN.Q3AnFedPay) - get_currency(IA2210AN.Q3Deduct)){n}{n}
def Q3TotPay_Calculation():{n}{t}return get_currency(IA2210AN.Q3ReqPay) + get_currency(IA2210AN.Q3PQUnpay){n}{n}
def Q3TotTax_Calculation():{n}{t}return get_currency(IA2210AN.Q3Tax) + get_currency(IA2210AN.Q3OthTax){n}{n}
def Q3Unpay_Calculation():{n}{t}return max_value(0, get_currency(IA2210AN.Q3TotPay) - get_currency(IA2210AN.Q3BalDue)){n}{n}
def Q4AIInstall_Calculation():{n}{t}return min_value(get_currency(IA2210AN.Q4BalDue), get_currency(IA2210AN.Q4TotPay)){n}{n}
def Q4AnFedPay_Calculation():{n}{t}return get_currency(IA2210AN.Q4FedPay){n}{n}
def Q4AnInc_Calculation():{n}{t}return get_currency(IA2210AN.Q4NetInc){n}{n}
def Q4AnItmDed_Calculation():{n}{t}return get_currency(IA2210AN.Q4ItmDed){n}{n}
def Q4Balance_Calculation():{n}{t}return max_value(0, get_currency(IA2210AN.Q4TotTax) - get_currency(IA2210AN.Q4ExemCr) - get_currency(IA2210AN.Q4NonRefCr) - get_currency(IA2210AN.Q4RefCr)){n}{n}
def Q4BalDue_Calculation():{n}{t}return max_value(0, get_currency(IA2210AN.Q4PerTax) - get_currency(IA2210AN.Q4PQInst)){n}{n}
def Q4Deduct_Calculation():{n}{t}return max_value(get_currency(IA2210AN.Q4AnItmDed), get_currency(IA2210AN.Q4StndDed)){n}{n}
def Q4ExemCr_Calculation():{n}{t}return get_currency(IA2210AN.Q1ExemCr){n}{n}
def Q4FedPay_Calculation():{n}{t}return get_currency(IAF1040.AFedDed) - get_currency(IAF1040.AFedTax){n}{n}
def Q4ItmDed_Calculation():{n}{t}if get_bool(IAF1040.ItemCheck) == True:{n}{t}{t}return get_currency(IAF1040.ADedBox){n}{t}else:{n}{t}{t}return 0{n}{n}
def Q4NetInc_Calculation():{n}{t}return get_currency(IAF1040.ANet){n}{n}
def Q4NonRefCr_Calculation():{n}{t}return get_currency(IAF1040.ATuit) + get_currency(IAF1040.AVolFireCr) + get_currency(IAF1040.ACrNon) + get_currency(IAF1040.AOutState) + get_currency(IAF1040.AOthIACr){n}{n}
def Q4OthTax_Calculation():{n}{t}return get_currency(IAF1040.ALump) + get_currency(IAF1040.AIAMin){n}{n}
def Q4PerTax_Calculation():{n}{t}return c_dollar(get_float(IA2210AN.Q4Balance) * 0.9){n}{n}
def Q4PQInst_Calculation():{n}{t}return get_currency(IA2210AN.Q1AIInstall) + get_currency(IA2210AN.Q2AIInstall) + get_currency(IA2210AN.Q3AIInstall){n}{n}
def Q4PQUnpay_Calculation():{n}{t}return get_currency(IA2210AN.Q3Unpay){n}{n}
def Q4RefCr_Calculation():{n}{t}return get_currency(IAF1040.AFuel) + get_currency(IAF1040.AChild) + get_currency(IAF1040.AIEIC) + get_currency(IAF1040.AOthRefCr){n}{n}
def Q4ReqPay_Calculation():{n}{t}return get_currency(IA2210.Q4Install){n}{n}
def Q4StndDed_Calculation():{n}{t}return get_currency(IA2210AN.Q1StndDed){n}{n}
def Q4Tax_Calculation():{n}{t}Mid = Currency(){n}{n}{t}MidInt = Long(){n}{n}{t}TotTaxInc = Currency(){n}{t}# updated for 2018{n}{t}TotTaxInc = get_currency(IA2210AN.Q4TaxInc){n}{t}if TotTaxInc > Decimal("95650"):{n}{t}{t}Mid = TotTaxInc{n}{t}elif TotTaxInc > Decimal("150"):{n}{t}{t}MidInt = CLng(( TotTaxInc - Decimal("1") )  / Decimal("50")){n}{t}{t}Mid = ( CCur(MidInt) * Decimal("50") )  + Decimal("25"){n}{t}else:{n}{t}{t}Mid = Decimal("0"){n}{t}return Tax(Mid){n}{n}
def Q4TaxInc_Calculation():{n}{t}return max_value(0, get_currency(IA2210AN.Q4AnInc) - get_currency(IA2210AN.Q4AnFedPay) - get_currency(IA2210AN.Q4Deduct)){n}{n}
def Q4TotPay_Calculation():{n}{t}return get_currency(IA2210AN.Q4ReqPay) + get_currency(IA2210AN.Q4PQUnpay){n}{n}
def Q4TotTax_Calculation():{n}{t}return get_currency(IA2210AN.Q4Tax) + get_currency(IA2210AN.Q4OthTax){n}{n}
def SSN_Calculation():{n}{t}return get_string(IAF1040.SSN){n}{n}def AskItmDed_Calculation():{n}{t}if get_bool(IAF1040.ItemCheck) == True:{n}{t}{t}return 1{n}{t}elif get_currency(IA2210ANSP.Q1ItmDed) != 0:{n}{t}{t}return 1{n}{t}elif get_currency(IA2210ANSP.Q2ItmDed) != 0:{n}{t}{t}return 1{n}{t}elif get_currency(IA2210ANSP.Q3ItmDed) != 0:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def Description_Calculation():{n}{t}return get_string(IA2210ANSP.Names){n}{n}
def Names_Calculation():{n}{t}return get_string(IAREQUIRED.SPCombName){n}{n}
def Print_Calculation():{n}{t}if get_bool(IAF1040.CombMFS) == False:{n}{t}{t}return 0{n}{t}elif get_bool(IA2210SP.AnInc) == True:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def Q1AIInstall_Calculation():{n}{t}return min_value(get_currency(IA2210ANSP.Q1BalDue), get_currency(IA2210ANSP.Q1TotPay)){n}{n}
def Q1AnFedPay_Calculation():{n}{t}return c_dollar(get_float(IA2210ANSP.Q1FedPay) * 4){n}{n}
def Q1AnInc_Calculation():{n}{t}return c_dollar(get_float(IA2210ANSP.Q1NetInc) * 4){n}{n}
def Q1AnItmDed_Calculation():{n}{t}if get_bool(IAF1040.ItemCheck) == True:{n}{t}{t}return c_dollar(get_float(IA2210ANSP.Q1ItmDed) * 4){n}{t}else:{n}{t}{t}return 0{n}{n}
def Q1Balance_Calculation():{n}{t}return max_value(0, get_currency(IA2210ANSP.Q1TotTax) - get_currency(IA2210ANSP.Q1ExemCr) - get_currency(IA2210ANSP.Q1NonRefCr) - get_currency(IA2210ANSP.Q1RefCr)){n}{n}
def Q1BalDue_Calculation():{n}{t}return get_currency(IA2210ANSP.Q1PerTax){n}{n}
def Q1Deduct_Calculation():{n}{t}return max_value(get_currency(IA2210ANSP.Q1AnItmDed), get_currency(IA2210ANSP.Q1StndDed)){n}{n}
def Q1ExemCr_Calculation():{n}{t}return get_currency(IAF1040.BExemCr){n}{n}
def Q1PerTax_Calculation():{n}{t}return c_dollar(get_float(IA2210ANSP.Q1Balance) * 0.225){n}{n}
def Q1ReqPay_Calculation():{n}{t}return get_currency(IA2210SP.Q1Install){n}{n}
def Q1StndDed_Calculation():{n}{t}# updated for 2018{n}{t}if IAFS() == 2 or IAFS() == 5 or IAFS() == 6:{n}{t}{t}return Decimal("5000"){n}{t}else:{n}{t}{t}return Decimal("2030"){n}{n}
def Q1Tax_Calculation():{n}{t}Mid = Currency(){n}{n}{t}MidInt = Long(){n}{n}{t}TotTaxInc = Currency(){n}{t}# updated for 2018{n}{t}TotTaxInc = get_currency(IA2210ANSP.Q1TaxInc){n}{t}if TotTaxInc > Decimal("95650"):{n}{t}{t}Mid = TotTaxInc{n}{t}elif TotTaxInc > Decimal("150"):{n}{t}{t}MidInt = CLng(( TotTaxInc - Decimal("1") )  / Decimal("50")){n}{t}{t}Mid = ( CCur(MidInt) * Decimal("50") )  + Decimal("25"){n}{t}else:{n}{t}{t}Mid = Decimal("0"){n}{t}return Tax(Mid){n}{n}
def Q1TaxInc_Calculation():{n}{t}return max_value(0, get_currency(IA2210ANSP.Q1AnInc) - get_currency(IA2210ANSP.Q1AnFedPay) - get_currency(IA2210ANSP.Q1Deduct)){n}{n}
def Q1TotPay_Calculation():{n}{t}return get_currency(IA2210ANSP.Q1ReqPay){n}{n}
def Q1TotTax_Calculation():{n}{t}return get_currency(IA2210ANSP.Q1Tax) + get_currency(IA2210ANSP.Q1OthTax){n}{n}
def Q1Unpay_Calculation():{n}{t}return max_value(0, get_currency(IA2210ANSP.Q1TotPay) - get_currency(IA2210ANSP.Q1BalDue)){n}{n}
def Q2AIInstall_Calculation():{n}{t}return min_value(get_currency(IA2210ANSP.Q2BalDue), get_currency(IA2210ANSP.Q2TotPay)){n}{n}
def Q2AnFedPay_Calculation():{n}{t}return c_dollar(get_float(IA2210ANSP.Q2FedPay) * 2.4){n}{n}
def Q2AnInc_Calculation():{n}{t}return c_dollar(get_float(IA2210ANSP.Q2NetInc) * 2.4){n}{n}
def Q2AnItmDed_Calculation():{n}{t}if get_bool(IAF1040.ItemCheck) == True:{n}{t}{t}return c_dollar(get_float(IA2210ANSP.Q2ItmDed) * 2.4){n}{t}else:{n}{t}{t}return 0{n}{n}
def Q2Balance_Calculation():{n}{t}return max_value(0, get_currency(IA2210ANSP.Q2TotTax) - get_currency(IA2210ANSP.Q2ExemCr) - get_currency(IA2210ANSP.Q2NonRefCr) - get_currency(IA2210ANSP.Q2RefCr)){n}{n}
def Q2BalDue_Calculation():{n}{t}return max_value(0, get_currency(IA2210ANSP.Q2PerTax) - get_currency(IA2210ANSP.Q2PQInst)){n}{n}
def Q2Deduct_Calculation():{n}{t}return max_value(get_currency(IA2210ANSP.Q2AnItmDed), get_currency(IA2210ANSP.Q2StndDed)){n}{n}
def Q2ExemCr_Calculation():{n}{t}return get_currency(IA2210ANSP.Q1ExemCr){n}{n}
def Q2PerTax_Calculation():{n}{t}return c_dollar(get_float(IA2210ANSP.Q2Balance) * 0.45){n}{n}
def Q2PQInst_Calculation():{n}{t}return get_currency(IA2210ANSP.Q1AIInstall){n}{n}
def Q2PQUnpay_Calculation():{n}{t}return get_currency(IA2210ANSP.Q1Unpay){n}{n}
def Q2ReqPay_Calculation():{n}{t}return get_currency(IA2210SP.Q2Install){n}{n}
def Q2StndDed_Calculation():{n}{t}return get_currency(IA2210ANSP.Q1StndDed){n}{n}
def Q2Tax_Calculation():{n}{t}Mid = Currency(){n}{n}{t}MidInt = Long(){n}{n}{t}TotTaxInc = Currency(){n}{t}# updated for 2018{n}{t}TotTaxInc = get_currency(IA2210ANSP.Q2TaxInc){n}{t}if TotTaxInc > Decimal("95650"):{n}{t}{t}Mid = TotTaxInc{n}{t}elif TotTaxInc > Decimal("150"):{n}{t}{t}MidInt = CLng(( TotTaxInc - Decimal("1") )  / Decimal("50")){n}{t}{t}Mid = ( CCur(MidInt) * Decimal("50") )  + Decimal("25"){n}{t}else:{n}{t}{t}Mid = Decimal("0"){n}{t}return Tax(Mid){n}{n}
def Q2TaxInc_Calculation():{n}{t}return max_value(0, get_currency(IA2210ANSP.Q2AnInc) - get_currency(IA2210ANSP.Q2AnFedPay) - get_currency(IA2210ANSP.Q2Deduct)){n}{n}
def Q2TotPay_Calculation():{n}{t}return get_currency(IA2210ANSP.Q2ReqPay) + get_currency(IA2210ANSP.Q2PQUnpay){n}{n}
def Q2TotTax_Calculation():{n}{t}return get_currency(IA2210ANSP.Q2Tax) + get_currency(IA2210ANSP.Q2OthTax){n}{n}
def Q2Unpay_Calculation():{n}{t}return max_value(0, get_currency(IA2210ANSP.Q2TotPay) - get_currency(IA2210ANSP.Q2BalDue)){n}{n}
def Q3AIInstall_Calculation():{n}{t}return min_value(get_currency(IA2210ANSP.Q3BalDue), get_currency(IA2210ANSP.Q3TotPay)){n}{n}
def Q3AnFedPay_Calculation():{n}{t}return c_dollar(get_float(IA2210ANSP.Q3FedPay) * 1.5){n}{n}
def Q3AnInc_Calculation():{n}{t}return c_dollar(get_float(IA2210ANSP.Q3NetInc) * 1.5){n}{n}
def Q3AnItmDed_Calculation():{n}{t}if get_bool(IAF1040.ItemCheck) == True:{n}{t}{t}return c_dollar(get_float(IA2210ANSP.Q3ItmDed) * 1.5){n}{t}else:{n}{t}{t}return 0{n}{n}
def Q3Balance_Calculation():{n}{t}return max_value(0, get_currency(IA2210ANSP.Q3TotTax) - get_currency(IA2210ANSP.Q3ExemCr) - get_currency(IA2210ANSP.Q3NonRefCr) - get_currency(IA2210ANSP.Q3RefCr)){n}{n}
def Q3BalDue_Calculation():{n}{t}return max_value(0, get_currency(IA2210ANSP.Q3PerTax) - get_currency(IA2210ANSP.Q3PQInst)){n}{n}
def Q3Deduct_Calculation():{n}{t}return max_value(get_currency(IA2210ANSP.Q3AnItmDed), get_currency(IA2210ANSP.Q3StndDed)){n}{n}
def Q3ExemCr_Calculation():{n}{t}return get_currency(IA2210ANSP.Q1ExemCr){n}{n}
def Q3PerTax_Calculation():{n}{t}return c_dollar(get_float(IA2210ANSP.Q3Balance) * 0.675){n}{n}
def Q3PQInst_Calculation():{n}{t}return get_currency(IA2210ANSP.Q1AIInstall) + get_currency(IA2210ANSP.Q2AIInstall){n}{n}
def Q3PQUnpay_Calculation():{n}{t}return get_currency(IA2210ANSP.Q2Unpay){n}{n}
def Q3ReqPay_Calculation():{n}{t}return get_currency(IA2210SP.Q3Install){n}{n}
def Q3StndDed_Calculation():{n}{t}return get_currency(IA2210ANSP.Q1StndDed){n}{n}
def Q3Tax_Calculation():{n}{t}Mid = Currency(){n}{n}{t}MidInt = Long(){n}{n}{t}TotTaxInc = Currency(){n}{t}# updated for 2018{n}{t}TotTaxInc = get_currency(IA2210ANSP.Q3TaxInc){n}{t}if TotTaxInc > Decimal("95650"):{n}{t}{t}Mid = TotTaxInc{n}{t}elif TotTaxInc > Decimal("150"):{n}{t}{t}MidInt = CLng(( TotTaxInc - Decimal("1") )  / Decimal("50")){n}{t}{t}Mid = ( CCur(MidInt) * Decimal("50") )  + Decimal("25"){n}{t}else:{n}{t}{t}Mid = Decimal("0"){n}{t}return Tax(Mid){n}{n}
def Q3TaxInc_Calculation():{n}{t}return max_value(0, get_currency(IA2210ANSP.Q3AnInc) - get_currency(IA2210ANSP.Q3AnFedPay) - get_currency(IA2210ANSP.Q3Deduct)){n}{n}
def Q3TotPay_Calculation():{n}{t}return get_currency(IA2210ANSP.Q3ReqPay) + get_currency(IA2210ANSP.Q3PQUnpay){n}{n}
def Q3TotTax_Calculation():{n}{t}return get_currency(IA2210ANSP.Q3Tax) + get_currency(IA2210ANSP.Q3OthTax){n}{n}
def Q3Unpay_Calculation():{n}{t}return max_value(0, get_currency(IA2210ANSP.Q3TotPay) - get_currency(IA2210ANSP.Q3BalDue)){n}{n}
def Q4AIInstall_Calculation():{n}{t}return min_value(get_currency(IA2210ANSP.Q4BalDue), get_currency(IA2210ANSP.Q4TotPay)){n}{n}
def Q4AnFedPay_Calculation():{n}{t}return get_currency(IA2210ANSP.Q4FedPay){n}{n}
def Q4AnInc_Calculation():{n}{t}return get_currency(IA2210ANSP.Q4NetInc){n}{n}
def Q4AnItmDed_Calculation():{n}{t}return get_currency(IA2210ANSP.Q4ItmDed){n}{n}
def Q4Balance_Calculation():{n}{t}return max_value(0, get_currency(IA2210ANSP.Q4TotTax) - get_currency(IA2210ANSP.Q4ExemCr) - get_currency(IA2210ANSP.Q4NonRefCr) - get_currency(IA2210ANSP.Q4RefCr)){n}{n}
def Q4BalDue_Calculation():{n}{t}return max_value(0, get_currency(IA2210ANSP.Q4PerTax) - get_currency(IA2210ANSP.Q4PQInst)){n}{n}
def Q4Deduct_Calculation():{n}{t}return max_value(get_currency(IA2210ANSP.Q4AnItmDed), get_currency(IA2210ANSP.Q4StndDed)){n}{n}
def Q4ExemCr_Calculation():{n}{t}return get_currency(IA2210ANSP.Q1ExemCr){n}{n}
def Q4FedPay_Calculation():{n}{t}return get_currency(IAF1040.BFedDed) - get_currency(IAF1040.BFedTax){n}{n}
def Q4ItmDed_Calculation():{n}{t}if get_bool(IAF1040.ItemCheck) == True:{n}{t}{t}return get_currency(IAF1040.BDedBox){n}{t}else:{n}{t}{t}return 0{n}{n}
def Q4NetInc_Calculation():{n}{t}return get_currency(IAF1040.BNet){n}{n}
def Q4NonRefCr_Calculation():{n}{t}return get_currency(IAF1040.BTuit) + get_currency(IAF1040.BVolFireCr) + get_currency(IAF1040.BCrNon) + get_currency(IAF1040.BOutState) + get_currency(IAF1040.BOthIACr){n}{n}
def Q4OthTax_Calculation():{n}{t}return get_currency(IAF1040.BLump) + get_currency(IAF1040.BIAMin){n}{n}
def Q4PerTax_Calculation():{n}{t}return c_dollar(get_float(IA2210ANSP.Q4Balance) * 0.9){n}{n}
def Q4PQInst_Calculation():{n}{t}return get_currency(IA2210ANSP.Q1AIInstall) + get_currency(IA2210ANSP.Q2AIInstall) + get_currency(IA2210ANSP.Q3AIInstall){n}{n}
def Q4PQUnpay_Calculation():{n}{t}return get_currency(IA2210ANSP.Q3Unpay){n}{n}
def Q4RefCr_Calculation():{n}{t}return get_currency(IAF1040.BFuel) + get_currency(IAF1040.BChild) + get_currency(IAF1040.BIEIC) + get_currency(IAF1040.BOthRefCr){n}{n}
def Q4ReqPay_Calculation():{n}{t}return get_currency(IA2210SP.Q4Install){n}{n}
def Q4StndDed_Calculation():{n}{t}return get_currency(IA2210ANSP.Q1StndDed){n}{n}
def Q4Tax_Calculation():{n}{t}Mid = Currency(){n}{n}{t}MidInt = Long(){n}{n}{t}TotTaxInc = Currency(){n}{t}# updated for 2018{n}{t}TotTaxInc = get_currency(IA2210ANSP.Q4TaxInc){n}{t}if TotTaxInc > Decimal("95650"):{n}{t}{t}Mid = TotTaxInc{n}{t}elif TotTaxInc > Decimal("150"):{n}{t}{t}MidInt = CLng(( TotTaxInc - Decimal("1") )  / Decimal("50")){n}{t}{t}Mid = ( CCur(MidInt) * Decimal("50") )  + Decimal("25"){n}{t}else:{n}{t}{t}Mid = Decimal("0"){n}{t}return Tax(Mid){n}{n}
def Q4TaxInc_Calculation():{n}{t}return max_value(0, get_currency(IA2210ANSP.Q4AnInc) - get_currency(IA2210ANSP.Q4AnFedPay) - get_currency(IA2210ANSP.Q4Deduct)){n}{n}
def Q4TotPay_Calculation():{n}{t}return get_currency(IA2210ANSP.Q4ReqPay) + get_currency(IA2210ANSP.Q4PQUnpay){n}{n}
def Q4TotTax_Calculation():{n}{t}return get_currency(IA2210ANSP.Q4Tax) + get_currency(IA2210ANSP.Q4OthTax){n}{n}
def SSN_Calculation():{n}{t}return get_string(IAF1040.SpouseSSN){n}{n}def Amt8_Calculation():{n}{t}return c_dollar(get_float(IA2210SP.Bal) * 0.9){n}{n}
def Bal_Calculation():{n}{t}return max_value(0, get_currency(IA2210SP.CYTax) - get_currency(IA2210SP.TotCr)){n}{n}
def ChildC_Calculation():{n}{t}return get_currency(IAF1040.BChild){n}{n}
def CYTax_Calculation():{n}{t}return get_currency(IAF1040.BBal4){n}{n}
def Description_Calculation():{n}{t}return CStr(get_currency(IA2210SP.Penalty)) + ' Penalty'{n}{n}
def EFile_Calculation():{n}{t}if get_bool(IA1040X.EFAmend) == True:{n}{t}{t}return 0{n}{t}elif get_bool(IAF1040.CombMFS) == False:{n}{t}{t}return 0{n}{t}elif get_bool(IA2210SP.Print) == True:{n}{t}{t}return 1{n}{t}elif get_currency(IA2210SP.Amt8) >= Decimal("200"):{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def EFStQ1_Calculation():{n}{t}return get_currency(IASTATEEST.SPStApply) + get_currency(IASTATEEST.SPStQ1){n}{n}
def ExpPenalty_Calculation():{n}{t}if get_currency(IA2210SP.Penalty) > 0:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def Fuel_Calculation():{n}{t}return get_currency(IAF1040.BFuel){n}{n}
def IAEIC_Calculation():{n}{t}return get_currency(IAF1040.BIEIC){n}{n}
def Names_Calculation():{n}{t}return get_string(IAREQUIRED.SPCombName){n}{n}
def NoPen_Calculation():{n}{t}return get_bool(USWPrepMnNm.AlwaysState2210){n}{n}
def Penalty_Calculation():{n}{t}if get_bool(IAF1040.CombMFS) == False:{n}{t}{t}return 0{n}{t}elif get_bool(IA2210SP.NoPen) == True:{n}{t}{t}return 0{n}{t}else:{n}{t}{t}return get_currency(IAPENALTYSP.TotPen){n}{n}
def Print_Calculation():{n}{t}if get_bool(IAF1040.CombMFS) == False:{n}{t}{t}return 0{n}{t}elif get_bool(IA2210SP.AnInc) == True:{n}{t}{t}return 1{n}{t}elif get_currency(IA2210SP.Penalty) > 0:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def PYTax_Calculation():{n}{t}AGIBonus = Currency(){n}{t}AGIBonus = get_currency(USWRec.PYSAGI) + get_currency(USZIA1040.IATotBonusSp){n}{t}if get_bool(IAF1040.CombMFS) == False:{n}{t}{t}return 0{n}{t}elif get_string(USZIA1040.IAPYFS) == get_string(IAREQUIRED.FilingStatus):{n}{t}{t}if AGIBonus > Decimal("150000"):{n}{t}{t}{t}return c_dollar(get_float(USZIA1040.IA2210PYTaxSp) * 1.1){n}{t}{t}else:{n}{t}{t}{t}return get_currency(USZIA1040.IA2210PYTaxSp){n}{t}else:{n}{t}{t}return 0{n}{n}
def Q1AnInc_Calculation():{n}{t}if get_bool(IA2210SP.AnInc) == True:{n}{t}{t}return get_currency(IA2210ANSP.Q1AIInstall){n}{t}else:{n}{t}{t}return 0{n}{n}
def Q1DaysB_Calculation():{n}{t}if get_currency(IA2210SP.Penalty) > 0:{n}{t}{t}return 'See'{n}{t}else:{n}{t}{t}return ''{n}{n}
def Q1Est_Calculation():{n}{t}return get_currency(IA2210SP.Q1WH) + get_currency(IASTATEEST.SPStApply) + get_currency(IASTATEEST.SPStQ1){n}{n}
def Q1Install_Calculation():{n}{t}return c_dollar(get_float(IA2210SP.Small) * 0.25){n}{n}
def Q1Ln11_Calculation():{n}{t}if get_bool(IA2210SP.AnInc) == True:{n}{t}{t}return get_currency(IA2210SP.Q1AnInc){n}{t}else:{n}{t}{t}return get_currency(IA2210SP.Q1Install){n}{n}
def Q1Ln19a_Calculation():{n}{t}if get_currency(IA2210SP.Penalty) > 0:{n}{t}{t}return 'Worksheet'{n}{t}else:{n}{t}{t}return ''{n}{n}
def Q1Ln19B_Calculation():{n}{t}if get_currency(IA2210SP.Penalty) > 0:{n}{t}{t}return 'Attached'{n}{t}else:{n}{t}{t}return ''{n}{n}
def Q1Undpay_Calculation():{n}{t}if get_currency(IA2210SP.Q1Est) < get_currency(IA2210SP.Q1Ln11):{n}{t}{t}return get_currency(IA2210SP.Q1Ln11) - get_currency(IA2210SP.Q1Est){n}{t}else:{n}{t}{t}return 0{n}{n}
def Q1WH_Calculation():{n}{t}return c_dollar(CDbl(get_currency(IAF1040.BIATaxWith)) * 0.25){n}{n}
def Q2AnInc_Calculation():{n}{t}if get_bool(IA2210SP.AnInc) == True:{n}{t}{t}return get_currency(IA2210ANSP.Q2AIInstall){n}{t}else:{n}{t}{t}return 0{n}{n}
def Q2est_Calculation():{n}{t}return get_currency(IA2210SP.Q2WH) + get_currency(IASTATEEST.SPStQ2){n}{n}
def Q2Install_Calculation():{n}{t}return c_dollar(CDbl(get_currency(IA2210SP.Small) - get_currency(IA2210SP.Q1Install)) * 0.3333){n}{n}
def Q2Ln11_Calculation():{n}{t}if get_bool(IA2210SP.AnInc) == True:{n}{t}{t}return get_currency(IA2210SP.Q2AnInc){n}{t}else:{n}{t}{t}return get_currency(IA2210SP.Q2Install){n}{n}
def Q2WH_Calculation():{n}{t}return c_dollar(CDbl(get_currency(IAF1040.BIATaxWith) - get_currency(IA2210SP.Q1WH)) * 0.3333){n}{n}
def Q3AnInc_Calculation():{n}{t}if get_bool(IA2210SP.AnInc) == True:{n}{t}{t}return get_currency(IA2210ANSP.Q3AIInstall){n}{t}else:{n}{t}{t}return 0{n}{n}
def Q3Est_Calculation():{n}{t}return get_currency(IA2210SP.Q3WH) + get_currency(IASTATEEST.SPStQ3){n}{n}
def Q3Install_Calculation():{n}{t}return c_dollar(CDbl(get_currency(IA2210SP.Small) - get_currency(IA2210SP.Q1Install) - get_currency(IA2210SP.Q2Install)) * 0.5){n}{n}
def Q3Ln11_Calculation():{n}{t}if get_bool(IA2210SP.AnInc) == True:{n}{t}{t}return get_currency(IA2210SP.Q3AnInc){n}{t}else:{n}{t}{t}return get_currency(IA2210SP.Q3Install){n}{n}
def Q3WH_Calculation():{n}{t}return c_dollar(CDbl(get_currency(IAF1040.BIATaxWith) - get_currency(IA2210SP.Q1WH) - get_currency(IA2210SP.Q2WH)) * 0.5){n}{n}
def Q4AnInc_Calculation():{n}{t}if get_bool(IA2210SP.AnInc) == True:{n}{t}{t}return get_currency(IA2210ANSP.Q4AIInstall){n}{t}else:{n}{t}{t}return 0{n}{n}
def Q4Est_Calculation():{n}{t}return get_currency(IA2210SP.Q4WH) + get_currency(IASTATEEST.SPStQ4){n}{n}
def Q4Install_Calculation():{n}{t}return get_currency(IA2210SP.Small) - get_currency(IA2210SP.Q1Install) - get_currency(IA2210SP.Q2Install) - get_currency(IA2210SP.Q3Install){n}{n}
def Q4Ln11_Calculation():{n}{t}if get_bool(IA2210SP.AnInc) == True:{n}{t}{t}return get_currency(IA2210SP.Q4AnInc){n}{t}else:{n}{t}{t}return get_currency(IA2210SP.Q4Install){n}{n}
def Q4WH_Calculation():{n}{t}return get_currency(IAF1040.BIATaxWith) - get_currency(IA2210SP.Q1WH) - get_currency(IA2210SP.Q2WH) - get_currency(IA2210SP.Q3WH){n}{n}
def RefundCr_Calculation():{n}{t}return get_currency(IAF1040.BOthRefCr){n}{n}
def Small_Calculation():{n}{t}if get_bool(IAF1040.CombMFS) == False:{n}{t}{t}return 0{n}{t}elif get_bool(IA2210SP.NoPen) == True:{n}{t}{t}return 0{n}{t}elif get_currency(IA2210SP.Amt8) < Decimal("200"):{n}{t}{t}return 0{n}{t}elif get_bool(IA2210SP.PYZero) == True:{n}{t}{t}return 0{n}{t}elif get_currency(IA2210SP.PYTax) == 0:{n}{t}{t}return get_currency(IA2210SP.Amt8){n}{t}else:{n}{t}{t}return min_value(get_currency(IA2210SP.Amt8), get_currency(IA2210SP.PYTax)){n}{n}
def SSN_Calculation():{n}{t}return get_string(IAF1040.SpouseSSN){n}{n}
def TotCr_Calculation():{n}{t}return get_currency(IA2210SP.Fuel) + get_currency(IA2210SP.ChildC) + get_currency(IA2210SP.IAEIC) + get_currency(IA2210SP.RefundCr){n}{n}def AbsL6ML7_Calculation():{n}{t}if get_currency(IA3903.L6ML7) < 0:{n}{t}{t}return Abs(get_currency(IA3903.L6ML7)){n}{t}else:{n}{t}{t}return 0{n}{n}
def CodeP_Calculation():{n}{t}if get_bool(USF3903.StateNotFed, ParentCopy()) == True:{n}{t}{t}return get_currency(USF3903.CodeP, ParentCopy()){n}{t}else:{n}{t}{t}return 0{n}{n}
def Common_Calculation():{n}{t}return get_string(USWBasicInfo.TPCommon){n}{n}
def Description_Calculation():{n}{t}return 'Moving Expenses ' + CStr(get_currency(IA3903.MovExpDdn)){n}{n}
def DNo_Calculation():{n}{t}if get_number(IA3903.NewLessOld) < 50:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def DYes_Calculation():{n}{t}if get_number(IA3903.NewLessOld) >= 50:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def Exist_Calculation():{n}{t}return 1{n}{n}
def ExReimb_Calculation():{n}{t}return get_currency(USF3903.ExReimb, ParentCopy()){n}{n}
def Fed3903_Calculation():{n}{t}return 'BEGIN HERE: Open federal Form 3903{t}   Click on the folder to open the supporting document.'{n}{n}
def FedMilNo_Calculation():{n}{t}if get_bool(USF3903.EligibleY, ParentCopy()) == True:{n}{t}{t}return 0{n}{t}else:{n}{t}{t}return 1{n}{n}
def FedMilYes_Calculation():{n}{t}if get_bool(USF3903.EligibleY, ParentCopy()) == True:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def FirstName_Calculation():{n}{t}if get_bool(IA3903.Spouse) == True:{n}{t}{t}return get_string(IAF1040.SpouseFirst){n}{t}else:{n}{t}{t}return get_string(IAF1040.FirstName){n}{n}
def IAExReimb_Calculation():{n}{t}#after testing not sure code P will have an excess for a non military move, also need to review how federal handles the .ExReimb{n}{t}#as of 1/2/2019 fed is pulling code P all the time and taking to wages even if a non mil. move, IA instructions appear that could have reimb. from a 2017 move, not sure if should be on fed or if no IA wage adj would be needed, leave codeP 
def Joint_Calculation():{n}{t}return get_bool(USF3903.Joint, ParentCopy()){n}{n}
def JtCommon_Calculation():{n}{t}return get_string(USWBasicInfo.CombFirst){n}{n}
def L6ML7_Calculation():{n}{t}return get_currency(IA3903.TotalExp) - get_currency(IA3903.CodeP){n}{n}
def LastName_Calculation():{n}{t}if get_bool(IA3903.Spouse) == True:{n}{t}{t}return get_string(IAF1040.SpouseLast){n}{t}else:{n}{t}{t}return get_string(IAF1040.LastName){n}{n}
def MoveExp_Calculation():{n}{t}if get_bool(IA3903.FedMilYes) == True:{n}{t}{t}return 0{n}{t}else:{n}{t}{t}return get_currency(USF3903.MoveExp, ParentCopy()){n}{n}
def MovExpDdn_Calculation():{n}{t}if get_bool(USF3903.StateNotFed, ParentCopy()) == True:{n}{t}{t}return max_value(0, get_currency(IA3903.L6ML7)){n}{t}else:{n}{t}{t}return 0{n}{n}
def NewLessOld_Calculation():{n}{t}return max_value(0, get_number(IA3903.ToNewWork) - get_number(IA3903.ToOldWork)){n}{n}
def PrintMe_Calculation():{n}{t}if get_currency(IA3903.MovExpDdn) != 0:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def Spouse_Calculation():{n}{t}return get_bool(USF3903.Spouse, ParentCopy()){n}{n}
def SpouseCommon_Calculation():{n}{t}return get_string(USWBasicInfo.SPCommon){n}{n}
def SSN_Calculation():{n}{t}if get_bool(IA3903.Spouse) == True:{n}{t}{t}return get_string(IAF1040.SpouseSSN){n}{t}else:{n}{t}{t}return get_string(IAF1040.SSN){n}{n}
def Taxpayer_Calculation():{n}{t}return get_bool(USF3903.Taxpayer, ParentCopy()){n}{n}
def ToNewWork_Calculation():{n}{t}if get_bool(IA3903.FedMilYes) == True:{n}{t}{t}return 0{n}{t}else:{n}{t}{t}return get_number(USF3903.PrToNewWork, ParentCopy()){n}{n}
def ToOldWork_Calculation():{n}{t}if get_bool(IA3903.FedMilYes) == True:{n}{t}{t}return 0{n}{t}else:{n}{t}{t}return get_number(USF3903.PrToOldWork, ParentCopy()){n}{n}
def TotalExp_Calculation():{n}{t}if get_bool(USF3903.StateNotFed, ParentCopy()) == True:{n}{t}{t}return get_currency(IA3903.MoveExp) + get_currency(IA3903.TravExp){n}{t}else:{n}{t}{t}return 0{n}{n}
def TotMoreThanPN_Calculation():{n}{t}if get_currency(IA3903.TotalExp) <= get_currency(IA3903.CodeP):{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def TotMoreThanPY_Calculation():{n}{t}if get_currency(IA3903.TotalExp) > get_currency(IA3903.CodeP):{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def TravExp_Calculation():{n}{t}if get_bool(IA3903.FedMilYes) == True:{n}{t}{t}return 0{n}{t}else:{n}{t}{t}return get_currency(USF3903.TravExp, ParentCopy()){n}{n}def AccFedDep_Calculation(Index):{n}{t}Stuff = Long(){n}{t}Stuff = get_number(IA4562A.StateDeprCopyNbr(Index)){n}{t}if get_number(IA4562A.StateDeprNbr) > Index:{n}{t}{t}return get_currency(USW2106Veh.AccumFed, Stuff){n}{t}else:{n}{t}{t}return 0{n}{n}
def AccIADep_Calculation(Index):{n}{t}Stuff = Long(){n}{t}#will need to review next year to make sure prior depr brings forward the limitied IA lux limits{n}{t}Stuff = get_number(IA4562A.StateDeprCopyNbr(Index)){n}{t}if get_number(IA4562A.StateDeprNbr) > Index:{n}{t}{t}if get_bool(USW2106Veh.New, Stuff) == True:{n}{t}{t}{t}if get_currency(USW2106Veh.LuxLimState2, Stuff) == 0 and get_currency(USW2106Veh.PerLimState2, Stuff) == 0:{n}{t}{t}{t}{t}return get_currency(USW2106Veh.AccumState, Stuff){n}{t}{t}{t}else:{n}{t}{t}{t}{t}return get_currency(USW2106Veh.PriorState) + min_value(get_currency(USW2106Veh.DeprNoBonus), get_currency(USW2106Veh.PerLimState2, Stuff)){n}{t}{t}else:{n}{t}{t}{t}return get_currency(USW2106Veh.AccumState, Stuff){n}{t}else:{n}{t}{t}return 0{n}{n}
def Basis_Calculation(Index):{n}{t}Stuff = Long(){n}{t}Stuff = get_number(IA4562A.StateDeprCopyNbr(Index)){n}{t}if get_number(IA4562A.StateDeprNbr) > Index:{n}{t}{t}return get_currency(USW2106Veh.Basis, Stuff){n}{t}else:{n}{t}{t}return 0{n}{n}
def DateServ_Calculation(Index):{n}{t}Stuff = Long(){n}{t}Stuff = get_number(IA4562A.StateDeprCopyNbr(Index)){n}{t}if get_number(IA4562A.StateDeprNbr) > Index:{n}{t}{t}return get_string(USW2106Veh.Date, Stuff){n}{t}else:{n}{t}{t}return ''{n}{n}
def DepAdj_Calculation():{n}{t}return get_currency(IA4562A.TotColF) - get_currency(IA4562A.TotColI){n}{n}
def Desc_Calculation():{n}{t}return get_string(USF2106.Desc, ParentCopy()){n}{n}
def DisAdj_Calculation(Index):{n}{t}return get_currency(IA4562A.DisIADep(Index)) - get_currency(IA4562A.DisFedDep(Index)){n}{n}
def EFSP_Calculation():{n}{t}if get_bool(IA4562A.PrIA4562A) == True:{n}{t}{t}if get_bool(IAF1040.CombMFS) == False:{n}{t}{t}{t}return 0{n}{t}{t}elif get_bool(IA4562A.Spouse) == True:{n}{t}{t}{t}return 1{n}{t}{t}else:{n}{t}{t}{t}return 0{n}{t}else:{n}{t}{t}return 0{n}{n}
def EFSPDisp_Calculation():{n}{t}if get_bool(IA4562A.PrIA4562A) == True and get_currency(IA4562A.TotDisAdj) != 0:{n}{t}{t}if get_bool(IAF1040.CombMFS) == False:{n}{t}{t}{t}return 0{n}{t}{t}elif get_bool(IA4562A.Spouse) == True:{n}{t}{t}{t}return 1{n}{t}{t}else:{n}{t}{t}{t}return 0{n}{t}else:{n}{t}{t}return 0{n}{n}
def EFTPJoint_Calculation():{n}{t}if get_bool(IA4562A.PrIA4562A) == True:{n}{t}{t}if get_bool(IAF1040.CombMFS) == False:{n}{t}{t}{t}return 1{n}{t}{t}elif get_bool(IA4562A.Taxpayer) == True:{n}{t}{t}{t}return 1{n}{t}{t}else:{n}{t}{t}{t}return 0{n}{t}else:{n}{t}{t}return 0{n}{n}
def EFTPJointDisp_Calculation():{n}{t}if get_bool(IA4562A.PrIA4562A) == True and get_currency(IA4562A.TotDisAdj) != 0:{n}{t}{t}if get_bool(IAF1040.CombMFS) == False:{n}{t}{t}{t}return 1{n}{t}{t}elif get_bool(IA4562A.Taxpayer) == True:{n}{t}{t}{t}return 1{n}{t}{t}else:{n}{t}{t}{t}return 0{n}{t}else:{n}{t}{t}return 0{n}{n}
def EmpBusType_Calculation():{n}{t}if get_bool(USF2106.QPA, ParentCopy()) == True or get_bool(USF2106.FBO, ParentCopy()) == True or get_bool(USF2106.NatG, ParentCopy()) == True:{n}{t}{t}return '1040'{n}{t}elif get_bool(USF2106.Disable, ParentCopy()) == True:{n}{t}{t}return '27'{n}{t}else:{n}{t}{t}return '20'{n}{n}
def Exist_Calculation():{n}{t}return 1{n}{n}
def Fed179_Calculation(Index):{n}{t}Stuff = Long(){n}{t}Stuff = get_number(IA4562A.StateDeprCopyNbr(Index)){n}{t}if get_number(IA4562A.StateDeprNbr) > Index:{n}{t}{t}if get_bool(USW2106Veh.New, Stuff) == True:{n}{t}{t}{t}return get_currency(USW2106Veh.Sec179Calc, Stuff){n}{t}{t}else:{n}{t}{t}{t}return 0{n}{t}else:{n}{t}{t}return 0{n}{n}
def FedDepDed_Calculation(Index):{n}{t}Stuff = Long(){n}{t}Stuff = get_number(IA4562A.StateDeprCopyNbr(Index)){n}{t}if get_number(IA4562A.StateDeprNbr) > Index:{n}{t}{t}if get_bool(USW2106Veh.New, Stuff) == True:{n}{t}{t}{t}return get_currency(USW2106Veh.Bonus, Stuff) + max_value(0, get_currency(USW2106Veh.TotDepr, Stuff) - get_currency(USW2106Veh.Sec179, Stuff) - get_currency(USW2106Veh.Bonus, Stuff)){n}{t}{t}else:{n}{t}{t}{t}return get_currency(USW2106Veh.TotDepr, Stuff){n}{t}else:{n}{t}{t}return 0{n}{n}
def IA179_Calculation(Index):{n}{t}Stuff = Long(){n}{t}# Iowa not yet coupled with increased Section 179 expensing for 2017{n}{t}Stuff = get_number(IA4562A.StateDeprCopyNbr(Index)){n}{t}if get_number(IA4562A.StateDeprNbr) > Index:{n}{t}{t}if get_bool(USW2106Veh.New, Stuff) == True:{n}{t}{t}{t}if get_currency(USW2106Veh.LuxLimState2, Stuff) == 0 and get_currency(USW2106Veh.PerLimState2, Stuff) == 0:{n}{t}{t}{t}{t}return get_currency(USW2106Veh.StateSec179Calc, Stuff){n}{t}{t}{t}else:{n}{t}{t}{t}{t}return min_value(get_currency(USW2106Veh.StateSec179Calc, Stuff), get_currency(USW2106Veh.PerLimState2, Stuff)){n}{t}{t}else:{n}{t}{t}{t}return 0{n}{t}else:{n}{t}{t}return 0{n}{n}
def Life_Calculation(Index):{n}{t}if get_string(IA4562A.DateServ(Index)) != '':{n}{t}{t}return '5'{n}{t}else:{n}{t}{t}return ''{n}{n}
def MACRSIA_Calculation(Index):{n}{t}Stuff = Long(){n}{t}#will need to review this next year for the state basis brought forward when hit the lower IA lux limits, will .DeprNoBonus still be valid{n}{t}Stuff = get_number(IA4562A.StateDeprCopyNbr(Index)){n}{t}if get_number(IA4562A.StateDeprNbr) > Index:{n}{t}{t}if get_bool(USW2106Veh.New, Stuff) == True:{n}{t}{t}{t}if get_currency(USW2106Veh.LuxLimState2, Stuff) == 0 and get_currency(USW2106Veh.PerLimState2, Stuff) == 0:{n}{t}{t}{t}{t}return max_value(0, get_currency(USW2106Veh.DeprNoBonus, Stuff) - get_currency(USW2106Veh.StateSec179, Stuff)){n}{t}{t}{t}else:{n}{t}{t}{t}{t}return max_value(0, min_value(get_currency(USW2106Veh.DeprNoBonus, Stuff), get_currency(USW2106Veh.PerLimState2, Stuff)) - get_currency(IA4562A.IA179(Index))){n}{t}{t}else:{n}{t}{t}{t}return get_currency(USW2106Veh.DeprNoBonus, Stuff){n}{t}else:{n}{t}{t}return 0{n}{n}
def Names_Calculation():{n}{t}return get_string(USF2106.FirstName, ParentCopy()){n}{n}
def Owner_Calculation():{n}{t}if get_bool(IA4562A.Taxpayer) == True and trim(get_string(USWBasicInfo.FirstName)) == '':{n}{t}{t}return 'the taxpayer'{n}{t}elif get_bool(IA4562A.Taxpayer) == True:{n}{t}{t}return get_string(USWBasicInfo.FirstName){n}{t}elif get_bool(IA4562A.Spouse) == True and trim(get_string(USWBasicInfo.SpouseFirst)) == '':{n}{t}{t}return 'the spouse'{n}{t}else:{n}{t}{t}return get_string(USWBasicInfo.SpouseFirst){n}{n}
def PrIA4562A_Calculation():{n}{t}if get_currency(IA4562A.TotFed179) != 0:{n}{t}{t}return 1{n}{t}elif get_currency(IA4562A.TotFDD) != 0:{n}{t}{t}return 1{n}{t}elif get_currency(IA4562A.TotIA179) != 0:{n}{t}{t}return 1{n}{t}elif get_currency(IA4562A.TotMACRS) != 0:{n}{t}{t}return 1{n}{t}elif get_currency(IA4562A.TotDisAdj) != 0:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def PropDesc_Calculation(Index):{n}{t}Stuff = Long(){n}{t}Stuff = get_number(IA4562A.StateDeprCopyNbr(Index)){n}{t}if get_number(IA4562A.StateDeprNbr) > Index:{n}{t}{t}return get_string(USW2106Veh.Occupation, Stuff) + ' Vehicle'{n}{t}else:{n}{t}{t}return ''{n}{n}
def Spouse_Calculation():{n}{t}if get_bool(USF2106.Spouse, ParentCopy()) == True:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def SSN_Calculation():{n}{t}return get_string(USF2106.SSN, ParentCopy()){n}{n}
def StateDeprCopyNbr_Calculation(Index):{n}{t}F2106 = Long(){n}{n}{t}DeprCount = Long(){n}{n}{t}MaxDepr = Long(){n}{n}{t}listedcount = Long(){n}{t}F2106 = GetParentCopy(USF2106){n}{t}listedcount = 0{n}{t}MaxDepr = GetAllCopies(USW2106Veh){n}{t}DeprCount = 0{n}{t}while DeprCount < MaxDepr:{n}{t}{t}DeprCount = DeprCount + 1{n}{t}{t}if GetParentCopy(USF2106, USW2106Veh, DeprCount) == F2106:{n}{t}{t}{t}if ( get_bool(USW2106Veh.BonusYes, DeprCount) == True or get_bool(USW2106Veh.IAFedStSec179, DeprCount) == True or get_bool(USW2106Veh.IAUsingLuxLim, DeprCount) == True )  and get_bool(USW2106Veh.Qualifies, DeprCount) == True:{n}{t}{t}{t}{t}if ( GetDate(USW2106Veh.Date, DeprCount) > datetime.datetime(9, 10, 2001) and GetDate(USW2106Veh.Date, DeprCount) < datetime.datetime(5, 6, 2003) )  or  ( GetDate(USW2106Veh.Date, DeprCount) > datetime.datetime(12, 31, 2007) and GetDate(USW2106Veh.Date, DeprCount) < MakeDate(1, 1, YearNumber + 1) ) :{n}{t}{t}{t}{t}{t}if listedcount == Index:{n}{t}{t}{t}{t}{t}{t}return DeprCount{n}{t}{t}{t}{t}{t}else:{n}{t}{t}{t}{t}{t}{t}listedcount = listedcount + 1{n}{t}return 0{n}{n}
def StateDeprNbr_Calculation():{n}{t}DeprCount = Long(){n}{n}{t}F2106 = Long(){n}{n}{t}MaxDepr = Long(){n}{n}{t}Total = Integer(){n}{t}DeprCount = 1{n}{t}F2106 = GetParentCopy(USF2106){n}{t}MaxDepr = GetAllCopies(USW2106Veh){n}{t}Total = 0{n}{t}while DeprCount <= MaxDepr:{n}{t}{t}if GetParentCopy(USF2106, USW2106Veh, DeprCount) == F2106:{n}{t}{t}{t}if ( get_bool(USW2106Veh.BonusYes, DeprCount) == True or get_bool(USW2106Veh.IAFedStSec179, DeprCount) == True or get_bool(USW2106Veh.IAUsingLuxLim, DeprCount) == True )  and get_bool(USW2106Veh.Qualifies, DeprCount) == True:{n}{t}{t}{t}{t}if ( GetDate(USW2106Veh.Date, DeprCount) > datetime.datetime(9, 10, 2001) and GetDate(USW2106Veh.Date, DeprCount) < datetime.datetime(5, 6, 2003) )  or  ( GetDate(USW2106Veh.Date, DeprCount) > datetime.datetime(12, 31, 2007) and GetDate(USW2106Veh.Date, DeprCount) < MakeDate(1, 1, YearNumber + 1) ) :{n}{t}{t}{t}{t}{t}Total = Total + 1{n}{t}{t}{t}{t}else:{n}{t}{t}{t}{t}{t}Total = Total{n}{t}{t}DeprCount = DeprCount + 1{n}{t}return Total{n}{n}
def StateDispNbr_Calculation():{n}{t}DeprCount = Long(){n}{n}{t}F2106 = Long(){n}{n}{t}MaxDepr = Long(){n}{n}{t}Total = Integer(){n}{t}#for 2018 make no change since need to ask or alert if had depr adjustment in prior year and need to make and entry for catch-up depr. May need to see next year if should exclude 2018 veh that were not reported on IA4562A since was just on IA 2106{n}{t}DeprCount = 1{n}{t}F2106 = GetParentCopy(USF2106){n}{t}MaxDepr = GetAllCopies(USW2106Veh){n}{t}Total = 0{n}{t}while DeprCount <= MaxDepr:{n}{t}{t}if GetParentCopy(USF2106, USW2106Veh, DeprCount) == F2106:{n}{t}{t}{t}if get_bool(USW2106Veh.BonusYes, DeprCount) == True and get_string(USW2106Veh.DisposeDate, DeprCount) != '' and  ( ( GetDate(USW2106Veh.Date, DeprCount) > datetime.datetime(9, 10, 2001) and GetDate(USW2106Veh.Date, DeprCount) < datetime.datetime(5, 6, 2003) )  or  ( GetDate(USW2106Veh.Date, DeprCount) > datetime.datetime(12, 31, 2007) and GetDate(USW2106Veh.Date, DeprCount) < MakeDate(1, 1, YearNumber + 1) ) ) :{n}{t}{t}{t}{t}Total = Total + 1{n}{t}{t}{t}else:{n}{t}{t}{t}{t}Total = Total{n}{t}{t}DeprCount = DeprCount + 1{n}{t}return Total{n}{n}
def Taxpayer_Calculation():{n}{t}if get_bool(USF2106.Taxpayer, ParentCopy()) == True:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def TotColF_Calculation():{n}{t}return get_currency(IA4562A.TotFed179) + get_currency(IA4562A.TotFDD){n}{n}
def TotFed179_Calculation():{n}{t}return get_currency(IA4562A.Fed179(0)) + get_currency(IA4562A.Fed179(1)) + get_currency(IA4562A.Fed179(2)) + get_currency(IA4562A.Fed179(3)){n}{n}
def TotIA179_Calculation():{n}{t}return get_currency(IA4562A.IA179(0)) + get_currency(IA4562A.IA179(1)) + get_currency(IA4562A.IA179(2)) + get_currency(IA4562A.IA179(3)){n}{n}
def TotP2ColF_Calculation():{n}{t}return get_currency(IA4562A.TotDisAdj){n}{n}
def TotColI_Calculation():{n}{t}return get_currency(IA4562A.TotIA179) + get_currency(IA4562A.TotMACRS){n}{n}
def TotDepAdj_Calculation():{n}{t}return get_currency(IA4562A.DepAdj) + get_currency(IA4562A.TotP2ColF){n}{n}
def TotDisAdj_Calculation():{n}{t}return get_currency(IA4562A.DisAdj(0)) + get_currency(IA4562A.DisAdj(1)) + get_currency(IA4562A.DisAdj(2)) + get_currency(IA4562A.DisAdj(3)){n}{n}
def TotDisFedDep_Calculation():{n}{t}return get_currency(IA4562A.DisFedDep(0)) + get_currency(IA4562A.DisFedDep(1)) + get_currency(IA4562A.DisFedDep(2)) + get_currency(IA4562A.DisFedDep(3)){n}{n}
def TotDisIADep_Calculation():{n}{t}return get_currency(IA4562A.DisIADep(0)) + get_currency(IA4562A.DisIADep(1)) + get_currency(IA4562A.DisIADep(2)) + get_currency(IA4562A.DisIADep(3)){n}{n}
def TotFDD_Calculation():{n}{t}return get_currency(IA4562A.FedDepDed(0)) + get_currency(IA4562A.FedDepDed(1)) + get_currency(IA4562A.FedDepDed(2)) + get_currency(IA4562A.FedDepDed(3)){n}{n}
def TotMACRS_Calculation():{n}{t}return get_currency(IA4562A.MACRSIA(0)) + get_currency(IA4562A.MACRSIA(1)) + get_currency(IA4562A.MACRSIA(2)) + get_currency(IA4562A.MACRSIA(3)){n}{n}def Balance1_Calculation():{n}{t}return get_currency(IA4562BSP.AdjAmt(0)){n}{n}
def Balance10_Calculation():{n}{t}if get_currency(IA4562BSP.Balance9) != 0:{n}{t}{t}return get_currency(IA4562BSP.Balance9) + get_currency(IA4562BSP.AdjAmt(9)){n}{t}else:{n}{t}{t}return get_currency(IA4562BSP.AdjAmt(9)){n}{n}
def Balance11_Calculation():{n}{t}if get_currency(IA4562BSP.Balance10) != 0:{n}{t}{t}return get_currency(IA4562BSP.Balance10) + get_currency(IA4562BSP.AdjAmt(10)){n}{t}else:{n}{t}{t}return get_currency(IA4562BSP.AdjAmt(10)){n}{n}
def Balance12_Calculation():{n}{t}if get_currency(IA4562BSP.Balance11) != 0:{n}{t}{t}return get_currency(IA4562BSP.Balance11) + get_currency(IA4562BSP.AdjAmt(11)){n}{t}else:{n}{t}{t}return get_currency(IA4562BSP.AdjAmt(11)){n}{n}
def Balance13_Calculation():{n}{t}if get_currency(IA4562BSP.Balance12) != 0:{n}{t}{t}return get_currency(IA4562BSP.Balance12) + get_currency(IA4562BSP.AdjAmt(12)){n}{t}else:{n}{t}{t}return get_currency(IA4562BSP.AdjAmt(12)){n}{n}
def Balance2_Calculation():{n}{t}if get_currency(IA4562BSP.Balance1) != 0:{n}{t}{t}return get_currency(IA4562BSP.Balance1) + get_currency(IA4562BSP.AdjAmt(1)){n}{t}else:{n}{t}{t}return get_currency(IA4562BSP.AdjAmt(1)){n}{n}
def Balance3_Calculation():{n}{t}if get_currency(IA4562BSP.Balance2) != 0:{n}{t}{t}return get_currency(IA4562BSP.Balance2) + get_currency(IA4562BSP.AdjAmt(2)){n}{t}else:{n}{t}{t}return get_currency(IA4562BSP.AdjAmt(2)){n}{n}
def Balance4_Calculation():{n}{t}if get_currency(IA4562BSP.Balance3) != 0:{n}{t}{t}return get_currency(IA4562BSP.Balance3) + get_currency(IA4562BSP.AdjAmt(3)){n}{t}else:{n}{t}{t}return get_currency(IA4562BSP.AdjAmt(3)){n}{n}
def Balance5_Calculation():{n}{t}if get_currency(IA4562BSP.Balance4) != 0:{n}{t}{t}return get_currency(IA4562BSP.Balance4) + get_currency(IA4562BSP.AdjAmt(4)){n}{t}else:{n}{t}{t}return get_currency(IA4562BSP.AdjAmt(4)){n}{n}
def Balance6_Calculation():{n}{t}if get_currency(IA4562BSP.Balance5) != 0:{n}{t}{t}return get_currency(IA4562BSP.Balance5) + get_currency(IA4562BSP.AdjAmt(5)){n}{t}else:{n}{t}{t}return get_currency(IA4562BSP.AdjAmt(5)){n}{n}
def Balance7_Calculation():{n}{t}if get_currency(IA4562BSP.Balance6) != 0:{n}{t}{t}return get_currency(IA4562BSP.Balance6) + get_currency(IA4562BSP.AdjAmt(6)){n}{t}else:{n}{t}{t}return get_currency(IA4562BSP.AdjAmt(6)){n}{n}
def Balance8_Calculation():{n}{t}if get_currency(IA4562BSP.Balance7) != 0:{n}{t}{t}return get_currency(IA4562BSP.Balance7) + get_currency(IA4562BSP.AdjAmt(7)){n}{t}else:{n}{t}{t}return get_currency(IA4562BSP.AdjAmt(7)){n}{n}
def Balance9_Calculation():{n}{t}if get_currency(IA4562BSP.Balance8) != 0:{n}{t}{t}return get_currency(IA4562BSP.Balance8) + get_currency(IA4562BSP.AdjAmt(8)){n}{t}else:{n}{t}{t}return get_currency(IA4562BSP.AdjAmt(8)){n}{n}
def Balance14_Calculation():{n}{t}if get_currency(IA4562BSP.Balance13) != 0:{n}{t}{t}return get_currency(IA4562BSP.Balance13) + get_currency(IA4562BSP.AdjAmt(13)){n}{t}else:{n}{t}{t}return get_currency(IA4562BSP.AdjAmt(13)){n}{n}
def Balance15_Calculation():{n}{t}if get_currency(IA4562BSP.Balance14) != 0:{n}{t}{t}return get_currency(IA4562BSP.Balance14) + get_currency(IA4562BSP.AdjAmt(14)){n}{t}else:{n}{t}{t}return get_currency(IA4562BSP.AdjAmt(14)){n}{n}
def Balance16_Calculation():{n}{t}if get_currency(IA4562BSP.Balance15) != 0:{n}{t}{t}return get_currency(IA4562BSP.Balance15) + get_currency(IA4562BSP.AdjAmt(15)){n}{t}else:{n}{t}{t}return get_currency(IA4562BSP.AdjAmt(15)){n}{n}
def Balance17_Calculation():{n}{t}if get_currency(IA4562BSP.Balance16) != 0:{n}{t}{t}return get_currency(IA4562BSP.Balance16) + get_currency(IA4562BSP.CYAdjAmt){n}{t}else:{n}{t}{t}return get_currency(IA4562BSP.CYAdjAmt){n}{n}
def CYAdjAmt_Calculation():{n}{t}if get_bool(IAF1040.CombMFS) == True:{n}{t}{t}return get_currency(IAWOTHINC.SPBonus){n}{t}else:{n}{t}{t}return 0{n}{n}
def Description_Calculation():{n}{t}return CStr(get_currency(IA4562BSP.Balance17)) + ' Balance'{n}{n}
def Names_Calculation():{n}{t}return get_string(IA4562SP.Names){n}{n}
def PeriodEnd_Calculation(Index):{n}{t}if Index == 0:{n}{t}{t}return datetime.datetime(12, 31, 2002){n}{t}elif Index == 1:{n}{t}{t}return datetime.datetime(12, 31, 2003){n}{t}elif Index == 2:{n}{t}{t}return datetime.datetime(12, 31, 2004){n}{t}elif Index == 3:{n}{t}{t}return datetime.datetime(12, 31, 2005){n}{t}elif Index == 4:{n}{t}{t}return datetime.datetime(12, 31, 2006){n}{t}elif Index == 5:{n}{t}{t}return datetime.datetime(12, 31, 2007){n}{t}elif Index == 6:{n}{t}{t}return datetime.datetime(12, 31, 2008){n}{t}elif Index == 7:{n}{t}{t}return datetime.datetime(12, 31, 2009){n}{t}elif Index == 8:{n}{t}{t}return datetime.datetime(12, 31, 2010){n}{t}elif Index == 9:{n}{t}{t}return datetime.datetime(12, 31, 2011){n}{t}elif Index == 10:{n}{t}{t}return datetime.datetime(12, 31, 2012){n}{t}elif Index == 11:{n}{t}{t}return datetime.datetime(12, 31, 2013){n}{t}elif Index == 12:{n}{t}{t}return datetime.datetime(12, 31, 2014){n}{t}elif Index == 13:{n}{t}{t}return datetime.datetime(12, 31, 2015){n}{t}elif Index == 14:{n}{t}{t}return datetime.datetime(12, 31, 2016){n}{t}elif Index == 15:{n}{t}{t}return datetime.datetime(12, 31, 2017){n}{t}else:{n}{t}{t}return datetime.datetime(12, 31, 2018){n}{n}
def PrAdjAmt_Calculation(Index):{n}{t}count = Integer(){n}{n}{t}Hold = Currency(){n}{t}count = 0{n}{t}Hold = 0{n}{t}if get_currency(IA4562BSP.AdjAmt(0)) != 0 or get_currency(IA4562BSP.Balance1) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IA4562BSP.AdjAmt(0)){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IA4562BSP.AdjAmt(1)) != 0 or get_currency(IA4562BSP.Balance2) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IA4562BSP.AdjAmt(1)){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IA4562BSP.AdjAmt(2)) != 0 or get_currency(IA4562BSP.Balance3) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IA4562BSP.AdjAmt(2)){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IA4562BSP.AdjAmt(3)) != 0 or get_currency(IA4562BSP.Balance4) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IA4562BSP.AdjAmt(3)){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IA4562BSP.AdjAmt(4)) != 0 or get_currency(IA4562BSP.Balance5) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IA4562BSP.AdjAmt(4)){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IA4562BSP.AdjAmt(5)) != 0 or get_currency(IA4562BSP.Balance6) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IA4562BSP.AdjAmt(5)){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IA4562BSP.AdjAmt(6)) != 0 or get_currency(IA4562BSP.Balance7) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IA4562BSP.AdjAmt(6)){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IA4562BSP.AdjAmt(7)) != 0 or get_currency(IA4562BSP.Balance8) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IA4562BSP.AdjAmt(7)){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IA4562BSP.AdjAmt(8)) != 0 or get_currency(IA4562BSP.Balance9) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IA4562BSP.AdjAmt(8)){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IA4562BSP.AdjAmt(9)) != 0 or get_currency(IA4562BSP.Balance10) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IA4562BSP.AdjAmt(9)){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IA4562BSP.AdjAmt(10)) != 0 or get_currency(IA4562BSP.Balance11) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IA4562BSP.AdjAmt(10)){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IA4562BSP.AdjAmt(11)) != 0 or get_currency(IA4562BSP.Balance12) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IA4562BSP.AdjAmt(11)){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IA4562BSP.AdjAmt(12)) != 0 or get_currency(IA4562BSP.Balance13) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IA4562BSP.AdjAmt(12)){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IA4562BSP.AdjAmt(13)) != 0 or get_currency(IA4562BSP.Balance14) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IA4562BSP.AdjAmt(13)){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IA4562BSP.AdjAmt(14)) != 0 or get_currency(IA4562BSP.Balance15) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IA4562BSP.AdjAmt(14)){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IA4562BSP.AdjAmt(15)) != 0 or get_currency(IA4562BSP.Balance16) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IA4562BSP.AdjAmt(15)){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IA4562BSP.CYAdjAmt) != 0 or get_currency(IA4562BSP.Balance17) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IA4562BSP.CYAdjAmt){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}return Hold{n}{n}
def PrAsterik_Calculation(Index):{n}{t}if get_bool(IA4562BSP.PrChangeY(Index)) == True:{n}{t}{t}return '*'{n}{t}else:{n}{t}{t}return ''{n}{n}
def PrBalance_Calculation(Index):{n}{t}count = Integer(){n}{n}{t}Hold = Currency(){n}{t}count = 0{n}{t}Hold = 0{n}{t}if get_currency(IA4562BSP.AdjAmt(0)) != 0 or get_currency(IA4562BSP.Balance1) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IA4562BSP.Balance1){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IA4562BSP.AdjAmt(1)) != 0 or get_currency(IA4562BSP.Balance2) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IA4562BSP.Balance2){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IA4562BSP.AdjAmt(2)) != 0 or get_currency(IA4562BSP.Balance3) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IA4562BSP.Balance3){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IA4562BSP.AdjAmt(3)) != 0 or get_currency(IA4562BSP.Balance4) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IA4562BSP.Balance4){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IA4562BSP.AdjAmt(4)) != 0 or get_currency(IA4562BSP.Balance5) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IA4562BSP.Balance5){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IA4562BSP.AdjAmt(5)) != 0 or get_currency(IA4562BSP.Balance6) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IA4562BSP.Balance6){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IA4562BSP.AdjAmt(6)) != 0 or get_currency(IA4562BSP.Balance7) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IA4562BSP.Balance7){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IA4562BSP.AdjAmt(7)) != 0 or get_currency(IA4562BSP.Balance8) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IA4562BSP.Balance8){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IA4562BSP.AdjAmt(8)) != 0 or get_currency(IA4562BSP.Balance9) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IA4562BSP.Balance9){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IA4562BSP.AdjAmt(9)) != 0 or get_currency(IA4562BSP.Balance10) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IA4562BSP.Balance10){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IA4562BSP.AdjAmt(10)) != 0 or get_currency(IA4562BSP.Balance11) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IA4562BSP.Balance11){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IA4562BSP.AdjAmt(11)) != 0 or get_currency(IA4562BSP.Balance12) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IA4562BSP.Balance12){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IA4562BSP.AdjAmt(12)) != 0 or get_currency(IA4562BSP.Balance13) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IA4562BSP.Balance13){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IA4562BSP.AdjAmt(13)) != 0 or get_currency(IA4562BSP.Balance14) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IA4562BSP.Balance14){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IA4562BSP.AdjAmt(14)) != 0 or get_currency(IA4562BSP.Balance15) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IA4562BSP.Balance15){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IA4562BSP.AdjAmt(15)) != 0 or get_currency(IA4562BSP.Balance16) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IA4562BSP.Balance16){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IA4562BSP.CYAdjAmt) != 0 or get_currency(IA4562BSP.Balance17) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IA4562BSP.Balance17){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}return Hold{n}{n}
def PrChangeY_Calculation(Index):{n}{t}count = Integer(){n}{n}{t}Hold = Boolean(){n}{t}count = 0{n}{t}Hold = 0{n}{t}if get_currency(IA4562BSP.AdjAmt(0)) != 0 or get_currency(IA4562BSP.Balance1) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_bool(IA4562BSP.ChangeY(0)){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IA4562BSP.AdjAmt(1)) != 0 or get_currency(IA4562BSP.Balance2) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_bool(IA4562BSP.ChangeY(1)){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IA4562BSP.AdjAmt(2)) != 0 or get_currency(IA4562BSP.Balance3) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_bool(IA4562BSP.ChangeY(2)){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IA4562BSP.AdjAmt(3)) != 0 or get_currency(IA4562BSP.Balance4) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_bool(IA4562BSP.ChangeY(3)){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IA4562BSP.AdjAmt(4)) != 0 or get_currency(IA4562BSP.Balance5) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_bool(IA4562BSP.ChangeY(4)){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IA4562BSP.AdjAmt(5)) != 0 or get_currency(IA4562BSP.Balance6) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_bool(IA4562BSP.ChangeY(5)){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IA4562BSP.AdjAmt(6)) != 0 or get_currency(IA4562BSP.Balance7) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_bool(IA4562BSP.ChangeY(6)){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IA4562BSP.AdjAmt(7)) != 0 or get_currency(IA4562BSP.Balance8) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_bool(IA4562BSP.ChangeY(7)){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IA4562BSP.AdjAmt(8)) != 0 or get_currency(IA4562BSP.Balance9) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_bool(IA4562BSP.ChangeY(8)){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IA4562BSP.AdjAmt(9)) != 0 or get_currency(IA4562BSP.Balance10) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_bool(IA4562BSP.ChangeY(9)){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IA4562BSP.AdjAmt(10)) != 0 or get_currency(IA4562BSP.Balance11) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_bool(IA4562BSP.ChangeY(10)){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IA4562BSP.AdjAmt(11)) != 0 or get_currency(IA4562BSP.Balance12) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_bool(IA4562BSP.ChangeY(11)){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IA4562BSP.AdjAmt(12)) != 0 or get_currency(IA4562BSP.Balance13) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_bool(IA4562BSP.ChangeY(12)){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IA4562BSP.AdjAmt(13)) != 0 or get_currency(IA4562BSP.Balance14) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_bool(IA4562BSP.ChangeY(13)){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IA4562BSP.AdjAmt(14)) != 0 or get_currency(IA4562BSP.Balance15) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_bool(IA4562BSP.ChangeY(14)){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IA4562BSP.AdjAmt(15)) != 0 or get_currency(IA4562BSP.Balance16) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_bool(IA4562BSP.ChangeY(15)){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IA4562BSP.CYAdjAmt) != 0 or get_currency(IA4562BSP.Balance17) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_bool(IA4562BSP.ChangeY(16)){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}return Hold{n}{n}
def Print_Calculation():{n}{t}if get_currency(IA4562BSP.PrBalance(0)) != 0:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def PrPeriodEnd_Calculation(Index):{n}{t}count = Integer(){n}{n}{t}Hold = String(){n}{t}count = 0{n}{t}Hold = ''{n}{t}if get_currency(IA4562BSP.AdjAmt(0)) != 0 or get_currency(IA4562BSP.Balance1) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_string(IA4562BSP.PeriodEnd(0)){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IA4562BSP.AdjAmt(1)) != 0 or get_currency(IA4562BSP.Balance2) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_string(IA4562BSP.PeriodEnd(1)){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IA4562BSP.AdjAmt(2)) != 0 or get_currency(IA4562BSP.Balance3) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_string(IA4562BSP.PeriodEnd(2)){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IA4562BSP.AdjAmt(3)) != 0 or get_currency(IA4562BSP.Balance4) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_string(IA4562BSP.PeriodEnd(3)){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IA4562BSP.AdjAmt(4)) != 0 or get_currency(IA4562BSP.Balance5) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_string(IA4562BSP.PeriodEnd(4)){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IA4562BSP.AdjAmt(5)) != 0 or get_currency(IA4562BSP.Balance6) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_string(IA4562BSP.PeriodEnd(5)){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IA4562BSP.AdjAmt(6)) != 0 or get_currency(IA4562BSP.Balance7) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_string(IA4562BSP.PeriodEnd(6)){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IA4562BSP.AdjAmt(7)) != 0 or get_currency(IA4562BSP.Balance8) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_string(IA4562BSP.PeriodEnd(7)){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IA4562BSP.AdjAmt(8)) != 0 or get_currency(IA4562BSP.Balance9) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_string(IA4562BSP.PeriodEnd(8)){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IA4562BSP.AdjAmt(9)) != 0 or get_currency(IA4562BSP.Balance10) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_string(IA4562BSP.PeriodEnd(9)){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IA4562BSP.AdjAmt(10)) != 0 or get_currency(IA4562BSP.Balance11) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_string(IA4562BSP.PeriodEnd(10)){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IA4562BSP.AdjAmt(11)) != 0 or get_currency(IA4562BSP.Balance12) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_string(IA4562BSP.PeriodEnd(11)){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IA4562BSP.AdjAmt(12)) != 0 or get_currency(IA4562BSP.Balance13) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_string(IA4562BSP.PeriodEnd(12)){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IA4562BSP.AdjAmt(13)) != 0 or get_currency(IA4562BSP.Balance14) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_string(IA4562BSP.PeriodEnd(13)){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IA4562BSP.AdjAmt(14)) != 0 or get_currency(IA4562BSP.Balance15) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_string(IA4562BSP.PeriodEnd(14)){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IA4562BSP.AdjAmt(15)) != 0 or get_currency(IA4562BSP.Balance16) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_string(IA4562BSP.PeriodEnd(15)){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IA4562BSP.CYAdjAmt) != 0 or get_currency(IA4562BSP.Balance17) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_string(IA4562BSP.PeriodEnd(16)){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}return Hold{n}{n}
def SSN_Calculation():{n}{t}return get_string(IA4562SP.SSN){n}{n}def Alert10_Calculation():{n}{t}if get_bool(IA4562PIV.SpecElectYes) == False and get_currency(IA4562PIV.Total179) > Decimal("70000"):{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def Alert20_Calculation():{n}{t}if get_bool(IA4562PIV.UsingSpecElec) == True:{n}{t}{t}if ( get_currency(IA4562PIV.TPFed1065) + get_currency(IA4562PIV.SPFed1065) + get_currency(IA4562PIV.TPFed1120S) + get_currency(IA4562PIV.SPFed1120S) )  > Decimal("0"):{n}{t}{t}{t}if ( get_currency(IA4562PIV.TPIA1065) + get_currency(IA4562PIV.SPIA1065) + get_currency(IA4562PIV.TPIA1120S) + get_currency(IA4562PIV.SPIA1120S) )  == Decimal("0"):{n}{t}{t}{t}{t}return 1{n}{t}{t}{t}else:{n}{t}{t}{t}{t}return 0{n}{t}{t}else:{n}{t}{t}{t}return 0{n}{t}else:{n}{t}{t}return 0{n}{n}
def Alert30_Calculation():{n}{t}if get_bool(IA4562PIV.UsingSpecElec) == True:{n}{t}{t}if ( get_currency(USWDepr.IACYSec179Rep) + get_currency(USF4562.StateTotCySec1792106, 1) )  > 0:{n}{t}{t}{t}return 1{n}{t}{t}else:{n}{t}{t}{t}return 0{n}{t}else:{n}{t}{t}return 0{n}{n}
def CarryOver179Yr1_Calculation():{n}{t}return max_value(0, ( get_currency(IA4562PIV.Excess179) - get_currency(IA4562PIV.CarryOver179Yr2) - get_currency(IA4562PIV.CarryOver179Yr3) - get_currency(IA4562PIV.CarryOver179Yr4) - get_currency(IA4562PIV.CarryOver179Yr5) )){n}{n}
def CarryOver179Yr2_Calculation():{n}{t}return c_dollar(get_float(IA4562PIV.Excess179) * 0.2){n}{n}
def CarryOver179Yr3_Calculation():{n}{t}return c_dollar(get_float(IA4562PIV.Excess179) * 0.2){n}{n}
def CarryOver179Yr4_Calculation():{n}{t}return c_dollar(get_float(IA4562PIV.Excess179) * 0.2){n}{n}
def CarryOver179Yr5_Calculation():{n}{t}return c_dollar(get_float(IA4562PIV.Excess179) * 0.2){n}{n}
def Desc_Calculation():{n}{t}Total = Currency(){n}{t}Total = get_currency(IA4562PIV.Excess179){n}{t}return CStr(Total) + ' Special Election Deduction'{n}{n}
def Excess179_Calculation():{n}{t}if get_bool(IA4562PIV.SpecElectYes) == True:{n}{t}{t}return max_value(0, ( get_currency(IA4562PIV.Total179) - get_currency(IA4562PIV.Limit) )){n}{t}else:{n}{t}{t}return Decimal("0"){n}{n}
def Exist_Calculation():{n}{t}return 1{n}{n}
def IASec179NoK1s_Calculation():{n}{t}return get_currency(USWDepr.IACYSec179Rep) + get_currency(USF4562.StateTotCySec1792106, 1){n}{n}
def Limit_Calculation():{n}{t}if get_bool(IA4562PIV.SpecElectYes) == True:{n}{t}{t}return Decimal("70000"){n}{t}else:{n}{t}{t}return Decimal("0"){n}{n}
def Names_Calculation():{n}{t}return get_string(IAREQUIRED.CombNames){n}{n}
def PrIA4562PIV_Calculation():{n}{t}if get_currency(IA4562PIV.TPPartIV179) != 0:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def PrIA4562PIVSP_Calculation():{n}{t}if get_currency(IA4562PIV.SPPartIV179) != 0:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def Print_Calculation():{n}{t}if get_currency(IA4562PIV.Excess179) != 0:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def SPAccFedDep_Calculation():{n}{t}return 0{n}{n}
def SPAccIADep_Calculation():{n}{t}return 0{n}{n}
def SPBasis_Calculation():{n}{t}return 0{n}{n}
def SPCarryOver179Yr1_Calculation():{n}{t}if get_bool(IA4562PIV.UsingSpecElec) == False:{n}{t}{t}return 0{n}{t}elif get_bool(IAF1040.CombMFS) == True:{n}{t}{t}return c_dollar(get_float(IA4562PIV.CarryOver179Yr1) * get_float(IA4562PIV.SPRatio)){n}{t}else:{n}{t}{t}return 0{n}{n}
def SPCarryOver179Yr2_Calculation():{n}{t}if get_bool(IA4562PIV.UsingSpecElec) == False:{n}{t}{t}return 0{n}{t}elif get_bool(IAF1040.CombMFS) == True:{n}{t}{t}return c_dollar(get_float(IA4562PIV.CarryOver179Yr2) * get_float(IA4562PIV.SPRatio)){n}{t}else:{n}{t}{t}return 0{n}{n}
def SPCarryOver179Yr3_Calculation():{n}{t}if get_bool(IA4562PIV.UsingSpecElec) == False:{n}{t}{t}return 0{n}{t}elif get_bool(IAF1040.CombMFS) == True:{n}{t}{t}return c_dollar(get_float(IA4562PIV.CarryOver179Yr3) * get_float(IA4562PIV.SPRatio)){n}{t}else:{n}{t}{t}return 0{n}{n}
def SPCarryOver179Yr4_Calculation():{n}{t}if get_bool(IA4562PIV.UsingSpecElec) == False:{n}{t}{t}return 0{n}{t}elif get_bool(IAF1040.CombMFS) == True:{n}{t}{t}return c_dollar(get_float(IA4562PIV.CarryOver179Yr4) * get_float(IA4562PIV.SPRatio)){n}{t}else:{n}{t}{t}return 0{n}{n}
def SPCarryOver179Yr5_Calculation():{n}{t}if get_bool(IA4562PIV.UsingSpecElec) == False:{n}{t}{t}return 0{n}{t}elif get_bool(IAF1040.CombMFS) == True:{n}{t}{t}return c_dollar(get_float(IA4562PIV.CarryOver179Yr5) * get_float(IA4562PIV.SPRatio)){n}{t}else:{n}{t}{t}return 0{n}{n}
def SpCopy_Calculation():{n}{t}if get_currency(IA4562PIV.SPPartIV179) > 0:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def SPDateServ_Calculation():{n}{t}return MakeDate(12, 31, YearNumber){n}{n}
def SPExcess179_Calculation():{n}{t}if get_bool(IA4562PIV.UsingSpecElec) == False:{n}{t}{t}return 0{n}{t}elif get_bool(IAF1040.CombMFS) == True:{n}{t}{t}return c_dollar(get_float(IA4562PIV.Excess179) * get_float(IA4562PIV.SPRatio)){n}{t}else:{n}{t}{t}return 0{n}{n}
def SPFed1065_Calculation():{n}{t}return get_currency(USDPartK1.Sec179, FieldCopies(USDPartK1.Spouse)) + max_value(0, get_currency(USDPartK1.Sec179, FieldCopies(USDPartK1.Joint)) - c_dollar(get_float(USDPartK1.Sec179, FieldCopies(USDPartK1.Joint)) * 0.5)){n}{n}
def SPFed1120S_Calculation():{n}{t}return get_currency(USDSCorpK1.Sec179, FieldCopies(USDSCorpK1.Spouse)) + max_value(0, get_currency(USDSCorpK1.Sec179, FieldCopies(USDSCorpK1.Joint)) - c_dollar(get_float(USDSCorpK1.Sec179, FieldCopies(USDSCorpK1.Joint)) * 0.5)){n}{n}
def SPFedDepDed_Calculation():{n}{t}return 0{n}{n}
def SPLife_Calculation():{n}{t}return '0'{n}{n}
def SPLine1_Calculation():{n}{t}if get_bool(IA4562PIV.UsingSpecElec) == False:{n}{t}{t}return 0{n}{t}elif get_bool(IAF1040.CombMFS) == True:{n}{t}{t}return c_dollar(get_float(IA4562PIV.Total179) * get_float(IA4562PIV.SPRatio)){n}{t}else:{n}{t}{t}return 0{n}{n}
def SPLine1a_Calculation():{n}{t}if get_bool(IA4562PIV.UsingSpecElec) == False:{n}{t}{t}return 0{n}{t}elif get_bool(IAF1040.CombMFS) == True:{n}{t}{t}return get_currency(IA4562PIV.SPIA1065){n}{t}else:{n}{t}{t}return 0{n}{n}
def SPLine1b_Calculation():{n}{t}if get_bool(IA4562PIV.UsingSpecElec) == False:{n}{t}{t}return 0{n}{t}elif get_bool(IAF1040.CombMFS) == True:{n}{t}{t}return get_currency(IA4562PIV.SPFed1065){n}{t}else:{n}{t}{t}return 0{n}{n}
def SPLine1c_Calculation():{n}{t}if get_bool(IA4562PIV.UsingSpecElec) == False:{n}{t}{t}return 0{n}{t}elif get_bool(IAF1040.CombMFS) == True:{n}{t}{t}return get_currency(IA4562PIV.SPIA1120S){n}{t}else:{n}{t}{t}return 0{n}{n}
def SPLine1d_Calculation():{n}{t}if get_bool(IA4562PIV.UsingSpecElec) == False:{n}{t}{t}return 0{n}{t}elif get_bool(IAF1040.CombMFS) == True:{n}{t}{t}return get_currency(IA4562PIV.SPFed1120S){n}{t}else:{n}{t}{t}return 0{n}{n}
def SPMACRSIA_Calculation():{n}{t}return 0{n}{n}
def SPName_Calculation():{n}{t}return get_string(IAREQUIRED.SPCombName){n}{n}
def SPPartIV179_Calculation():{n}{t}if get_bool(IA4562PIV.UsingSpecElec) == False:{n}{t}{t}return 0{n}{t}elif get_bool(IAF1040.CombMFS) == True:{n}{t}{t}return c_dollar(get_float(IA4562PIV.Limit) * get_float(IA4562PIV.SPRatio)){n}{t}else:{n}{t}{t}return 0{n}{n}
def SPPropDescr_Calculation():{n}{t}if get_currency(IA4562PIV.SPPartIV179) > 0:{n}{t}{t}return 'Part IV'{n}{t}else:{n}{t}{t}return ''{n}{n}
def SPRatio_Calculation():{n}{t}if get_currency(IA4562PIV.Tot179Nolimit) == 0:{n}{t}{t}return 0{n}{t}else:{n}{t}{t}return max_value(0, ( min_value(1, get_float(IA4562PIV.SPTot179) / get_float(IA4562PIV.Tot179Nolimit)) )){n}{n}
def SPSSN_Calculation():{n}{t}return get_string(IAF1040.SpouseSSN){n}{n}
def SPTot179_Calculation():{n}{t}return get_currency(IA4562PIV.SPIA1065) + get_currency(IA4562PIV.SPFed1065) + get_currency(IA4562PIV.SPIA1120S) + get_currency(IA4562PIV.SPFed1120S){n}{n}
def SPTotAdj_Calculation():{n}{t}return get_currency(IA4562PIV.SPLine1) - get_currency(IA4562PIV.SPPartIV179){n}{n}
def SSN_Calculation():{n}{t}return get_string(IAF1040.SSN){n}{n}
def Tot179Nolimit_Calculation():{n}{t}return get_currency(IA4562PIV.TPTot179) + get_currency(IA4562PIV.SPTot179){n}{n}
def Total179_Calculation():{n}{t}Tot = Currency(){n}{t}Tot = get_currency(IA4562PIV.TotIA1065) + get_currency(IA4562PIV.TotFed1065) + get_currency(IA4562PIV.TotIA1120S) + get_currency(IA4562PIV.TotFed1120S){n}{t}return min_value(Tot, Decimal("1000000")){n}{n}
def TotFed1065_Calculation():{n}{t}return get_currency(IA4562PIV.TPFed1065) + get_currency(IA4562PIV.SPFed1065){n}{n}
def TotFed1120S_Calculation():{n}{t}return get_currency(IA4562PIV.TPFed1120S) + get_currency(IA4562PIV.SPFed1120S){n}{n}
def TotIA1065_Calculation():{n}{t}return get_currency(IA4562PIV.TPIA1065) + get_currency(IA4562PIV.SPIA1065){n}{n}
def TotIA1120S_Calculation():{n}{t}return get_currency(IA4562PIV.TPIA1120S) + get_currency(IA4562PIV.SPIA1120S){n}{n}
def TPAccFedDep_Calculation():{n}{t}return 0{n}{n}
def TPAccIADep_Calculation():{n}{t}return 0{n}{n}
def TPBasis_Calculation():{n}{t}return 0{n}{n}
def TPCarryOver179Yr1_Calculation():{n}{t}if get_bool(IA4562PIV.UsingSpecElec) == False:{n}{t}{t}return 0{n}{t}elif get_bool(IAF1040.CombMFS) == True:{n}{t}{t}return get_currency(IA4562PIV.CarryOver179Yr1) - get_currency(IA4562PIV.SPCarryOver179Yr1){n}{t}else:{n}{t}{t}return get_currency(IA4562PIV.CarryOver179Yr1){n}{n}
def TPCarryOver179Yr2_Calculation():{n}{t}if get_bool(IA4562PIV.UsingSpecElec) == False:{n}{t}{t}return 0{n}{t}elif get_bool(IAF1040.CombMFS) == True:{n}{t}{t}return get_currency(IA4562PIV.CarryOver179Yr2) - get_currency(IA4562PIV.SPCarryOver179Yr2){n}{t}else:{n}{t}{t}return get_currency(IA4562PIV.CarryOver179Yr2){n}{n}
def TPCarryOver179Yr3_Calculation():{n}{t}if get_bool(IA4562PIV.UsingSpecElec) == False:{n}{t}{t}return 0{n}{t}elif get_bool(IAF1040.CombMFS) == True:{n}{t}{t}return get_currency(IA4562PIV.CarryOver179Yr3) - get_currency(IA4562PIV.SPCarryOver179Yr3){n}{t}else:{n}{t}{t}return get_currency(IA4562PIV.CarryOver179Yr3){n}{n}
def TPCarryOver179Yr4_Calculation():{n}{t}if get_bool(IA4562PIV.UsingSpecElec) == False:{n}{t}{t}return 0{n}{t}elif get_bool(IAF1040.CombMFS) == True:{n}{t}{t}return get_currency(IA4562PIV.CarryOver179Yr4) - get_currency(IA4562PIV.SPCarryOver179Yr4){n}{t}else:{n}{t}{t}return get_currency(IA4562PIV.CarryOver179Yr4){n}{n}
def TPCarryOver179Yr5_Calculation():{n}{t}if get_bool(IA4562PIV.UsingSpecElec) == False:{n}{t}{t}return 0{n}{t}elif get_bool(IAF1040.CombMFS) == True:{n}{t}{t}return get_currency(IA4562PIV.CarryOver179Yr5) - get_currency(IA4562PIV.SPCarryOver179Yr5){n}{t}else:{n}{t}{t}return get_currency(IA4562PIV.CarryOver179Yr5){n}{n}
def TpCopy_Calculation():{n}{t}if get_currency(IA4562PIV.TPPartIV179) > 0:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def TPDateServ_Calculation():{n}{t}return MakeDate(12, 31, YearNumber){n}{n}
def TPExcess179_Calculation():{n}{t}if get_bool(IA4562PIV.UsingSpecElec) == False:{n}{t}{t}return 0{n}{t}elif get_bool(IAF1040.CombMFS) == True:{n}{t}{t}return get_currency(IA4562PIV.Excess179) - get_currency(IA4562PIV.SPExcess179){n}{t}else:{n}{t}{t}return get_currency(IA4562PIV.Excess179){n}{n}
def TPFed1065_Calculation():{n}{t}return get_currency(USDPartK1.Sec179, FieldCopies(USDPartK1.Taxpayer)) + c_dollar(get_float(USDPartK1.Sec179, FieldCopies(USDPartK1.Joint)) * 0.5){n}{n}
def TPFed1120S_Calculation():{n}{t}return get_currency(USDSCorpK1.Sec179, FieldCopies(USDSCorpK1.Taxpayer)) + c_dollar(get_float(USDSCorpK1.Sec179, FieldCopies(USDSCorpK1.Joint)) * 0.5){n}{n}
def TPFedDepDed_Calculation():{n}{t}return 0{n}{n}
def TPLife_Calculation():{n}{t}return '0'{n}{n}
def TPLine1_Calculation():{n}{t}if get_bool(IA4562PIV.UsingSpecElec) == False:{n}{t}{t}return 0{n}{t}elif get_bool(IAF1040.CombMFS) == True:{n}{t}{t}return get_currency(IA4562PIV.Total179) - get_currency(IA4562PIV.SPLine1){n}{t}else:{n}{t}{t}return get_currency(IA4562PIV.Total179){n}{n}
def TPLine1a_Calculation():{n}{t}if get_bool(IA4562PIV.UsingSpecElec) == False:{n}{t}{t}return 0{n}{t}elif get_bool(IAF1040.CombMFS) == True:{n}{t}{t}return get_currency(IA4562PIV.TPIA1065){n}{t}else:{n}{t}{t}return get_currency(IA4562PIV.TotIA1065){n}{n}
def TPLine1b_Calculation():{n}{t}if get_bool(IA4562PIV.UsingSpecElec) == False:{n}{t}{t}return 0{n}{t}elif get_bool(IAF1040.CombMFS) == True:{n}{t}{t}return get_currency(IA4562PIV.TPFed1065){n}{t}else:{n}{t}{t}return get_currency(IA4562PIV.TotFed1065){n}{n}
def TPLine1c_Calculation():{n}{t}if get_bool(IA4562PIV.UsingSpecElec) == False:{n}{t}{t}return 0{n}{t}elif get_bool(IAF1040.CombMFS) == True:{n}{t}{t}return get_currency(IA4562PIV.TPIA1120S){n}{t}else:{n}{t}{t}return get_currency(IA4562PIV.TotIA1120S){n}{n}
def TPLine1d_Calculation():{n}{t}if get_bool(IA4562PIV.UsingSpecElec) == False:{n}{t}{t}return 0{n}{t}elif get_bool(IAF1040.CombMFS) == True:{n}{t}{t}return get_currency(IA4562PIV.TPFed1120S){n}{t}else:{n}{t}{t}return get_currency(IA4562PIV.TotFed1120S){n}{n}
def TPMACRSIA_Calculation():{n}{t}return 0{n}{n}
def TPorJTName_Calculation():{n}{t}if get_bool(IAF1040.CombMFS) == True:{n}{t}{t}return get_string(IAREQUIRED.TPCombName){n}{t}else:{n}{t}{t}return get_string(IAREQUIRED.CombNames){n}{n}
def TPorJTSSN_Calculation():{n}{t}return get_string(IAF1040.SSN){n}{n}
def TPPartIV179_Calculation():{n}{t}if get_bool(IA4562PIV.UsingSpecElec) == False:{n}{t}{t}return 0{n}{t}elif get_bool(IAF1040.CombMFS) == True:{n}{t}{t}return get_currency(IA4562PIV.Limit) - get_currency(IA4562PIV.SPPartIV179){n}{t}else:{n}{t}{t}return get_currency(IA4562PIV.Limit){n}{n}
def TPPropDescr_Calculation():{n}{t}if get_currency(IA4562PIV.TPPartIV179) > 0:{n}{t}{t}return 'Part IV'{n}{t}else:{n}{t}{t}return ''{n}{n}
def TPTot179_Calculation():{n}{t}return get_currency(IA4562PIV.TPIA1065) + get_currency(IA4562PIV.TPFed1065) + get_currency(IA4562PIV.TPIA1120S) + get_currency(IA4562PIV.TPFed1120S){n}{n}
def TPTotAdj_Calculation():{n}{t}return get_currency(IA4562PIV.TPLine1) - get_currency(IA4562PIV.TPPartIV179){n}{n}
def UsingSpecElec_Calculation():{n}{t}if get_bool(IA4562PIV.SpecElectYes) == True and get_currency(IA4562PIV.Excess179) > Decimal("0"):{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}def AccFedDep_Calculation(Index):{n}{t}Stuff = Integer(){n}{t}Stuff = Index - get_number(IA4562PIV.SpCopy){n}{t}if get_number(IA4562PIV.SpCopy) == 1 and Index == 0:{n}{t}{t}return 0{n}{t}elif get_number(IA4562SP.DepSeeAttBool) == 1 and Index == 3:{n}{t}{t}return 0{n}{t}else:{n}{t}{t}return get_currency(IAWDepr.SPAccFedDep, get_number(IA4562SP.StateDeprCopyNbr(Stuff))){n}{n}
def AccIADep_Calculation(Index):{n}{t}Stuff = Integer(){n}{t}Stuff = Index - get_number(IA4562PIV.SpCopy){n}{t}if get_number(IA4562PIV.SpCopy) == 1 and Index == 0:{n}{t}{t}return 0{n}{t}elif get_number(IA4562SP.DepSeeAttBool) == 1 and Index == 3:{n}{t}{t}return 0{n}{t}else:{n}{t}{t}return get_currency(IAWDepr.SPAccIADep, get_number(IA4562SP.StateDeprCopyNbr(Stuff))){n}{n}
def Basis_Calculation(Index):{n}{t}Stuff = Integer(){n}{t}Stuff = Index - get_number(IA4562PIV.SpCopy){n}{t}if get_number(IA4562PIV.SpCopy) == 1 and Index == 0:{n}{t}{t}return 0{n}{t}elif get_number(IA4562SP.DepSeeAttBool) == 1 and Index == 3:{n}{t}{t}return 0{n}{t}else:{n}{t}{t}return get_currency(IAWDepr.SPBasis, get_number(IA4562SP.StateDeprCopyNbr(Stuff))){n}{n}
def CrBPDep1_Calculation():{n}{t}if ( get_number(IA4562SP.StateDeprNbr) + get_number(IA4562PIV.SpCopy) )  > 4:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def CrBPDep10_Calculation():{n}{t}if ( get_number(IA4562SP.StateDeprNbr) + get_number(IA4562PIV.SpCopy) )  > 264:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def CrBPDep11_Calculation():{n}{t}if ( get_number(IA4562SP.StateDeprNbr) + get_number(IA4562PIV.SpCopy) )  > 293:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def CrBPDep12_Calculation():{n}{t}if ( get_number(IA4562SP.StateDeprNbr) + get_number(IA4562PIV.SpCopy) )  > 322:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def CrBPDep13_Calculation():{n}{t}if ( get_number(IA4562SP.StateDeprNbr) + get_number(IA4562PIV.SpCopy) )  > 351:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def CrBPDep14_Calculation():{n}{t}if ( get_number(IA4562SP.StateDeprNbr) + get_number(IA4562PIV.SpCopy) )  > 380:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def CrBPDep15_Calculation():{n}{t}if ( get_number(IA4562SP.StateDeprNbr) + get_number(IA4562PIV.SpCopy) )  > 409:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def CrBPDep16_Calculation():{n}{t}if ( get_number(IA4562SP.StateDeprNbr) + get_number(IA4562PIV.SpCopy) )  > 438:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def CrBPDep17_Calculation():{n}{t}if ( get_number(IA4562SP.StateDeprNbr) + get_number(IA4562PIV.SpCopy) )  > 467:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def CrBPDep18_Calculation():{n}{t}if ( get_number(IA4562SP.StateDeprNbr) + get_number(IA4562PIV.SpCopy) )  > 496:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def CrBPDep19_Calculation():{n}{t}if ( get_number(IA4562SP.StateDeprNbr) + get_number(IA4562PIV.SpCopy) )  > 525:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def CrBPDep2_Calculation():{n}{t}if ( get_number(IA4562SP.StateDeprNbr) + get_number(IA4562PIV.SpCopy) )  > 32:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def CrBPDep20_Calculation():{n}{t}if ( get_number(IA4562SP.StateDeprNbr) + get_number(IA4562PIV.SpCopy) )  > 554:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def CrBPDep3_Calculation():{n}{t}if ( get_number(IA4562SP.StateDeprNbr) + get_number(IA4562PIV.SpCopy) )  > 61:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def CrBPDep4_Calculation():{n}{t}if ( get_number(IA4562SP.StateDeprNbr) + get_number(IA4562PIV.SpCopy) )  > 90:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def CrBPDep5_Calculation():{n}{t}if ( get_number(IA4562SP.StateDeprNbr) + get_number(IA4562PIV.SpCopy) )  > 119:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def CrBPDep6_Calculation():{n}{t}if ( get_number(IA4562SP.StateDeprNbr) + get_number(IA4562PIV.SpCopy) )  > 148:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def CrBPDep7_Calculation():{n}{t}if ( get_number(IA4562SP.StateDeprNbr) + get_number(IA4562PIV.SpCopy) )  > 177:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def CrBPDep8_Calculation():{n}{t}if ( get_number(IA4562SP.StateDeprNbr) + get_number(IA4562PIV.SpCopy) )  > 206:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def CrBPDep9_Calculation():{n}{t}if ( get_number(IA4562SP.StateDeprNbr) + get_number(IA4562PIV.SpCopy) )  > 235:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def CrBPDisp1_Calculation():{n}{t}if get_number(IA4562SP.StateDispNbr) > 4:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def CrBPDisp10_Calculation():{n}{t}if get_number(IA4562SP.StateDispNbr) > 264:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def CrBPDisp11_Calculation():{n}{t}if get_number(IA4562SP.StateDispNbr) > 293:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def CrBPDisp12_Calculation():{n}{t}if get_number(IA4562SP.StateDispNbr) > 322:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def CrBPDisp13_Calculation():{n}{t}if get_number(IA4562SP.StateDispNbr) > 351:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def CrBPDisp14_Calculation():{n}{t}if get_number(IA4562SP.StateDispNbr) > 380:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def CrBPDisp15_Calculation():{n}{t}if get_number(IA4562SP.StateDispNbr) > 409:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def CrBPDisp16_Calculation():{n}{t}if get_number(IA4562SP.StateDispNbr) > 438:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def CrBPDisp17_Calculation():{n}{t}if get_number(IA4562SP.StateDispNbr) > 467:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def CrBPDisp18_Calculation():{n}{t}if get_number(IA4562SP.StateDispNbr) > 496:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def CrBPDisp19_Calculation():{n}{t}if get_number(IA4562SP.StateDispNbr) > 525:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def CrBPDisp2_Calculation():{n}{t}if get_number(IA4562SP.StateDispNbr) > 32:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def CrBPDisp20_Calculation():{n}{t}if get_number(IA4562SP.StateDispNbr) > 554:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def CrBPDisp3_Calculation():{n}{t}if get_number(IA4562SP.StateDispNbr) > 61:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def CrBPDisp4_Calculation():{n}{t}if get_number(IA4562SP.StateDispNbr) > 90:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def CrBPDisp5_Calculation():{n}{t}if get_number(IA4562SP.StateDispNbr) > 119:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def CrBPDisp6_Calculation():{n}{t}if get_number(IA4562SP.StateDispNbr) > 148:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def CrBPDisp7_Calculation():{n}{t}if get_number(IA4562SP.StateDispNbr) > 177:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def CrBPDisp8_Calculation():{n}{t}if get_number(IA4562SP.StateDispNbr) > 206:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def CrBPDisp9_Calculation():{n}{t}if get_number(IA4562SP.StateDispNbr) > 235:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def DateServ_Calculation(Index):{n}{t}Stuff = Integer(){n}{t}Stuff = Index - get_number(IA4562PIV.SpCopy){n}{t}if get_number(IA4562PIV.SpCopy) == 1 and Index == 0:{n}{t}{t}return ''{n}{t}elif get_number(IA4562SP.DepSeeAttBool) == 1 and Index == 3:{n}{t}{t}return ''{n}{t}else:{n}{t}{t}return get_string(IAWDepr.DateServ, get_number(IA4562SP.StateDeprCopyNbr(Stuff))){n}{n}
def DepAdj_Calculation():{n}{t}return get_currency(IA4562SP.TotColF) - get_currency(IA4562SP.TotColI){n}{n}
def DepSeeAttBool_Calculation():{n}{t}if ( get_number(IA4562SP.StateDeprNbr) + get_number(IA4562PIV.SpCopy) )  > 4:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def Desc_Calculation():{n}{t}Total = Currency(){n}{t}Total = get_currency(IA4562SP.TotDepAdj){n}{t}return CStr(Total) + ' Adjustment'{n}{n}
def DisAdj_Calculation(Index):{n}{t}if get_number(IA4562SP.DisSeeAttBool) == 1 and Index == 3:{n}{t}{t}return get_currency(IAWBPDISPSP.TotDisAdj){n}{t}else:{n}{t}{t}return get_currency(IA4562SP.DisIADep(Index)) - get_currency(IA4562SP.DisFedDep(Index)){n}{n}
def DisDTServ_Calculation(Index):{n}{t}if get_number(IA4562SP.DisSeeAttBool) == 1 and Index == 3:{n}{t}{t}return ''{n}{t}else:{n}{t}{t}return get_string(IAWDepr.DateServ, get_number(IA4562SP.StateDispCopyNbr(Index))){n}{n}
def DisDTSld_Calculation(Index):{n}{t}if get_number(IA4562SP.DisSeeAttBool) == 1 and Index == 3:{n}{t}{t}return ''{n}{t}else:{n}{t}{t}return get_string(IAWDepr.DisDTSld, get_number(IA4562SP.StateDispCopyNbr(Index))){n}{n}
def DisFedDep_Calculation(Index):{n}{t}if get_number(IA4562SP.DisSeeAttBool) == 1 and Index == 3:{n}{t}{t}return get_currency(IAWBPDISPSP.TotDisFedDep){n}{t}else:{n}{t}{t}return get_currency(IAWDepr.SPDisFedDep, get_number(IA4562SP.StateDispCopyNbr(Index))){n}{n}
def DisIADep_Calculation(Index):{n}{t}if get_number(IA4562SP.DisSeeAttBool) == 1 and Index == 3:{n}{t}{t}return get_currency(IAWBPDISPSP.TotDisIADep){n}{t}else:{n}{t}{t}return get_currency(IAWDepr.SPDisIADep, get_number(IA4562SP.StateDispCopyNbr(Index))){n}{n}
def DisPropDesc_Calculation(Index):{n}{t}if get_number(IA4562SP.DisSeeAttBool) == 1 and Index == 3:{n}{t}{t}return 'See Stmt Att.'{n}{t}else:{n}{t}{t}return get_string(IAWDepr.PropDesc, get_number(IA4562SP.StateDispCopyNbr(Index))){n}{n}
def DisSeeAttBool_Calculation():{n}{t}if get_number(IA4562SP.StateDispNbr) > 4:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def Fed179_Calculation(Index):{n}{t}Stuff = Integer(){n}{t}Stuff = Index - get_number(IA4562PIV.SpCopy){n}{t}if get_number(IA4562PIV.SpCopy) == 1 and Index == 0:{n}{t}{t}return get_currency(IA4562PIV.SPLine1){n}{t}elif get_number(IA4562SP.DepSeeAttBool) == 1 and Index == 3:{n}{t}{t}return get_currency(IAWBPDEPSP.TotFed179){n}{t}else:{n}{t}{t}return get_currency(IAWDepr.SPFed179, get_number(IA4562SP.StateDeprCopyNbr(Stuff))){n}{n}
def FedDepDed_Calculation(Index):{n}{t}Stuff = Integer(){n}{t}Stuff = Index - get_number(IA4562PIV.SpCopy){n}{t}if get_number(IA4562PIV.SpCopy) == 1 and Index == 0:{n}{t}{t}return 0{n}{t}elif get_number(IA4562SP.DepSeeAttBool) == 1 and Index == 3:{n}{t}{t}return get_currency(IAWBPDEPSP.TotFDD){n}{t}else:{n}{t}{t}return get_currency(IAWDepr.SPFedDepDed, get_number(IA4562SP.StateDeprCopyNbr(Stuff))){n}{n}
def IA179_Calculation(Index):{n}{t}Stuff = Integer(){n}{t}Stuff = Index - get_number(IA4562PIV.SpCopy){n}{t}if get_number(IA4562PIV.SpCopy) == 1 and Index == 0:{n}{t}{t}return get_currency(IA4562PIV.SPPartIV179){n}{t}elif get_number(IA4562SP.DepSeeAttBool) == 1 and Index == 3:{n}{t}{t}return get_currency(IAWBPDEPSP.TotIA179){n}{t}else:{n}{t}{t}return get_currency(IAWDepr.SPIA179, get_number(IA4562SP.StateDeprCopyNbr(Stuff))){n}{n}
def Life_Calculation(Index):{n}{t}Stuff = Integer(){n}{t}Stuff = Index - get_number(IA4562PIV.SpCopy){n}{t}if get_number(IA4562PIV.SpCopy) == 1 and Index == 0:{n}{t}{t}return ''{n}{t}elif get_number(IA4562SP.DepSeeAttBool) == 1 and Index == 3:{n}{t}{t}return ''{n}{t}else:{n}{t}{t}return get_string(IAWDepr.Life, get_number(IA4562SP.StateDeprCopyNbr(Stuff))){n}{n}
def MACRSIA_Calculation(Index):{n}{t}Stuff = Integer(){n}{t}Stuff = Index - get_number(IA4562PIV.SpCopy){n}{t}if get_number(IA4562PIV.SpCopy) == 1 and Index == 0:{n}{t}{t}return 0{n}{t}elif get_number(IA4562SP.DepSeeAttBool) == 1 and Index == 3:{n}{t}{t}return get_currency(IAWBPDEPSP.TotMACRS){n}{t}else:{n}{t}{t}return get_currency(IAWDepr.SPMACRSIA, get_number(IA4562SP.StateDeprCopyNbr(Stuff))){n}{n}
def Names_Calculation():{n}{t}return get_string(IAREQUIRED.SPCombName){n}{n}
def PrIA4562_Calculation():{n}{t}if get_currency(IA4562SP.TotFed179) != 0:{n}{t}{t}return 1{n}{t}elif get_currency(IA4562SP.TotFDD) != 0:{n}{t}{t}return 1{n}{t}elif get_currency(IA4562SP.TotIA179) != 0:{n}{t}{t}return 1{n}{t}elif get_currency(IA4562SP.TotMACRS) != 0:{n}{t}{t}return 1{n}{t}elif get_currency(IA4562SP.TotDisAdj) != 0:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def PropDesc_Calculation(Index):{n}{t}Stuff = Integer(){n}{t}Stuff = Index - get_number(IA4562PIV.SpCopy){n}{t}if get_number(IA4562PIV.SpCopy) == 1 and Index == 0:{n}{t}{t}return get_string(IA4562PIV.SPPropDescr){n}{t}elif get_number(IA4562SP.DepSeeAttBool) == 1 and Index == 3:{n}{t}{t}return 'See Stmt Att.'{n}{t}else:{n}{t}{t}return get_string(IAWDepr.PropDesc, get_number(IA4562SP.StateDeprCopyNbr(Stuff))){n}{n}
def SSN_Calculation():{n}{t}return get_string(IAF1040.SpouseSSN){n}{n}
def StateDeprCopyNbr_Calculation(Index):{n}{t}count = Long(){n}{n}{t}max = Long(){n}{n}{t}listedcount = Long(){n}{t}listedcount = 0{n}{t}max = GetAllCopies(IAWDepr){n}{t}count = 0{n}{t}while count < max:{n}{t}{t}count = count + 1{n}{t}{t}if get_bool(IAWDepr.SpCopy, count) == True:{n}{t}{t}{t}if listedcount == Index:{n}{t}{t}{t}{t}return count{n}{t}{t}{t}else:{n}{t}{t}{t}{t}listedcount = listedcount + 1{n}{t}return 0{n}{n}
def StateDeprNbr_Calculation():{n}{t}count = Integer(){n}{n}{t}Lim = Integer(){n}{n}{t}Total = Integer(){n}{t}Lim = GetAllCopies(IAWDepr){n}{t}count = 1{n}{t}Total = 0{n}{t}while count <= Lim:{n}{t}{t}if get_bool(IAWDepr.SpCopy, count) == True:{n}{t}{t}{t}Total = Total + 1{n}{t}{t}else:{n}{t}{t}{t}Total = Total{n}{t}{t}count = count + 1{n}{t}return Total{n}{n}
def StateDispCopyNbr_Calculation(Index):{n}{t}count = Long(){n}{n}{t}max = Long(){n}{n}{t}listedcount = Long(){n}{t}listedcount = 0{n}{t}max = GetAllCopies(IAWDepr){n}{t}count = 0{n}{t}while count < max:{n}{t}{t}count = count + 1{n}{t}{t}if get_bool(IAWDepr.SpCopyDisp, count) == True:{n}{t}{t}{t}if listedcount == Index:{n}{t}{t}{t}{t}return count{n}{t}{t}{t}else:{n}{t}{t}{t}{t}listedcount = listedcount + 1{n}{t}return 0{n}{n}
def StateDispNbr_Calculation():{n}{t}count = Integer(){n}{n}{t}Lim = Integer(){n}{n}{t}Total = Integer(){n}{t}Lim = GetAllCopies(IAWDepr){n}{t}count = 1{n}{t}Total = 0{n}{t}while count <= Lim:{n}{t}{t}if get_bool(IAWDepr.SpCopyDisp, count) == True:{n}{t}{t}{t}Total = Total + 1{n}{t}{t}else:{n}{t}{t}{t}Total = Total{n}{t}{t}count = count + 1{n}{t}return Total{n}{n}
def TotColF_Calculation():{n}{t}return get_currency(IA4562SP.TotFed179) + get_currency(IA4562SP.TotFDD){n}{n}
def TotFed179_Calculation():{n}{t}count = Integer(){n}{n}{t}SubTot = Currency(){n}{t}count = 0{n}{t}SubTot = 0{n}{t}while count < 4:{n}{t}{t}SubTot = SubTot + get_currency(IA4562SP.Fed179(count)){n}{t}{t}count = count + 1{n}{t}return SubTot{n}{n}
def TotIA179_Calculation():{n}{t}count = Integer(){n}{n}{t}SubTot = Currency(){n}{t}count = 0{n}{t}SubTot = 0{n}{t}while count < 4:{n}{t}{t}SubTot = SubTot + get_currency(IA4562SP.IA179(count)){n}{t}{t}count = count + 1{n}{t}return SubTot{n}{n}
def TotP2ColF_Calculation():{n}{t}return get_currency(IA4562SP.TotDisAdj){n}{n}
def TotColI_Calculation():{n}{t}return get_currency(IA4562SP.TotIA179) + get_currency(IA4562SP.TotMACRS){n}{n}
def TotDepAdj_Calculation():{n}{t}return get_currency(IA4562SP.DepAdj) + get_currency(IA4562SP.TotP2ColF){n}{n}
def TotDisAdj_Calculation():{n}{t}count = Integer(){n}{n}{t}SubTot = Currency(){n}{t}count = 0{n}{t}SubTot = 0{n}{t}while count < 4:{n}{t}{t}SubTot = SubTot + get_currency(IA4562SP.DisAdj(count)){n}{t}{t}count = count + 1{n}{t}return SubTot{n}{n}
def TotDisFedDep_Calculation():{n}{t}count = Integer(){n}{n}{t}SubTot = Currency(){n}{t}count = 0{n}{t}SubTot = 0{n}{t}while count < 4:{n}{t}{t}SubTot = SubTot + get_currency(IA4562SP.DisFedDep(count)){n}{t}{t}count = count + 1{n}{t}return SubTot{n}{n}
def TotDisIADep_Calculation():{n}{t}count = Integer(){n}{n}{t}SubTot = Currency(){n}{t}count = 0{n}{t}SubTot = 0{n}{t}while count < 4:{n}{t}{t}SubTot = SubTot + get_currency(IA4562SP.DisIADep(count)){n}{t}{t}count = count + 1{n}{t}return SubTot{n}{n}
def TotFDD_Calculation():{n}{t}count = Integer(){n}{n}{t}SubTot = Currency(){n}{t}count = 0{n}{t}SubTot = 0{n}{t}while count < 4:{n}{t}{t}SubTot = SubTot + get_currency(IA4562SP.FedDepDed(count)){n}{t}{t}count = count + 1{n}{t}return SubTot{n}{n}
def TotMACRS_Calculation():{n}{t}count = Integer(){n}{n}{t}SubTot = Currency(){n}{t}count = 0{n}{t}SubTot = 0{n}{t}while count < 4:{n}{t}{t}SubTot = SubTot + get_currency(IA4562SP.MACRSIA(count)){n}{t}{t}count = count + 1{n}{t}return SubTot{n}{n}def AdjAMTInc1_Calculation():{n}{t}return max_value(0, get_currency(IA6251.AMTTaxInc) - get_currency(IA6251.Exemption2)){n}{n}
def AdjAMTInc2_Calculation():{n}{t}return max_value(0, get_currency(IA6251.AMTTaxInc) - get_currency(IA6251.AdjExempt)){n}{n}
def AdjExempt_Calculation():{n}{t}return max_value(0, get_currency(IA6251.Exemption1) - get_currency(IA6251.Multiply1)){n}{n}
def AdjGain_Calculation():{n}{t}return get_currency(USF6251.AdjGain){n}{n}
def Alert10_Calculation():{n}{t}if get_bool(IAF1040.CombMFS) == True:{n}{t}{t}if get_bool(IA6251SP.SpUserMod) == True:{n}{t}{t}{t}return 0{n}{t}{t}elif get_currency(USF6251.AMT) > 0:{n}{t}{t}{t}return 1{n}{t}{t}elif get_bool(IA6251.EFile) == True or get_bool(IA6251SP.EFile) == True:{n}{t}{t}{t}return 1{n}{t}{t}else:{n}{t}{t}{t}return 0{n}{t}else:{n}{t}{t}return 0{n}{n}
def Alert20_Calculation():{n}{t}#no AMT on bonus depr assets, believe there could be on 2018 nonconforming assets so should factor in IAWDepr.IANonConformDiffs{n}{t}if get_number(IA6251.DoNotComplete) == 1:{n}{t}{t}return 0{n}{t}elif get_bool(IAWDepr.FedStSec179) > 0 or get_bool(IAWDepr.IANonConformDiffs) > 0:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def Alert30_Calculation():{n}{t}if get_number(IA6251.DoNotComplete) == 1:{n}{t}{t}return 0{n}{t}elif get_bool(IAF1040.CombMFS) == True and  ( get_bool(IAWDepr.FedStSec179) > 0 or get_bool(IAWDepr.IANonConformDiffs) > 0 ) :{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def Alert40_Calculation():{n}{t}MortIntAdj = Currency(){n}{t}MortIntAdj = get_currency(IAW6251MORTINT.MortInt98) + get_currency(IAW6251MORTINT.RefinInt) + get_currency(IAW6251MORTINT.OthInt){n}{t}if get_bool(IAW6251MORTINT.OffMort) == False and get_currency(IAW6251MORTINT.TotMortInt) != 0 and MortIntAdj == 0:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def AMT_Calculation():{n}{t}return max_value(0, get_currency(IA6251.TentAMT) - get_currency(IA6251.RegTax)){n}{n}
def AMTInc_Calculation():{n}{t}return get_currency(IA6251.Med) + get_currency(IA6251.Taxes) + get_currency(IA6251.Int) + get_currency(IA6251.MiscDed) + get_currency(IA6251.ItmLimit) + get_currency(IA6251.TaxRfd) + get_currency(IA6251.InvInt) + get_currency(IA6251.Sec1202) + get_currency(IA6251.ISO) + get_currency(IA6251.Est) + get_currency(IA6251.LargePart) + get_currency(IA6251.AdjGain) + get_currency(IA6251.Post86Depr) + get_currency(IA6251.PALS) + get_currency(IA6251.LossLim) + get_currency(IA6251.Circ) + get_currency(IA6251.LTContr) + get_currency(IA6251.Mining) + get_currency(IA6251.Research) + get_currency(IA6251.Install) + get_currency(IA6251.RelAdj){n}{n}
def AMTTaxInc_Calculation():{n}{t}return max_value(0, get_currency(IA6251.Subtotal) - get_currency(IA6251.LimAMTNOL)){n}{n}
def AskDepr_Calculation():{n}{t}#no AMT on bonus depr assets, believe there could be on 2018 nonconforming assets so should factor in IAWDepr.IANonConformDiffs{n}{t}if get_bool(IAWDepr.FedStSec179) > 0 or get_bool(IAWDepr.IANonConformDiffs) > 0:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def AskMortInt_Calculation():{n}{t}if get_bool(USWResidency.F1040NR) == True:{n}{t}{t}return 0{n}{t}elif get_bool(IAF1040.ItemCheck) == True:{n}{t}{t}if get_currency(IASCHA.Mort) != 0 or get_currency(IASCHA.MortNot) != 0 or get_currency(IASCHA.PtsNot) != 0 or get_currency(IASCHA.MtgePrem) != 0:{n}{t}{t}{t}return 1{n}{t}{t}else:{n}{t}{t}{t}return 0{n}{t}else:{n}{t}{t}return 0{n}{n}
def Circ_Calculation():{n}{t}return get_currency(USF6251.Circ){n}{n}
def Description_Calculation():{n}{t}Total = Currency(){n}{t}Total = get_currency(IA6251.TotAMT){n}{t}return CStr(Total) + ' AMT'{n}{n}
def DoNotComplete_Calculation():{n}{t}if IAFS() == 1:{n}{t}{t}if get_bool(IAF1040.Over65) == True and get_currency(IAF1040.ANet) <= Decimal("24000"):{n}{t}{t}{t}return 1{n}{t}{t}elif get_currency(IAF1040.ANet) <= Decimal("9000"):{n}{t}{t}{t}return 1{n}{t}{t}else:{n}{t}{t}{t}return 0{n}{t}elif get_bool(IAF1040.Over65) == True and get_currency(IAREQUIRED.TotNI) <= Decimal("32000"):{n}{t}{t}return 1{n}{t}elif get_currency(IAREQUIRED.TotNI) <= Decimal("13500"):{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def EFile_Calculation():{n}{t}if get_number(IA6251.DoNotComplete) == 1:{n}{t}{t}return 0{n}{t}elif get_bool(IA6251.Print) == True:{n}{t}{t}return 1{n}{t}elif get_currency(IA6251.Med) != 0:{n}{t}{t}return 1{n}{t}elif get_currency(IA6251.Taxes) != 0:{n}{t}{t}return 1{n}{t}elif get_currency(IA6251.Int) != 0:{n}{t}{t}return 1{n}{t}elif get_currency(IA6251.MiscDed) != 0:{n}{t}{t}return 1{n}{t}elif get_currency(IA6251.ItmLimit) != 0:{n}{t}{t}return 1{n}{t}elif get_currency(IA6251.TaxRfd) != 0:{n}{t}{t}return 1{n}{t}elif get_currency(IA6251.InvInt) != 0:{n}{t}{t}return 1{n}{t}elif get_currency(IA6251.Sec1202) != 0:{n}{t}{t}return 1{n}{t}elif get_currency(IA6251.ISO) != 0:{n}{t}{t}return 1{n}{t}elif get_currency(IA6251.Est) != 0:{n}{t}{t}return 1{n}{t}elif get_currency(IA6251.LargePart) != 0:{n}{t}{t}return 1{n}{t}elif get_currency(IA6251.AdjGain) != 0:{n}{t}{t}return 1{n}{t}elif get_currency(IA6251.Post86Depr) != 0:{n}{t}{t}return 1{n}{t}elif get_currency(IA6251.PALS) != 0:{n}{t}{t}return 1{n}{t}elif get_currency(IA6251.LossLim) != 0:{n}{t}{t}return 1{n}{t}elif get_currency(IA6251.Circ) != 0:{n}{t}{t}return 1{n}{t}elif get_currency(IA6251.LTContr) != 0:{n}{t}{t}return 1{n}{t}elif get_currency(IA6251.Mining) != 0:{n}{t}{t}return 1{n}{t}elif get_currency(IA6251.Research) != 0:{n}{t}{t}return 1{n}{t}elif get_currency(IA6251.Install) != 0:{n}{t}{t}return 1{n}{t}elif get_currency(IA6251.RelAdj) != 0:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def Est_Calculation():{n}{t}return get_currency(USF6251.Est){n}{n}
def Exemption1_Calculation():{n}{t}if get_bool(IAF1040.MFJ) == True:{n}{t}{t}return Decimal("35000"){n}{t}elif get_bool(IAF1040.CombMFS) == True or get_bool(IAF1040.MFS) == True:{n}{t}{t}return Decimal("17500"){n}{t}else:{n}{t}{t}return Decimal("26000"){n}{n}
def Exemption2_Calculation():{n}{t}if get_bool(IAF1040.MFJ) == True:{n}{t}{t}return Decimal("150000"){n}{t}elif get_bool(IAF1040.CombMFS) == True or get_bool(IAF1040.MFS) == True:{n}{t}{t}return Decimal("75000"){n}{t}else:{n}{t}{t}return Decimal("112500"){n}{n}
def Install_Calculation():{n}{t}return get_currency(USF6251.Install) * - 1{n}{n}
def Int_Calculation():{n}{t}if get_bool(IAF1040.CombMFS) == True and get_bool(IAF1040.ItemCheck) == True:{n}{t}{t}return c_dollar(get_float(IASCHA.Perc) * get_float(IAW6251MORTINT.AMTInt)){n}{t}elif get_bool(IAF1040.ItemCheck) == True:{n}{t}{t}return get_currency(IAW6251MORTINT.AMTInt){n}{t}else:{n}{t}{t}return 0{n}{n}
def InvInt_Calculation():{n}{t}if get_bool(IAF1040.CombMFS) == True and get_bool(IAF1040.ItemCheck) == True:{n}{t}{t}return c_dollar(get_float(IASCHA.Perc) * get_float(USF6251.InvInt)){n}{t}elif get_bool(IAF1040.ItemCheck) == True:{n}{t}{t}return get_currency(USF6251.InvInt){n}{t}else:{n}{t}{t}return 0{n}{n}
def ISO_Calculation():{n}{t}return get_currency(USF6251.ISO){n}{n}
def ItmLimit_Calculation():{n}{t}if get_bool(IAF1040.CombMFS) == True and get_bool(IAF1040.ItemCheck) == True:{n}{t}{t}return c_dollar(get_float(IASCHA.Perc) * get_float(IAWITMDED.Limit)) * - 1{n}{t}elif get_bool(IAF1040.ItemCheck) == True:{n}{t}{t}return get_currency(IAWITMDED.Limit) * - 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def LargePart_Calculation():{n}{t}return get_currency(USF6251.LargePart){n}{n}
def LimAMTNOL_Calculation():{n}{t}TEst = Currency(){n}{n}{t}Unlim = Currency(){n}{n}{t}AMTL = Currency(){n}{t}TEst = get_currency(IA6251.Subtotal){n}{t}Unlim = Abs(get_currency(IA6251.AMTNOL)){n}{t}if TEst > 0:{n}{t}{t}AMTL = min_value(Unlim, c_dollar(CDbl(TEst) * 0.9)){n}{t}else:{n}{t}{t}AMTL = 0{n}{t}return AMTL{n}{n}
def LossLim_Calculation():{n}{t}return get_currency(USF6251.LossLim){n}{n}
def LTContr_Calculation():{n}{t}return get_currency(USF6251.LTContr){n}{n}
def Med_Calculation():{n}{t}return 0{n}{n}
def Mining_Calculation():{n}{t}return get_currency(USF6251.Mining){n}{n}
def MiscDed_Calculation():{n}{t}if get_bool(IAF1040.CombMFS) == True and get_bool(IAF1040.ItemCheck) == True:{n}{t}{t}return c_dollar(get_float(IASCHA.Perc) * get_float(IASCHA.AllowExp)){n}{t}elif get_bool(IAF1040.ItemCheck) == True:{n}{t}{t}return get_currency(IASCHA.AllowExp){n}{t}else:{n}{t}{t}return 0{n}{n}
def Multiply1_Calculation():{n}{t}return c_dollar(get_float(IA6251.AdjAMTInc1) * 0.25){n}{n}
def Names_Calculation():{n}{t}if get_bool(IAF1040.CombMFS) == True:{n}{t}{t}return get_string(IAREQUIRED.TPCombName){n}{t}else:{n}{t}{t}return get_string(IAREQUIRED.CombNames){n}{n}
def NOL_Calculation():{n}{t}if get_bool(IAF1040.CombMFS) == True:{n}{t}{t}return get_currency(IAOTHADJ.TIANOL){n}{t}else:{n}{t}{t}return get_currency(IAOTHADJ.TIANOL) + get_currency(IAOTHADJ.SIANOL){n}{n}
def PALS_Calculation():{n}{t}return get_currency(USF6251.PALs){n}{n}
def Post86Depr_Calculation():{n}{t}#review new line 13 instructions and determine if we need to make an adjustment for any IA depr differences or if we should add an alert and note in Q&A{n}{t}#For 2017 added alerts and Q&A for taxpayer and spouse 6251{n}{t}return get_currency(USF6251.Post86Depr){n}{n}
def PrInstall_Calculation():{n}{t}return Abs(get_currency(IA6251.Install)){n}{n}
def Print_Calculation():{n}{t}if get_currency(IA6251.TotAMT) > 0:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def PrItmLimit_Calculation():{n}{t}return Abs(get_currency(IA6251.ItmLimit)){n}{n}
def PrTaxRfd_Calculation():{n}{t}return Abs(get_currency(IA6251.TaxRfd)){n}{n}
def PYNRAMT_Calculation():{n}{t}return max_value(0, c_dollar(get_float(IA6251.AMT) * get_float(IA6251.PYNRRatio))){n}{n}
def PYNRAMTIncNI_Calculation():{n}{t}if get_bool(IAF126.TpPYNR) == True:{n}{t}{t}return max_value(0, get_currency(IAF126.ANet) + get_currency(IA6251.PYNRAMTInc)){n}{t}else:{n}{t}{t}return 0{n}{n}
def PYNRRatio_Calculation():{n}{t}if get_currency(IA6251.TotAMTInc) == 0:{n}{t}{t}return 0{n}{t}else:{n}{t}{t}return min_value(1, Round(get_float(IA6251.PYNRAMTIncNI) / get_float(IA6251.TotAMTInc), 3)){n}{n}
def RegTax_Calculation():{n}{t}return max_value(0, get_currency(IAF1040.AAltTax) - get_currency(IAF1040.AExemCr)){n}{n}
def RelAdj_Calculation():{n}{t}#need to verify if should remove fed 6251 line 3 amounts for .F461 and .F8990 and .stdDed, seems like should remove since these were not preference items in the past and are only being made on federal due to TCJA and both of these are Iowa nonconformity items.{n}{t}#.LargePart is on line 11 of IA 6251{n}{t}return get_currency(USF6251.RelAdj) - get_currency(USF6251.LargePart) - get_currency(USF6251.F461) - get_currency(USF6251.F8990) - get_currency(USF6251.StdDed){n}{n}
def Research_Calculation():{n}{t}return get_currency(USF6251.Research){n}{n}
def Sec1202_Calculation():{n}{t}return get_currency(USF6251.Sec1202){n}{n}
def SSN_Calculation():{n}{t}return get_string(IAF1040.SSN){n}{n}
def Subtotal_Calculation():{n}{t}return get_currency(IA6251.AMTInc) + get_currency(IA6251.TaxInc) + get_currency(IA6251.NOL){n}{n}
def Taxes_Calculation():{n}{t}if get_bool(IAF1040.CombMFS) == True and get_bool(IAF1040.ItemCheck) == True:{n}{t}{t}return c_dollar(get_float(IASCHA.Perc) * get_float(IASCHA.TaxPd)){n}{t}elif get_bool(IAF1040.ItemCheck) == True:{n}{t}{t}return get_currency(IASCHA.TaxPd){n}{t}else:{n}{t}{t}return 0{n}{n}
def TaxInc_Calculation():{n}{t}return get_currency(IAF1040.ATaxInc){n}{n}
def TaxRfd_Calculation():{n}{t}return get_currency(IAF1040.ARefund) * - 1{n}{n}
def TentAMT_Calculation():{n}{t}return c_dollar(get_float(IA6251.AdjAMTInc2) * 0.067){n}{n}
def TotAMT_Calculation():{n}{t}if get_number(IA6251.DoNotComplete) == 1:{n}{t}{t}return 0{n}{t}elif get_bool(IAF126.TpPYNR) == True:{n}{t}{t}return get_currency(IA6251.PYNRAMT){n}{t}else:{n}{t}{t}return get_currency(IA6251.AMT){n}{n}
def TotAMTInc_Calculation():{n}{t}if get_bool(IAF126.TpPYNR) == True:{n}{t}{t}return max_value(0, get_currency(IAF126.AAllSource) + get_currency(IA6251.AMTInc)){n}{t}else:{n}{t}{t}return 0{n}{n}def AdjAMTInc1_Calculation():{n}{t}return max_value(0, get_currency(IA6251SP.AMTTaxInc) - get_currency(IA6251SP.Exemption2)){n}{n}
def AdjAMTInc2_Calculation():{n}{t}return max_value(0, get_currency(IA6251SP.AMTTaxInc) - get_currency(IA6251SP.AdjExempt)){n}{n}
def AdjExempt_Calculation():{n}{t}return max_value(0, get_currency(IA6251SP.Exemption1) - get_currency(IA6251SP.Multiply1)){n}{n}
def AdjGain_Calculation():{n}{t}if get_bool(IAF1040.CombMFS) == True:{n}{t}{t}return max_value(0, get_currency(USF6251.AdjGain) - get_currency(IA6251.AdjGain)){n}{t}else:{n}{t}{t}return 0{n}{n}
def AMT_Calculation():{n}{t}return max_value(0, get_currency(IA6251SP.TentAMT) - get_currency(IA6251SP.RegTax)){n}{n}
def AMTInc_Calculation():{n}{t}return get_currency(IA6251SP.Med) + get_currency(IA6251SP.Taxes) + get_currency(IA6251SP.Int) + get_currency(IA6251SP.MiscDed) + get_currency(IA6251SP.ItmLimit) + get_currency(IA6251SP.TaxRfd) + get_currency(IA6251SP.InvInt) + get_currency(IA6251SP.Sec1202) + get_currency(IA6251SP.ISO) + get_currency(IA6251SP.Est) + get_currency(IA6251SP.LargePart) + get_currency(IA6251SP.AdjGain) + get_currency(IA6251SP.Post86Depr) + get_currency(IA6251SP.PALS) + get_currency(IA6251SP.LossLim) + get_currency(IA6251SP.Circ) + get_currency(IA6251SP.LTContr) + get_currency(IA6251SP.Mining) + get_currency(IA6251SP.Research) + get_currency(IA6251SP.Install) + get_currency(IA6251SP.RelAdj){n}{n}
def AMTTaxInc_Calculation():{n}{t}return max_value(0, get_currency(IA6251SP.Subtotal) - get_currency(IA6251SP.LimAMTNOL)){n}{n}
def Circ_Calculation():{n}{t}if get_bool(IAF1040.CombMFS) == True:{n}{t}{t}return max_value(0, get_currency(USF6251.Circ) - get_currency(IA6251.Circ)){n}{t}else:{n}{t}{t}return 0{n}{n}
def Description_Calculation():{n}{t}Total = Currency(){n}{t}Total = get_currency(IA6251SP.TotAMT){n}{t}return CStr(Total) + ' AMT'{n}{n}
def EFile_Calculation():{n}{t}if get_number(IA6251.DoNotComplete) == 1:{n}{t}{t}return 0{n}{t}elif get_bool(IA6251SP.Print) == True:{n}{t}{t}return 1{n}{t}elif get_currency(IA6251SP.Med) != 0:{n}{t}{t}return 1{n}{t}elif get_currency(IA6251SP.Taxes) != 0:{n}{t}{t}return 1{n}{t}elif get_currency(IA6251SP.Int) != 0:{n}{t}{t}return 1{n}{t}elif get_currency(IA6251SP.MiscDed) != 0:{n}{t}{t}return 1{n}{t}elif get_currency(IA6251SP.ItmLimit) != 0:{n}{t}{t}return 1{n}{t}elif get_currency(IA6251SP.TaxRfd) != 0:{n}{t}{t}return 1{n}{t}elif get_currency(IA6251SP.InvInt) != 0:{n}{t}{t}return 1{n}{t}elif get_currency(IA6251SP.Sec1202) != 0:{n}{t}{t}return 1{n}{t}elif get_currency(IA6251SP.ISO) != 0:{n}{t}{t}return 1{n}{t}elif get_currency(IA6251SP.Est) != 0:{n}{t}{t}return 1{n}{t}elif get_currency(IA6251SP.LargePart) != 0:{n}{t}{t}return 1{n}{t}elif get_currency(IA6251SP.AdjGain) != 0:{n}{t}{t}return 1{n}{t}elif get_currency(IA6251SP.Post86Depr) != 0:{n}{t}{t}return 1{n}{t}elif get_currency(IA6251SP.PALS) != 0:{n}{t}{t}return 1{n}{t}elif get_currency(IA6251SP.LossLim) != 0:{n}{t}{t}return 1{n}{t}elif get_currency(IA6251SP.Circ) != 0:{n}{t}{t}return 1{n}{t}elif get_currency(IA6251SP.LTContr) != 0:{n}{t}{t}return 1{n}{t}elif get_currency(IA6251SP.Mining) != 0:{n}{t}{t}return 1{n}{t}elif get_currency(IA6251SP.Research) != 0:{n}{t}{t}return 1{n}{t}elif get_currency(IA6251SP.Install) != 0:{n}{t}{t}return 1{n}{t}elif get_currency(IA6251SP.RelAdj) != 0:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def Est_Calculation():{n}{t}if get_bool(IAF1040.CombMFS) == True:{n}{t}{t}return max_value(0, get_currency(USF6251.Est) - get_currency(IA6251.Est)){n}{t}else:{n}{t}{t}return 0{n}{n}
def Exemption1_Calculation():{n}{t}if get_bool(IAF1040.CombMFS) == True:{n}{t}{t}return Decimal("17500"){n}{t}else:{n}{t}{t}return 0{n}{n}
def Exemption2_Calculation():{n}{t}if get_bool(IAF1040.CombMFS) == True:{n}{t}{t}return Decimal("75000"){n}{t}else:{n}{t}{t}return 0{n}{n}
def Install_Calculation():{n}{t}FedInstall = Currency(){n}{t}FedInstall = get_currency(USF6251.Install) * - 1{n}{t}if get_bool(IAF1040.CombMFS) == True:{n}{t}{t}return FedInstall - get_currency(IA6251.Install){n}{t}else:{n}{t}{t}return 0{n}{n}
def Int_Calculation():{n}{t}if get_bool(IAF1040.CombMFS) == True and get_bool(IAF1040.ItemCheck) == True:{n}{t}{t}return max_value(0, get_currency(IAW6251MORTINT.AMTInt) - get_currency(IA6251.Int)){n}{t}else:{n}{t}{t}return 0{n}{n}
def InvInt_Calculation():{n}{t}if get_bool(IAF1040.CombMFS) == True and get_bool(IAF1040.ItemCheck) == True:{n}{t}{t}return max_value(0, get_currency(USF6251.InvInt) - get_currency(IA6251.InvInt)){n}{t}else:{n}{t}{t}return 0{n}{n}
def ISO_Calculation():{n}{t}if get_bool(IAF1040.CombMFS) == True:{n}{t}{t}return max_value(0, get_currency(USF6251.ISO) - get_currency(IA6251.ISO)){n}{t}else:{n}{t}{t}return 0{n}{n}
def ItmLimit_Calculation():{n}{t}Limit = Currency(){n}{t}Limit = get_currency(IAWITMDED.Limit) * - 1{n}{t}if get_bool(IAF1040.CombMFS) == True and get_bool(IAF1040.ItemCheck) == True:{n}{t}{t}return Limit - get_currency(IA6251.ItmLimit){n}{t}else:{n}{t}{t}return 0{n}{n}
def LargePart_Calculation():{n}{t}if get_bool(IAF1040.CombMFS) == True:{n}{t}{t}return max_value(0, get_currency(USF6251.LargePart) - get_currency(IA6251.LargePart)){n}{t}else:{n}{t}{t}return 0{n}{n}
def LimAMTNOL_Calculation():{n}{t}TEst = Currency(){n}{n}{t}Unlim = Currency(){n}{n}{t}AMTL = Currency(){n}{t}TEst = get_currency(IA6251SP.Subtotal){n}{t}Unlim = Abs(get_currency(IA6251SP.AMTNOL)){n}{t}if TEst > 0:{n}{t}{t}AMTL = min_value(Unlim, c_dollar(CDbl(TEst) * 0.9)){n}{t}else:{n}{t}{t}AMTL = 0{n}{t}if get_bool(IAF1040.CombMFS) == True:{n}{t}{t}return AMTL{n}{t}else:{n}{t}{t}return 0{n}{n}
def LossLim_Calculation():{n}{t}if get_bool(IAF1040.CombMFS) == True:{n}{t}{t}return max_value(0, get_currency(USF6251.LossLim) - get_currency(IA6251.LossLim)){n}{t}else:{n}{t}{t}return 0{n}{n}
def LTContr_Calculation():{n}{t}if get_bool(IAF1040.CombMFS) == True:{n}{t}{t}return max_value(0, get_currency(USF6251.LTContr) - get_currency(IA6251.LTContr)){n}{t}else:{n}{t}{t}return 0{n}{n}
def Med_Calculation():{n}{t}return 0{n}{n}
def Mining_Calculation():{n}{t}if get_bool(IAF1040.CombMFS) == True:{n}{t}{t}return max_value(0, get_currency(USF6251.Mining) - get_currency(IA6251.Mining)){n}{t}else:{n}{t}{t}return 0{n}{n}
def MiscDed_Calculation():{n}{t}if get_bool(IAF1040.CombMFS) == True and get_bool(IAF1040.ItemCheck) == True:{n}{t}{t}return max_value(0, get_currency(IASCHA.AllowExp) - get_currency(IA6251.MiscDed)){n}{t}else:{n}{t}{t}return 0{n}{n}
def Multiply1_Calculation():{n}{t}return c_dollar(get_float(IA6251SP.AdjAMTInc1) * 0.25){n}{n}
def Names_Calculation():{n}{t}return get_string(IAREQUIRED.SPCombName){n}{n}
def NOL_Calculation():{n}{t}if get_bool(IAF1040.CombMFS) == True:{n}{t}{t}return get_currency(IAOTHADJ.SIANOL){n}{t}else:{n}{t}{t}return 0{n}{n}
def PALS_Calculation():{n}{t}if get_bool(IAF1040.CombMFS) == True:{n}{t}{t}return max_value(0, get_currency(USF6251.PALS) - get_currency(IA6251.PALS)){n}{t}else:{n}{t}{t}return 0{n}{n}
def Post86Depr_Calculation():{n}{t}#review new line 13 instructions and determine if we need to make an adjustment for any IA depr differences or if we should add an alert and note in Q&A{n}{t}#For 2017 changed to 
def PrInstall_Calculation():{n}{t}return Abs(get_currency(IA6251SP.Install)){n}{n}
def Print_Calculation():{n}{t}if get_bool(IAF1040.CombMFS) == False:{n}{t}{t}return 0{n}{t}elif get_currency(IA6251SP.TotAMT) > 0:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def PrItmLimit_Calculation():{n}{t}return Abs(get_currency(IA6251SP.ItmLimit)){n}{n}
def PrTaxRfd_Calculation():{n}{t}return Abs(get_currency(IA6251SP.TaxRfd)){n}{n}
def PYNRAMT_Calculation():{n}{t}return max_value(0, c_dollar(get_float(IA6251SP.AMT) * get_float(IA6251SP.PYNRRatio))){n}{n}
def PYNRAMTIncNI_Calculation():{n}{t}if get_bool(IAF126.SpPYNR) == True:{n}{t}{t}return max_value(0, get_currency(IAF126.BNet) + get_currency(IA6251SP.PYNRAMTInc)){n}{t}else:{n}{t}{t}return 0{n}{n}
def PYNRRatio_Calculation():{n}{t}if get_currency(IA6251SP.TotAMTInc) == 0:{n}{t}{t}return 0{n}{t}else:{n}{t}{t}return min_value(1, Round(get_float(IA6251SP.PYNRAMTIncNI) / get_float(IA6251SP.TotAMTInc), 3)){n}{n}
def RegTax_Calculation():{n}{t}if get_bool(IAF1040.CombMFS) == True:{n}{t}{t}return max_value(0, get_currency(IAF1040.BAltTax) - get_currency(IAF1040.BExemCr)){n}{t}else:{n}{t}{t}return 0{n}{n}
def RelAdj_Calculation():{n}{t}IARelAdj = Currency(){n}{t}IARelAdj = get_currency(USF6251.RelAdj) - get_currency(USF6251.LargePart) - get_currency(USF6251.F461) - get_currency(USF6251.F8990) - get_currency(USF6251.StdDed){n}{t}if get_bool(IAF1040.CombMFS) == True:{n}{t}{t}return max_value(0, IARelAdj - get_currency(IA6251.RelAdj)){n}{t}else:{n}{t}{t}return 0{n}{n}
def Research_Calculation():{n}{t}if get_bool(IAF1040.CombMFS) == True:{n}{t}{t}return max_value(0, get_currency(USF6251.Research) - get_currency(IA6251.Research)){n}{t}else:{n}{t}{t}return 0{n}{n}
def Sec1202_Calculation():{n}{t}if get_bool(IAF1040.CombMFS) == True:{n}{t}{t}return max_value(0, get_currency(USF6251.Sec1202) - get_currency(IA6251.Sec1202)){n}{t}else:{n}{t}{t}return 0{n}{n}
def SpUserMod_Calculation():{n}{t}if GetStatus(UserModifiedStatus) == True:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def SSN_Calculation():{n}{t}return get_string(IAF1040.SpouseSSN){n}{n}
def Subtotal_Calculation():{n}{t}return get_currency(IA6251SP.AMTInc) + get_currency(IA6251SP.TaxInc) + get_currency(IA6251SP.NOL){n}{n}
def Taxes_Calculation():{n}{t}if get_bool(IAF1040.CombMFS) == True and get_bool(IAF1040.ItemCheck) == True:{n}{t}{t}return max_value(0, get_currency(IASCHA.TaxPd) - get_currency(IA6251.Taxes)){n}{t}else:{n}{t}{t}return 0{n}{n}
def TaxInc_Calculation():{n}{t}if get_bool(IAF1040.CombMFS) == True:{n}{t}{t}return get_currency(IAF1040.BTaxInc){n}{t}else:{n}{t}{t}return 0{n}{n}
def TaxRfd_Calculation():{n}{t}if get_bool(IAF1040.CombMFS) == True:{n}{t}{t}return get_currency(IAF1040.BRefund) * - 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def TentAMT_Calculation():{n}{t}return c_dollar(get_float(IA6251SP.AdjAMTInc2) * 0.067){n}{n}
def TotAMT_Calculation():{n}{t}if get_number(IA6251.DoNotComplete) == 1:{n}{t}{t}return 0{n}{t}elif get_bool(IAF1040.CombMFS) == False:{n}{t}{t}return 0{n}{t}elif get_bool(IAF126.SpPYNR) == True:{n}{t}{t}return get_currency(IA6251SP.PYNRAMT){n}{t}else:{n}{t}{t}return get_currency(IA6251SP.AMT){n}{n}
def TotAMTInc_Calculation():{n}{t}if get_bool(IAF126.SpPYNR) == True:{n}{t}{t}return max_value(0, get_currency(IAF126.BAllSource) + get_currency(IA6251SP.AMTInc)){n}{t}else:{n}{t}{t}return 0{n}{n}def AMTCR_Calculation():{n}{t}return min_value(get_currency(IA8801SP.MaxAMT), get_currency(IA8801SP.CYRegTax)){n}{n}
def ApporRegTx_Calculation():{n}{t}return get_currency(IA8801SP.CYTax) - get_currency(IA8801SP.PYNRCr){n}{n}
def CYAMT_Calculation():{n}{t}if get_bool(IAF1040.CombMFS) == False:{n}{t}{t}return 0{n}{t}elif get_bool(IAF126.SpPYNR) == True:{n}{t}{t}return max_value(0, c_dollar(get_float(IA6251SP.TentAMT) * get_float(IA6251SP.PYNRRatio))){n}{t}else:{n}{t}{t}return get_currency(IA6251SP.TentAMT){n}{n}
def CYCarryforward_Calculation():{n}{t}return max_value(0, get_currency(IA8801SP.TotalPYAMT) - get_currency(IA8801SP.AMTCR)){n}{n}
def CYRegTax_Calculation():{n}{t}if get_currency(IA8801SP.ExcRegTax) == 0:{n}{t}{t}return 0{n}{t}else:{n}{t}{t}return max_value(0, get_currency(IA8801SP.CYTax) - get_currency(IA8801SP.TotCr)){n}{n}
def CYTax_Calculation():{n}{t}if get_bool(IAF1040.CombMFS) == True:{n}{t}{t}return get_currency(IAF1040.BAltTax){n}{t}else:{n}{t}{t}return 0{n}{n}
def Description_Calculation():{n}{t}Total = Currency(){n}{t}Total = get_currency(IA8801SP.AMTCR){n}{t}return CStr(Total) + ' Credit'{n}{n}
def EFile_Calculation():{n}{t}if get_currency(IA8801SP.AMTCR) > 0:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def ExcRegTax_Calculation():{n}{t}return max_value(0, get_currency(IA8801SP.ApporRegTx) - get_currency(IA8801SP.CYAMT)){n}{n}
def MaxAMT_Calculation():{n}{t}return min_value(get_currency(IA8801SP.TotalPYAMT), get_currency(IA8801SP.ExcRegTax)){n}{n}
def Names_Calculation():{n}{t}return get_string(IAREQUIRED.SPCombName){n}{n}
def Print_Calculation():{n}{t}if get_currency(IA8801SP.AMTCR) > 0 or get_currency(IA8801SP.CYCarryforward) > 0:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def PYAMT_Calculation():{n}{t}if get_bool(IAF1040.CombMFS) == False:{n}{t}{t}return 0{n}{t}elif get_string(USZIA1040.IAPYFS) == get_string(IAREQUIRED.FilingStatus):{n}{t}{t}return get_currency(USZIA1040.IAPYMinTaxB){n}{t}else:{n}{t}{t}return 0{n}{n}
def PYCarryforward_Calculation():{n}{t}return get_currency(USZIA1040.IAPY8801CFSp){n}{n}
def PYNRCr_Calculation():{n}{t}if get_bool(IAF1040.CombMFS) == True:{n}{t}{t}return get_currency(IAF1040.BCrNon){n}{t}else:{n}{t}{t}return 0{n}{n}
def SSN_Calculation():{n}{t}return get_string(IAF1040.SpouseSSN){n}{n}
def Sum148Cr_Calculation():{n}{t}if get_currency(IA8801SP.ExcRegTax) == 0:{n}{t}{t}return 0{n}{t}elif get_bool(IAF1040.CombMFS) == True:{n}{t}{t}return get_currency(IA148SP.TotNonRefNo8801){n}{t}else:{n}{t}{t}return 0{n}{n}
def SumCr_Calculation():{n}{t}if get_currency(IA8801SP.ExcRegTax) == 0:{n}{t}{t}return 0{n}{t}elif get_bool(IAF1040.CombMFS) == True:{n}{t}{t}return get_currency(IAF1040.BCredits) + get_currency(IAF1040.BCrNon) + get_currency(IAF1040.BOutState){n}{t}else:{n}{t}{t}return 0{n}{n}
def TotalPYAMT_Calculation():{n}{t}if get_bool(IAF1040.CombMFS) == True:{n}{t}{t}return get_currency(IA8801SP.PYAMT) + get_currency(IA8801SP.PYCarryforward){n}{t}else:{n}{t}{t}return 0{n}{n}
def TotCr_Calculation():{n}{t}return get_currency(IA8801SP.SumCr) + get_currency(IA8801SP.Sum148Cr){n}{n}def Description_Calculation():{n}{t}if get_number(USWAddDep.GrandTotDeps) == 1:{n}{t}{t}return CStr(get_number(USWAddDep.GrandTotDeps)) + ' Dependent'{n}{t}elif get_number(USWAddDep.GrandTotDeps) > 1:{n}{t}{t}return CStr(get_number(USWAddDep.GrandTotDeps)) + ' Dependents'{n}{t}else:{n}{t}{t}return 'Dependents'{n}{n}
def FDepAge_Calculation(Index):{n}{t}max = Long(){n}{n}{t}count = Long(){n}{n}{t}Hits = Long(){n}{t}max = GetAllCopies(USWDependents){n}{t}Hits = 0{n}{t}count = 0{n}{t}while count < max:{n}{t}{t}count = count + 1{n}{t}{t}if get_number(USWDependents.DepQual, count) == 1:{n}{t}{t}{t}if Hits == Index:{n}{t}{t}{t}{t}return get_number(USWDependents.DepAge, count){n}{t}{t}{t}else:{n}{t}{t}{t}{t}Hits = Hits + 1{n}{t}return 0{n}{n}
def FDepLast_Calculation(Index):{n}{t}max = Long(){n}{n}{t}count = Long(){n}{n}{t}Hits = Long(){n}{t}max = GetAllCopies(USWDependents){n}{t}Hits = 0{n}{t}count = 0{n}{t}while count < max:{n}{t}{t}count = count + 1{n}{t}{t}if get_number(USWDependents.DepQual, count) == 1:{n}{t}{t}{t}if Hits == Index:{n}{t}{t}{t}{t}return get_string(USWDependents.DepLast, count){n}{t}{t}{t}else:{n}{t}{t}{t}{t}Hits = Hits + 1{n}{t}return ''{n}{n}
def FDepName_Calculation(Index):{n}{t}max = Long(){n}{n}{t}count = Long(){n}{n}{t}Hits = Long(){n}{t}max = GetAllCopies(USWDependents){n}{t}Hits = 0{n}{t}count = 0{n}{t}while count < max:{n}{t}{t}count = count + 1{n}{t}{t}if get_number(USWDependents.DepQual, count) == 1:{n}{t}{t}{t}if Hits == Index:{n}{t}{t}{t}{t}return get_string(USWDependents.DepName, count){n}{t}{t}{t}else:{n}{t}{t}{t}{t}Hits = Hits + 1{n}{t}return ''{n}{n}
def FDepRel_Calculation(Index):{n}{t}max = Long(){n}{n}{t}count = Long(){n}{n}{t}Hits = Long(){n}{t}max = GetAllCopies(USWDependents){n}{t}Hits = 0{n}{t}count = 0{n}{t}while count < max:{n}{t}{t}count = count + 1{n}{t}{t}if get_number(USWDependents.DepQual, count) == 1:{n}{t}{t}{t}if Hits == Index:{n}{t}{t}{t}{t}return get_string(USWDependents.DepRel, count){n}{t}{t}{t}else:{n}{t}{t}{t}{t}Hits = Hits + 1{n}{t}return ''{n}{n}
def FDEPSSN_Calculation(Index):{n}{t}max = Long(){n}{n}{t}count = Long(){n}{n}{t}Hits = Long(){n}{t}max = GetAllCopies(USWDependents){n}{t}Hits = 0{n}{t}count = 0{n}{t}while count < max:{n}{t}{t}count = count + 1{n}{t}{t}if get_number(USWDependents.DepQual, count) == 1:{n}{t}{t}{t}if Hits == Index:{n}{t}{t}{t}{t}return get_string(USWDependents.DepSSN, count){n}{t}{t}{t}else:{n}{t}{t}{t}{t}Hits = Hits + 1{n}{t}return ''{n}{n}
def Names_Calculation():{n}{t}return get_string(IAREQUIRED.CombNames){n}{n}
def PrintMe_Calculation():{n}{t}if get_string(IAF1040.DepNames) == 'See Attached':{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def SSN_Calculation():{n}{t}return get_string(IAF1040.SSN){n}{n}def Description_Calculation():{n}{t}Total = Currency(){n}{t}Total = get_currency(IAADDFEDTAX.TPTotal) + get_currency(IAADDFEDTAX.SPTotal){n}{t}return CStr(Total){n}{n}
def Exist_Calculation():{n}{t}return 1{n}{n}
def Names_Calculation():{n}{t}return get_string(IAREQUIRED.CombNames){n}{n}
def NetDue_Calculation():{n}{t}if get_currency(USZIA1040.IAPYNetIncB) == 0 and get_currency(USZIA1040.IAPYNetIncA) == 0:{n}{t}{t}return 0{n}{t}else:{n}{t}{t}return max_value(0, get_currency(IAADDFEDTAX.PyDue) - get_currency(IAADDFEDTAX.PYPen)){n}{n}
def PyDue_Calculation():{n}{t}if get_bool(USWSpouse.NonRes) == True:{n}{t}{t}return get_currency(USWRec.PYOweNR){n}{t}else:{n}{t}{t}return get_currency(USWRec.PYOwe){n}{n}
def PYExt_Calculation():{n}{t}if get_bool(USWSpouse.NonRes) == True:{n}{t}{t}return get_currency(USWRec.PYExtNR){n}{t}else:{n}{t}{t}return get_currency(USWRec.PYExt){n}{n}
def PYPen_Calculation():{n}{t}if get_bool(USWSpouse.NonRes) == True:{n}{t}{t}return get_currency(USWRec.PYPenaltyNR){n}{t}else:{n}{t}{t}return get_currency(USWRec.PYPenalty){n}{n}
def SPBalDue_Calculation():{n}{t}return c_dollar(get_float(IAREQUIRED.PYRatio) * get_float(IAADDFEDTAX.NetDue)){n}{n}
def SPExcFICA_Calculation():{n}{t}return get_currency(USWFICA.SCredit){n}{n}
def SPExt_Calculation():{n}{t}return c_dollar(get_float(IAREQUIRED.PYRatio) * get_float(IAADDFEDTAX.PYExt)){n}{n}
def SPName_Calculation():{n}{t}return get_string(USWBasicInfo.SPCommon){n}{n}
def SPTotal_Calculation():{n}{t}return get_currency(IAADDFEDTAX.SPBalDue) + get_currency(IAADDFEDTAX.SPExt) + get_currency(IAADDFEDTAX.SPFuel) + get_currency(IAADDFEDTAX.SPExcFICA){n}{n}
def SSN_Calculation():{n}{t}return get_string(IAF1040.SSN){n}{n}
def TPBalDue_Calculation():{n}{t}return max_value(0, get_currency(IAADDFEDTAX.NetDue) - get_currency(IAADDFEDTAX.SPBalDue)){n}{n}
def TPExcFICA_Calculation():{n}{t}return get_currency(USWFICA.TCredit){n}{n}
def TPExt_Calculation():{n}{t}return max_value(0, get_currency(IAADDFEDTAX.PYExt) - get_currency(IAADDFEDTAX.SPExt)){n}{n}
def TPFuel_Calculation():{n}{t}return max_value(0, get_currency(USF4136.TotalCredit) - get_currency(IAADDFEDTAX.SPFuel)){n}{n}
def TPName_Calculation():{n}{t}return get_string(USWBasicInfo.TPCommon){n}{n}
def TPTotal_Calculation():{n}{t}return get_currency(IAADDFEDTAX.TPBalDue) + get_currency(IAADDFEDTAX.TPExt) + get_currency(IAADDFEDTAX.TPFuel) + get_currency(IAADDFEDTAX.TPExcFICA){n}{n}def ChDepCr_Calculation():{n}{t}return c_dollar(get_float(IACHILDCREDIT.FedCredit) * get_float(IACHILDCREDIT.Percent)){n}{n}
def Credit_Calculation(Index):{n}{t}if get_currency(IACHILDCREDIT.TotNI) < Decimal("45000") and trim(get_string(IACHILDCREDIT.DepName(Index))) != '':{n}{t}{t}return c_dollar(CDbl(min_value(get_currency(IACHILDCREDIT.Expenses(Index)), Decimal("1000"))) * 0.25){n}{t}else:{n}{t}{t}return 0{n}{n}
def DepName_Calculation(Index):{n}{t}count = Integer(){n}{n}{t}Hold = String(){n}{t}count = 0{n}{t}Hold = ''{n}{t}if get_number(IAADDDEP.FDepAge(0)) > 2 and get_number(IAADDDEP.FDepAge(0)) < 7:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_string(IAADDDEP.FDepName(0)) + ' ' + get_string(IAADDDEP.FDepLast(0)){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_number(IAADDDEP.FDepAge(1)) > 2 and get_number(IAADDDEP.FDepAge(1)) < 7:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_string(IAADDDEP.FDepName(1)) + ' ' + get_string(IAADDDEP.FDepLast(1)){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_number(IAADDDEP.FDepAge(2)) > 2 and get_number(IAADDDEP.FDepAge(2)) < 7:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_string(IAADDDEP.FDepName(2)) + ' ' + get_string(IAADDDEP.FDepLast(2)){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_number(IAADDDEP.FDepAge(3)) > 2 and get_number(IAADDDEP.FDepAge(3)) < 7:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_string(IAADDDEP.FDepName(3)) + ' ' + get_string(IAADDDEP.FDepLast(3)){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_number(IAADDDEP.FDepAge(4)) > 2 and get_number(IAADDDEP.FDepAge(4)) < 7:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_string(IAADDDEP.FDepName(4)) + ' ' + get_string(IAADDDEP.FDepLast(4)){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_number(IAADDDEP.FDepAge(5)) > 2 and get_number(IAADDDEP.FDepAge(5)) < 7:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_string(IAADDDEP.FDepName(5)) + ' ' + get_string(IAADDDEP.FDepLast(5)){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_number(IAADDDEP.FDepAge(6)) > 2 and get_number(IAADDDEP.FDepAge(6)) < 7:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_string(IAADDDEP.FDepName(6)) + ' ' + get_string(IAADDDEP.FDepLast(6)){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_number(IAADDDEP.FDepAge(7)) > 2 and get_number(IAADDDEP.FDepAge(7)) < 7:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_string(IAADDDEP.FDepName(7)) + ' ' + get_string(IAADDDEP.FDepLast(7)){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_number(IAADDDEP.FDepAge(8)) > 2 and get_number(IAADDDEP.FDepAge(8)) < 7:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_string(IAADDDEP.FDepName(8)) + ' ' + get_string(IAADDDEP.FDepLast(8)){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_number(IAADDDEP.FDepAge(9)) > 2 and get_number(IAADDDEP.FDepAge(9)) < 7:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_string(IAADDDEP.FDepName(9)) + ' ' + get_string(IAADDDEP.FDepLast(9)){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_number(IAADDDEP.FDepAge(10)) > 2 and get_number(IAADDDEP.FDepAge(10)) < 7:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_string(IAADDDEP.FDepName(10)) + ' ' + get_string(IAADDDEP.FDepLast(10)){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_number(IAADDDEP.FDepAge(11)) > 2 and get_number(IAADDDEP.FDepAge(11)) < 7:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_string(IAADDDEP.FDepName(11)) + ' ' + get_string(IAADDDEP.FDepLast(11)){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_number(IAADDDEP.FDepAge(12)) > 2 and get_number(IAADDDEP.FDepAge(12)) < 7:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_string(IAADDDEP.FDepName(12)) + ' ' + get_string(IAADDDEP.FDepLast(12)){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_number(IAADDDEP.FDepAge(13)) > 2 and get_number(IAADDDEP.FDepAge(13)) < 7:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_string(IAADDDEP.FDepName(13)) + ' ' + get_string(IAADDDEP.FDepLast(13)){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_number(IAADDDEP.FDepAge(14)) > 2 and get_number(IAADDDEP.FDepAge(14)) < 7:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_string(IAADDDEP.FDepName(14)) + ' ' + get_string(IAADDDEP.FDepLast(14)){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}return Hold{n}{n}
def Description_Calculation():{n}{t}TotCR = Currency(){n}{t}if get_bool(IAF1040.ChildCareCk) == True:{n}{t}{t}TotCR = get_currency(IACHILDCREDIT.TotChDepCr){n}{t}elif get_bool(IAF1040.EarlyChildCk) == True:{n}{t}{t}TotCR = get_currency(IACHILDCREDIT.TotCR){n}{t}else:{n}{t}{t}TotCR = 0{n}{t}return CStr(TotCR){n}{n}
def FedCredit_Calculation():{n}{t}return get_currency(USF2441.TentCred){n}{n}
def MFSProRate_Calculation():{n}{t}if IAFS() == 4:{n}{t}{t}if get_currency(IAF1040.SpIncome) < 0 and get_currency(IAF1040.ANet) < 0:{n}{t}{t}{t}if get_currency(IAF1040.SpIncome) < get_currency(IAF1040.ANet):{n}{t}{t}{t}{t}return 0{n}{t}{t}{t}else:{n}{t}{t}{t}{t}return 1{n}{t}{t}elif get_currency(IAF1040.SpIncome) < 0:{n}{t}{t}{t}return 0{n}{t}{t}elif get_currency(IAF1040.SpIncome) > 0 and get_currency(IACHILDCREDIT.MFSTotNet) <= 0:{n}{t}{t}{t}return 1{n}{t}{t}elif get_currency(IACHILDCREDIT.MFSTotNet) == 0:{n}{t}{t}{t}return 0{n}{t}{t}else:{n}{t}{t}{t}return max_value(0, ( min_value(1, get_float(IAF1040.SpIncome) / get_float(IACHILDCREDIT.MFSTotNet)) )){n}{t}else:{n}{t}{t}return 0{n}{n}
def MFSTotNet_Calculation():{n}{t}if get_bool(IAF1040.MFS) == True:{n}{t}{t}return get_currency(IAF1040.ANet) + get_currency(IAOTHADJ.TIANOL) + get_currency(IAF1040.SpIncome){n}{t}else:{n}{t}{t}return 0{n}{n}
def Names_Calculation():{n}{t}return get_string(IAREQUIRED.CombNames){n}{n}
def Percent_Calculation():{n}{t}if get_currency(IACHILDCREDIT.TotNI) > Decimal("44999"):{n}{t}{t}return 0{n}{t}elif get_currency(IACHILDCREDIT.TotNI) > Decimal("39999"):{n}{t}{t}return 0.3{n}{t}elif get_currency(IACHILDCREDIT.TotNI) > Decimal("34999"):{n}{t}{t}return 0.4{n}{t}elif get_currency(IACHILDCREDIT.TotNI) > Decimal("24999"):{n}{t}{t}return 0.5{n}{t}elif get_currency(IACHILDCREDIT.TotNI) > Decimal("19999"):{n}{t}{t}return 0.55{n}{t}elif get_currency(IACHILDCREDIT.TotNI) > Decimal("9999"):{n}{t}{t}return 0.65{n}{t}else:{n}{t}{t}return 0.75{n}{n}
def PYNRChDepCr_Calculation():{n}{t}return min_value(get_currency(IACHILDCREDIT.ChDepCr), ( c_dollar(get_float(IACHILDCREDIT.ChDepCr) * get_float(IACHILDCREDIT.PYNRPercent)) )){n}{n}
def PYNRPercent_Calculation():{n}{t}if get_currency(IACHILDCREDIT.TotNI) > 0:{n}{t}{t}return min_value(1, max_value(0, CDbl(get_currency(IACHILDCREDIT.PYNRTotNI)) / CDbl(get_currency(IACHILDCREDIT.TotNI)))){n}{t}else:{n}{t}{t}return 0{n}{n}
def PYNRTotNI_Calculation():{n}{t}if get_bool(IAF126.TpPYNR) == True or get_bool(IAF126.SpPYNR):{n}{t}{t}return get_currency(IACHILDCREDIT.TPNRIncome) + get_currency(IACHILDCREDIT.SPNRIncome){n}{t}else:{n}{t}{t}return 0{n}{n}
def SChild_Calculation():{n}{t}if get_bool(IAF1040.MFS) == True:{n}{t}{t}return c_dollar(get_float(IACHILDCREDIT.TotChDepCr) * get_float(IACHILDCREDIT.MFSProRate)){n}{t}else:{n}{t}{t}return c_dollar(get_float(IACHILDCREDIT.TotChDepCr) * get_float(IAREQUIRED.BProRate)){n}{n}
def SEarly_Calculation():{n}{t}if get_bool(IAF1040.MFS) == True:{n}{t}{t}return c_dollar(get_float(IACHILDCREDIT.TotCR) * get_float(IACHILDCREDIT.MFSProRate)){n}{t}else:{n}{t}{t}return c_dollar(get_float(IACHILDCREDIT.TotCR) * get_float(IAREQUIRED.BProRate)){n}{n}
def SPNRIncome_Calculation():{n}{t}if get_bool(IAF1040.MFS) == True:{n}{t}{t}return get_currency(IAF1040.SpIncome){n}{t}elif get_bool(IAF126.SpPYNR) == True:{n}{t}{t}return get_currency(IAF126.BNet) + get_currency(IANROTHADJ.SIANOL){n}{t}else:{n}{t}{t}return get_currency(IAF1040.BNet) + get_currency(IAOTHADJ.SIANOL){n}{n}
def SSN_Calculation():{n}{t}return get_string(IAF1040.SSN){n}{n}
def TChild_Calculation():{n}{t}return get_currency(IACHILDCREDIT.TotChDepCr) - get_currency(IACHILDCREDIT.SChild){n}{n}
def TEarly_Calculation():{n}{t}return get_currency(IACHILDCREDIT.TotCR) - get_currency(IACHILDCREDIT.SEarly){n}{n}
def TotChDepCr_Calculation():{n}{t}if get_bool(IAF126.TpPYNR) == True or get_bool(IAF126.SpPYNR):{n}{t}{t}return get_currency(IACHILDCREDIT.PYNRChDepCr){n}{t}else:{n}{t}{t}return get_currency(IACHILDCREDIT.ChDepCr){n}{n}
def TotCR_Calculation():{n}{t}count = Integer(){n}{n}{t}SubTot = Currency(){n}{t}count = 0{n}{t}SubTot = 0{n}{t}while count < 15:{n}{t}{t}SubTot = SubTot + get_currency(IACHILDCREDIT.Credit(count)){n}{t}{t}count = count + 1{n}{t}return SubTot{n}{n}
def TotNI_Calculation():{n}{t}if get_bool(IAF1040.MFS) == True:{n}{t}{t}return get_currency(IACHILDCREDIT.MFSTotNet){n}{t}else:{n}{t}{t}return get_currency(IAREQUIRED.TotNI) + get_currency(IAOTHADJ.TIANOL) + get_currency(IAOTHADJ.SIANOL){n}{n}
def TPNRIncome_Calculation():{n}{t}if get_bool(IAF126.TpPYNR) == True:{n}{t}{t}return get_currency(IAF126.ANet) + get_currency(IANROTHADJ.TIANOL){n}{t}else:{n}{t}{t}return get_currency(IAF1040.ANet) + get_currency(IAOTHADJ.TIANOL){n}{n}def Acct_Calculation():{n}{t}if get_bool(IAEFWKSHT.IsStateRPT) == True and get_bool(USWRALApp.StateRTDD) == True and get_bool(IAEFWKSHT.DirDeposit) == True:{n}{t}{t}return get_string(USWRALApp.StateAccount){n}{t}elif  ( get_bool(IAEFWKSHT.DirDeposit) == True and get_currency(IAEFWKSHT.Refund) > 0 )  or  ( get_bool(IAEFWKSHT.EFW) == True and get_currency(IAEFWKSHT.AmtOwed) > 0 ) :{n}{t}{t}count = 1{n}{t}{t}MaxAcct = GetAllCopies(USWBankAcct){n}{t}{t}Acct = ''{n}{t}{t}while count <= MaxAcct:{n}{t}{t}{t}if get_string(USWBankAcct.BankAcct, count) != '':{n}{t}{t}{t}{t}if get_bool(USWBankAcct.Default, count) == True:{n}{t}{t}{t}{t}{t}return get_string(USWBankAcct.BankAcct, count){n}{t}{t}{t}{t}{t}count = 99{n}{t}{t}{t}count = count + 1{n}{t}{t}return ''{n}{t}else:{n}{t}{t}return ''{n}{n}
def ACH_Calculation():{n}{t}if get_number(IAEFWKSHT.Yes) == 1:{n}{t}{t}return 0{n}{t}elif get_bool(IAEFWKSHT.EFW) == True and get_currency(IAEFWKSHT.AmtOwed) > 0:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def Address_Calculation():{n}{t}return get_string(IAF1040.Add) + ' ' + get_string(IAF1040.CityComb){n}{n}
def AIAWH_Calculation():{n}{t}return get_currency(IAF1040.AIATaxWith){n}{n}
def AmtOwed_Calculation():{n}{t}return get_currency(IAF1040.TotDue){n}{n}
def ANet_Calculation():{n}{t}return get_currency(IAF1040.ANet){n}{n}
def AskBankInfo_Calculation():{n}{t}if get_currency(IAEFWKSHT.AmtOwed) > 0:{n}{t}{t}return 1{n}{t}elif get_bool(IAEFWKSHT.IsStateRPT) == True and get_bool(USWEFQual.FilingSO) == True:{n}{t}{t}return 0{n}{t}elif get_currency(IAEFWKSHT.Refund) > 0:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def AskDebitCard_Calculation():{n}{t}if IsPreparer() == True:{n}{t}{t}return 0{n}{t}elif get_bool(USWBankProd.HaveBankConsent) == False:{n}{t}{t}return 0{n}{t}{t}# Do not offer state debit card on linked returns using Republic Direct Deposit RT{n}{t}elif get_bool(USWBankProd.DebitCardReturn) == False and get_bool(USWBankProd.RPTReturn) == True:{n}{t}{t}return 0{n}{t}{t}# Do not offer state debit card on state only returns using Republic Direct Deposit RT{n}{t}elif get_bool(USWBankProd.IsStateRPT) == True and get_bool(USWRALApp.StateRTDD) == True:{n}{t}{t}return 0{n}{t}elif get_currency(IAEFWKSHT.Refund) < Decimal("10000"):{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def AskDriverLic_Calculation():{n}{t}if get_bool(USWEFOptions.PiggyBackIA) == True or get_bool(USWEFOptions.SOIA) == True or get_bool(USWEFOptions.SOIAX) == True:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def AskFedStateBank_Calculation():{n}{t}if get_bool(IAEFWKSHT.PrepBPTrans) == True:{n}{t}{t}return 1{n}{t}elif IsPreparer() == True and get_bool(USWBasicInfo.BankProd) == True:{n}{t}{t}return 0{n}{t}elif get_bool(USWBankProd.IsStateRPT) == True and get_bool(USWEFQual.FilingSO) == True:{n}{t}{t}return 0{n}{t}elif get_currency(IAEFWKSHT.Refund) > 0 and get_bool(USWEFWksht.refundbox) == True:{n}{t}{t}if get_bool(USWBasicInfo.DebitCard) == True and get_bool(IAEFWKSHT.AskDebitCard) == False:{n}{t}{t}{t}return 0{n}{t}{t}elif get_bool(IAEFWKSHT.DebitCard) == True and get_bool(IAEFWKSHT.AskDebitCard) == False:{n}{t}{t}{t}return 0{n}{t}{t}elif get_bool(USWBasicInfo.DebitCard) == True and get_bool(IAEFWKSHT.DebitCard) == True:{n}{t}{t}{t}return 1{n}{t}{t}elif get_bool(USWBasicInfo.DirectDepY) == True and get_bool(IAEFWKSHT.DirDeposit) == True:{n}{t}{t}{t}if get_string(USF8888.Account1) == get_string(IAEFWKSHT.Acct):{n}{t}{t}{t}{t}return 1{n}{t}{t}{t}else:{n}{t}{t}{t}{t}return 0{n}{t}{t}elif get_bool(USWBasicInfo.DirectDepN) == True and get_bool(IAEFWKSHT.NoDDEFW) == True:{n}{t}{t}{t}return 1{n}{t}{t}else:{n}{t}{t}{t}return 0{n}{t}else:{n}{t}{t}return 0{n}{n}
def AskSORTDC_Calculation():{n}{t}if get_bool(USWEFOptions.SOIA) == False:{n}{t}{t}return 0{n}{t}elif IsPreparer() == True:{n}{t}{t}return 0{n}{t}elif get_bool(USWBankProd.HaveBankConsent) == False:{n}{t}{t}return 0{n}{t}elif get_currency(IAEFWKSHT.Refund) < Decimal("10000"):{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def AskStateRT_Calculation():{n}{t}if get_bool(USWEFOptions.SOIAX) == True:{n}{t}{t}return 0{n}{t}elif get_currency(IAEFWKSHT.Refund) >= Decimal("75"):{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def ATTax_Calculation():{n}{t}if get_bool(IAREQUIRED.LowInc) == True:{n}{t}{t}return 0{n}{t}else:{n}{t}{t}return get_currency(IAF1040.ATotIATax){n}{n}
def BankName_Calculation():{n}{t}if ( get_bool(IAEFWKSHT.DirDeposit) == True and get_currency(IAEFWKSHT.Refund) > 0 )  or  ( get_bool(IAEFWKSHT.EFW) == True and get_currency(IAEFWKSHT.AmtOwed) > 0 ) :{n}{t}{t}count = 1{n}{t}{t}MaxAcct = GetAllCopies(USWBankAcct){n}{t}{t}while count <= MaxAcct:{n}{t}{t}{t}if get_string(USWBankAcct.BankAcct, count) != '':{n}{t}{t}{t}{t}if IsStrEqual(get_string(IAEFWKSHT.Acct), get_string(USWBankAcct.BankAcct, count)):{n}{t}{t}{t}{t}{t}return get_string(USWBankAcct.BankName, count){n}{t}{t}{t}{t}{t}count = 99{n}{t}{t}{t}count = count + 1{n}{t}{t}return ''{n}{t}else:{n}{t}{t}return ''{n}{n}
def BankProDisCd_Calculation():{n}{t}Submission = String(){n}{n}{t}TempStr = String(){n}{t}#Bank Product Disbursement Declaration{n}{t}#0 = Did Not Select bank product Option; 1 = Selected Debit Card Option; 2 = Selected Direct Depoist to the Bank; 3 = Requestd a Check;{n}{t}#Parameter 6 = Refund Owe Method: 0-No method; 1-AmEx debit card; 2-State issued debit card; 3-Direct deposit no Republic Bank; 4-Direct deposit through Republic Bank; 5-Paper check (refund); 6-AmEx debit card through Republic; 10-Direct debit; 11-Credit card; 12-Paper check (owe); 13-IRS EFTPS{n}{t}TempStr = get_string(IAEFWKSHT.EFSubmission){n}{t}Submission = GetParam(TempStr, 1, '|'){n}{t}if GetParam(Submission, 6, ';') == '0':{n}{t}{t}return '0'{n}{t}elif GetParam(Submission, 6, ';') == '1':{n}{t}{t}return '1'{n}{t}elif GetParam(Submission, 6, ';') == '2':{n}{t}{t}return '3'{n}{t}elif GetParam(Submission, 6, ';') == '3':{n}{t}{t}return '2'{n}{t}elif GetParam(Submission, 6, ';') == '4':{n}{t}{t}return '2'{n}{t}elif GetParam(Submission, 6, ';') == '5':{n}{t}{t}return '3'{n}{t}elif GetParam(Submission, 6, ';') == '6':{n}{t}{t}return '1'{n}{t}else:{n}{t}{t}return '0'{n}{n}
def BIAWH_Calculation():{n}{t}return get_currency(IAF1040.BIATaxWith){n}{n}
def BNet_Calculation():{n}{t}return get_currency(IAF1040.BNet){n}{n}
def BP_Calculation():{n}{t}if get_bool(IAEFWKSHT.PrepBPTrans) == True:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def BTTax_Calculation():{n}{t}if get_bool(IAREQUIRED.LowInc) == True:{n}{t}{t}return 0{n}{t}else:{n}{t}{t}return get_currency(IAF1040.BTotIATax){n}{n}
def CompStateEFQA_Calculation():{n}{t}# If not filing Iowa return, always return False{n}{t}if get_bool(USWEFOptions.PiggyBackIA) == False and get_bool(USWEFOptions.SOIA) == False and get_bool(USWEFOptions.SOIAX) == False:{n}{t}{t}return 0{n}{t}elif get_currency(IAEFWKSHT.Refund) > 0:{n}{t}{t}if get_bool(IAEFWKSHT.PrepRevQA) == False:{n}{t}{t}{t}return 1{n}{t}{t}elif IsPreparer() == True and get_bool(IAEFWKSHT.PrepBPTrans) == True:{n}{t}{t}{t}return 0{n}{t}{t}elif get_bool(USWBankProd.DebitCardReturn) == True and get_bool(IAEFWKSHT.DebitCard) == False and get_bool(IAEFWKSHT.DirDeposit) == False and get_bool(IAEFWKSHT.NoDDEFW) == False:{n}{t}{t}{t}return 1{n}{t}{t}elif get_bool(IAEFWKSHT.DirDeposit) == False and get_bool(IAEFWKSHT.NoDDEFW) == False:{n}{t}{t}{t}return 1{n}{t}{t}elif get_bool(USWBankProd.DebitCardReturn) == False and get_bool(IAEFWKSHT.DirDeposit) == False and get_bool(IAEFWKSHT.NoDDEFW) == False:{n}{t}{t}{t}return 1{n}{t}{t}elif get_bool(IAEFWKSHT.DirDeposit) == True and get_number(USFInterview.ValidBankAccts) == 0:{n}{t}{t}{t}return 1{n}{t}{t}else:{n}{t}{t}{t}return 0{n}{t}elif get_currency(IAEFWKSHT.AmtOwed) > 0:{n}{t}{t}if get_bool(IAEFWKSHT.PrepRevQA) == False:{n}{t}{t}{t}return 1{n}{t}{t}elif get_bool(IAEFWKSHT.EFW) == False and get_bool(IAEFWKSHT.NoDDEFW) == False:{n}{t}{t}{t}return 1{n}{t}{t}elif get_bool(IAEFWKSHT.EFW) == True and get_number(USFInterview.ValidBankAccts) == 0:{n}{t}{t}{t}return 1{n}{t}{t}else:{n}{t}{t}{t}return 0{n}{t}else:{n}{t}{t}return 0{n}{n}
def DANChange_Calculation():{n}{t}return get_string(IAEFWKSHT.DirDepDan) + '|'{n}{n}
def DC_Calculation():{n}{t}if get_bool(IAEFWKSHT.PrepBPTrans) == True:{n}{t}{t}return 0{n}{t}elif get_bool(IAEFWKSHT.DebitCard) == True and get_currency(IAEFWKSHT.Refund) > 0:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def DD_Calculation():{n}{t}if get_number(IAEFWKSHT.Yes) == 1:{n}{t}{t}return 0{n}{t}elif get_bool(IAEFWKSHT.PrepBPTrans) == True:{n}{t}{t}return 0{n}{t}elif get_bool(IAEFWKSHT.DirDeposit) == True and get_currency(IAEFWKSHT.Refund) > 0:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def DebitCard_Calculation():{n}{t}if get_bool(IAEFWKSHT.IsStateRPT) == True:{n}{t}{t}if get_bool(USWRALApp.StateRTDC) == True and get_bool(IAEFWKSHT.AskDebitCard) == True:{n}{t}{t}{t}return 1{n}{t}{t}else:{n}{t}{t}{t}return 0{n}{t}elif get_bool(USWBasicInfo.DebitCard) == True and get_currency(USF1040.RefundOwe) > 0 and get_bool(IAEFWKSHT.AskDebitCard) == True:{n}{t}{t}if get_currency(IAEFWKSHT.Refund) > 0:{n}{t}{t}{t}return 1{n}{t}{t}else:{n}{t}{t}{t}return 0{n}{t}else:{n}{t}{t}return 0{n}{n}
def Desc_Calculation():{n}{t}return get_string(IAREQUIRED.CombNames){n}{n}
def DirDepChecking_Calculation():{n}{t}if ( get_bool(IAEFWKSHT.DirDeposit) == True and get_currency(IAEFWKSHT.Refund) > 0 )  or  ( get_bool(IAEFWKSHT.EFW) == True and get_currency(IAEFWKSHT.AmtOwed) > 0 ) :{n}{t}{t}count = 1{n}{t}{t}MaxAcct = GetAllCopies(USWBankAcct){n}{t}{t}while count <= MaxAcct:{n}{t}{t}{t}if get_string(USWBankAcct.BankAcct, count) != '':{n}{t}{t}{t}{t}if IsStrEqual(get_string(IAEFWKSHT.Acct), get_string(USWBankAcct.BankAcct, count)):{n}{t}{t}{t}{t}{t}return get_bool(USWBankAcct.Checking, count){n}{t}{t}{t}{t}{t}count = 99{n}{t}{t}{t}count = count + 1{n}{t}{t}return 0{n}{t}else:{n}{t}{t}return 0{n}{n}
def DirDepDan_Calculation():{n}{t}if ( get_bool(IAEFWKSHT.DirDeposit) == True and get_currency(IAEFWKSHT.Refund) > 0 )  or  ( get_bool(IAEFWKSHT.EFW) == True and get_currency(IAEFWKSHT.AmtOwed) > 0 ) :{n}{t}{t}count = 1{n}{t}{t}MaxAcct = GetAllCopies(USWBankAcct){n}{t}{t}while count <= MaxAcct:{n}{t}{t}{t}if get_string(USWBankAcct.BankAcct, count) != '':{n}{t}{t}{t}{t}if IsStrEqual(get_string(IAEFWKSHT.Acct), get_string(USWBankAcct.BankAcct, count)):{n}{t}{t}{t}{t}{t}return get_string(USWBankAcct.AcctNum, count){n}{t}{t}{t}{t}{t}count = 99{n}{t}{t}{t}count = count + 1{n}{t}{t}return ''{n}{t}else:{n}{t}{t}return ''{n}{n}
def DirDeposit_Calculation():{n}{t}if get_bool(IAEFWKSHT.IsStateRPT) == True:{n}{t}{t}if get_bool(USWRALApp.StateRTDD) == True:{n}{t}{t}{t}return 1{n}{t}{t}else:{n}{t}{t}{t}return 0{n}{t}elif get_bool(USWBasicInfo.DirectDepY) == True and get_currency(USF1040.RefundOwe) > 0:{n}{t}{t}if get_currency(IAEFWKSHT.Refund) > 0:{n}{t}{t}{t}return 1{n}{t}{t}else:{n}{t}{t}{t}return 0{n}{t}else:{n}{t}{t}return 0{n}{n}
def DirDepRTN_Calculation():{n}{t}if ( get_bool(IAEFWKSHT.DirDeposit) == True and get_currency(IAEFWKSHT.Refund) > 0 )  or  ( get_bool(IAEFWKSHT.EFW) == True and get_currency(IAEFWKSHT.AmtOwed) > 0 ) :{n}{t}{t}count = 1{n}{t}{t}MaxAcct = GetAllCopies(USWBankAcct){n}{t}{t}while count <= MaxAcct:{n}{t}{t}{t}if get_string(USWBankAcct.BankAcct, count) != '':{n}{t}{t}{t}{t}if IsStrEqual(get_string(IAEFWKSHT.Acct), get_string(USWBankAcct.BankAcct, count)):{n}{t}{t}{t}{t}{t}return get_string(USWBankAcct.RTN, count){n}{t}{t}{t}{t}{t}count = 99{n}{t}{t}{t}count = count + 1{n}{t}{t}return ''{n}{t}else:{n}{t}{t}return ''{n}{n}
def DirDepSavings_Calculation():{n}{t}if ( get_bool(IAEFWKSHT.DirDeposit) == True and get_currency(IAEFWKSHT.Refund) > 0 )  or  ( get_bool(IAEFWKSHT.EFW) == True and get_currency(IAEFWKSHT.AmtOwed) > 0 ) :{n}{t}{t}count = 1{n}{t}{t}MaxAcct = GetAllCopies(USWBankAcct){n}{t}{t}while count <= MaxAcct:{n}{t}{t}{t}if get_string(USWBankAcct.BankAcct, count) != '':{n}{t}{t}{t}{t}if IsStrEqual(get_string(IAEFWKSHT.Acct), get_string(USWBankAcct.BankAcct, count)):{n}{t}{t}{t}{t}{t}return get_bool(USWBankAcct.Savings, count){n}{t}{t}{t}{t}{t}count = 99{n}{t}{t}{t}count = count + 1{n}{t}{t}return 0{n}{t}else:{n}{t}{t}return 0{n}{n}
def DirDepTrigger_Calculation():{n}{t}if get_number(IAEFWKSHT.EFDDCode) == 1:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def DirectDepY_Calculation():{n}{t}if get_bool(IAEFWKSHT.DD) == True:{n}{t}{t}if get_bool(USWBankProd.RPTReturn) == True and get_bool(IAEFWKSHT.SameFedBank) == True:{n}{t}{t}{t}return 1{n}{t}{t}elif get_bool(IAEFWKSHT.IsStateRPT) == True:{n}{t}{t}{t}return 1{n}{t}{t}else:{n}{t}{t}{t}return 0{n}{t}elif get_bool(IAEFWKSHT.DC) == True:{n}{t}{t}if get_bool(USWBankProd.RPTReturn) == True:{n}{t}{t}{t}return 1{n}{t}{t}elif get_bool(IAEFWKSHT.IsStateRPT) == True:{n}{t}{t}{t}return 1{n}{t}{t}else:{n}{t}{t}{t}return 0{n}{t}else:{n}{t}{t}return 0{n}{n}
def EFAvailable_Calculation():{n}{t}if get_bool(IA1040X.EFAmend) == True:{n}{t}{t}return 'IAX,2, Amended|'{n}{t}else:{n}{t}{t}return 'IA,0,|'{n}{n}
def EFChecking_Calculation():{n}{t}if get_bool(IAEFWKSHT.PrepBPTrans) == True:{n}{t}{t}return get_bool(USWEFWkSht2.DirDepChk){n}{t}elif get_bool(IAEFWKSHT.DebitCard) == True and get_currency(IAEFWKSHT.Refund) > 0:{n}{t}{t}return 1{n}{t}elif get_number(IAEFWKSHT.EFDDCode) != 0:{n}{t}{t}return get_bool(IAEFWKSHT.DirDepChecking){n}{t}else:{n}{t}{t}return 0{n}{n}
def EFDan_Calculation():{n}{t}if get_bool(IAEFWKSHT.PrepBPTrans) == True:{n}{t}{t}return get_string(USWEFWkSht2.DirDepDan){n}{t}elif get_bool(IAEFWKSHT.DebitCard) == True and get_currency(IAEFWKSHT.Refund) > 0:{n}{t}{t}return get_string(USWDebitCard.AcctNum){n}{t}elif get_number(IAEFWKSHT.EFDDCode) != 0:{n}{t}{t}return get_string(IAEFWKSHT.DirDepDan){n}{t}else:{n}{t}{t}return ''{n}{n}
def EFDDCode_Calculation():{n}{t}if get_bool(IAEFWKSHT.PrepBPTrans) == True:{n}{t}{t}return 1{n}{t}elif get_bool(IAEFWKSHT.DebitCard) == True and get_currency(IAEFWKSHT.Refund) > 0:{n}{t}{t}return 1{n}{t}elif get_number(IAEFWKSHT.Yes) == 1:{n}{t}{t}return 0{n}{t}elif get_bool(IAEFWKSHT.DirDeposit) == True and get_currency(IAEFWKSHT.Refund) > 0:{n}{t}{t}return 1{n}{t}elif get_bool(IAEFWKSHT.EFW) == True and get_currency(IAEFWKSHT.AmtOwed) > 0:{n}{t}{t}return 2{n}{t}else:{n}{t}{t}return 0{n}{n}
def EFDedCode_Calculation():{n}{t}if get_bool(IAREQUIRED.LowInc) == True:{n}{t}{t}return ''{n}{t}elif get_bool(IAF1040.ItemCheck) == True:{n}{t}{t}return '1'{n}{t}else:{n}{t}{t}return '3'{n}{n}
def EFEFWAmt_Calculation():{n}{t}if get_number(IAEFWKSHT.EFDDCode) == 2:{n}{t}{t}return get_currency(IAEFWKSHT.AmtOwed){n}{t}else:{n}{t}{t}return 0{n}{n}
def EFEFWDate_Calculation():{n}{t}if get_number(IAEFWKSHT.EFDDCode) == 2:{n}{t}{t}return get_string(IAEFWKSHT.EFWDate){n}{t}else:{n}{t}{t}return ''{n}{n}
def EFRtn_Calculation():{n}{t}if get_bool(IAEFWKSHT.PrepBPTrans) == True:{n}{t}{t}return get_string(USWEFWkSht2.DirDepRTN){n}{t}elif get_bool(IAEFWKSHT.DebitCard) == True and get_currency(IAEFWKSHT.Refund) > 0:{n}{t}{t}return get_string(USWDebitCard.RTN){n}{t}elif get_number(IAEFWKSHT.EFDDCode) != 0:{n}{t}{t}return get_string(IAEFWKSHT.DirDepRTN){n}{t}else:{n}{t}{t}return ''{n}{n}
def EFSavings_Calculation():{n}{t}if get_bool(IAEFWKSHT.PrepBPTrans) == True:{n}{t}{t}return get_bool(USWEFWkSht2.DirDepSav){n}{t}elif get_bool(IAEFWKSHT.DebitCard) == True and get_currency(IAEFWKSHT.Refund) > 0:{n}{t}{t}return 0{n}{t}elif get_number(IAEFWKSHT.EFDDCode) != 0:{n}{t}{t}return get_bool(IAEFWKSHT.DirDepSavings){n}{t}else:{n}{t}{t}return 0{n}{n}
def EFSpInit_Calculation():{n}{t}if get_bool(IAF1040.MFJ) == True or get_bool(IAF1040.CombMFS) == True:{n}{t}{t}return get_string(USWBasicInfo.SpInit){n}{t}else:{n}{t}{t}return ''{n}{n}
def EFSpLast_Calculation():{n}{t}if get_bool(IAF1040.MFJ) == True or get_bool(IAF1040.CombMFS) == True:{n}{t}{t}return get_string(USWBasicInfo.SPLast){n}{t}else:{n}{t}{t}return ''{n}{n}
def EFSpouseFirst_Calculation():{n}{t}if get_bool(IAF1040.MFJ) == True or get_bool(IAF1040.CombMFS) == True:{n}{t}{t}return get_string(USWBasicInfo.SpouseFirst){n}{t}else:{n}{t}{t}return ''{n}{n}
def EFSpSuffix_Calculation():{n}{t}if get_bool(IAF1040.MFJ) == True or get_bool(IAF1040.CombMFS) == True:{n}{t}{t}return get_string(USWBasicInfo.SPSuffix){n}{t}else:{n}{t}{t}return ''{n}{n}
def EFStRefund_Calculation():{n}{t}if get_bool(USWEFOptions.PiggyBackIA) == True:{n}{t}{t}if get_currency(IAEFWKSHT.Refund) > 0:{n}{t}{t}{t}return 1{n}{t}{t}else:{n}{t}{t}{t}return 0{n}{t}else:{n}{t}{t}return 0{n}{n}
def EFSubmission_Calculation():{n}{t}RefOweMethod = String(){n}{t}# General Guideline to follow (use | bar if more than 1 return can be filed){n}{t}# Parameter 1 = Module Name{n}{t}# Parameter 2 = Return Type: 0-Return; 1-Extension; 2-Amended; 3-Special1; 4-SpecialTaxpayer; 5-SpecialTaxpayerExtension; 6-SpecialSpouse; 7-SpecialSpouseExtension; 8-NewYorkLLC; 9-Special{n}{t}# Parameter 3 = EF Type: 0-Legacy; 1-Qualifies for MeF (used if state supports legacy); 2-Must Be MeF (always used if state does not support legacy){n}{t}# Parameter 4 = Fed XML Version: 0-Send no federal XML; 1-Send accepted federal; 2-Send federal XML used to complete state return{n}{t}# Parameter 5 = Special Description: description for special returns, if none space{n}{t}# Parameter 6 = Refund Owe Method: 0-No method; 1-AmEx debit card; 2-State issued debit card; 3-Direct deposit no Republic Bank; 4-Direct deposit through Republic Bank; 5-Paper check (refund); 6-AmEx debit card through Republic; 10-Direct debit; 11-Credit card; 12-Paper check (owe); 13-IRS EFTPS{n}{t}if get_bool(USWEFOptions.PiggyBackIA) == True or get_bool(USWEFOptions.SOIA) == True:{n}{t}{t}if get_currency(IAF1040.RefBalDue) == 0:{n}{t}{t}{t}RefOweMethod = '0'{n}{t}{t}elif get_bool(IAEFWKSHT.PrepBPTrans) == True:{n}{t}{t}{t}RefOweMethod = '4'{n}{t}{t}elif get_bool(IAEFWKSHT.DC) == True:{n}{t}{t}{t}if get_bool(USWBankProd.RPTReturn) == True:{n}{t}{t}{t}{t}RefOweMethod = '6'{n}{t}{t}{t}elif get_bool(IAEFWKSHT.IsStateRPT) == True:{n}{t}{t}{t}{t}RefOweMethod = '6'{n}{t}{t}{t}else:{n}{t}{t}{t}{t}RefOweMethod = '1'{n}{t}{t}elif get_bool(IAEFWKSHT.DD) == True:{n}{t}{t}{t}if get_bool(USWBankProd.RPTReturn) == True and get_bool(IAEFWKSHT.SameFedBank) == True:{n}{t}{t}{t}{t}RefOweMethod = '4'{n}{t}{t}{t}elif get_bool(IAEFWKSHT.IsStateRPT) == True:{n}{t}{t}{t}{t}RefOweMethod = '4'{n}{t}{t}{t}else:{n}{t}{t}{t}{t}RefOweMethod = '3'{n}{t}{t}elif get_currency(IAF1040.RefBalDue) > 0:{n}{t}{t}{t}RefOweMethod = '5'{n}{t}{t}elif get_string(IAEFWKSHT.EFDDCode) == '2':{n}{t}{t}{t}RefOweMethod = '10'{n}{t}{t}else:{n}{t}{t}{t}RefOweMethod = '12'{n}{t}elif get_bool(USWEFOptions.SOIAX) == True:{n}{t}{t}if get_currency(IAF1040.RefBalDue) == 0:{n}{t}{t}{t}RefOweMethod = '0'{n}{t}{t}elif get_bool(IAEFWKSHT.DD) == True:{n}{t}{t}{t}RefOweMethod = '3'{n}{t}{t}elif get_currency(IAF1040.RefBalDue) > 0:{n}{t}{t}{t}RefOweMethod = '5'{n}{t}{t}elif get_string(IAEFWKSHT.EFDDCode) == '2':{n}{t}{t}{t}RefOweMethod = '10'{n}{t}{t}else:{n}{t}{t}{t}RefOweMethod = '12'{n}{t}else:{n}{t}{t}RefOweMethod = '0'{n}{t}if get_bool(USWEFOptions.PiggyBackIA) == True or get_bool(USWEFOptions.SOIA) == True:{n}{t}{t}return 'IA;0;2;2; ;' + RefOweMethod + '|'{n}{t}elif get_bool(USWEFOptions.SOIAX) == True:{n}{t}{t}return 'IA;2;2;2;Amended;' + RefOweMethod + '|'{n}{t}else:{n}{t}{t}return ''{n}{n}
def EROAddress_Calculation():{n}{t}if IsPreparer() == True:{n}{t}{t}return get_string(USWBasicInfo.EROAddress){n}{t}else:{n}{t}{t}return ''{n}{n}
def EROCityComb_Calculation():{n}{t}if IsPreparer() == False:{n}{t}{t}return ''{n}{t}elif trim(get_string(USWBasicInfo.EROForCtry)) != '':{n}{t}{t}if trim(get_string(USWBasicInfo.EROForProvince)) != '' and trim(get_string(USWBasicInfo.EROForPC)) != '':{n}{t}{t}{t}return get_string(USWBasicInfo.EROCity) + ', ' + get_string(USWBasicInfo.EROForProvince) + ', ' + get_string(USWBasicInfo.EROForPC) + ', ' + get_string(USWBasicInfo.EROForCtry){n}{t}{t}elif trim(get_string(USWBasicInfo.EROForProvince)) != '':{n}{t}{t}{t}return get_string(USWBasicInfo.EROCity) + ', ' + get_string(USWBasicInfo.EROForProvince) + ', ' + get_string(USWBasicInfo.EROForCtry){n}{t}{t}elif trim(get_string(USWBasicInfo.EROForPC)) != '':{n}{t}{t}{t}return get_string(USWBasicInfo.EROCity) + ', ' + get_string(USWBasicInfo.EROForPC) + ', ' + get_string(USWBasicInfo.EROForCtry){n}{t}{t}else:{n}{t}{t}{t}return get_string(USWBasicInfo.EROCity) + ', ' + get_string(USWBasicInfo.EROForCtry){n}{t}elif trim(get_string(USWBasicInfo.EROCity)) != '':{n}{t}{t}return get_string(USWBasicInfo.EROCity) + ', ' + get_string(USWBasicInfo.StateAbbERO) + ' ' + get_string(USWBasicInfo.EROZip){n}{t}else:{n}{t}{t}return get_string(USWBasicInfo.StateAbbERO) + ' ' + get_string(USWBasicInfo.EROZip){n}{n}
def EROEIN_Calculation():{n}{t}if IsPreparer() == True:{n}{t}{t}return get_string(USWBasicInfo.EROEIN){n}{t}else:{n}{t}{t}return ''{n}{n}
def EROFirmName_Calculation():{n}{t}if IsPreparer() == True:{n}{t}{t}return get_string(USWBasicInfo.EROFirmName){n}{t}else:{n}{t}{t}return ''{n}{n}
def EROPhone_Calculation():{n}{t}if IsPreparer() == False:{n}{t}{t}return ''{n}{t}elif trim(get_string(USWBasicInfo.EROPhone)) != '':{n}{t}{t}return get_string(USWBasicInfo.EROPhone){n}{t}else:{n}{t}{t}return get_string(USWBasicInfo.EROForPhone){n}{n}
def EROPrep_Calculation():{n}{t}if IsPreparer() == True:{n}{t}{t}return get_bool(USWBasicInfo.PaidPrepY){n}{t}else:{n}{t}{t}return 0{n}{n}
def EROSE_Calculation():{n}{t}if IsPreparer() == True:{n}{t}{t}return get_bool(USWBasicInfo.EROSelfEmp){n}{t}else:{n}{t}{t}return 0{n}{n}
def EROSSN_Calculation():{n}{t}EROPTIN = String(){n}{t}EROPTIN = LetterStr(get_string(USWBasicInfo.EROSSN)){n}{t}if IsPreparer() == True and IsStrEqual(EROPTIN, 'P'):{n}{t}{t}return get_string(USWBasicInfo.EROSSN){n}{t}else:{n}{t}{t}return ''{n}{n}
def Exist_Calculation():{n}{t}return 1{n}{n}
def FedChecking_Calculation():{n}{t}if get_currency(USWBasicInfo.WithdrawalAmt) > 0 and GetDate(USWBasicInfo.withdrawldate) != '':{n}{t}{t}return get_bool(USWBasicInfo.ACHChecking){n}{t}else:{n}{t}{t}return get_bool(USF8888.EFChecking(0)){n}{n}
def FedDAN_Calculation():{n}{t}if get_currency(USWBasicInfo.WithdrawalAmt) > 0 and GetDate(USWBasicInfo.withdrawldate) != '':{n}{t}{t}return get_string(USWBasicInfo.ACHDAN){n}{t}else:{n}{t}{t}return get_string(USF8888.EFAcctNum(0)){n}{n}
def FedRTN_Calculation():{n}{t}if get_currency(USWBasicInfo.WithdrawalAmt) > 0 and GetDate(USWBasicInfo.withdrawldate) != '':{n}{t}{t}return get_string(USWBasicInfo.ACHRTN){n}{t}else:{n}{t}{t}return get_string(USF8888.EFRtn(0)){n}{n}
def FedSavings_Calculation():{n}{t}if get_currency(USWBasicInfo.WithdrawalAmt) > 0 and GetDate(USWBasicInfo.withdrawldate) != '':{n}{t}{t}return get_bool(USWBasicInfo.ACHSavings){n}{t}else:{n}{t}{t}return get_bool(USF8888.EFSaveAcct(0)){n}{n}
def FedTrans_Calculation():{n}{t}#If (get_bool(IAEFWKSHT.DirDeposit) = True And get_currency(IAEFWKSHT.Refund) > 0) Or (get_bool(IAEFWKSHT.EFW) = True And get_currency(IAEFWKSHT.AmtOwed) > 0) Then{n}{t}#{t}If get_bool(IAEFWKSHT.TransInfo) = True Then{n}{t}#{t}{t}return 1{n}{t}#{t}Else{n}{t}#{t}{t}return 0{n}{t}#{t}End If{n}{t}#Else{n}{t}return 0{n}{t}#End If{n}{n}
def FinTransTrigger_Calculation():{n}{t}if get_number(IAEFWKSHT.EFDDCode) != 0:{n}{t}{t}return 1{n}{t}elif get_number(IAESTIMATES.EstEFW, 1) > 0 or get_number(IAESTIMATES.EstEFW, 2) > 0:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def ForCity_Calculation():{n}{t}return get_string(USWBasicInfo.ForCity){n}{n}
def ForCountry_Calculation():{n}{t}return get_string(USWBasicInfo.ForCountry){n}{n}
def ForStreet_Calculation():{n}{t}return get_string(USWBasicInfo.ForStreet){n}{n}
def IsStateRPT_Calculation():{n}{t}if get_bool(IAEFWKSHT.AskStateRT) == False:{n}{t}{t}return 0{n}{t}elif get_bool(USWBankProd.ClearedInvoiceFees) == True:{n}{t}{t}return 0{n}{t}elif get_bool(USWRALApp.StateRTDC) == True and get_bool(IAEFWKSHT.AskSORTDC) == False:{n}{t}{t}return 0{n}{t}elif get_bool(USWBankProd.StateRPT) == True and get_bool(USWBankProd.StateBankAgree) == True and get_bool(USWBankProd.StateBankAgree2) == True and get_currency(IAEFWKSHT.Refund) > 0:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def MeFPrepInfo_Calculation():{n}{t}if IsPreparer() == True:{n}{t}{t}if get_bool(USWBasicInfo.NoPrep) == False:{n}{t}{t}{t}return 1{n}{t}{t}else:{n}{t}{t}{t}return 0{n}{t}else:{n}{t}{t}return 0{n}{n}
def MeFSP137_Calculation():{n}{t}if get_number(IA137.MEF137SP, FieldCopies(IA137.Spouse)) > 0:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def MeFTP137_Calculation():{n}{t}if get_number(IA137.MEF137TP, FieldCopies(IA137.Taxpayer)) > 0:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def Need8453_Calculation():{n}{t}return 1{n}{n}
def No_Calculation():{n}{t}if ( get_bool(IAEFWKSHT.DirDeposit) == True and get_currency(IAEFWKSHT.Refund) > 0 )  or  ( get_bool(IAEFWKSHT.EFW) == True and get_currency(IAEFWKSHT.AmtOwed) > 0 ) :{n}{t}{t}if get_bool(IAEFWKSHT.Yes) == True:{n}{t}{t}{t}return 0{n}{t}{t}else:{n}{t}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def NoBankSel_Calculation():{n}{t}if get_bool(IAEFWKSHT.DirDeposit) == True or get_bool(IAEFWKSHT.EFW):{n}{t}{t}if trim(get_string(IAEFWKSHT.Acct)) == '':{n}{t}{t}{t}return 1{n}{t}{t}else:{n}{t}{t}{t}return 0{n}{t}else:{n}{t}{t}return 0{n}{n}
def NoBankSelInt_Calculation():{n}{t}if ( get_bool(IAEFWKSHT.DirDeposit) == True )  or  ( get_bool(IAEFWKSHT.EFW) == True ) :{n}{t}{t}if get_bool(USTopicList.HaveBankWSSend) == False:{n}{t}{t}{t}return 0{n}{t}{t}elif trim(get_string(IAEFWKSHT.Acct)) == '':{n}{t}{t}{t}return 1{n}{t}{t}else:{n}{t}{t}{t}return 0{n}{t}else:{n}{t}{t}return 0{n}{n}
def NoDDEFW_Calculation():{n}{t}if get_bool(IAEFWKSHT.IsStateRPT) == True:{n}{t}{t}return 0{n}{t}elif get_bool(USWBasicInfo.DirectDepN) == True and get_currency(USF1040.RefundOwe) > 0:{n}{t}{t}if get_currency(IAEFWKSHT.Refund) > 0:{n}{t}{t}{t}return 1{n}{t}{t}else:{n}{t}{t}{t}return 0{n}{t}else:{n}{t}{t}return 0{n}{n}
def NonForCity_Calculation():{n}{t}return get_string(USWBasicInfo.NonForCity){n}{n}
def NonForState_Calculation():{n}{t}return get_string(USWBasicInfo.NonForState){n}{n}
def NonForStreet_Calculation():{n}{t}return get_string(USWBasicInfo.NonForStreet){n}{n}
def NonForZip_Calculation():{n}{t}return get_string(USWBasicInfo.NonForZip){n}{n}
def PC_Calculation():{n}{t}if get_currency(IAEFWKSHT.Refund) == 0:{n}{t}{t}return 0{n}{t}elif get_bool(IAEFWKSHT.DD) == False and get_bool(IAEFWKSHT.BP) == False and get_bool(IAEFWKSHT.DC) == False:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def PrBankName_Calculation():{n}{t}if get_number(IAEFWKSHT.EFDDCode) != 0 and get_bool(IAEFWKSHT.DebitCard) == False and get_bool(IAEFWKSHT.PrepBPTrans) == False:{n}{t}{t}return get_string(IAEFWKSHT.BankName){n}{t}else:{n}{t}{t}return ''{n}{n}
def PrChecking_Calculation():{n}{t}if get_number(IAEFWKSHT.EFDDCode) != 0 and get_bool(IAEFWKSHT.DebitCard) == False and get_bool(IAEFWKSHT.PrepBPTrans) == False:{n}{t}{t}return get_bool(IAEFWKSHT.DirDepChecking){n}{t}else:{n}{t}{t}return 0{n}{n}
def PrDAN_Calculation():{n}{t}if get_number(IAEFWKSHT.EFDDCode) != 0 and get_bool(IAEFWKSHT.DebitCard) == False and get_bool(IAEFWKSHT.PrepBPTrans) == False:{n}{t}{t}return get_string(IAEFWKSHT.DirDepDan){n}{t}else:{n}{t}{t}return ''{n}{n}
def PrepAddress_Calculation():{n}{t}if IsPreparer() == True:{n}{t}{t}if get_bool(IAEFWKSHT.EROPrep) == False:{n}{t}{t}{t}return get_string(USWBasicInfo.PrepAdd){n}{t}{t}else:{n}{t}{t}{t}return ''{n}{t}else:{n}{t}{t}return ''{n}{n}
def PrepBPTrans_Calculation():{n}{t}if get_bool(USWRALApp.RepRouteState) == False:{n}{t}{t}return 0{n}{t}elif IsPreparer() == False:{n}{t}{t}return 0{n}{t}elif get_bool(USWBasicInfo.BankProd) == True and get_currency(USF1040.RefundOwe) > 0:{n}{t}{t}if get_bool(USWBankProd.Republic) == True and get_bool(IAEFWKSHT.EFStRefund) == True:{n}{t}{t}{t}return 1{n}{t}{t}else:{n}{t}{t}{t}return 0{n}{t}else:{n}{t}{t}return 0{n}{n}
def PrepCityComb_Calculation():{n}{t}if IsPreparer() == True:{n}{t}{t}if get_bool(IAEFWKSHT.EROPrep) == False:{n}{t}{t}{t}return get_string(USWBasicInfo.CombPrepCityStZipFor){n}{t}{t}else:{n}{t}{t}{t}return ''{n}{t}else:{n}{t}{t}return ''{n}{n}
def PrepEIN_Calculation():{n}{t}if IsPreparer() == True:{n}{t}{t}if get_bool(IAEFWKSHT.EROPrep) == False:{n}{t}{t}{t}return get_string(USWBasicInfo.PrepEIN){n}{t}{t}else:{n}{t}{t}{t}return ''{n}{t}else:{n}{t}{t}return ''{n}{n}
def PrepFirmName_Calculation():{n}{t}if IsPreparer() == True:{n}{t}{t}if get_bool(IAEFWKSHT.EROPrep) == False:{n}{t}{t}{t}return get_string(USWBasicInfo.PrepName){n}{t}{t}else:{n}{t}{t}{t}return ''{n}{t}else:{n}{t}{t}return ''{n}{n}
def PrepPhone_Calculation():{n}{t}if IsPreparer() == True:{n}{t}{t}if get_bool(IAEFWKSHT.EROPrep) == False:{n}{t}{t}{t}return get_string(IAF1040.PrepPhone){n}{t}{t}else:{n}{t}{t}{t}return ''{n}{t}else:{n}{t}{t}return ''{n}{n}
def PrepSE_Calculation():{n}{t}if IsPreparer() == True:{n}{t}{t}if get_bool(IAEFWKSHT.EROPrep) == False:{n}{t}{t}{t}return get_bool(USWBasicInfo.SelfEm){n}{t}{t}else:{n}{t}{t}{t}return 0{n}{t}else:{n}{t}{t}return 0{n}{n}
def PrepSSN_Calculation():{n}{t}if IsPreparer() == True:{n}{t}{t}if get_bool(IAEFWKSHT.EROPrep) == False:{n}{t}{t}{t}return get_string(USWBasicInfo.PrepSSN){n}{t}{t}else:{n}{t}{t}{t}return ''{n}{t}else:{n}{t}{t}return ''{n}{n}
def PrERODate_Calculation():{n}{t}if get_bool(IAEFWKSHT.EROPrep) == True:{n}{t}{t}return get_string(USWBasicInfo.PrPrepDate){n}{t}else:{n}{t}{t}return ''{n}{n}
def PrEROSig_Calculation():{n}{t}if get_bool(IAEFWKSHT.EROPrep) == True:{n}{t}{t}return get_string(USWBasicInfo.PrPrepSig){n}{t}else:{n}{t}{t}return ''{n}{n}
def PrintReturn_Calculation():{n}{t}PrintList_Clear(PrintList_EF){n}{t}if trim(get_string(IAEFWKSHT.EFSubmission)) != '':{n}{t}{t}if get_bool(IA1040X.EFAmend) == True:{n}{t}{t}{t}PrintList_AddHTML(PrintList_EF, EFReturnType_AmendedReturn, 'E-filing Instructions', 'ia instructions/IAWEFFilingInst.htm'){n}{t}{t}{t}if get_bool(IAEFWKSHT.Need8453) == True:{n}{t}{t}{t}{t}PrintList_AddCustom(PrintList_EF, EFReturnType_AmendedReturn, 'Form 8453', 'PrintEFileForms'){n}{t}{t}{t}PrintList_AddReturn(PrintList_EF, EFReturnType_AmendedReturn, 'Amended Return'){n}{t}{t}else:{n}{t}{t}{t}PrintList_AddHTML(PrintList_EF, EFReturnType_Return, 'E-filing Instructions', 'ia instructions/IAWEFFilingInst.htm'){n}{t}{t}{t}if get_bool(IAEFWKSHT.Need8453) == True:{n}{t}{t}{t}{t}PrintList_AddCustom(PrintList_EF, EFReturnType_Return, 'Form 8453', 'PrintEFileForms'){n}{t}{t}{t}PrintList_AddReturn(PrintList_EF, EFReturnType_Return, 'Return'){n}{t}return ''{n}{n}
def PrPrepDate_Calculation():{n}{t}if IsPreparer() == True:{n}{t}{t}if get_bool(IAEFWKSHT.EROPrep) == False:{n}{t}{t}{t}return get_string(USWBasicInfo.PrPrepDate){n}{t}{t}else:{n}{t}{t}{t}return ''{n}{t}else:{n}{t}{t}return ''{n}{n}
def PrPrepSig_Calculation():{n}{t}if IsPreparer() == True:{n}{t}{t}if get_bool(IAEFWKSHT.EROPrep) == False:{n}{t}{t}{t}return get_string(USWBasicInfo.PrPrepSig){n}{t}{t}else:{n}{t}{t}{t}return ''{n}{t}else:{n}{t}{t}return ''{n}{n}
def PrRtn_Calculation():{n}{t}if get_number(IAEFWKSHT.EFDDCode) != 0 and get_bool(IAEFWKSHT.DebitCard) == False and get_bool(IAEFWKSHT.PrepBPTrans) == False:{n}{t}{t}return get_string(IAEFWKSHT.DirDepRTN){n}{t}else:{n}{t}{t}return ''{n}{n}
def PrSavings_Calculation():{n}{t}if get_number(IAEFWKSHT.EFDDCode) != 0 and get_bool(IAEFWKSHT.DebitCard) == False and get_bool(IAEFWKSHT.PrepBPTrans) == False:{n}{t}{t}return get_bool(IAEFWKSHT.DirDepSavings){n}{t}else:{n}{t}{t}return 0{n}{n}
def QnAFedBank_Calculation():{n}{t}#If get_bool(IAEFWKSHT.AskFedStateBank) = True Then{n}{t}#{t}return 0{n}{t}#ElseIf (get_bool(IAEFWKSHT.DirDeposit) = True And get_currency(IAEFWKSHT.Refund) > 0) Or (get_bool(IAEFWKSHT.EFW) = True And get_currency(IAEFWKSHT.AmtOwed) > 0) Then{n}{t}#{t}If get_bool(IAEFWKSHT.TransInfo) = True Then{n}{t}#{t}{t}return 1{n}{t}#{t}ElseIf trim(get_string(IAEFWKSHT.FedRTN)) <> "" And trim(get_string(IAEFWKSHT.FedDAN)) <> "" Then{n}{t}#{t}{t}return 1{n}{t}#{t}Else{n}{t}#{t}{t}return 0{n}{t}#{t}End If{n}{t}#Else{n}{t}return 0{n}{t}#End If{n}{n}
def RefProdCIPInd_Calculation():{n}{t}Submission = String(){n}{n}{t}TempStr = String(){n}{t}TempStr = get_string(IAEFWKSHT.EFSubmission){n}{t}Submission = GetParam(TempStr, 1, '|'){n}{t}if GetParam(Submission, 6, ';') == '0':{n}{t}{t}return '0'{n}{t}elif GetParam(Submission, 6, ';') == '1':{n}{t}{t}if trim(get_string(USWDebitCard.IDNumber)) != '':{n}{t}{t}{t}return '1'{n}{t}{t}else:{n}{t}{t}{t}return '2'{n}{t}elif GetParam(Submission, 6, ';') == '3':{n}{t}{t}return '0'{n}{t}elif GetParam(Submission, 6, ';') == '4':{n}{t}{t}return '1'{n}{t}elif GetParam(Submission, 6, ';') == '5':{n}{t}{t}return '0'{n}{t}elif GetParam(Submission, 6, ';') == '6':{n}{t}{t}return '1'{n}{t}else:{n}{t}{t}return '0'{n}{n}
def RefProdInd_Calculation():{n}{t}Submission = String(){n}{n}{t}TempStr = String(){n}{t}TempStr = get_string(IAEFWKSHT.EFSubmission){n}{t}Submission = GetParam(TempStr, 1, '|'){n}{t}if GetParam(Submission, 6, ';') == '0':{n}{t}{t}return '0'{n}{t}elif GetParam(Submission, 6, ';') == '1':{n}{t}{t}return '2'{n}{t}elif GetParam(Submission, 6, ';') == '2':{n}{t}{t}return '0'{n}{t}elif GetParam(Submission, 6, ';') == '3':{n}{t}{t}return '0'{n}{t}elif GetParam(Submission, 6, ';') == '4':{n}{t}{t}return '2'{n}{t}elif GetParam(Submission, 6, ';') == '5':{n}{t}{t}return '0'{n}{t}elif GetParam(Submission, 6, ';') == '6':{n}{t}{t}return '2'{n}{t}else:{n}{t}{t}return '0'{n}{n}
def Refund_Calculation():{n}{t}return get_currency(IAF1040.Refund){n}{n}
def RefundDelay_Calculation():{n}{t}#this was set to 1 in 2017 will need to verify again for 2018 before shipping{n}{t}return 0{n}{n}
def RTNChange_Calculation():{n}{t}return get_string(IAEFWKSHT.DirDepRTN) + '|'{n}{n}
def SameFedBank_Calculation():{n}{t}SameRTN = Integer(){n}{n}{t}SameDAN = Integer(){n}{n}{t}SameType = Integer(){n}{t}if get_string(IAEFWKSHT.FedRTN) == get_string(IAEFWKSHT.DirDepRTN):{n}{t}{t}SameRTN = 1{n}{t}else:{n}{t}{t}SameRTN = 0{n}{t}if get_string(IAEFWKSHT.FedDAN) == get_string(IAEFWKSHT.DirDepDan):{n}{t}{t}SameDAN = 1{n}{t}else:{n}{t}{t}SameDAN = 0{n}{t}if get_bool(IAEFWKSHT.FedChecking) == True and get_bool(IAEFWKSHT.DirDepChecking) == True:{n}{t}{t}SameType = 1{n}{t}elif get_bool(IAEFWKSHT.FedSavings) == True and get_bool(IAEFWKSHT.DirDepSavings) == True:{n}{t}{t}SameType = 1{n}{t}else:{n}{t}{t}SameType = 0{n}{t}if get_bool(USWBasicInfo.DirectDepY) == True and get_currency(USF1040.RefundOwe) > 0:{n}{t}{t}if SameRTN + SameDAN + SameType == 3:{n}{t}{t}{t}return 1{n}{t}{t}else:{n}{t}{t}{t}return 0{n}{t}else:{n}{t}{t}return 0{n}{n}
def SPCombName_Calculation():{n}{t}return get_string(IAREQUIRED.SPCombName){n}{n}
def SpSSN_Calculation():{n}{t}return get_string(IAF1040.SpouseSSN){n}{n}
def SSN_Calculation():{n}{t}return get_string(IAF1040.SSN){n}{n}
def StateDCReturn_Calculation():{n}{t}if get_bool(USWEFOptions.PiggyBackIA) == True or get_bool(USWEFOptions.SOIA) == True or get_bool(USWEFOptions.SOIAX) == True:{n}{t}{t}if get_bool(IAEFWKSHT.DebitCard) == True and get_currency(IAEFWKSHT.Refund) > 0 and get_bool(IAEFWKSHT.AskDebitCard) == True:{n}{t}{t}{t}return 1{n}{t}{t}else:{n}{t}{t}{t}return 0{n}{t}else:{n}{t}{t}return 0{n}{n}
def TPCombName_Calculation():{n}{t}return get_string(IAREQUIRED.TPCombName){n}{n}
def UBATrig_Calculation():{n}{t}if get_string(IAEFWKSHT.BankProDisCd) == '1':{n}{t}{t}return 1{n}{t}elif get_string(IAEFWKSHT.BankProDisCd) == '2':{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def UltDAN_Calculation():{n}{t}if get_bool(IAEFWKSHT.PrepBPTrans) == True:{n}{t}{t}return get_string(USWRALApp.PrepBPDAN){n}{t}else:{n}{t}{t}return get_string(IAEFWKSHT.EFDan){n}{n}
def UltRTN_Calculation():{n}{t}if get_bool(IAEFWKSHT.PrepBPTrans) == True:{n}{t}{t}return get_string(USWRALApp.PrepBPRTN){n}{t}else:{n}{t}{t}return get_string(IAEFWKSHT.EFRtn){n}{n}
def ViewBankInfo_Calculation():{n}{t}RefOweText = String(){n}{n}{t}DispMethText = String(){n}{n}{t}Routing = String(){n}{n}{t}AcctNum = String(){n}{n}{t}BankType = String(){n}{n}{t}EffDate = String(){n}{t}RefOweText = ''{n}{t}DispMethText = ''{n}{t}Routing = ''{n}{t}AcctNum = ''{n}{t}BankType = ''{n}{t}EffDate = ''{n}{t}if get_currency(IAEFWKSHT.Refund) > 0:{n}{t}{t}if get_bool(IA1040X.EFAmend) == True:{n}{t}{t}{t}RefOweText = 'Iowa Amended Refund'{n}{t}{t}else:{n}{t}{t}{t}RefOweText = 'Iowa Refund'{n}{t}{t}if get_bool(IAEFWKSHT.BP) == True:{n}{t}{t}{t}DispMethText = 'Republic Bank Product'{n}{t}{t}elif get_bool(IAEFWKSHT.DD) == True:{n}{t}{t}{t}DispMethText = 'Direct Deposit'{n}{t}{t}{t}Routing = 'RTN: ' + get_string(IAEFWKSHT.EFRtn){n}{t}{t}{t}AcctNum = 'Acct #: ' + get_string(IAEFWKSHT.EFDan){n}{t}{t}{t}if get_bool(IAEFWKSHT.EFChecking) == True:{n}{t}{t}{t}{t}BankType = 'Type: Checking'{n}{t}{t}{t}else:{n}{t}{t}{t}{t}BankType = 'Type: Savings'{n}{t}{t}elif get_bool(IAEFWKSHT.DC) == True:{n}{t}{t}{t}DispMethText = 'American Express Serve Card'{n}{t}{t}else:{n}{t}{t}{t}DispMethText = 'Paper Check'{n}{t}{t}return RefOweText + '/Refund Method: ' + DispMethText + '/' + Routing + '/' + AcctNum + '/' + BankType{n}{t}elif get_currency(IAEFWKSHT.AmtOwed) > 0:{n}{t}{t}if get_bool(IA1040X.EFAmend) == True:{n}{t}{t}{t}RefOweText = 'Iowa Amended Balance Due'{n}{t}{t}else:{n}{t}{t}{t}RefOweText = 'Iowa Balance Due'{n}{t}{t}if get_bool(IAEFWKSHT.ACH) == True:{n}{t}{t}{t}DispMethText = 'Direct Withdrawal'{n}{t}{t}{t}Routing = 'RTN: ' + get_string(IAEFWKSHT.EFRtn){n}{t}{t}{t}AcctNum = 'Acct #: ' + get_string(IAEFWKSHT.EFDan){n}{t}{t}{t}if get_bool(IAEFWKSHT.EFChecking) == True:{n}{t}{t}{t}{t}BankType = 'Type: Checking'{n}{t}{t}{t}else:{n}{t}{t}{t}{t}BankType = 'Type: Savings'{n}{t}{t}{t}EffDate = 'Withdrawal Date: ' + GetVerboseDate(GetDate(IAEFWKSHT.EFEFWDate)){n}{t}{t}else:{n}{t}{t}{t}DispMethText = 'Paper Check'{n}{t}{t}return RefOweText + '/Payment Method: ' + DispMethText + '/' + Routing + '/' + AcctNum + '/' + BankType + '/' + EffDate{n}{t}else:{n}{t}{t}if get_bool(IA1040X.EFAmend) == True:{n}{t}{t}{t}return 'Iowa:  No Refund or Balance Due on Amended Return'{n}{t}{t}else:{n}{t}{t}{t}return 'Iowa:  No Refund or Balance Due'{n}{n}
def Yes_Calculation():{n}{t}if ( get_bool(IAEFWKSHT.DirDeposit) == True and get_currency(IAEFWKSHT.Refund) > 0 )  or  ( get_bool(IAEFWKSHT.EFW) == True and get_currency(IAEFWKSHT.AmtOwed) > 0 ) :{n}{t}{t}count = 1{n}{t}{t}MaxAcct = GetAllCopies(USWBankAcct){n}{t}{t}while count <= MaxAcct:{n}{t}{t}{t}if get_string(USWBankAcct.BankAcct, count) != '':{n}{t}{t}{t}{t}if IsStrEqual(get_string(IAEFWKSHT.Acct), get_string(USWBankAcct.BankAcct, count)):{n}{t}{t}{t}{t}{t}return get_bool(USWBankAcct.IAT, count){n}{t}{t}{t}{t}{t}count = 99{n}{t}{t}{t}count = count + 1{n}{t}{t}return 0{n}{t}else:{n}{t}{t}return 0{n}{n}def AdjBal_Calculation():{n}{t}return get_currency(IAESTIMATES.Balance) + get_currency(IAESTIMATES.OthTax){n}{n}
def AskSp_Calculation():{n}{t}if get_bool(IAF1040.CombMFS) == True or get_bool(IAF1040.MFJ) == True:{n}{t}{t}if get_currency(IAESTIMATES.Overpayment) > 0 and get_bool(IAESTIMATES.Taxpayer) == True:{n}{t}{t}{t}return 1{n}{t}{t}else:{n}{t}{t}{t}return 0{n}{t}else:{n}{t}{t}return 0{n}{n}
def AskStillPay_Calculation():{n}{t}if get_bool(IAESTIMATES.StillPay) == True:{n}{t}{t}return 1{n}{t}elif get_bool(IAESTIMATES.Print) == False:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def Balance_Calculation():{n}{t}return max_value(0, get_currency(IAESTIMATES.IATax) - get_currency(IAESTIMATES.NonrefCr)){n}{n}
def Common_Calculation():{n}{t}return get_string(USWBasicInfo.TPCommon){n}{n}
def DDAcct_Calculation():{n}{t}if get_bool(IAESTIMATES.DirectDebEst) == True and  ( get_currency(IAESTIMATES.Est1Amt) == 0 and get_currency(IAESTIMATES.Est2Amt) == 0 and get_currency(IAESTIMATES.Est3Amt) == 0 and get_currency(IAESTIMATES.Est4Amt) == 0 ) :{n}{t}{t}return ''{n}{t}elif  ( get_bool(IAESTIMATES.DirectDebEst) == True and  ( get_currency(IAESTIMATES.Est1Amt) > 0 or get_currency(IAESTIMATES.Est2Amt) > 0 or get_currency(IAESTIMATES.Est3Amt) > 0 or get_currency(IAESTIMATES.Est4Amt) > 0 ) ) :{n}{t}{t}count = 1{n}{t}{t}MaxAcct = GetAllCopies(USWBankAcct){n}{t}{t}Acct = ''{n}{t}{t}while count <= MaxAcct:{n}{t}{t}{t}if get_string(USWBankAcct.BankAcct, count) != '':{n}{t}{t}{t}{t}if get_bool(USWBankAcct.Default, count) == True:{n}{t}{t}{t}{t}{t}return get_string(USWBankAcct.BankAcct, count){n}{t}{t}{t}{t}{t}count = 99{n}{t}{t}{t}count = count + 1{n}{t}{t}return ''{n}{t}else:{n}{t}{t}return ''{n}{n}
def Description_Calculation():{n}{t}if get_bool(IAESTIMATES.Taxpayer) == True:{n}{t}{t}return get_string(IAESTIMATES.Common){n}{t}elif get_bool(IAESTIMATES.Spouse) == True:{n}{t}{t}return get_string(IAESTIMATES.SpouseCommon){n}{t}else:{n}{t}{t}return get_string(IAESTIMATES.JtCommon){n}{n}
def Est1Amt_Calculation():{n}{t}if get_bool(IAESTIMATES.Est1) == True:{n}{t}{t}return get_currency(IAESTIMATES.V1PayAmt1){n}{t}else:{n}{t}{t}return 0{n}{n}
def Est1Date_Calculation():{n}{t}if get_bool(IAESTIMATES.Est1) == True:{n}{t}{t}return MakeDate(4, 30, YearNumber + 1){n}{t}else:{n}{t}{t}return ''{n}{n}
def Est2Amt_Calculation():{n}{t}if get_bool(IAESTIMATES.Est2) == True:{n}{t}{t}return get_currency(IAESTIMATES.V2PayAmt1){n}{t}else:{n}{t}{t}return 0{n}{n}
def Est2Date_Calculation():{n}{t}if get_bool(IAESTIMATES.Est2) == True:{n}{t}{t}return MakeDate(7, 1, YearNumber + 1){n}{t}else:{n}{t}{t}return ''{n}{n}
def Est3Amt_Calculation():{n}{t}if get_bool(IAESTIMATES.Est3) == True:{n}{t}{t}return get_currency(IAESTIMATES.V3PayAmt1){n}{t}else:{n}{t}{t}return 0{n}{n}
def Est3Date_Calculation():{n}{t}if get_bool(IAESTIMATES.Est3) == True:{n}{t}{t}return MakeDate(9, 30, YearNumber + 1){n}{t}else:{n}{t}{t}return ''{n}{n}
def Est4Amt_Calculation():{n}{t}if get_bool(IAESTIMATES.Est4) == True:{n}{t}{t}return get_currency(IAESTIMATES.V4PayAmt1){n}{t}else:{n}{t}{t}return 0{n}{n}
def Est4Date_Calculation():{n}{t}if get_bool(IAESTIMATES.Est4) == True:{n}{t}{t}return MakeDate(1, 31, YearNumber + 2){n}{t}else:{n}{t}{t}return ''{n}{n}
def EstAcctNum_Calculation():{n}{t}if get_bool(IAESTIMATES.DirectDebEst) == True and  ( get_currency(IAESTIMATES.Est1Amt) == 0 and get_currency(IAESTIMATES.Est2Amt) == 0 and get_currency(IAESTIMATES.Est3Amt) == 0 and get_currency(IAESTIMATES.Est4Amt) == 0 ) :{n}{t}{t}return ''{n}{t}elif  ( get_bool(IAESTIMATES.DirectDebEst) == True and  ( get_currency(IAESTIMATES.Est1Amt) > 0 or get_currency(IAESTIMATES.Est2Amt) > 0 or get_currency(IAESTIMATES.Est3Amt) > 0 or get_currency(IAESTIMATES.Est4Amt) > 0 ) ) :{n}{t}{t}count = 1{n}{t}{t}MaxAcct = GetAllCopies(USWBankAcct){n}{t}{t}while count <= MaxAcct:{n}{t}{t}{t}if get_string(USWBankAcct.BankAcct, count) != '':{n}{t}{t}{t}{t}if IsStrEqual(get_string(IAESTIMATES.DDAcct), get_string(USWBankAcct.BankAcct, count)):{n}{t}{t}{t}{t}{t}return get_string(USWBankAcct.AcctNum, count){n}{t}{t}{t}{t}{t}count = 99{n}{t}{t}{t}count = count + 1{n}{t}{t}return ''{n}{t}else:{n}{t}{t}return ''{n}{n}
def EstAcctNum2_Calculation(Index):{n}{t}return get_string(IAESTIMATES.EstAcctNum){n}{n}
def EstChecking_Calculation():{n}{t}if get_bool(IAESTIMATES.DirectDebEst) == True and  ( get_currency(IAESTIMATES.Est1Amt) == 0 and get_currency(IAESTIMATES.Est2Amt) == 0 and get_currency(IAESTIMATES.Est3Amt) == 0 and get_currency(IAESTIMATES.Est4Amt) == 0 ) :{n}{t}{t}return 0{n}{t}elif  ( get_bool(IAESTIMATES.DirectDebEst) == True and  ( get_currency(IAESTIMATES.Est1Amt) > 0 or get_currency(IAESTIMATES.Est2Amt) > 0 or get_currency(IAESTIMATES.Est3Amt) > 0 or get_currency(IAESTIMATES.Est4Amt) > 0 ) ) :{n}{t}{t}count = 1{n}{t}{t}MaxAcct = GetAllCopies(USWBankAcct){n}{t}{t}while count <= MaxAcct:{n}{t}{t}{t}if get_string(USWBankAcct.BankAcct, count) != '':{n}{t}{t}{t}{t}if IsStrEqual(get_string(IAESTIMATES.DDAcct), get_string(USWBankAcct.BankAcct, count)):{n}{t}{t}{t}{t}{t}return get_bool(USWBankAcct.Checking, count){n}{t}{t}{t}{t}{t}count = 99{n}{t}{t}{t}count = count + 1{n}{t}{t}return 0{n}{t}else:{n}{t}{t}return 0{n}{n}
def EstChecking2_Calculation(Index):{n}{t}return get_bool(IAESTIMATES.EstChecking){n}{n}
def EstDed_Calculation():{n}{t}# updated for 2018{n}{t}if get_bool(IAESTIMATES.Joint) == True:{n}{t}{t}return Decimal("5120"){n}{t}else:{n}{t}{t}return Decimal("2080"){n}{n}
def EstEFW_Calculation():{n}{t}if get_bool(IAESTIMATES.EstIAT) == True:{n}{t}{t}return 0{n}{t}elif get_bool(IAESTIMATES.DirectDebEst) == True:{n}{t}{t}if get_bool(IAESTIMATES.EstPay1) == True or get_bool(IAESTIMATES.EstPay2) == True or get_bool(IAESTIMATES.EstPay3) == True or get_bool(IAESTIMATES.EstPay4) == True:{n}{t}{t}{t}return 1{n}{t}{t}else:{n}{t}{t}{t}return 0{n}{t}else:{n}{t}{t}return 0{n}{n}
def EstIAT_Calculation():{n}{t}if get_bool(IAESTIMATES.DirectDebEst) == True and  ( get_currency(IAESTIMATES.Est1Amt) == 0 and get_currency(IAESTIMATES.Est2Amt) == 0 and get_currency(IAESTIMATES.Est3Amt) == 0 and get_currency(IAESTIMATES.Est4Amt) == 0 ) :{n}{t}{t}return 0{n}{t}elif  ( get_bool(IAESTIMATES.DirectDebEst) == True and  ( get_currency(IAESTIMATES.Est1Amt) > 0 or get_currency(IAESTIMATES.Est2Amt) > 0 or get_currency(IAESTIMATES.Est3Amt) > 0 or get_currency(IAESTIMATES.Est4Amt) > 0 ) ) :{n}{t}{t}count = 1{n}{t}{t}MaxAcct = GetAllCopies(USWBankAcct){n}{t}{t}while count <= MaxAcct:{n}{t}{t}{t}if get_string(USWBankAcct.BankAcct, count) != '':{n}{t}{t}{t}{t}if IsStrEqual(get_string(IAESTIMATES.DDAcct), get_string(USWBankAcct.BankAcct, count)):{n}{t}{t}{t}{t}{t}return get_bool(USWBankAcct.IAT, count){n}{t}{t}{t}{t}{t}count = 99{n}{t}{t}{t}count = count + 1{n}{t}{t}return 0{n}{t}else:{n}{t}{t}return 0{n}{n}
def EstIATNo_Calculation():{n}{t}return get_bool(IAESTIMATES.EstEFW){n}{n}
def EstPay1_Calculation():{n}{t}if get_bool(IAESTIMATES.Est1) == True and get_currency(IAESTIMATES.Est1Amt) > 0:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def EstPay2_Calculation():{n}{t}if get_bool(IAESTIMATES.Est2) == True and get_currency(IAESTIMATES.Est2Amt) > 0:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def EstPay3_Calculation():{n}{t}if get_bool(IAESTIMATES.Est3) == True and get_currency(IAESTIMATES.Est3Amt) > 0:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def EstPay4_Calculation():{n}{t}if get_bool(IAESTIMATES.Est4) == True and get_currency(IAESTIMATES.Est4Amt) > 0:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def EstRTN_Calculation():{n}{t}if get_bool(IAESTIMATES.DirectDebEst) == True and  ( get_currency(IAESTIMATES.Est1Amt) == 0 and get_currency(IAESTIMATES.Est2Amt) == 0 and get_currency(IAESTIMATES.Est3Amt) == 0 and get_currency(IAESTIMATES.Est4Amt) == 0 ) :{n}{t}{t}return ''{n}{t}elif  ( get_bool(IAESTIMATES.DirectDebEst) == True and  ( get_currency(IAESTIMATES.Est1Amt) > 0 or get_currency(IAESTIMATES.Est2Amt) > 0 or get_currency(IAESTIMATES.Est3Amt) > 0 or get_currency(IAESTIMATES.Est4Amt) > 0 ) ) :{n}{t}{t}count = 1{n}{t}{t}MaxAcct = GetAllCopies(USWBankAcct){n}{t}{t}while count <= MaxAcct:{n}{t}{t}{t}if get_string(USWBankAcct.BankAcct, count) != '':{n}{t}{t}{t}{t}if IsStrEqual(get_string(IAESTIMATES.DDAcct), get_string(USWBankAcct.BankAcct, count)):{n}{t}{t}{t}{t}{t}return get_string(USWBankAcct.RTN, count){n}{t}{t}{t}{t}{t}count = 99{n}{t}{t}{t}count = count + 1{n}{t}{t}return ''{n}{t}else:{n}{t}{t}return ''{n}{n}
def EstRTN2_Calculation(Index):{n}{t}return get_string(IAESTIMATES.EstRTN){n}{n}
def EstSavings_Calculation():{n}{t}if get_bool(IAESTIMATES.DirectDebEst) == True and  ( get_currency(IAESTIMATES.Est1Amt) == 0 and get_currency(IAESTIMATES.Est2Amt) == 0 and get_currency(IAESTIMATES.Est3Amt) == 0 and get_currency(IAESTIMATES.Est4Amt) == 0 ) :{n}{t}{t}return 0{n}{t}elif  ( get_bool(IAESTIMATES.DirectDebEst) == True and  ( get_currency(IAESTIMATES.Est1Amt) > 0 or get_currency(IAESTIMATES.Est2Amt) > 0 or get_currency(IAESTIMATES.Est3Amt) > 0 or get_currency(IAESTIMATES.Est4Amt) > 0 ) ) :{n}{t}{t}count = 1{n}{t}{t}MaxAcct = GetAllCopies(USWBankAcct){n}{t}{t}while count <= MaxAcct:{n}{t}{t}{t}if get_string(USWBankAcct.BankAcct, count) != '':{n}{t}{t}{t}{t}if IsStrEqual(get_string(IAESTIMATES.DDAcct), get_string(USWBankAcct.BankAcct, count)):{n}{t}{t}{t}{t}{t}return get_bool(USWBankAcct.Savings, count){n}{t}{t}{t}{t}{t}count = 99{n}{t}{t}{t}count = count + 1{n}{t}{t}return 0{n}{t}else:{n}{t}{t}return 0{n}{n}
def EstSavings2_Calculation(Index):{n}{t}return get_bool(IAESTIMATES.EstSavings){n}{n}
def Exist_Calculation():{n}{t}return 1{n}{n}
def GrossIncOption_Calculation():{n}{t}if get_bool(IAESTIMATES.Gross) == True:{n}{t}{t}return c_dollar(get_float(IAESTIMATES.Gross5) * 0.05){n}{t}else:{n}{t}{t}return 0{n}{n}
def IANetInc_Calculation():{n}{t}return max_value(0, get_currency(IAESTIMATES.NetInc) - get_currency(IAESTIMATES.FedTaxPd)){n}{n}
def IATax_Calculation():{n}{t}if get_float(IAESTIMATES.NRIAPer) < 1:{n}{t}{t}return c_dollar(get_float(IAESTIMATES.NetTax) * get_float(IAESTIMATES.NRIAPer)){n}{t}else:{n}{t}{t}return get_currency(IAESTIMATES.NetTax){n}{n}
def JtCommon_Calculation():{n}{t}return get_string(USWBasicInfo.CombFirst){n}{n}
def MainName_Calculation():{n}{t}if get_bool(IAESTIMATES.Taxpayer) == True:{n}{t}{t}return get_string(IAREQUIRED.TPComb){n}{t}elif get_bool(IAESTIMATES.Spouse) == True:{n}{t}{t}return get_string(IAREQUIRED.SPComb){n}{t}else:{n}{t}{t}return get_string(IAREQUIRED.JTComb){n}{n}
def Names_Calculation():{n}{t}if get_bool(IAESTIMATES.Spouse) == True:{n}{t}{t}return get_string(IAREQUIRED.SPCombName){n}{t}elif get_bool(IAESTIMATES.Taxpayer) == True:{n}{t}{t}return get_string(IAREQUIRED.TPCombName){n}{t}else:{n}{t}{t}return get_string(IAREQUIRED.CombNames){n}{n}
def NetTax_Calculation():{n}{t}return max_value(0, get_currency(IAESTIMATES.TotEstLiab) - get_currency(IAESTIMATES.TotCr)){n}{n}
def NoBankSel3_Calculation():{n}{t}if get_bool(IAESTIMATES.DirectDebEst) == True:{n}{t}{t}if trim(get_string(IAESTIMATES.DDAcct)) == '':{n}{t}{t}{t}return 1{n}{t}{t}else:{n}{t}{t}{t}return 0{n}{t}else:{n}{t}{t}return 0{n}{n}
def NoBankSelInt3_Calculation():{n}{t}if get_bool(IAESTIMATES.DirectDebEst) == True and  ( get_currency(IAESTIMATES.Est1Amt) > 0 or get_currency(IAESTIMATES.Est2Amt) > 0 or get_currency(IAESTIMATES.Est3Amt) > 0 or get_currency(IAESTIMATES.Est4Amt) > 0 ) :{n}{t}{t}if get_bool(USTopicList.HaveBankWSSend) == False:{n}{t}{t}{t}return 0{n}{t}{t}elif trim(get_string(IAESTIMATES.DDAcct)) == '':{n}{t}{t}{t}return 1{n}{t}{t}else:{n}{t}{t}{t}return 0{n}{t}else:{n}{t}{t}return 0{n}{n}
def NRIAPer_Calculation():{n}{t}if get_currency(IAESTIMATES.NetInc) == 0:{n}{t}{t}return 0{n}{t}elif get_currency(IAESTIMATES.NRIAInc) == 0:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return min_value(1, Round(( get_float(IAESTIMATES.NRIAInc) / get_float(IAESTIMATES.NetInc) )  * 10000) / 10000){n}{n}
def Overpayment_Calculation():{n}{t}if get_currency(IAF1040.OVerPaid) > 0:{n}{t}{t}if get_bool(IAESTIMATES.Spouse) == False:{n}{t}{t}{t}return max_value(0, get_currency(IAF1040.OVerPaid) - get_currency(IAF1040.Penalty)){n}{t}{t}elif get_bool(IAESTIMATES.Spouse) == True and get_bool(IAESTIMATES.Taxpayer, 1) == False and get_bool(IAESTIMATES.Taxpayer, 2) == False:{n}{t}{t}{t}return max_value(0, get_currency(IAF1040.OVerPaid) - get_currency(IAF1040.Penalty)){n}{t}{t}else:{n}{t}{t}{t}return min_value(max_value(0, ( get_currency(IAF1040.OVerPaid) )  - get_currency(IAF1040.Penalty)), get_currency(IAESTIMATES.SpOvpd, FieldCopies(IAESTIMATES.Taxpayer))){n}{t}else:{n}{t}{t}return 0{n}{n}
def Owner_Calculation():{n}{t}if get_bool(IAESTIMATES.Taxpayer) == True and trim(get_string(USWBasicInfo.FirstName)) == '':{n}{t}{t}return 'the taxpayer'{n}{t}elif get_bool(IAESTIMATES.Taxpayer) == True:{n}{t}{t}return get_string(USWBasicInfo.FirstName){n}{t}elif get_bool(IAESTIMATES.Spouse) == True and trim(get_string(USWBasicInfo.SpouseFirst)) == '':{n}{t}{t}return 'the spouse'{n}{t}elif get_bool(IAESTIMATES.Spouse) == True:{n}{t}{t}return get_string(USWBasicInfo.SpouseFirst){n}{t}else:{n}{t}{t}return 'the taxpayer and spouse'{n}{n}
def Payments_Calculation():{n}{t}return get_currency(IAESTIMATES.V1PayAmt1) + get_currency(IAESTIMATES.V2PayAmt1) + get_currency(IAESTIMATES.V3PayAmt1) + get_currency(IAESTIMATES.V4PayAmt1){n}{n}
def Print_Calculation():{n}{t}if get_currency(IAESTIMATES.TaxDue) > 0:{n}{t}{t}if get_currency(IAESTIMATES.V1PayAmt1) + get_currency(IAESTIMATES.V2PayAmt1) + get_currency(IAESTIMATES.V3PayAmt1) + get_currency(IAESTIMATES.V4PayAmt1):{n}{t}{t}{t}return 1{n}{t}{t}else:{n}{t}{t}{t}return 0{n}{t}else:{n}{t}{t}return 0{n}{n}
def PYTaxOption_Calculation():{n}{t}TotTax = Currency(){n}{n}{t}SubTot = Currency(){n}{t}if get_bool(IAESTIMATES.Spouse) == True:{n}{t}{t}TotTax = get_currency(IAF1040.BBal4){n}{t}elif get_bool(IAESTIMATES.Taxpayer) == True:{n}{t}{t}TotTax = get_currency(IAF1040.ABal4){n}{t}else:{n}{t}{t}TotTax = get_currency(IAF1040.ABal4) + get_currency(IAF1040.BBal4){n}{t}if get_currency(IAREQUIRED.IAAGI) > Decimal("150000"):{n}{t}{t}SubTot = c_dollar(( TotTax )  * 1.1){n}{t}else:{n}{t}{t}SubTot = TotTax{n}{t}if get_bool(IAESTIMATES.PYTax) == True:{n}{t}{t}return max_value(0, SubTot - get_currency(IAESTIMATES.PYCredits)){n}{t}else:{n}{t}{t}return 0{n}{n}
def Quarter_Calculation():{n}{t}return c_dollar(get_float(IAESTIMATES.TaxDue) * 0.25){n}{n}
def RndV1_Calculation():{n}{t}L16 = Currency(){n}{n}{t}R25 = Currency(){n}{n}{t}R50 = Currency(){n}{n}{t}R100 = Currency(){n}{n}{t}Drop = Integer(){n}{n}{t}Drop25 = Integer(){n}{n}{t}Drop50 = Integer(){n}{n}{t}Drop100 = Integer(){n}{n}{t}Payment = Currency(){n}{n}{t}Payment25 = Currency(){n}{n}{t}Payment50 = Currency(){n}{n}{t}Payment100 = Currency(){n}{t}L16 = get_currency(IAESTIMATES.Roundup10){n}{t}R25 = get_currency(IAESTIMATES.Roundup25){n}{t}R50 = get_currency(IAESTIMATES.Roundup50){n}{t}R100 = get_currency(IAESTIMATES.Roundup100){n}{t}Drop = CLng(L16 / Decimal("40")){n}{t}Drop25 = CLng(R25 / Decimal("100")){n}{t}Drop50 = CLng(R50 / Decimal("200")){n}{t}Drop100 = CLng(R100 / Decimal("400")){n}{t}Payment = ( CCur(Drop) * Decimal("40") )  + Decimal("40"){n}{t}Payment25 = ( CCur(Drop25) * Decimal("100") )  + Decimal("100"){n}{t}Payment50 = ( CCur(Drop50) * Decimal("200") )  + Decimal("200"){n}{t}Payment100 = ( CCur(Drop100) * Decimal("400") )  + Decimal("400"){n}{t}if get_bool(IAESTIMATES.Round10) == True:{n}{t}{t}if ( L16 % Decimal("40") )  == 0:{n}{t}{t}{t}return Round(c_dollar(CDbl(L16) * 0.25)){n}{t}{t}else:{n}{t}{t}{t}return Round(c_dollar(CDbl(Payment) * 0.25)){n}{t}elif get_bool(IAESTIMATES.Round25) == True:{n}{t}{t}if ( R25 % Decimal("100") )  == 0:{n}{t}{t}{t}return Round(c_dollar(CDbl(R25) * 0.25)){n}{t}{t}else:{n}{t}{t}{t}return Round(c_dollar(CDbl(Payment25) * 0.25)){n}{t}elif get_bool(IAESTIMATES.Round50) == True:{n}{t}{t}if ( R50 % Decimal("200") )  == 0:{n}{t}{t}{t}return Round(c_dollar(CDbl(R50) * 0.25)){n}{t}{t}else:{n}{t}{t}{t}return Round(c_dollar(CDbl(Payment50) * 0.25)){n}{t}elif get_bool(IAESTIMATES.Round100) == True:{n}{t}{t}if ( R100 % Decimal("400") )  == 0:{n}{t}{t}{t}return Round(c_dollar(CDbl(R100) * 0.25)){n}{t}{t}else:{n}{t}{t}{t}return Round(c_dollar(CDbl(Payment100) * 0.25)){n}{t}else:{n}{t}{t}return Round(c_dollar(get_float(IAESTIMATES.TaxDue) * 0.25)){n}{n}
def RndV2_Calculation():{n}{t}L16 = Currency(){n}{n}{t}R25 = Currency(){n}{n}{t}R50 = Currency(){n}{n}{t}R100 = Currency(){n}{n}{t}Drop = Integer(){n}{n}{t}Drop25 = Integer(){n}{n}{t}Drop50 = Integer(){n}{n}{t}Drop100 = Integer(){n}{n}{t}Payment = Currency(){n}{n}{t}Payment25 = Currency(){n}{n}{t}Payment50 = Currency(){n}{n}{t}Payment100 = Currency(){n}{t}L16 = get_currency(IAESTIMATES.Roundup10) - get_currency(IAESTIMATES.V1Pay){n}{t}R25 = get_currency(IAESTIMATES.Roundup25) - get_currency(IAESTIMATES.V1Pay){n}{t}R50 = get_currency(IAESTIMATES.Roundup50) - get_currency(IAESTIMATES.V1Pay){n}{t}R100 = get_currency(IAESTIMATES.Roundup100) - get_currency(IAESTIMATES.V1Pay){n}{t}Drop = CLng(L16 / Decimal("30")){n}{t}Drop25 = CLng(R25 / Decimal("75")){n}{t}Drop50 = CLng(R50 / Decimal("150")){n}{t}Drop100 = CLng(R100 / Decimal("300")){n}{t}Payment = ( CCur(Drop) * Decimal("30") )  + Decimal("30"){n}{t}Payment25 = ( CCur(Drop25) * Decimal("75") )  + Decimal("75"){n}{t}Payment50 = ( CCur(Drop50) * Decimal("150") )  + Decimal("150"){n}{t}Payment100 = ( CCur(Drop100) * Decimal("300") )  + Decimal("300"){n}{t}if get_bool(IAESTIMATES.Round10) == True:{n}{t}{t}if ( L16 % Decimal("30") )  == 0:{n}{t}{t}{t}return Round(c_dollar(CDbl(L16) * 0.333333)){n}{t}{t}else:{n}{t}{t}{t}return Round(c_dollar(CDbl(Payment) * 0.333333)){n}{t}elif get_bool(IAESTIMATES.Round25) == True:{n}{t}{t}if ( R25 % Decimal("75") )  == 0:{n}{t}{t}{t}return Round(c_dollar(CDbl(R25) * 0.333333)){n}{t}{t}else:{n}{t}{t}{t}return Round(c_dollar(CDbl(Payment25) * 0.333333)){n}{t}elif get_bool(IAESTIMATES.Round50) == True:{n}{t}{t}if ( R50 % Decimal("150") )  == 0:{n}{t}{t}{t}return Round(c_dollar(CDbl(R50) * 0.333333)){n}{t}{t}else:{n}{t}{t}{t}return Round(c_dollar(CDbl(Payment50) * 0.333333)){n}{t}elif get_bool(IAESTIMATES.Round100) == True:{n}{t}{t}if ( R100 % Decimal("300") )  == 0:{n}{t}{t}{t}return Round(c_dollar(CDbl(R100) * 0.333333)){n}{t}{t}else:{n}{t}{t}{t}return Round(c_dollar(CDbl(Payment100) * 0.333333)){n}{t}else:{n}{t}{t}return Round(c_dollar(CDbl(get_currency(IAESTIMATES.TaxDue) - get_currency(IAESTIMATES.V1Pay)) * 0.333333)){n}{n}
def RndV3_Calculation():{n}{t}L16 = Currency(){n}{n}{t}R25 = Currency(){n}{n}{t}R50 = Currency(){n}{n}{t}R100 = Currency(){n}{n}{t}Drop = Integer(){n}{n}{t}Drop25 = Integer(){n}{n}{t}Drop50 = Integer(){n}{n}{t}Drop100 = Integer(){n}{n}{t}Payment = Currency(){n}{n}{t}Payment25 = Currency(){n}{n}{t}Payment50 = Currency(){n}{n}{t}Payment100 = Currency(){n}{t}L16 = get_currency(IAESTIMATES.Roundup10) - get_currency(IAESTIMATES.V1Pay) - get_currency(IAESTIMATES.V2Pay){n}{t}R25 = get_currency(IAESTIMATES.Roundup25) - get_currency(IAESTIMATES.V1Pay) - get_currency(IAESTIMATES.V2Pay){n}{t}R50 = get_currency(IAESTIMATES.Roundup50) - get_currency(IAESTIMATES.V1Pay) - get_currency(IAESTIMATES.V2Pay){n}{t}R100 = get_currency(IAESTIMATES.Roundup100) - get_currency(IAESTIMATES.V1Pay) - get_currency(IAESTIMATES.V2Pay){n}{t}Drop = CLng(L16 / Decimal("20")){n}{t}Drop25 = CLng(R25 / Decimal("50")){n}{t}Drop50 = CLng(R50 / Decimal("100")){n}{t}Drop100 = CLng(R100 / Decimal("200")){n}{t}Payment = ( CCur(Drop) * Decimal("20") )  + Decimal("20"){n}{t}Payment25 = ( CCur(Drop25) * Decimal("50") )  + Decimal("50"){n}{t}Payment50 = ( CCur(Drop50) * Decimal("100") )  + Decimal("100"){n}{t}Payment100 = ( CCur(Drop100) * Decimal("200") )  + Decimal("200"){n}{t}if get_bool(IAESTIMATES.Round10) == True:{n}{t}{t}if ( L16 % Decimal("20") )  == 0:{n}{t}{t}{t}return Round(c_dollar(CDbl(L16) * 0.5)){n}{t}{t}else:{n}{t}{t}{t}return Round(c_dollar(CDbl(Payment) * 0.5)){n}{t}elif get_bool(IAESTIMATES.Round25) == True:{n}{t}{t}if ( R25 % Decimal("50") )  == 0:{n}{t}{t}{t}return Round(c_dollar(CDbl(R25) * 0.5)){n}{t}{t}else:{n}{t}{t}{t}return Round(c_dollar(CDbl(Payment25) * 0.5)){n}{t}elif get_bool(IAESTIMATES.Round50) == True:{n}{t}{t}if ( R50 % Decimal("100") )  == 0:{n}{t}{t}{t}return Round(c_dollar(CDbl(R50) * 0.5)){n}{t}{t}else:{n}{t}{t}{t}return Round(c_dollar(CDbl(Payment50) * 0.5)){n}{t}elif get_bool(IAESTIMATES.Round100) == True:{n}{t}{t}if ( R100 % Decimal("200") )  == 0:{n}{t}{t}{t}return Round(c_dollar(CDbl(R100) * 0.5)){n}{t}{t}else:{n}{t}{t}{t}return Round(c_dollar(CDbl(Payment100) * 0.5)){n}{t}else:{n}{t}{t}return Round(c_dollar(CDbl(get_currency(IAESTIMATES.TaxDue) - get_currency(IAESTIMATES.V1Pay) - get_currency(IAESTIMATES.V2Pay)) * 0.5)){n}{n}
def RndV4_Calculation():{n}{t}L16 = Currency(){n}{n}{t}R25 = Currency(){n}{n}{t}R50 = Currency(){n}{n}{t}R100 = Currency(){n}{n}{t}Drop = Integer(){n}{n}{t}Drop25 = Integer(){n}{n}{t}Drop50 = Integer(){n}{n}{t}Drop100 = Integer(){n}{n}{t}Payment = Currency(){n}{n}{t}Payment25 = Currency(){n}{n}{t}Payment50 = Currency(){n}{n}{t}Payment100 = Currency(){n}{t}L16 = get_currency(IAESTIMATES.Roundup10) - get_currency(IAESTIMATES.V1Pay) - get_currency(IAESTIMATES.V2Pay) - get_currency(IAESTIMATES.V3Pay){n}{t}R25 = get_currency(IAESTIMATES.Roundup25) - get_currency(IAESTIMATES.V1Pay) - get_currency(IAESTIMATES.V2Pay) - get_currency(IAESTIMATES.V3Pay){n}{t}R50 = get_currency(IAESTIMATES.Roundup50) - get_currency(IAESTIMATES.V1Pay) - get_currency(IAESTIMATES.V2Pay) - get_currency(IAESTIMATES.V3Pay){n}{t}R100 = get_currency(IAESTIMATES.Roundup100) - get_currency(IAESTIMATES.V1Pay) - get_currency(IAESTIMATES.V2Pay) - get_currency(IAESTIMATES.V3Pay){n}{t}Drop = CLng(L16 / Decimal("10")){n}{t}Drop25 = CLng(R25 / Decimal("25")){n}{t}Drop50 = CLng(R50 / Decimal("50")){n}{t}Drop100 = CLng(R100 / Decimal("100")){n}{t}Payment = ( CCur(Drop) * Decimal("10") )  + Decimal("10"){n}{t}Payment25 = ( CCur(Drop25) * Decimal("10") )  + Decimal("10"){n}{t}Payment50 = ( CCur(Drop50) * Decimal("10") )  + Decimal("10"){n}{t}Payment100 = ( CCur(Drop100) * Decimal("100") )  + Decimal("100"){n}{t}if get_bool(IAESTIMATES.Round10) == True:{n}{t}{t}if ( L16 % Decimal("10") )  == 0:{n}{t}{t}{t}return L16{n}{t}{t}else:{n}{t}{t}{t}return Round(Payment){n}{t}elif get_bool(IAESTIMATES.Round25) == True:{n}{t}{t}if ( R25 % Decimal("25") )  == 0:{n}{t}{t}{t}return R25{n}{t}{t}else:{n}{t}{t}{t}return Round(Payment25){n}{t}elif get_bool(IAESTIMATES.Round50) == True:{n}{t}{t}if ( R50 % Decimal("50") )  == 0:{n}{t}{t}{t}return R50{n}{t}{t}else:{n}{t}{t}{t}return Round(Payment50){n}{t}elif get_bool(IAESTIMATES.Round100) == True:{n}{t}{t}if ( R100 % Decimal("100") )  == 0:{n}{t}{t}{t}return R100{n}{t}{t}else:{n}{t}{t}{t}return Round(Payment100){n}{t}else:{n}{t}{t}return Round(get_currency(IAESTIMATES.TaxDue) - get_currency(IAESTIMATES.V1Pay) - get_currency(IAESTIMATES.V2Pay) - get_currency(IAESTIMATES.V3Pay)){n}{n}
def Roundup10_Calculation():{n}{t}Required = Currency(){n}{n}{t}Drop = Integer(){n}{n}{t}Payment = Currency(){n}{t}Required = get_currency(IAESTIMATES.TaxDue){n}{t}Drop = CLng(Required / Decimal("40")){n}{t}Payment = ( CCur(Drop) * Decimal("40") )  + Decimal("40"){n}{t}if get_bool(IAESTIMATES.Round10) == True:{n}{t}{t}if ( Required % Decimal("40") )  == 0:{n}{t}{t}{t}return Required{n}{t}{t}else:{n}{t}{t}{t}return Payment{n}{t}else:{n}{t}{t}return get_currency(IAESTIMATES.TaxDue){n}{n}
def Roundup100_Calculation():{n}{t}Required = Currency(){n}{n}{t}Drop = Integer(){n}{n}{t}Payment = Currency(){n}{t}Required = get_currency(IAESTIMATES.TaxDue){n}{t}Drop = CLng(get_float(IAESTIMATES.TaxDue) / 40000){n}{t}Payment = ( CCur(Drop) * Decimal("400") )  + Decimal("400"){n}{t}if get_bool(IAESTIMATES.Round100) == True:{n}{t}{t}if ( Required % Decimal("400") )  == 0:{n}{t}{t}{t}return Required{n}{t}{t}else:{n}{t}{t}{t}return Payment{n}{t}else:{n}{t}{t}return get_currency(IAESTIMATES.TaxDue){n}{n}
def Roundup25_Calculation():{n}{t}Required = Currency(){n}{n}{t}Drop = Integer(){n}{n}{t}Payment = Currency(){n}{t}Required = get_currency(IAESTIMATES.TaxDue){n}{t}Drop = CLng(get_float(IAESTIMATES.TaxDue) / 10000){n}{t}Payment = ( CCur(Drop) * Decimal("100") )  + Decimal("100"){n}{t}if get_bool(IAESTIMATES.Round25) == True:{n}{t}{t}if ( Required % Decimal("100") )  == 0:{n}{t}{t}{t}return Required{n}{t}{t}else:{n}{t}{t}{t}return Payment{n}{t}else:{n}{t}{t}return get_currency(IAESTIMATES.TaxDue){n}{n}
def Roundup50_Calculation():{n}{t}Required = Currency(){n}{n}{t}Drop = Integer(){n}{n}{t}Payment = Currency(){n}{t}Required = get_currency(IAESTIMATES.TaxDue){n}{t}Drop = CLng(CDbl(Required) / 20000){n}{t}Payment = ( CCur(Drop) * Decimal("200") )  + Decimal("200"){n}{t}if get_bool(IAESTIMATES.Round50) == True:{n}{t}{t}if ( Required % Decimal("200") )  == 0:{n}{t}{t}{t}return Required{n}{t}{t}else:{n}{t}{t}{t}return Payment{n}{t}else:{n}{t}{t}return get_currency(IAESTIMATES.TaxDue){n}{n}
def SpouseCommon_Calculation():{n}{t}return get_string(USWBasicInfo.SPCommon){n}{n}
def SSN_Calculation():{n}{t}if get_bool(IAESTIMATES.Spouse) == True:{n}{t}{t}return get_string(IAF1040.SpouseSSN){n}{t}else:{n}{t}{t}return get_string(IAF1040.SSN){n}{n}
def Tax_Calculation():{n}{t}return NextYearTax(get_currency(IAESTIMATES.TaxInc)){n}{n}
def TaxDue_Calculation():{n}{t}if get_bool(IAESTIMATES.Gross) == True:{n}{t}{t}return get_currency(IAESTIMATES.GrossIncOption){n}{t}elif get_bool(IAESTIMATES.PYTax) == True:{n}{t}{t}return get_currency(IAESTIMATES.PYTaxOption){n}{t}elif get_currency(IAESTIMATES.TotEstTax) > Decimal("200") or get_bool(IAESTIMATES.StillPay) == True:{n}{t}{t}return get_currency(IAESTIMATES.TotEstTax){n}{t}else:{n}{t}{t}return 0{n}{n}
def TaxInc_Calculation():{n}{t}return max_value(0, get_currency(IAESTIMATES.IANetInc) - get_currency(IAESTIMATES.EstDed)){n}{n}
def Taxpayer_Calculation():{n}{t}return 1{n}{n}
def TotApplied_Calculation():{n}{t}return ( get_currency(IAESTIMATES.V1Apply) + get_currency(IAESTIMATES.V2Apply) + get_currency(IAESTIMATES.V3Apply) + get_currency(IAESTIMATES.V4Apply) ){n}{n}
def TotCr_Calculation():{n}{t}if get_bool(IAESTIMATES.Joint) == True:{n}{t}{t}return Decimal("80"){n}{t}else:{n}{t}{t}return Decimal("40"){n}{n}
def TotEstimate_Calculation():{n}{t}return get_currency(IAESTIMATES.V1Pay) + get_currency(IAESTIMATES.V2Pay) + get_currency(IAESTIMATES.V3Pay) + get_currency(IAESTIMATES.V4Pay){n}{n}
def TotEstLiab_Calculation():{n}{t}return get_currency(IAESTIMATES.Tax) + get_currency(IAESTIMATES.MinTax) + get_currency(IAESTIMATES.LSD){n}{n}
def TotEstTax_Calculation():{n}{t}return max_value(0, get_currency(IAESTIMATES.AdjBal) - get_currency(IAESTIMATES.IACr)){n}{n}
def TotNetTax2_Calculation():{n}{t}if get_bool(IAESTIMATES.Taxpayer) == False:{n}{t}{t}return get_currency(IAESTIMATES.Overpayment){n}{t}else:{n}{t}{t}return max_value(0, get_currency(IAESTIMATES.Overpayment) - get_currency(IAESTIMATES.SpOvpd)){n}{n}
def V1Apply_Calculation():{n}{t}Smaller = Currency(){n}{t}Smaller = min_value(get_currency(IAESTIMATES.TotNetTax2), get_currency(IAESTIMATES.SpecAmt)){n}{t}if get_bool(IAESTIMATES.Refund) == True:{n}{t}{t}return 0{n}{t}elif get_bool(IAESTIMATES.ApplySpecific) == True and get_currency(IAESTIMATES.TaxDue) == 0:{n}{t}{t}return Smaller{n}{t}elif get_bool(IAESTIMATES.ApplySpecific) == True:{n}{t}{t}return min_value(Smaller, get_currency(IAESTIMATES.V1Pay)){n}{t}else:{n}{t}{t}return min_value(get_currency(IAESTIMATES.TotNetTax2), get_currency(IAESTIMATES.V1Pay)){n}{n}
def V1Pay_Calculation():{n}{t}return get_currency(IAESTIMATES.RndV1){n}{n}
def V1PayAmt1_Calculation():{n}{t}return max_value(0, get_currency(IAESTIMATES.V1Pay) - get_currency(IAESTIMATES.V1Apply)){n}{n}
def V2Apply_Calculation():{n}{t}Smaller = Currency(){n}{n}{t}Limited = Currency(){n}{n}{t}Limited2 = Currency(){n}{t}Smaller = min_value(get_currency(IAESTIMATES.TotNetTax2), get_currency(IAESTIMATES.SpecAmt)){n}{t}Limited = min_value(get_currency(IAESTIMATES.V2Pay), get_currency(IAESTIMATES.TotNetTax2) - get_currency(IAESTIMATES.V1Pay)){n}{t}Limited2 = min_value(get_currency(IAESTIMATES.V2Pay), Smaller - get_currency(IAESTIMATES.V1Pay)){n}{t}if get_bool(IAESTIMATES.Refund) == True or get_bool(IAESTIMATES.FirstQt) == True:{n}{t}{t}return 0{n}{t}elif get_bool(IAESTIMATES.ApplySpecific) == True:{n}{t}{t}return max_value(0, Limited2){n}{t}else:{n}{t}{t}return max_value(0, Limited){n}{n}
def V2Pay_Calculation():{n}{t}return get_currency(IAESTIMATES.RndV2){n}{n}
def V2PayAmt1_Calculation():{n}{t}return max_value(0, get_currency(IAESTIMATES.V2Pay) - get_currency(IAESTIMATES.V2Apply)){n}{n}
def V3Apply_Calculation():{n}{t}Smaller = Currency(){n}{n}{t}Limited = Currency(){n}{n}{t}Limited2 = Currency(){n}{t}Smaller = min_value(get_currency(IAESTIMATES.TotNetTax2), get_currency(IAESTIMATES.SpecAmt)){n}{t}Limited = min_value(get_currency(IAESTIMATES.V3Pay), get_currency(IAESTIMATES.TotNetTax2) - get_currency(IAESTIMATES.V1Pay) - get_currency(IAESTIMATES.V2Pay)){n}{t}Limited2 = min_value(get_currency(IAESTIMATES.V3Pay), Smaller - get_currency(IAESTIMATES.V1Pay) - get_currency(IAESTIMATES.V2Pay)){n}{t}if get_bool(IAESTIMATES.Refund) == True or get_bool(IAESTIMATES.FirstQt) == True:{n}{t}{t}return 0{n}{t}elif get_bool(IAESTIMATES.ApplySpecific) == True:{n}{t}{t}return max_value(0, Limited2){n}{t}else:{n}{t}{t}return max_value(0, Limited){n}{n}
def V3Pay_Calculation():{n}{t}return get_currency(IAESTIMATES.RndV3){n}{n}
def V3PayAmt1_Calculation():{n}{t}return max_value(0, get_currency(IAESTIMATES.V3Pay) - get_currency(IAESTIMATES.V3Apply)){n}{n}
def V4Apply_Calculation():{n}{t}Smaller = Currency(){n}{n}{t}Limited = Currency(){n}{t}if get_bool(IAESTIMATES.Refund) == True or get_bool(IAESTIMATES.FirstQt) == True:{n}{t}{t}return 0{n}{t}elif get_bool(IAESTIMATES.ApplyAll) == True:{n}{t}{t}Limited = max_value(0, get_currency(IAESTIMATES.TotNetTax2) - get_currency(IAESTIMATES.V1Pay) - get_currency(IAESTIMATES.V2Pay) - get_currency(IAESTIMATES.V3Pay)){n}{t}{t}return min_value(get_currency(IAESTIMATES.V4Pay), Limited){n}{t}elif get_bool(IAESTIMATES.ApplySpecific) == True:{n}{t}{t}Smaller = min_value(get_currency(IAESTIMATES.TotNetTax2), get_currency(IAESTIMATES.SpecAmt)){n}{t}{t}return max_value(0, Smaller - get_currency(IAESTIMATES.V1Apply) - get_currency(IAESTIMATES.V2Apply) - get_currency(IAESTIMATES.V3Apply)){n}{t}else:{n}{t}{t}return 0{n}{n}
def V4Pay_Calculation():{n}{t}return get_currency(IAESTIMATES.RndV4){n}{n}
def V4PayAmt1_Calculation():{n}{t}return max_value(0, get_currency(IAESTIMATES.V4Pay) - get_currency(IAESTIMATES.V4Apply)){n}{n}def AAlimony_Calculation():{n}{t}if IAFS() == 3:{n}{t}{t}return get_currency(USWRec.TAlimony){n}{t}else:{n}{t}{t}return get_currency(USWRec.TotAlimony){n}{n}
def AAlimonyP_Calculation():{n}{t}if IAFS() == 3:{n}{t}{t}return get_currency(USWRec.TAlimonyAdj){n}{t}else:{n}{t}{t}return get_currency(USWRec.TotAlimonyAdj){n}{n}
def AAltTax_Calculation():{n}{t}# 1st condition added for situation when MFS return and reporting spouse income causes an alternate tax calculation yet taxpayer has zero income{n}{t}# See saved return IA MFS Alternate Tax Issue.ta2{n}{t}if get_bool(IAF1040.MFS) == True and get_currency(IAF1040.ATaxInc) == 0:{n}{t}{t}return 0{n}{t}elif  ( get_currency(IAWKALTTAX.Mult) < get_currency(IAWKALTTAX.Tables) )  and get_bool(IAWKALTTAX.Qualify) == True:{n}{t}{t}return get_currency(IAF1040.ATax){n}{t}else:{n}{t}{t}return get_currency(IAF1040.ARegTax){n}{n}
def AApply99_Calculation():{n}{t}return max_value(0, get_currency(IAESTIMATES.TotApplied) - get_currency(IAF1040.BApply99)){n}{n}
def ABal1_Calculation():{n}{t}if IAFS() == 1 and get_bool(IAF1040.DepY) == False:{n}{t}{t}return get_currency(IAREQUIRED.TaxReduction){n}{t}else:{n}{t}{t}return max_value(0, get_currency(IAF1040.ATotIATax) - get_currency(IAF1040.ACredits)){n}{n}
def ABal2_Calculation():{n}{t}return max_value(0, get_currency(IAF1040.ABal1) - get_currency(IAF1040.ACrNon)){n}{n}
def ABal4_Calculation():{n}{t}return max_value(0, get_currency(IAF1040.ABal3) - get_currency(IAF1040.AOthIACr)){n}{n}
def ABal36_Calculation():{n}{t}return get_currency(IAF1040.ABalance){n}{n}
def ABal3_Calculation():{n}{t}return max_value(0, get_currency(IAF1040.ABal2) - get_currency(IAF1040.AOutState)){n}{n}
def ABalance_Calculation():{n}{t}return get_currency(IAF1040.ATotTax) - get_currency(IAF1040.AFedDed){n}{n}
def ABusInc_Calculation():{n}{t}if IAFS() == 3:{n}{t}{t}return get_currency(USWRec.TBusiness){n}{t}else:{n}{t}{t}return get_currency(USWRec.TotBusiness){n}{n}
def ABusIncL_Calculation():{n}{t}if IAFS() == 3:{n}{t}{t}return get_currency(USWRec.THalfSe){n}{t}else:{n}{t}{t}return get_currency(USWRec.TotHalfSE){n}{n}
def ACapGain_Calculation():{n}{t}CapGain = Currency(){n}{t}if get_bool(USWResidency.F1040NR) == False:{n}{t}{t}CapGain = get_currency(USF1040.CapGain){n}{t}else:{n}{t}{t}CapGain = get_currency(USF1040NR.CapGain){n}{t}if IAFS() == 3:{n}{t}{t}return CapGain - get_currency(IAF1040.BCapGain){n}{t}else:{n}{t}{t}return CapGain{n}{n}
def AChild_Calculation():{n}{t}if get_bool(IAF1040.ChildCareCk) == True:{n}{t}{t}return get_currency(IACHILDCREDIT.TChild){n}{t}elif get_bool(IAF1040.EarlyChildCk) == True:{n}{t}{t}return get_currency(IACHILDCREDIT.TEarly){n}{t}else:{n}{t}{t}return 0{n}{n}
def ACredits_Calculation():{n}{t}return get_currency(IAF1040.AExemCr) + get_currency(IAF1040.ATuit) + get_currency(IAF1040.AVolFireCr){n}{n}
def ACrNon_Calculation():{n}{t}return get_currency(IAF126.ACredit){n}{n}
def ActNum_Calculation():{n}{t}if get_bool(IAEFWKSHT.PrepBPTrans) == True:{n}{t}{t}return ''{n}{t}elif get_bool(IAEFWKSHT.DirDeposit) == True and get_bool(IAEFWKSHT.Yes) == False and get_currency(IAEFWKSHT.Refund) > 0:{n}{t}{t}return get_string(IAEFWKSHT.DirDepDan){n}{t}else:{n}{t}{t}return ''{n}{n}
def Add_Calculation():{n}{t}return get_string(USWBasicInfo.HomeComb){n}{n}
def ADedBox_Calculation():{n}{t}Itemized = Currency(){n}{n}{t}Deduction = Currency(){n}{t}# updated for 2018{n}{t}if get_bool(IAF1040.CombMFS) == True or get_bool(IAF1040.MFS) == True:{n}{t}{t}Itemized = get_currency(IASCHA.YouPC){n}{t}else:{n}{t}{t}Itemized = get_currency(IASCHA.Item){n}{t}if get_bool(IAF1040.ItemCheck) == True:{n}{t}{t}Deduction = Itemized{n}{t}elif IAFS() == 2 or IAFS() == 5 or IAFS() == 6:{n}{t}{t}Deduction = min_value(Decimal("5000"), get_currency(IAF1040.ABal36)){n}{t}else:{n}{t}{t}Deduction = min_value(Decimal("2030"), get_currency(IAF1040.ABal36)){n}{t}return max_value(0, Deduction){n}{n}
def ADividend_Calculation():{n}{t}if IAFS() == 3:{n}{t}{t}return get_currency(IAREQUIRED.TotTPDiv){n}{t}else:{n}{t}{t}return get_currency(IAREQUIRED.TotDiv){n}{n}
def AEst_Calculation():{n}{t}if get_bool(IA1040X.EFAmend) == True:{n}{t}{t}return max_value(0, get_currency(IASTATEEST.TotIAEst) - get_currency(IASTATEEST.SPIAEst)) + get_currency(IA1040X.TotPrevTax){n}{t}else:{n}{t}{t}return max_value(0, get_currency(IASTATEEST.TotIAEst) - get_currency(IASTATEEST.SPIAEst)){n}{n}
def AEstTax_Calculation():{n}{t}if IAFS() == 3:{n}{t}{t}return get_currency(IAFEDEST.TPTotEst){n}{t}else:{n}{t}{t}return get_currency(IAFEDEST.TPTotEst) + get_currency(IAFEDEST.SPTotEst){n}{n}
def AExemCr_Calculation():{n}{t}return get_currency(IAF1040.ExempA){n}{n}
def AFarm_Calculation():{n}{t}if IAFS() == 3:{n}{t}{t}return get_currency(USWRec.TFarm){n}{t}else:{n}{t}{t}return get_currency(USWRec.TotFarm){n}{n}
def AFedDed_Calculation():{n}{t}return get_currency(IAF1040.ATaxWith) + get_currency(IAF1040.AEstTax) + get_currency(IAF1040.APrior){n}{n}
def AFedTax_Calculation():{n}{t}return get_currency(IAF1040.ARefund) + get_currency(IAF1040.ASelf){n}{n}
def AFuel_Calculation():{n}{t}return get_currency(IASch4136.TotCr, FieldCopies(IASch4136.Taxpayer)){n}{n}
def AGamble_Calculation():{n}{t}if get_bool(USWResidency.F1040NR) == True:{n}{t}{t}return get_currency(USSchNEC.Gambling130) + get_currency(USSchNEC.Gambling1Oth) + get_currency(USSchNEC.Gambling10) + get_currency(USSchNEC.Gambling230) + get_currency(USSchNEC.Gambling2Oth){n}{t}elif IAFS() == 3:{n}{t}{t}return get_currency(USWOthInc.TPOth3){n}{t}else:{n}{t}{t}return get_currency(USWOthInc.TotGamb){n}{n}
def AGross_Calculation():{n}{t}return get_currency(IAF1040.AWages) + get_currency(IAF1040.AInterest) + get_currency(IAF1040.ADividend) + get_currency(IAF1040.AAlimony) + get_currency(IAF1040.ABusInc) + get_currency(IAF1040.ACapGain) + get_currency(IAF1040.AOthGain) + get_currency(IAF1040.AIRA) + get_currency(IAF1040.APensions) + get_currency(IAF1040.ARents) + get_currency(IAF1040.AFarm) + get_currency(IAF1040.AUnemp) + get_currency(IAF1040.AGamble) + get_currency(IAF1040.AOtherInc){n}{n}
def AHealth_Calculation():{n}{t}if IAFS() == 3:{n}{t}{t}return get_currency(IAWHEALTH.TPTotal){n}{t}else:{n}{t}{t}return get_currency(IAWHEALTH.TPTotal) + get_currency(IAWHEALTH.SPTotal){n}{n}
def AIAMin_Calculation():{n}{t}return get_currency(IA6251.TotAMT){n}{n}
def AIATaxWith_Calculation():{n}{t}if IAFS() == 3:{n}{t}{t}return get_currency(IAREQUIRED.TIAW2WH) + get_currency(IAREQUIRED.TPW2GWH) + get_currency(IAREQUIRED.Tot1042S) + get_currency(IAREQUIRED.TPCapGainWH) + get_currency(IAREQUIRED.TPDivWH) + get_currency(IAREQUIRED.TPUnemWH) + get_currency(IAREQUIRED.TPIntWH) + get_currency(IAREQUIRED.TPKWH) + get_currency(IAREQUIRED.TPMiscWH) + get_currency(IAREQUIRED.TPOIDWH) + get_currency(IAREQUIRED.T1099rWH) + get_currency(IAREQUIRED.TpOthIncWH){n}{t}else:{n}{t}{t}return get_currency(IAREQUIRED.TotIAW2WH) + get_currency(IAREQUIRED.TotW2GWH) + get_currency(IAREQUIRED.Tot1042S) + get_currency(IAREQUIRED.TotCapGainWH) + get_currency(IAREQUIRED.TotDivWH) + get_currency(IAREQUIRED.TotUnemWH) + get_currency(IAREQUIRED.TotIntWH) + get_currency(IAREQUIRED.TotKWH) + get_currency(IAREQUIRED.TotMiscWH) + get_currency(IAREQUIRED.TotOIDWH) + get_currency(IAREQUIRED.Tot1099rWH) + get_currency(IAREQUIRED.TotOthIncWH){n}{n}
def AIEIC_Calculation():{n}{t}if IAFS() == 3 or IAFS() == 4:{n}{t}{t}return get_currency(IAREQUIRED.TIAEic){n}{t}else:{n}{t}{t}return get_currency(IAREQUIRED.IAEic){n}{n}
def AInterest_Calculation():{n}{t}if IAFS() == 3:{n}{t}{t}return get_currency(IAREQUIRED.TotTPInt){n}{t}else:{n}{t}{t}return get_currency(IAREQUIRED.TotInt){n}{n}
def AIRA_Calculation():{n}{t}if IAFS() == 3:{n}{t}{t}return get_currency(IAWPENEXC.TPIRA){n}{t}else:{n}{t}{t}return get_currency(IAWPENEXC.TPIRA) + get_currency(IAWPENEXC.SPIRA){n}{n}
def AKeogh_Calculation():{n}{t}if IAFS() == 3:{n}{t}{t}return get_currency(USWRec.TKeough) + get_currency(IAREQUIRED.TIRA){n}{t}else:{n}{t}{t}return get_currency(USWRec.TotKeough) + get_currency(USWRec.TotIRAAdj){n}{n}
def ALump_Calculation():{n}{t}if IAFS() == 3:{n}{t}{t}return c_dollar(get_float(USF4972.Tax) * 0.25){n}{t}else:{n}{t}{t}return c_dollar(get_float(USF4972.Tax) * 0.25) + c_dollar(get_float(USF4972SPOUSE.Tax) * 0.25){n}{n}
def AMove_Calculation():{n}{t}if IAFS() == 3:{n}{t}{t}return get_currency(IAREQUIRED.TMove){n}{t}else:{n}{t}{t}return get_currency(IAREQUIRED.TotMove){n}{n}
def ANet_Calculation():{n}{t}return get_currency(IAF1040.AGross) - get_currency(IAF1040.ATotAdj){n}{n}
def AOthAdj_Calculation():{n}{t}if IAFS() == 3:{n}{t}{t}return get_currency(IAOTHADJ.TPTot){n}{t}else:{n}{t}{t}return get_currency(IAOTHADJ.TPTot) + get_currency(IAOTHADJ.SPTot){n}{n}
def AOtherInc_Calculation():{n}{t}if IAFS() == 3:{n}{t}{t}return get_currency(IAWOTHINC.TPTot){n}{t}else:{n}{t}{t}return get_currency(IAWOTHINC.TPTot) + get_currency(IAWOTHINC.SPTot){n}{n}
def AOthGain_Calculation():{n}{t}if IAFS() == 3:{n}{t}{t}return get_currency(USWRec.TOthGain){n}{t}else:{n}{t}{t}return get_currency(USWRec.TotOthGain){n}{n}
def AOthIACr_Calculation():{n}{t}return get_currency(IA148.TotNonRefCr){n}{n}
def AOthRefCr_Calculation():{n}{t}return get_currency(IA148.TotRefCr){n}{n}
def AOutState_Calculation():{n}{t}return get_currency(IA130.TPCredit){n}{n}
def APenalty_Calculation():{n}{t}if IAFS() == 3:{n}{t}{t}return get_currency(USWRec.TEarlyPen){n}{t}else:{n}{t}{t}return get_currency(USWRec.TotEarlyPen){n}{n}
def APenExcl_Calculation():{n}{t}if IAFS() == 3:{n}{t}{t}return get_currency(IAWPENEXC.TPPenExc){n}{t}else:{n}{t}{t}return get_currency(IAWPENEXC.TPPenExc) + get_currency(IAWPENEXC.SPPenExc){n}{n}
def APensions_Calculation():{n}{t}if IAFS() == 3:{n}{t}{t}return get_currency(IAWPENEXC.TPPensions){n}{t}else:{n}{t}{t}return get_currency(IAWPENEXC.TPPensions) + get_currency(IAWPENEXC.SPPensions){n}{n}
def APrior_Calculation():{n}{t}if IAFS() == 3:{n}{t}{t}return get_currency(IAADDFEDTAX.TPTotal){n}{t}else:{n}{t}{t}return get_currency(IAADDFEDTAX.TPTotal) + get_currency(IAADDFEDTAX.SPTotal){n}{n}
def ARefund_Calculation():{n}{t}if IAFS() == 3:{n}{t}{t}return get_currency(IAFEDREF.TPST){n}{t}else:{n}{t}{t}return get_currency(IAFEDREF.SPST) + get_currency(IAFEDREF.TPST){n}{n}
def ARegTax_Calculation():{n}{t}Mid = Currency(){n}{n}{t}MidInt = Long(){n}{n}{t}TotTaxInc = Currency(){n}{t}# updated for 2018{n}{t}TotTaxInc = get_currency(IAF1040.ATaxInc){n}{t}if TotTaxInc > Decimal("95650"):{n}{t}{t}Mid = TotTaxInc{n}{t}elif TotTaxInc > Decimal("150"):{n}{t}{t}MidInt = CLng(( TotTaxInc - Decimal("1") )  / Decimal("50")){n}{t}{t}Mid = ( CCur(MidInt) * Decimal("50") )  + Decimal("25"){n}{t}else:{n}{t}{t}Mid = Decimal("0"){n}{t}return Tax(Mid){n}{n}
def ARents_Calculation():{n}{t}if IAFS() == 3:{n}{t}{t}return get_currency(USWRec.TRental){n}{t}else:{n}{t}{t}return get_currency(USWRec.TotRental){n}{n}
def ARepSSB_Calculation():{n}{t}if IAFS() == 3:{n}{t}{t}return get_currency(IAWKSSB.TPRepSSB){n}{t}else:{n}{t}{t}return get_currency(IAWKSSB.ReportSSB){n}{n}
def ASch_Calculation():{n}{t}return c_dollar(get_float(IAF1040.ABal4) * get_float(IAF1040.SchRate)){n}{n}
def ASelf_Calculation():{n}{t}if IAFS() == 3:{n}{t}{t}return get_currency(IASETAX.TPTotal){n}{t}else:{n}{t}{t}return get_currency(IASETAX.TPTotal) + get_currency(IASETAX.SPTotal){n}{n}
def ATax_Calculation():{n}{t}if get_number(IAWKALTTAX.ProRate) == 1:{n}{t}{t}return get_currency(IAWKALTTAX.ATax){n}{t}else:{n}{t}{t}return get_currency(IAWKALTTAX.Lesser){n}{n}
def ATaxB4Cont_Calculation():{n}{t}return get_currency(IAF1040.ABal4) + get_currency(IAF1040.ASch){n}{n}
def ATaxInc_Calculation():{n}{t}return max_value(0, get_currency(IAF1040.ABal36) - get_currency(IAF1040.ADedBox)){n}{n}
def ATaxWith_Calculation():{n}{t}TotWH = Currency(){n}{t}if get_bool(USWResidency.F1040NR) == True:{n}{t}{t}TotWH = get_currency(USF1040NR.WHW2) + get_currency(USF1040NR.WH8805) + get_currency(USF1040NR.WH8288A) + get_currency(USF1040NR.WH1042S){n}{t}else:{n}{t}{t}TotWH = get_currency(USF1040.WH) + Round(get_currency(USDW2AS.ASWH, FieldCopies(USDW2AS.Taxpayer))) + Round(get_currency(USDW2VI.VIWH, FieldCopies(USDW2VI.Taxpayer))){n}{t}if IAFS() == 3:{n}{t}{t}return max_value(0, TotWH - get_currency(IAF1040.BTaxWith)){n}{t}else:{n}{t}{t}return TotWH{n}{n}
def ATot67_Calculation():{n}{t}return get_currency(IAF1040.AFuel) + get_currency(IAF1040.AChild) + get_currency(IAF1040.AIEIC) + get_currency(IAF1040.AOthRefCr) + get_currency(IAF1040.AIATaxWith) + get_currency(IAF1040.AEst){n}{n}
def ATotAdj_Calculation():{n}{t}return get_currency(IAF1040.AKeogh) + get_currency(IAF1040.ABusIncL) + get_currency(IAF1040.AHealth) + get_currency(IAF1040.APenalty) + get_currency(IAF1040.AAlimonyP) + get_currency(IAF1040.APenExcl) + get_currency(IAF1040.AMove) + get_currency(IAF1040.AGainDed) + get_currency(IAF1040.AOthAdj){n}{n}
def ATotIATax_Calculation():{n}{t}return get_currency(IAF1040.AAltTax) + get_currency(IAF1040.ALump) + get_currency(IAF1040.AIAMin){n}{n}
def ATotTax_Calculation():{n}{t}return get_currency(IAF1040.ANet) + get_currency(IAF1040.AFedTax){n}{n}
def ATuit_Calculation():{n}{t}if IAFS() == 3:{n}{t}{t}return get_currency(IATUITION.TTuit){n}{t}else:{n}{t}{t}return get_currency(IATUITION.TotCr){n}{n}
def AUnemp_Calculation():{n}{t}if IAFS() == 3:{n}{t}{t}return max_value(0, get_currency(USWRec.TUnem) - Round(get_currency(USWUnempl.RRBSub, FieldCopies(USWUnempl.Taxpayer)))){n}{t}else:{n}{t}{t}return max_value(0, get_currency(USWRec.TotUnem) - Round(get_currency(USWUnempl.RRBSub))){n}{n}
def AVolFireCr_Calculation():{n}{t}if IAFS() == 3:{n}{t}{t}return get_currency(IAFIRECR.TPTotCr){n}{t}else:{n}{t}{t}return get_currency(IAFIRECR.TPTotCr) + get_currency(IAFIRECR.SPTotCr){n}{n}
def AWages_Calculation():{n}{t}if IAFS() == 3:{n}{t}{t}return get_currency(USWRec.TWages){n}{t}else:{n}{t}{t}return get_currency(USWRec.TotWages){n}{n}
def BAlimony_Calculation():{n}{t}if IAFS() == 3:{n}{t}{t}return get_currency(USWRec.SAlimony){n}{t}else:{n}{t}{t}return 0{n}{n}
def BAlimonyP_Calculation():{n}{t}if IAFS() == 3:{n}{t}{t}return get_currency(USWRec.SAlimonyAdj){n}{t}else:{n}{t}{t}return 0{n}{n}
def BAltTax_Calculation():{n}{t}if IAFS() == 3:{n}{t}{t}if ( get_currency(IAWKALTTAX.Mult) < get_currency(IAWKALTTAX.Tables) )  and get_bool(IAWKALTTAX.Qualify) == True:{n}{t}{t}{t}return get_currency(IAF1040.BTax){n}{t}{t}else:{n}{t}{t}{t}return get_currency(IAF1040.BRegTax){n}{t}else:{n}{t}{t}return 0{n}{n}
def BApply99_Calculation():{n}{t}return min_value(get_currency(IAF1040.OVerPaid), get_currency(IAESTIMATES.TotApplied, FieldCopies(IAESTIMATES.Spouse))){n}{n}
def BBal1_Calculation():{n}{t}return max_value(0, get_currency(IAF1040.BTotIATax) - get_currency(IAF1040.BCredits)){n}{n}
def BBal2_Calculation():{n}{t}return max_value(0, get_currency(IAF1040.BBal1) - get_currency(IAF1040.BCrNon)){n}{n}
def BBal4_Calculation():{n}{t}return max_value(0, get_currency(IAF1040.BBal3) - get_currency(IAF1040.BOthIACr)){n}{n}
def BBal36_Calculation():{n}{t}return get_currency(IAF1040.BBalance){n}{n}
def BBal3_Calculation():{n}{t}return max_value(0, get_currency(IAF1040.BBal2) - get_currency(IAF1040.BOutState)){n}{n}
def BBalance_Calculation():{n}{t}return get_currency(IAF1040.BTotTax) - get_currency(IAF1040.BFedDed){n}{n}
def BBusInc_Calculation():{n}{t}if IAFS() == 3:{n}{t}{t}return get_currency(USWRec.SBusiness){n}{t}else:{n}{t}{t}return 0{n}{n}
def BBusIncL_Calculation():{n}{t}if IAFS() == 3:{n}{t}{t}return get_currency(USWRec.SHalfSe){n}{t}else:{n}{t}{t}return 0{n}{n}
def BCapGain_Calculation():{n}{t}if IAFS() == 3:{n}{t}{t}if get_currency(USWDRec.CapGain) < Decimal("0"):{n}{t}{t}{t}return get_currency(IAREQUIRED.SLimLoss){n}{t}{t}else:{n}{t}{t}{t}return get_currency(USWDRec.SCapGain){n}{t}else:{n}{t}{t}return 0{n}{n}
def BChild_Calculation():{n}{t}if IAFS() == 3:{n}{t}{t}if get_bool(IAF1040.ChildCareCk) == True:{n}{t}{t}{t}return get_currency(IACHILDCREDIT.SChild){n}{t}{t}elif get_bool(IAF1040.EarlyChildCk) == True:{n}{t}{t}{t}return get_currency(IACHILDCREDIT.SEarly){n}{t}{t}else:{n}{t}{t}{t}return 0{n}{t}else:{n}{t}{t}return 0{n}{n}
def BCredits_Calculation():{n}{t}return get_currency(IAF1040.BExemCr) + get_currency(IAF1040.BTuit) + get_currency(IAF1040.BVolFireCr){n}{n}
def BCrNon_Calculation():{n}{t}if IAFS() == 3:{n}{t}{t}if get_bool(IAF126.SpNonRes) == True or get_bool(IAF126.SpPYRes) == True:{n}{t}{t}{t}return get_currency(IAF126.BCredit){n}{t}{t}else:{n}{t}{t}{t}return 0{n}{t}else:{n}{t}{t}return 0{n}{n}
def BDedBox_Calculation():{n}{t}Deduction = Currency(){n}{t}# updated for 2018{n}{t}if IAFS() == 3:{n}{t}{t}if get_bool(IAF1040.ItemCheck) == True:{n}{t}{t}{t}Deduction = get_currency(IASCHA.SpPro){n}{t}{t}else:{n}{t}{t}{t}Deduction = min_value(Decimal("2030"), get_currency(IAF1040.BBal36)){n}{t}else:{n}{t}{t}Deduction = 0{n}{t}return max_value(0, Deduction){n}{n}
def BDividend_Calculation():{n}{t}if IAFS() == 3:{n}{t}{t}return get_currency(IAREQUIRED.TotSPDiv){n}{t}else:{n}{t}{t}return 0{n}{n}
def BEst_Calculation():{n}{t}if IAFS() == 3:{n}{t}{t}return get_currency(IASTATEEST.SPIAEst){n}{t}else:{n}{t}{t}return 0{n}{n}
def BEstTax_Calculation():{n}{t}if IAFS() == 3:{n}{t}{t}return get_currency(IAFEDEST.SPTotEst){n}{t}else:{n}{t}{t}return 0{n}{n}
def BExemCr_Calculation():{n}{t}return get_currency(IAF1040.ExempB){n}{n}
def BFarm_Calculation():{n}{t}if IAFS() == 3:{n}{t}{t}return get_currency(USWRec.SFarm){n}{t}else:{n}{t}{t}return 0{n}{n}
def BFedDed_Calculation():{n}{t}return get_currency(IAF1040.BTaxWith) + get_currency(IAF1040.BEstTax) + get_currency(IAF1040.BPrior){n}{n}
def BFedTax_Calculation():{n}{t}return get_currency(IAF1040.BRefund) + get_currency(IAF1040.BSelf){n}{n}
def BFuel_Calculation():{n}{t}if IAFS() == 3:{n}{t}{t}return get_currency(IASch4136.TotCr, FieldCopies(IASch4136.Spouse)){n}{t}else:{n}{t}{t}return 0{n}{n}
def BGamble_Calculation():{n}{t}if IAFS() == 3 and get_bool(USWResidency.F1040NR) == False:{n}{t}{t}return get_currency(USWOthInc.SPOth3){n}{t}else:{n}{t}{t}return 0{n}{n}
def BGross_Calculation():{n}{t}return get_currency(IAF1040.BWages) + get_currency(IAF1040.BInterest) + get_currency(IAF1040.BDividend) + get_currency(IAF1040.BAlimony) + get_currency(IAF1040.BBusInc) + get_currency(IAF1040.BCapGain) + get_currency(IAF1040.BOthGain) + get_currency(IAF1040.BIRA) + get_currency(IAF1040.BPensions) + get_currency(IAF1040.BRents) + get_currency(IAF1040.BFarm) + get_currency(IAF1040.BUnemp) + get_currency(IAF1040.BGamble) + get_currency(IAF1040.BOtherInc){n}{n}
def BHealth_Calculation():{n}{t}if IAFS() == 3:{n}{t}{t}return get_currency(IAWHEALTH.SPTotal){n}{t}else:{n}{t}{t}return 0{n}{n}
def BIAMin_Calculation():{n}{t}return get_currency(IA6251SP.TotAMT){n}{n}
def BIATaxWith_Calculation():{n}{t}if IAFS() == 3:{n}{t}{t}return get_currency(IAREQUIRED.SIAW2WH) + get_currency(IAREQUIRED.SPW2GWH) + get_currency(IAREQUIRED.SPCapGainWH) + get_currency(IAREQUIRED.SPDivWH) + get_currency(IAREQUIRED.SPUnemWH) + get_currency(IAREQUIRED.SPIntWH) + get_currency(IAREQUIRED.SPKWH) + get_currency(IAREQUIRED.SPMiscWH) + get_currency(IAREQUIRED.SPOIDWH) + get_currency(IAREQUIRED.S1099RWH) + get_currency(IAREQUIRED.SPOthIncWH){n}{t}else:{n}{t}{t}return 0{n}{n}
def BIEIC_Calculation():{n}{t}if IAFS() == 3:{n}{t}{t}return get_currency(IAREQUIRED.SIaEIC){n}{t}else:{n}{t}{t}return 0{n}{n}
def BInterest_Calculation():{n}{t}if IAFS() == 3:{n}{t}{t}return get_currency(IAREQUIRED.TotSPInt){n}{t}else:{n}{t}{t}return 0{n}{n}
def BIRA_Calculation():{n}{t}if IAFS() == 3:{n}{t}{t}return get_currency(IAWPENEXC.SPIRA){n}{t}else:{n}{t}{t}return 0{n}{n}
def BKeogh_Calculation():{n}{t}if IAFS() == 3:{n}{t}{t}return get_currency(USWRec.SKeough) + get_currency(IAREQUIRED.SIRA){n}{t}else:{n}{t}{t}return 0{n}{n}
def BLump_Calculation():{n}{t}if IAFS() == 3:{n}{t}{t}return c_dollar(get_float(USF4972SPOUSE.Tax) * 0.25){n}{t}else:{n}{t}{t}return 0{n}{n}
def BMove_Calculation():{n}{t}if IAFS() == 3:{n}{t}{t}return get_currency(IAREQUIRED.SMove){n}{t}else:{n}{t}{t}return 0{n}{n}
def BNet_Calculation():{n}{t}return get_currency(IAF1040.BGross) - get_currency(IAF1040.BTotAdj){n}{n}
def BOthAdj_Calculation():{n}{t}if IAFS() == 3:{n}{t}{t}return get_currency(IAOTHADJ.SPTot){n}{t}else:{n}{t}{t}return 0{n}{n}
def BOtherInc_Calculation():{n}{t}if IAFS() == 3:{n}{t}{t}return get_currency(IAWOTHINC.SPTot){n}{t}else:{n}{t}{t}return 0{n}{n}
def BOthGain_Calculation():{n}{t}if IAFS() == 3:{n}{t}{t}return get_currency(USWRec.SOthGain){n}{t}else:{n}{t}{t}return 0{n}{n}
def BOthIACr_Calculation():{n}{t}return get_currency(IA148SP.TotNonRefCr){n}{n}
def BOthRefCr_Calculation():{n}{t}return get_currency(IA148SP.TotRefCr){n}{n}
def BOutState_Calculation():{n}{t}if IAFS() == 3:{n}{t}{t}return get_currency(IA130.SPCredit){n}{t}else:{n}{t}{t}return 0{n}{n}
def BPenalty_Calculation():{n}{t}if IAFS() == 3:{n}{t}{t}return get_currency(USWRec.SEarlyPen){n}{t}else:{n}{t}{t}return 0{n}{n}
def BPenExcl_Calculation():{n}{t}if IAFS() == 3:{n}{t}{t}return get_currency(IAWPENEXC.SPPenExc){n}{t}else:{n}{t}{t}return 0{n}{n}
def BPensions_Calculation():{n}{t}if IAFS() == 3:{n}{t}{t}return get_currency(IAWPENEXC.SPPensions){n}{t}else:{n}{t}{t}return 0{n}{n}
def BPrior_Calculation():{n}{t}if IAFS() == 3:{n}{t}{t}return get_currency(IAADDFEDTAX.SPTotal){n}{t}else:{n}{t}{t}return 0{n}{n}
def BRefund_Calculation():{n}{t}if IAFS() == 3:{n}{t}{t}return get_currency(IAFEDREF.SPST){n}{t}else:{n}{t}{t}return 0{n}{n}
def BRegTax_Calculation():{n}{t}Mid = Currency(){n}{n}{t}MidInt = Long(){n}{n}{t}TotTaxInc = Currency(){n}{t}# updated for 2018{n}{t}if get_bool(IAF1040.MFS) == True:{n}{t}{t}TotTaxInc = get_currency(IAF1040.SpTaxInc){n}{t}else:{n}{t}{t}TotTaxInc = get_currency(IAF1040.BTaxInc){n}{t}if TotTaxInc > Decimal("95650"):{n}{t}{t}Mid = TotTaxInc{n}{t}elif TotTaxInc > Decimal("150"):{n}{t}{t}MidInt = CLng(( TotTaxInc - Decimal("1") )  / Decimal("50")){n}{t}{t}Mid = ( CCur(MidInt) * Decimal("50") )  + Decimal("25"){n}{t}else:{n}{t}{t}Mid = Decimal("0"){n}{t}return Tax(Mid){n}{n}
def BRents_Calculation():{n}{t}if IAFS() == 3:{n}{t}{t}return get_currency(USWRec.SRental){n}{t}else:{n}{t}{t}return 0{n}{n}
def BRepSSB_Calculation():{n}{t}if IAFS() == 3:{n}{t}{t}return get_currency(IAWKSSB.SPRepSSB){n}{t}else:{n}{t}{t}return 0{n}{n}
def BSch_Calculation():{n}{t}return c_dollar(get_float(IAF1040.BBal4) * get_float(IAF1040.SchRate)){n}{n}
def BSelf_Calculation():{n}{t}if IAFS() == 3:{n}{t}{t}return get_currency(IASETAX.SPTotal){n}{t}else:{n}{t}{t}return 0{n}{n}
def BTax_Calculation():{n}{t}if IAFS() == 3:{n}{t}{t}return get_currency(IAWKALTTAX.BTax){n}{t}else:{n}{t}{t}return 0{n}{n}
def BTaxB4Cont_Calculation():{n}{t}return get_currency(IAF1040.BBal4) + get_currency(IAF1040.BSch){n}{n}
def BTaxInc_Calculation():{n}{t}return max_value(0, get_currency(IAF1040.BBal36) - get_currency(IAF1040.BDedBox)){n}{n}
def BTaxWith_Calculation():{n}{t}JT = Currency(){n}{n}{t}SPW2 = Currency(){n}{n}{t}SP = Currency(){n}{t}JT = c_dollar(CDbl(Round(get_currency(USD1099INT.WH, FieldCopies(USD1099INT.Joint))) + Round(get_currency(USD1099K.WH, FieldCopies(USD1099K.Joint))) + Round(get_currency(USD1099OID.WH, FieldCopies(USD1099OID.Joint))) + Round(get_currency(USD1099MISC.WH, FieldCopies(USD1099MISC.Joint))) + Round(get_currency(USD1099DIV.WH, FieldCopies(USD1099DIV.Joint))) + Round(get_currency(USDCapGain.WH2, FieldCopies(USDCapGain.Joint))) + Round(get_currency(USDPartK1.BackupWith, FieldCopies(USDPartK1.Joint))) + Round(get_currency(USDSCorpK1.BackupWith, FieldCopies(USDSCorpK1.Joint))) + Round(get_currency(USDEstK1.BackupWith, FieldCopies(USDEstK1.Joint)))) * 0.5){n}{t}SPW2 = Round(get_currency(USDW2.WH, FieldCopies(USDW2.Spouse))) + Round(get_currency(USDW2AS.ASWH, FieldCopies(USDW2AS.Spouse))) + Round(get_currency(USDW2CM.CNMIWH, FieldCopies(USDW2CM.Spouse))) + Round(get_currency(USDW2GU.GuamWH, FieldCopies(USDW2GU.Spouse))) + Round(get_currency(USDW2VI.VIWH, FieldCopies(USDW2VI.Spouse))){n}{t}SP = Round(get_currency(USD1099INT.WH, FieldCopies(USD1099INT.Spouse))) + Round(get_currency(USD1099K.WH, FieldCopies(USD1099K.Spouse))) + Round(get_currency(USD1099OID.WH, FieldCopies(USD1099OID.Spouse))) + Round(get_currency(USD1099DIV.WH, FieldCopies(USD1099DIV.Spouse))) + Round(get_currency(USD1099R.WH, FieldCopies(USD1099R.Spouse))) + Round(get_currency(USD1099MISC.WH, FieldCopies(USD1099MISC.Spouse))) + Round(get_currency(USWUnempl.TPFedWH, FieldCopies(USWUnempl.Spouse))) + Round(get_currency(USDW2G.WH, FieldCopies(USDW2G.Spouse))) + Round(get_currency(USDCapGain.WH2, FieldCopies(USDCapGain.Spouse))) + Round(get_currency(USDRRB1099R.WH, FieldCopies(USDRRB1099R.Spouse))) + Round(get_currency(USDPartK1.BackupWith, FieldCopies(USDPartK1.Spouse))) + Round(get_currency(USDSCorpK1.BackupWith, FieldCopies(USDSCorpK1.Spouse))) + Round(get_currency(USDEstK1.BackupWith, FieldCopies(USDEstK1.Spouse))){n}{t}if IAFS() == 3:{n}{t}{t}return JT + SPW2 + SP + get_currency(USWSSBDetail.SPFedWH) + get_currency(USWRec.SPTotAddMedTaxWH){n}{t}else:{n}{t}{t}return 0{n}{n}
def BTot67_Calculation():{n}{t}return get_currency(IAF1040.BFuel) + get_currency(IAF1040.BChild) + get_currency(IAF1040.BIEIC) + get_currency(IAF1040.BOthRefCr) + get_currency(IAF1040.BIATaxWith) + get_currency(IAF1040.BEst){n}{n}
def BTotAdj_Calculation():{n}{t}return get_currency(IAF1040.BKeogh) + get_currency(IAF1040.BBusIncL) + get_currency(IAF1040.BHealth) + get_currency(IAF1040.BPenalty) + get_currency(IAF1040.BAlimonyP) + get_currency(IAF1040.BPenExcl) + get_currency(IAF1040.BMove) + get_currency(IAF1040.BGainDed) + get_currency(IAF1040.BOthAdj){n}{n}
def BTotIATax_Calculation():{n}{t}return get_currency(IAF1040.BAltTax) + get_currency(IAF1040.BLump) + get_currency(IAF1040.BIAMin){n}{n}
def BTotTax_Calculation():{n}{t}return get_currency(IAF1040.BNet) + get_currency(IAF1040.BFedTax){n}{n}
def BTuit_Calculation():{n}{t}if IAFS() == 3:{n}{t}{t}return get_currency(IATUITION.STuit){n}{t}else:{n}{t}{t}return 0{n}{n}
def BUnemp_Calculation():{n}{t}if IAFS() == 3:{n}{t}{t}return max_value(0, get_currency(USWRec.SUnem) - Round(get_currency(USWUnempl.RRBSub, FieldCopies(USWUnempl.Spouse)))){n}{t}else:{n}{t}{t}return 0{n}{n}
def BVolFireCr_Calculation():{n}{t}if IAFS() == 3:{n}{t}{t}return get_currency(IAFIRECR.SPTotCr){n}{t}else:{n}{t}{t}return 0{n}{n}
def BWages_Calculation():{n}{t}if IAFS() == 3:{n}{t}{t}return get_currency(USWRec.SWages){n}{t}else:{n}{t}{t}return 0{n}{n}
def Checking_Calculation():{n}{t}if get_bool(IAEFWKSHT.PrepBPTrans) == True:{n}{t}{t}return 0{n}{t}elif get_bool(IAEFWKSHT.DirDeposit) == True and get_bool(IAEFWKSHT.Yes) == False and get_currency(IAEFWKSHT.Refund) > 0:{n}{t}{t}return get_bool(IAEFWKSHT.DirDepChecking){n}{t}else:{n}{t}{t}return 0{n}{n}
def ChildCareCk_Calculation():{n}{t}if get_currency(IACHILDCREDIT.TotChDepCr) != 0 and get_currency(IACHILDCREDIT.TotChDepCr) >= get_currency(IACHILDCREDIT.TotCr):{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def CityComb_Calculation():{n}{t}if trim(get_string(USWBasicInfo.ForCountry)) != '':{n}{t}{t}return get_string(USWBasicInfo.City) + ', ' + get_string(USWBasicInfo.ForeignCtry) + ' ' + get_string(USWBasicInfo.ForeignPC){n}{t}else:{n}{t}{t}return get_string(USWBasicInfo.CityComb){n}{n}
def CombMFS_Calculation():{n}{t}if FedFS() == 2 and  ( get_currency(USWRec.TAGI) > Decimal("2632") )  and  ( get_currency(USWRec.SAGI) > Decimal("2632") ) :{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def CountyNo_Calculation():{n}{t}return get_string(USZIA1040.IAPYCounty){n}{n}
def DateDuePaid_Calculation():{n}{t}return MakeDate(4, 30, YearNumber + 1){n}{n}
def DC1_Calculation():{n}{t}if IAFS() == 3:{n}{t}{t}return max_value(0, get_number(USWAddDep.GrandTotDeps) - get_number(IAF1040.DC2)){n}{t}else:{n}{t}{t}return get_number(USWAddDep.GrandTotDeps){n}{n}
def DC2_Calculation():{n}{t}if IAFS() == 3:{n}{t}{t}return CLng(Round(get_number(USWAddDep.GrandTotDeps) * get_float(IAREQUIRED.BProRate))){n}{t}else:{n}{t}{t}return 0{n}{n}
def DepN_Calculation():{n}{t}if get_bool(IAF1040.Single) == True:{n}{t}{t}if get_bool(USWBasicInfo.Dopr) == True:{n}{t}{t}{t}return 0{n}{t}{t}else:{n}{t}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def DepNames_Calculation():{n}{t}if get_number(IAF1040.DC1) > 0 or get_number(IAF1040.DC2) > 0:{n}{t}{t}if get_number(IAREQUIRED.DepLength) > 23:{n}{t}{t}{t}return 'See Attached'{n}{t}{t}else:{n}{t}{t}{t}return get_string(IAREQUIRED.DepNames){n}{t}else:{n}{t}{t}return ''{n}{n}
def DepY_Calculation():{n}{t}if get_bool(IAF1040.Single) == True:{n}{t}{t}if get_bool(USWBasicInfo.Dopr) == True:{n}{t}{t}{t}return 1{n}{t}{t}else:{n}{t}{t}{t}return 0{n}{t}else:{n}{t}{t}return 0{n}{n}
def Desc_Calculation():{n}{t}return get_string(IAREQUIRED.CombNames){n}{n}
def EarlyChildCk_Calculation():{n}{t}if get_bool(IAF1040.ChildCareCk) == True:{n}{t}{t}return 0{n}{t}elif get_currency(IACHILDCREDIT.TotCr) != 0:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def Email_Calculation():{n}{t}return get_string(USWBasicInfo.email){n}{n}
def ExempA_Calculation():{n}{t}return get_currency(IAF1040.TotPCa) + get_currency(IAF1040.TotPCb) + get_currency(IAF1040.TotDC1){n}{n}
def ExempB_Calculation():{n}{t}return get_currency(IAF1040.TotPC2a) + get_currency(IAF1040.TotPC2b) + get_currency(IAF1040.TotDC2){n}{n}
def Exist_Calculation():{n}{t}return 1{n}{n}
def FirmID_Calculation():{n}{t}return get_string(USWBasicInfo.PrepEIN){n}{n}
def FirstName_Calculation():{n}{t}return get_string(USWBasicInfo.TPFnI){n}{n}
def HOH_Calculation():{n}{t}if FedFS() == 4:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def HOHDep_Calculation():{n}{t}return get_string(USWBasicInfo.L3Name){n}{n}
def HOHSSN_Calculation():{n}{t}if get_bool(USF1040.HOH) == True:{n}{t}{t}return get_string(USF1040.L3SSN){n}{t}else:{n}{t}{t}return ''{n}{n}
def ItemCheck_Calculation():{n}{t}# updated for 2018{n}{t}if get_bool(IAF1040.MFSItm) == True and IAFS() == 4:{n}{t}{t}return 1{n}{t}elif IAFS() == 3:{n}{t}{t}if get_currency(IASCHA.Item) > Decimal("4060"):{n}{t}{t}{t}return 1{n}{t}{t}else:{n}{t}{t}{t}return 0{n}{t}elif IAFS() == 2 or IAFS() == 5 or IAFS() == 6:{n}{t}{t}if get_currency(IASCHA.Item) > Decimal("5000"):{n}{t}{t}{t}return 1{n}{t}{t}else:{n}{t}{t}{t}return 0{n}{t}elif get_currency(IASCHA.Item) > Decimal("2030"):{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def LastName_Calculation():{n}{t}return get_string(USWBasicInfo.LastName){n}{n}
def LowInc_Calculation():{n}{t}if get_bool(IAREQUIRED.LowInc) == True:{n}{t}{t}return 'LOW INCOME EXEMPTION'{n}{t}else:{n}{t}{t}return ''{n}{n}
def MFJ_Calculation():{n}{t}if FedFS() == 2:{n}{t}{t}if ( get_currency(USWRec.TAGI) < Decimal("2633") )  or  ( get_currency(USWRec.SAGI) < Decimal("2633") ) :{n}{t}{t}{t}return 1{n}{t}{t}else:{n}{t}{t}{t}return 0{n}{t}else:{n}{t}{t}return 0{n}{n}
def MFS_Calculation():{n}{t}if FedFS() == 3:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def MFSItm_Calculation():{n}{t}if get_bool(USF1040.MfsItm) == True and IAFS() == 4:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def MFSName_Calculation():{n}{t}if get_bool(IAF1040.MFS) == True:{n}{t}{t}if trim(get_string(USWBasicInfo.L2Name)) != '':{n}{t}{t}{t}return get_string(USWBasicInfo.L2Name){n}{t}{t}else:{n}{t}{t}{t}return get_string(USWBasicInfo.SPFnI) + ' ' + get_string(USWBasicInfo.SpouseLast){n}{t}else:{n}{t}{t}return ''{n}{n}
def MFSSSN_Calculation():{n}{t}if get_bool(IAF1040.MFS) == True:{n}{t}{t}return get_string(USWBasicInfo.SpouseSSN){n}{t}else:{n}{t}{t}return ''{n}{n}
def Over65_Calculation():{n}{t}SixtyFive = Long(){n}{n}{t}SPSixtyFive = Long(){n}{t}if get_number(USWBasicInfo.TPAgeRec) >= 65:{n}{t}{t}SixtyFive = 1{n}{t}else:{n}{t}{t}SixtyFive = 0{n}{t}if get_number(USWBasicInfo.SPAgeRec) >= 65 and get_bool(IAREQUIRED.AskSpouse) == True:{n}{t}{t}SPSixtyFive = 1{n}{t}else:{n}{t}{t}SPSixtyFive = 0{n}{t}if SixtyFive + SPSixtyFive > 0:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def OVerPaid_Calculation():{n}{t}if get_bool(IA1040X.EFAmend) == True:{n}{t}{t}return max_value(0, get_currency(IAF1040.TotCredit) - get_currency(IA1040X.PrevOP) - get_currency(IAF1040.TotTaxCont)){n}{t}else:{n}{t}{t}return max_value(0, get_currency(IAF1040.TotCredit) - get_currency(IAF1040.TotTaxCont)){n}{n}
def Owe_Calculation():{n}{t}if get_bool(IA1040X.EFAmend) == True:{n}{t}{t}if ( get_currency(IAF1040.Penalty) + get_currency(IA1040X.PrevOP) + get_currency(IAF1040.TotTaxCont) )  - get_currency(IAF1040.TotCredit) > 0:{n}{t}{t}{t}return max_value(0, get_currency(IAF1040.TotTaxCont) + get_currency(IA1040X.PrevOP) - get_currency(IAF1040.TotCredit)){n}{t}{t}else:{n}{t}{t}{t}return 0{n}{t}else:{n}{t}{t}if ( get_currency(IAF1040.Penalty) + get_currency(IAF1040.TotTaxCont) )  - get_currency(IAF1040.TotCredit) > 0:{n}{t}{t}{t}return max_value(0, get_currency(IAF1040.TotTaxCont) - get_currency(IAF1040.TotCredit)){n}{t}{t}else:{n}{t}{t}{t}return 0{n}{n}
def PC1a_Calculation():{n}{t}if IAFS() == 2:{n}{t}{t}return 2{n}{t}elif IAFS() == 5:{n}{t}{t}return 2{n}{t}else:{n}{t}{t}return 1{n}{n}
def PC1b_Calculation():{n}{t}SixtyFive = Long(){n}{n}{t}Blind = Long(){n}{t}if IAFS() == 2:{n}{t}{t}SixtyFive = get_bool(USWBasicInfo.SixtyFive) + get_bool(USWBasicInfo.Spouse65){n}{t}{t}Blind = get_bool(USWBasicInfo.Blind) + get_bool(USWBasicInfo.SpBlind){n}{t}else:{n}{t}{t}SixtyFive = get_bool(USWBasicInfo.SixtyFive){n}{t}{t}Blind = get_bool(USWBasicInfo.Blind){n}{t}return Blind + SixtyFive{n}{n}
def PC2a_Calculation():{n}{t}if IAFS() == 3:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def PC2b_Calculation():{n}{t}if IAFS() == 3:{n}{t}{t}return get_bool(USWBasicInfo.Spouse65) + get_bool(USWBasicInfo.SpBlind){n}{t}else:{n}{t}{t}return 0{n}{n}
def Penalty_Calculation():{n}{t}if get_bool(IA1040X.EFAmend) == True:{n}{t}{t}return 0{n}{t}else:{n}{t}{t}return get_currency(IA2210.Penalty) + get_currency(IA2210SP.Penalty){n}{n}
def PenInt_Calculation():{n}{t}if get_currency(IAF1040.Owe) > 0:{n}{t}{t}return get_currency(IAF1040.Pen74) + get_currency(IAF1040.Int74){n}{t}else:{n}{t}{t}return 0{n}{n}
def Phone_Calculation():{n}{t}return get_string(USWBasicInfo.Dayphone){n}{n}
def PrepID_Calculation():{n}{t}return get_string(USWBasicInfo.PrepSSN){n}{n}
def PrepPhone_Calculation():{n}{t}if trim(get_string(USWBasicInfo.PrepPhone)) != '':{n}{t}{t}return get_string(USWBasicInfo.PrepPhone){n}{t}else:{n}{t}{t}return get_string(USWBasicInfo.PrepForPhone){n}{n}
def QualWidow_Calculation():{n}{t}if FedFS() == 5:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def RefBalDue_Calculation():{n}{t}return Round(get_currency(IAF1040.Refund) - get_currency(IAF1040.TotDue)){n}{n}
def Refund_Calculation():{n}{t}return max_value(0, get_currency(IAF1040.OVerPaid) - get_currency(IAF1040.BApply99) - get_currency(IAF1040.AApply99) - get_currency(IAF1040.Penalty)){n}{n}
def Route_Calculation():{n}{t}if get_bool(IAEFWKSHT.PrepBPTrans) == True:{n}{t}{t}return ''{n}{t}elif get_bool(IAEFWKSHT.DirDeposit) == True and get_bool(IAEFWKSHT.Yes) == False and get_currency(IAEFWKSHT.Refund) > 0:{n}{t}{t}return get_string(IAEFWKSHT.DirDepRTN){n}{t}else:{n}{t}{t}return ''{n}{n}
def SaveCheck_Calculation():{n}{t}if get_bool(IAEFWKSHT.PrepBPTrans) == True:{n}{t}{t}return 0{n}{t}elif get_bool(IAEFWKSHT.DirDeposit) == True and get_bool(IAEFWKSHT.Yes) == False and get_currency(IAEFWKSHT.Refund) > 0:{n}{t}{t}return get_bool(IAEFWKSHT.DirDepSavings){n}{t}else:{n}{t}{t}return 0{n}{n}
def SchNo_Calculation():{n}{t}return get_string(USZIA1040.IAPYSchool){n}{n}
def SchRate_Calculation():{n}{t}return SchSurtaxRate(get_number(IAF1040.SchNo)){n}{n}
def Single_Calculation():{n}{t}if FedFS() == 1:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def SPDateDeath_Calculation():{n}{t}if get_bool(IAF1040.SPDeceased) == True:{n}{t}{t}return get_string(USWBasicInfo.SpDeath){n}{t}else:{n}{t}{t}return ''{n}{n}
def SPDeceased_Calculation():{n}{t}if get_bool(USWBasicInfo.SpDeceased) == True and get_bool(IAREQUIRED.AskSpouse) == True:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def SpouseFirst_Calculation():{n}{t}if get_bool(IAF1040.MFJ) == True or get_bool(IAF1040.CombMFS) == True:{n}{t}{t}return get_string(USWBasicInfo.SPFnI){n}{t}else:{n}{t}{t}return ''{n}{n}
def SpouseLast_Calculation():{n}{t}if get_bool(IAF1040.MFJ) == True or get_bool(IAF1040.CombMFS) == True:{n}{t}{t}return get_string(USWBasicInfo.SpouseLast){n}{t}else:{n}{t}{t}return ''{n}{n}
def SpouseSSN_Calculation():{n}{t}if get_bool(IAF1040.MFJ) == True or get_bool(IAF1040.CombMFS) == True:{n}{t}{t}return get_string(USWBasicInfo.SpouseSSN){n}{t}else:{n}{t}{t}return ''{n}{n}
def SSN_Calculation():{n}{t}return get_string(USWBasicInfo.SSN){n}{n}
def StadCheck_Calculation():{n}{t}if get_bool(IAF1040.ItemCheck) == True:{n}{t}{t}return 0{n}{t}else:{n}{t}{t}return 1{n}{n}
def TaxRed_Calculation():{n}{t}if get_bool(IAREQUIRED.LowInc) == True:{n}{t}{t}return ''{n}{t}elif IAFS() != 1 or get_bool(IAF1040.DepY) == True:{n}{t}{t}return ''{n}{t}elif get_currency(IAF1040.ABal1) < get_currency(IAREQUIRED.TentTax):{n}{t}{t}return 'tax reduction'{n}{t}else:{n}{t}{t}return ''{n}{n}
def TotalTax_Calculation():{n}{t}if get_bool(IAREQUIRED.LowInc) == True:{n}{t}{t}return 0{n}{t}else:{n}{t}{t}return get_currency(IAF1040.BTaxB4Cont) + get_currency(IAF1040.ATaxB4Cont){n}{n}
def TotContrib_Calculation():{n}{t}return get_currency(IAF1040.Wild) + get_currency(IAF1040.Fair) + get_currency(IAF1040.FFVet) + get_currency(IAF1040.ChildAbuse){n}{n}
def TotCredit_Calculation():{n}{t}return get_currency(IAF1040.BTot67) + get_currency(IAF1040.ATot67){n}{n}
def TotDC1_Calculation():{n}{t}return c_dollar(get_float(IAF1040.DC1) * 4000){n}{n}
def TotDC2_Calculation():{n}{t}if get_bool(IAF1040.CombMFS) == True:{n}{t}{t}return c_dollar(get_float(IAF1040.DC2) * 4000){n}{t}else:{n}{t}{t}return 0{n}{n}
def TotDue_Calculation():{n}{t}if get_currency(IAF1040.Refund) > 0:{n}{t}{t}return 0{n}{t}elif get_currency(IAF1040.Refund) == 0 and get_currency(IAF1040.OVerPaid) > 0:{n}{t}{t}if get_bool(IA1040X.EFAmend) == True:{n}{t}{t}{t}return max_value(0, ( get_currency(IAF1040.TotTaxCont) + get_currency(IA1040X.PrevOP) + get_currency(IAF1040.Penalty) + get_currency(IAF1040.PenInt) )  - get_currency(IAF1040.TotCredit)){n}{t}{t}else:{n}{t}{t}{t}return max_value(0, ( get_currency(IAF1040.TotTaxCont) + get_currency(IAF1040.Penalty) + get_currency(IAF1040.PenInt) )  - get_currency(IAF1040.TotCredit)){n}{t}else:{n}{t}{t}return get_currency(IAF1040.Owe) + get_currency(IAF1040.Penalty) + get_currency(IAF1040.PenInt){n}{n}
def TotPC2a_Calculation():{n}{t}return c_dollar(get_float(IAF1040.PC2a) * 4000){n}{n}
def TotPC2b_Calculation():{n}{t}return c_dollar(get_float(IAF1040.PC2b) * 2000){n}{n}
def TotPCa_Calculation():{n}{t}return c_dollar(get_float(IAF1040.PC1a) * 4000){n}{n}
def TotPCb_Calculation():{n}{t}return c_dollar(get_float(IAF1040.PC1b) * 2000){n}{n}
def TotTaxCont_Calculation():{n}{t}return get_currency(IAF1040.TotalTax) + get_currency(IAF1040.TotContrib){n}{n}
def TPDateDeath_Calculation():{n}{t}if get_bool(IAF1040.TPDeceased) == True:{n}{t}{t}return get_string(USWBasicInfo.YouDeath){n}{t}else:{n}{t}{t}return ''{n}{n}
def TPDeceased_Calculation():{n}{t}if get_bool(USWBasicInfo.TpDeceased) == True:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def UsedAI_Calculation():{n}{t}if get_bool(IA2210AN.Print) == True:{n}{t}{t}return 1{n}{t}elif get_bool(IA2210ANSP.Print) == True:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}def AAlimony_Calculation():{n}{t}if ( IAFS() == 2 and get_bool(IAF126.SpPYRes) == True )  or get_bool(IAF126.TpPYRes) == True:{n}{t}{t}return get_currency(IAF1040.AAlimony){n}{t}else:{n}{t}{t}return 0{n}{n}
def AAllSource_Calculation():{n}{t}if get_bool(IAF126.TpPYNR) == True:{n}{t}{t}return get_currency(IAF1040.ANet){n}{t}else:{n}{t}{t}return 0{n}{n}
def ABusInc_Calculation():{n}{t}#made change based on user story 445128 to calculate when a nonresident, for past 10 years lines 1-14 only calced when a part-year res. Based on Iowa 126 instructions decided to calc lines 5, 7, 10, 11, 12, 13, and 14 when a NR/PY to be conservative.{n}{t}if ( IAFS() == 2 and get_bool(IAF126.SpRes) == False )  or get_bool(IAF126.TpRes) == False:{n}{t}{t}return get_currency(IAF1040.ABusInc){n}{t}else:{n}{t}{t}return 0{n}{n}
def ACapGain_Calculation():{n}{t}#decided to change this to be same as line 5, 7, 10, 11, 12, 13. Leaving lines 1-4 and 8 and 9 as they have specific instructions.{n}{t}if ( IAFS() == 2 and get_bool(IAF126.SpRes) == False )  or get_bool(IAF126.TpRes) == False:{n}{t}{t}return get_currency(IAF1040.ACapGain){n}{t}else:{n}{t}{t}return 0{n}{n}
def ACredit_Calculation():{n}{t}return c_dollar(get_float(IAF126.ANetTax) * get_float(IAF126.ACrPer)){n}{n}
def ACrPer_Calculation():{n}{t}if get_bool(IAF126.TpPYNR) == True:{n}{t}{t}return max_value(0, 1 - get_float(IAF126.AIAPer)){n}{t}else:{n}{t}{t}return 0{n}{n}
def ADividend_Calculation():{n}{t}if ( IAFS() == 2 and get_bool(IAF126.SpPYRes) == True )  or get_bool(IAF126.TpPYRes) == True:{n}{t}{t}return get_currency(IAF1040.ADividend){n}{t}else:{n}{t}{t}return 0{n}{n}
def AFarm_Calculation():{n}{t}#made change based on user story 445128 to calculate when a nonresident, for past 10 years lines 1-14 only calced when a part-year res. Based on Iowa 126 instructions decided to calc lines 5, 7, 10, 11, 12, 13, and 14 when a NR/PY to be conservative.{n}{t}if ( IAFS() == 2 and get_bool(IAF126.SpRes) == False )  or get_bool(IAF126.TpRes) == False:{n}{t}{t}return get_currency(IAF1040.AFarm){n}{t}else:{n}{t}{t}return 0{n}{n}
def AGamble_Calculation():{n}{t}#made change based on user story 445128 to calculate when a nonresident, for past 10 years lines 1-14 only calced when a part-year res. Based on Iowa 126 instructions decided to calc lines 5, 7, 10, 11, 12, 13, and 14 when a NR/PY to be conservative.{n}{t}if ( IAFS() == 2 and get_bool(IAF126.SpRes) == False )  or get_bool(IAF126.TpRes) == False:{n}{t}{t}return get_currency(IAF1040.AGamble){n}{t}else:{n}{t}{t}return 0{n}{n}
def AIATax_Calculation():{n}{t}if get_bool(IAF126.TpPYNR) == True:{n}{t}{t}return get_currency(IAF1040.AAltTax){n}{t}else:{n}{t}{t}return 0{n}{n}
def AInterest_Calculation():{n}{t}if ( IAFS() == 2 and get_bool(IAF126.SpPYRes) == True )  or get_bool(IAF126.TpPYRes) == True:{n}{t}{t}return get_currency(IAF1040.AInterest){n}{t}else:{n}{t}{t}return 0{n}{n}
def AIRA_Calculation():{n}{t}if IAFS() == 3:{n}{t}{t}return get_currency(IAWPENEXC.NRTPIRA){n}{t}else:{n}{t}{t}return get_currency(IAWPENEXC.NRTPIRA) + get_currency(IAWPENEXC.NRSPIRA){n}{n}
def AMove_Calculation():{n}{t}if get_bool(IAF126.TpPYRes) == True:{n}{t}{t}if GetDate(IAF126.TpDateIn) > datetime.datetime(12, 31, 2017) and GetDate(IAF126.TpDateOut) == 0:{n}{t}{t}{t}return get_currency(IAF1040.AMove){n}{t}{t}else:{n}{t}{t}{t}return 0{n}{t}else:{n}{t}{t}return 0{n}{n}
def ANet_Calculation():{n}{t}return get_currency(IAF126.GrossInc) - get_currency(IAF126.ATotAdj){n}{n}
def ANetTax_Calculation():{n}{t}return max_value(0, get_currency(IAF126.AIATax) - get_currency(IAF126.ATotCr)){n}{n}
def AOthAdj_Calculation():{n}{t}if IAFS() == 3:{n}{t}{t}return get_currency(IANROTHADJ.TPTot){n}{t}else:{n}{t}{t}return get_currency(IANROTHADJ.TPTot) + get_currency(IANROTHADJ.SPTot){n}{n}
def AOtherInc_Calculation():{n}{t}if IAFS() == 3:{n}{t}{t}return get_currency(IANROTHINC.TPTot){n}{t}else:{n}{t}{t}return get_currency(IANROTHINC.TPTot) + get_currency(IANROTHINC.SPTot){n}{n}
def AOthGain_Calculation():{n}{t}#made change based on user story 445128 to calculate when a nonresident, for past 10 years lines 1-14 only calced when a part-year res. Based on Iowa 126 instructions decided to calc lines 5, 7, 10, 11, 12, 13, and 14 when a NR/PY to be conservative.{n}{t}if ( IAFS() == 2 and get_bool(IAF126.SpRes) == False )  or get_bool(IAF126.TpRes) == False:{n}{t}{t}return get_currency(IAF1040.AOthGain){n}{t}else:{n}{t}{t}return 0{n}{n}
def APenExcl_Calculation():{n}{t}if IAFS() == 3:{n}{t}{t}return get_currency(IAWPENEXC.NRTPPenExc){n}{t}else:{n}{t}{t}return get_currency(IAWPENEXC.NRTPPenExc) + get_currency(IAWPENEXC.NRSPPenExc){n}{n}
def APensions_Calculation():{n}{t}if IAFS() == 3:{n}{t}{t}return get_currency(IAWPENEXC.NRTPPensions){n}{t}else:{n}{t}{t}return get_currency(IAWPENEXC.NRTPPensions) + get_currency(IAWPENEXC.NRSPPensions){n}{n}
def ARents_Calculation():{n}{t}#made change based on user story 445128 to calculate when a nonresident, for past 10 years lines 1-14 only calced when a part-year res. Based on Iowa 126 instructions decided to calc lines 5, 7, 10, 11, 12, 13, and 14 when a NR/PY to be conservative.{n}{t}if ( IAFS() == 2 and get_bool(IAF126.SpRes) == False )  or get_bool(IAF126.TpRes) == False:{n}{t}{t}return get_currency(IAF1040.ARents){n}{t}else:{n}{t}{t}return 0{n}{n}
def AIAPer_Calculation():{n}{t}TopLim = Double(){n}{t}if get_bool(IAF126.IANotReqFIle) == True:{n}{t}{t}return 0{n}{t}elif get_bool(IAF126.TpPYNR) == True:{n}{t}{t}if get_float(IAF126.AAllSource) <= 0:{n}{t}{t}{t}return 1{n}{t}{t}else:{n}{t}{t}{t}TopLim = min_value(1, Round(get_float(IAF126.ANet) / get_float(IAF126.AAllSource), 3)){n}{t}{t}{t}return max_value(0, TopLim){n}{t}else:{n}{t}{t}return 0{n}{n}
def ATotAdj_Calculation():{n}{t}if get_bool(IAF126.TpPYNR) == True:{n}{t}{t}return get_currency(IAF126.AKeogh) + get_currency(IAF126.ABusIncL) + get_currency(IAF126.AHealth) + get_currency(IAF126.APenalty) + get_currency(IAF126.AAlimonyP) + get_currency(IAF126.APenExcl) + get_currency(IAF126.AMove) + get_currency(IAF126.AGainDed) + get_currency(IAF126.AOthAdj){n}{t}else:{n}{t}{t}return 0{n}{n}
def ATotCr_Calculation():{n}{t}if get_bool(IAF126.TpPYNR) == True:{n}{t}{t}return get_currency(IAF1040.ACredits){n}{t}else:{n}{t}{t}return 0{n}{n}
def AUnemp_Calculation():{n}{t}#made change based on user story 445128 to calculate when a nonresident, for past 10 years lines 1-14 only calced when a part-year res. Based on Iowa 126 instructions decided to calc lines 5, 7, 10, 11, 12, 13, and 14 when a NR/PY to be conservative.{n}{t}if ( IAFS() == 2 and get_bool(IAF126.SpRes) == False )  or get_bool(IAF126.TpRes) == False:{n}{t}{t}return get_currency(IAF1040.AUnemp){n}{t}else:{n}{t}{t}return 0{n}{n}
def AWages_Calculation():{n}{t}if IAFS() == 2 and  ( get_bool(IAF126.SpRes) == False or get_bool(IAF126.TpRes) == False ) :{n}{t}{t}return max_value(get_currency(IAF126.TpWages), get_currency(IAF126.TpIAWages)) + max_value(get_currency(IAF126.SpWages), get_currency(IAF126.SpIAWages)){n}{t}elif get_bool(IAF126.TpRes) == False:{n}{t}{t}return max_value(get_currency(IAF126.TpWages), get_currency(IAF126.TpIAWages)){n}{t}else:{n}{t}{t}return 0{n}{n}
def BAlimony_Calculation():{n}{t}if get_bool(IAF1040.CombMFS) == True and get_bool(IAF126.SpPYRes) == True:{n}{t}{t}return get_currency(IAF1040.BAlimony){n}{t}else:{n}{t}{t}return 0{n}{n}
def BAllSource_Calculation():{n}{t}if get_bool(IAF126.SpPYNR) == True:{n}{t}{t}return get_currency(IAF1040.BNet){n}{t}else:{n}{t}{t}return 0{n}{n}
def BBusInc_Calculation():{n}{t}#made change based on user story 445128 to calculate when a nonresident, for past 10 years lines 1-14 only calced when a part-year res. Based on Iowa 126 instructions decided to calc lines 5, 7, 10, 11, 12, 13, and 14 when a NR/PY to be conservative.{n}{t}if get_bool(IAF1040.CombMFS) == True and get_bool(IAF126.SpRes) == False:{n}{t}{t}return get_currency(IAF1040.BBusInc){n}{t}else:{n}{t}{t}return 0{n}{n}
def BCapGain_Calculation():{n}{t}#decided to change this to be same as line 5, 7, 10, 11, 12, 13. Leaving lines 1-4 and 8 and 9 as they have specific instructions.{n}{t}if get_bool(IAF1040.CombMFS) == True and get_bool(IAF126.SpRes) == False:{n}{t}{t}return get_currency(IAF1040.BCapGain){n}{t}else:{n}{t}{t}return 0{n}{n}
def BCredit_Calculation():{n}{t}return c_dollar(get_float(IAF126.BNetTax) * get_float(IAF126.BCrPer)){n}{n}
def BCrPer_Calculation():{n}{t}if get_bool(IAF126.SpPYNR) == True:{n}{t}{t}return max_value(0, 1 - get_float(IAF126.BIAPer)){n}{t}else:{n}{t}{t}return 0{n}{n}
def BDividend_Calculation():{n}{t}if get_bool(IAF1040.CombMFS) == True and get_bool(IAF126.SpPYRes) == True:{n}{t}{t}return get_currency(IAF1040.BDividend){n}{t}else:{n}{t}{t}return 0{n}{n}
def BFarm_Calculation():{n}{t}#made change based on user story 445128 to calculate when a nonresident, for past 10 years lines 1-14 only calced when a part-year res. Based on Iowa 126 instructions decided to calc lines 5, 7, 10, 11, 12, 13, and 14 when a NR/PY to be conservative.{n}{t}if get_bool(IAF1040.CombMFS) == True and get_bool(IAF126.SpRes) == False:{n}{t}{t}return get_currency(IAF1040.BFarm){n}{t}else:{n}{t}{t}return 0{n}{n}
def BGamble_Calculation():{n}{t}#made change based on user story 445128 to calculate when a nonresident, for past 10 years lines 1-14 only calced when a part-year res. Based on Iowa 126 instructions decided to calc lines 5, 7, 10, 11, 12, 13, and 14 when a NR/PY to be conservative.{n}{t}if get_bool(IAF1040.CombMFS) == True and get_bool(IAF126.SpRes) == False:{n}{t}{t}return get_currency(IAF1040.BGamble){n}{t}else:{n}{t}{t}return 0{n}{n}
def BGross_Calculation():{n}{t}if get_bool(IAF126.SpPYNR) == True:{n}{t}{t}return get_currency(IAF126.BWages) + get_currency(IAF126.BInterest) + get_currency(IAF126.BDividend) + get_currency(IAF126.BAlimony) + get_currency(IAF126.BBusInc) + get_currency(IAF126.BCapGain) + get_currency(IAF126.BOthGain) + get_currency(IAF126.BIRA) + get_currency(IAF126.BPensions) + get_currency(IAF126.BRents) + get_currency(IAF126.BFarm) + get_currency(IAF126.BUnemp) + get_currency(IAF126.BGamble) + get_currency(IAF126.BOtherInc){n}{t}else:{n}{t}{t}return 0{n}{n}
def BIATax_Calculation():{n}{t}if get_bool(IAF126.SpPYNR) == True:{n}{t}{t}return get_currency(IAF1040.BAltTax){n}{t}else:{n}{t}{t}return 0{n}{n}
def BInterest_Calculation():{n}{t}if get_bool(IAF1040.CombMFS) == True and get_bool(IAF126.SpPYRes) == True:{n}{t}{t}return get_currency(IAF1040.BInterest){n}{t}else:{n}{t}{t}return 0{n}{n}
def BIRA_Calculation():{n}{t}if IAFS() == 3:{n}{t}{t}return get_currency(IAWPENEXC.NRSPIRA){n}{t}else:{n}{t}{t}return 0{n}{n}
def BMove_Calculation():{n}{t}if IAFS() == 3 and get_bool(IAF126.SpPYRes) == True:{n}{t}{t}if GetDate(IAF126.SpDateIn) > datetime.datetime(12, 31, 2017) and GetDate(IAF126.SpDateOut) == 0:{n}{t}{t}{t}return get_currency(IAF1040.BMove){n}{t}{t}else:{n}{t}{t}{t}return 0{n}{t}else:{n}{t}{t}return 0{n}{n}
def BNet_Calculation():{n}{t}return get_currency(IAF126.BGross) - get_currency(IAF126.BTotAdj){n}{n}
def BNetTax_Calculation():{n}{t}return max_value(0, get_currency(IAF126.BIATax) - get_currency(IAF126.BTotCr)){n}{n}
def BOthAdj_Calculation():{n}{t}if get_bool(IAF126.SpPYNR) == True:{n}{t}{t}return get_currency(IANROTHADJ.SPTot){n}{t}else:{n}{t}{t}return 0{n}{n}
def BOtherInc_Calculation():{n}{t}if get_bool(IAF126.SpPYNR) == True:{n}{t}{t}return get_currency(IANROTHINC.SPTot){n}{t}else:{n}{t}{t}return 0{n}{n}
def BOthGain_Calculation():{n}{t}#made change based on user story 445128 to calculate when a nonresident, for past 10 years lines 1-14 only calced when a part-year res. Based on Iowa 126 instructions decided to calc lines 5, 7, 10, 11, 12, 13, and 14 when a NR/PY to be conservative.{n}{t}if get_bool(IAF1040.CombMFS) == True and get_bool(IAF126.SpRes) == False:{n}{t}{t}return get_currency(IAF1040.BOthGain){n}{t}else:{n}{t}{t}return 0{n}{n}
def BPenExcl_Calculation():{n}{t}if get_bool(IAF126.SpPYNR) == True:{n}{t}{t}return get_currency(IAWPENEXC.NRSPPenExc){n}{t}else:{n}{t}{t}return 0{n}{n}
def BPensions_Calculation():{n}{t}if IAFS() == 3:{n}{t}{t}return get_currency(IAWPENEXC.NRSPPensions){n}{t}else:{n}{t}{t}return 0{n}{n}
def BRents_Calculation():{n}{t}#made change based on user story 445128 to calculate when a nonresident, for past 10 years lines 1-14 only calced when a part-year res. Based on Iowa 126 instructions decided to calc lines 5, 7, 10, 11, 12, 13, and 14 when a NR/PY to be conservative.{n}{t}if get_bool(IAF1040.CombMFS) == True and get_bool(IAF126.SpRes) == False:{n}{t}{t}return get_currency(IAF1040.BRents){n}{t}else:{n}{t}{t}return 0{n}{n}
def BIAPer_Calculation():{n}{t}TopLim = Double(){n}{t}if get_bool(IAF126.IANotReqFIle) == True:{n}{t}{t}return 0{n}{t}elif get_bool(IAF126.SpPYNR) == True:{n}{t}{t}if get_float(IAF126.BAllSource) <= 0:{n}{t}{t}{t}return 1{n}{t}{t}else:{n}{t}{t}{t}TopLim = min_value(1, Round(get_float(IAF126.BNet) / get_float(IAF126.BAllSource), 3)){n}{t}{t}{t}return max_value(0, TopLim){n}{t}else:{n}{t}{t}return 0{n}{n}
def BTotAdj_Calculation():{n}{t}if get_bool(IAF126.SpPYNR) == True:{n}{t}{t}return get_currency(IAF126.BKeogh) + get_currency(IAF126.BBusIncL) + get_currency(IAF126.BHealth) + get_currency(IAF126.BPenalty) + get_currency(IAF126.BAlimonyP) + get_currency(IAF126.BPenExcl) + get_currency(IAF126.BMove) + get_currency(IAF126.BGainDed) + get_currency(IAF126.BOthAdj){n}{t}else:{n}{t}{t}return 0{n}{n}
def BTotCr_Calculation():{n}{t}if get_bool(IAF126.SpPYNR) == True:{n}{t}{t}return get_currency(IAF1040.BCredits){n}{t}else:{n}{t}{t}return 0{n}{n}
def BUnemp_Calculation():{n}{t}#made change based on user story 445128 to calculate when a nonresident, for past 10 years lines 1-14 only calced when a part-year res. Based on Iowa 126 instructions decided to calc lines 5, 7, 10, 11, 12, 13, and 14 when a NR/PY to be conservative.{n}{t}if get_bool(IAF1040.CombMFS) == True and get_bool(IAF126.SpRes) == False:{n}{t}{t}return get_currency(IAF1040.BUnemp){n}{t}else:{n}{t}{t}return 0{n}{n}
def BWages_Calculation():{n}{t}if get_bool(IAF126.SpPYNR) == True:{n}{t}{t}return max_value(get_currency(IAF126.SpWages), get_currency(IAF126.SpIAWages)){n}{t}else:{n}{t}{t}return 0{n}{n}
def Desc_Calculation():{n}{t}Total = Currency(){n}{t}Total = get_currency(IAF126.BCredit) + get_currency(IAF126.ACredit){n}{t}return CStr(Total) + ' Credit'{n}{n}
def Exist_Calculation():{n}{t}return 1{n}{n}
def GrossInc_Calculation():{n}{t}if get_bool(IAF126.TpPYNR) == True:{n}{t}{t}return get_currency(IAF126.AWages) + get_currency(IAF126.AInterest) + get_currency(IAF126.ADividend) + get_currency(IAF126.AAlimony) + get_currency(IAF126.ABusInc) + get_currency(IAF126.ACapGain) + get_currency(IAF126.AOthGain) + get_currency(IAF126.AIRA) + get_currency(IAF126.APensions) + get_currency(IAF126.ARents) + get_currency(IAF126.AFarm) + get_currency(IAF126.AUnemp) + get_currency(IAF126.AGamble) + get_currency(IAF126.AOtherInc){n}{t}else:{n}{t}{t}return 0{n}{n}
def IANotReqFIle_Calculation():{n}{t}if get_bool(IAF1040.MFS) == True:{n}{t}{t}return 0{n}{t}elif get_currency(IAF126.BNet) + get_currency(IAF126.ANet) >= Decimal("1000"):{n}{t}{t}return 0{n}{t}elif get_currency(IA6251.AMT) > 0 or get_currency(IA6251SP.AMT) > 0:{n}{t}{t}return 0{n}{t}elif get_currency(IAF1040.BLump) > 0 or get_currency(IAF1040.ALump) > 0:{n}{t}{t}return 0{n}{t}else:{n}{t}{t}return 1{n}{n}
def Names_Calculation():{n}{t}return get_string(IAREQUIRED.CombNames){n}{n}
def Print_Calculation():{n}{t}if get_bool(IAF126.TpPYNR) == True or get_bool(IAF126.SpPYNR) == True:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def SpIAWages_Calculation():{n}{t}count1 = Long(){n}{n}{t}HowManyW2 = Long(){n}{n}{t}Total1 = Currency(){n}{n}{t}W2Index = Long(){n}{n}{t}StEpWage = Currency(){n}{n}{t}AllW2Wage = Currency(){n}{n}{t}OthWages = Currency(){n}{t}count1 = 1{n}{t}HowManyW2 = GetAllCopies(USDW2){n}{t}Total1 = 0{n}{t}StEpWage = 0{n}{t}while count1 <= HowManyW2:{n}{t}{t}W2Index = 0{n}{t}{t}while W2Index < 8:{n}{t}{t}{t}if get_string(USDW2.St(W2Index), count1) == 'IA' and get_bool(USDW2.Stat, count1) == False and get_bool(USDW2.Spouse, count1) == True:{n}{t}{t}{t}{t}Total1 = Total1 + Round(get_currency(USDW2.StWages(W2Index), count1)){n}{t}{t}{t}W2Index = W2Index + 1{n}{t}{t}count1 = count1 + 1{n}{t}while count1 <= HowManyW2:{n}{t}{t}if get_bool(USDW2.Stat, count1) == True and get_bool(USDW2.Spouse, count1) == True:{n}{t}{t}{t}StEpWage = StEpWage + Round(get_currency(USDW2.Wages, count1)){n}{t}{t}count1 = count1 + 1{n}{t}AllW2Wage = get_currency(USDW2.Wages, FieldCopies(USDW2.Spouse)){n}{t}OthWages = get_currency(USWRec.SWages) - Round(AllW2Wage - StEpWage){n}{t}return Total1 + OthWages{n}{n}
def SpNonRes_Calculation():{n}{t}if get_bool(IAF1040.MFJ) == True or get_bool(IAF1040.CombMFS) == True:{n}{t}{t}if get_bool(USWResidency.F1040NR) == False:{n}{t}{t}{t}return 0{n}{t}{t}else:{n}{t}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def SpPYNR_Calculation():{n}{t}if get_bool(IAF1040.CombMFS) == True and get_bool(IAF126.SpRes) == False:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def SpRes_Calculation():{n}{t}if get_bool(IAF1040.MFJ) == True or get_bool(IAF1040.CombMFS) == True:{n}{t}{t}if get_bool(USWResidency.F1040NR) == False:{n}{t}{t}{t}return 1{n}{t}{t}else:{n}{t}{t}{t}return 0{n}{t}else:{n}{t}{t}return 0{n}{n}
def SpWages_Calculation():{n}{t}count1 = Integer(){n}{n}{t}HowManyW2 = Long(){n}{n}{t}Total1 = Currency(){n}{n}{t}W2Index = Long(){n}{t}count1 = 1{n}{t}HowManyW2 = GetAllCopies(USDW2){n}{t}Total1 = 0{n}{t}while count1 <= HowManyW2:{n}{t}{t}W2Index = 0{n}{t}{t}while W2Index < 8:{n}{t}{t}{t}if get_string(USDW2.St(W2Index), count1) != 'IA' and get_bool(USDW2.Spouse, count1) == True:{n}{t}{t}{t}{t}Total1 = Total1 + get_currency(USDW2.StWages(W2Index), count1){n}{t}{t}{t}W2Index = W2Index + 1{n}{t}{t}count1 = count1 + 1{n}{t}return max_value(0, get_currency(USWRec.SWages) - Total1){n}{n}
def SSN_Calculation():{n}{t}return get_string(IAF1040.SSN){n}{n}
def TpIAWages_Calculation():{n}{t}count1 = Long(){n}{n}{t}HowManyW2 = Long(){n}{n}{t}Total1 = Currency(){n}{n}{t}W2Index = Long(){n}{n}{t}StEpWage = Currency(){n}{n}{t}AllW2Wage = Currency(){n}{n}{t}OthWages = Currency(){n}{t}count1 = 1{n}{t}HowManyW2 = GetAllCopies(USDW2){n}{t}Total1 = 0{n}{t}StEpWage = 0{n}{t}while count1 <= HowManyW2:{n}{t}{t}W2Index = 0{n}{t}{t}while W2Index < 8:{n}{t}{t}{t}if get_string(USDW2.St(W2Index), count1) == 'IA' and get_bool(USDW2.Stat, count1) == False and get_bool(USDW2.Taxpayer, count1) == True:{n}{t}{t}{t}{t}Total1 = Total1 + Round(get_currency(USDW2.StWages(W2Index), count1)){n}{t}{t}{t}W2Index = W2Index + 1{n}{t}{t}count1 = count1 + 1{n}{t}while count1 <= HowManyW2:{n}{t}{t}if get_bool(USDW2.Stat, count1) == True and get_bool(USDW2.Taxpayer, count1) == True:{n}{t}{t}{t}StEpWage = StEpWage + Round(get_currency(USDW2.Wages, count1)){n}{t}{t}count1 = count1 + 1{n}{t}AllW2Wage = get_currency(USDW2.Wages, FieldCopies(USDW2.Taxpayer)){n}{t}OthWages = get_currency(USWRec.TWages) - Round(AllW2Wage - StEpWage){n}{t}return Total1 + OthWages{n}{n}
def TpJtDateIn_Calculation():{n}{t}if get_bool(IAF126.TpPYRes) == True:{n}{t}{t}return get_string(IAF126.TpDateIn){n}{t}elif get_bool(IAF126.TpNonRes) == True:{n}{t}{t}return ''{n}{t}elif get_bool(IAF1040.MFJ) == True and get_bool(IAF126.SpPYRes) == True:{n}{t}{t}return get_string(IAF126.SpDateIn){n}{t}else:{n}{t}{t}return ''{n}{n}
def TpJtDateOut_Calculation():{n}{t}if get_bool(IAF126.TpPYRes) == True:{n}{t}{t}return get_string(IAF126.TpDateOut){n}{t}elif get_bool(IAF126.TpNonRes) == True:{n}{t}{t}return ''{n}{t}elif get_bool(IAF1040.MFJ) == True and get_bool(IAF126.SpPYRes) == True:{n}{t}{t}return get_string(IAF126.SpDateOut){n}{t}else:{n}{t}{t}return ''{n}{n}
def TPJtNonRes_Calculation():{n}{t}if get_bool(IAF126.TpNonRes) == True:{n}{t}{t}return 1{n}{t}elif get_bool(IAF126.TpPYRes) == True:{n}{t}{t}return 0{n}{t}elif get_bool(IAF1040.MFJ) == True and get_bool(IAF126.SpNonRes) == True:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def TPJtPYRes_Calculation():{n}{t}if get_bool(IAF126.TpPYRes) == True:{n}{t}{t}return 1{n}{t}elif get_bool(IAF126.TpNonRes) == True:{n}{t}{t}return 0{n}{t}elif get_bool(IAF1040.MFJ) == True and get_bool(IAF126.SpPYRes) == True:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def TpNonRes_Calculation():{n}{t}if get_bool(USWResidency.F1040NR) == False:{n}{t}{t}return 0{n}{t}else:{n}{t}{t}return 1{n}{n}
def TpPYNR_Calculation():{n}{t}if get_bool(IAF1040.MFJ) == True:{n}{t}{t}if get_bool(IAF126.TpRes) == False or get_bool(IAF126.SpRes) == False:{n}{t}{t}{t}return 1{n}{t}{t}else:{n}{t}{t}{t}return 0{n}{t}elif get_bool(IAF126.TpRes) == False:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def TpRes_Calculation():{n}{t}if get_bool(USWResidency.F1040NR) == False:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def TpWages_Calculation():{n}{t}count1 = Integer(){n}{n}{t}HowManyW2 = Long(){n}{n}{t}Total1 = Currency(){n}{n}{t}W2Index = Long(){n}{t}count1 = 1{n}{t}HowManyW2 = GetAllCopies(USDW2){n}{t}Total1 = 0{n}{t}while count1 <= HowManyW2:{n}{t}{t}W2Index = 0{n}{t}{t}while W2Index < 8:{n}{t}{t}{t}if get_string(USDW2.St(W2Index), count1) != 'IA' and get_bool(USDW2.Taxpayer, count1) == True:{n}{t}{t}{t}{t}Total1 = Total1 + get_currency(USDW2.StWages(W2Index), count1){n}{t}{t}{t}W2Index = W2Index + 1{n}{t}{t}count1 = count1 + 1{n}{t}return max_value(0, get_currency(USWRec.TWages) - Total1){n}{n}def Description_Calculation():{n}{t}Total = Currency(){n}{t}Total = get_currency(IAFEDEST.TPTotEst) + get_currency(IAFEDEST.SPTotEst){n}{t}return CStr(Total){n}{n}
def Exist_Calculation():{n}{t}return 1{n}{n}
def MobDisQual_Calculation():{n}{t}if get_currency(IAFEDEST.TPTotEst) + get_currency(IAFEDEST.SPTotEst) > 0:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def Names_Calculation():{n}{t}return get_string(IAREQUIRED.CombNames){n}{n}
def SPCYEst_Calculation():{n}{t}if IAFS() == 3:{n}{t}{t}return c_dollar(get_float(IAREQUIRED.BProRate) * get_float(IAFEDEST.TotCYEst)){n}{t}else:{n}{t}{t}return 0{n}{n}
def SPName_Calculation():{n}{t}return get_string(USWBasicInfo.SPCommon){n}{n}
def SPPYEst_Calculation():{n}{t}if IAFS() == 3:{n}{t}{t}return c_dollar(get_float(IAREQUIRED.BProRate) * get_float(IAFEDEST.TotPYEst)){n}{t}else:{n}{t}{t}return 0{n}{n}
def SPTotEst_Calculation():{n}{t}return get_currency(IAFEDEST.SPCYEst) + get_currency(IAFEDEST.SPPYEst){n}{n}
def SSN_Calculation():{n}{t}return get_string(IAF1040.SSN){n}{n}
def TotCYEst_Calculation():{n}{t}if GetDate(USWEstPay.Q4Date) < datetime.datetime(1, 1, 2019):{n}{t}{t}return get_currency(USWEstPay.Applied) + get_currency(USWEstPay.Q1) + get_currency(USWEstPay.Q2) + get_currency(USWEstPay.Q3) + get_currency(USWEstPay.Q4){n}{t}else:{n}{t}{t}return get_currency(USWEstPay.Applied) + get_currency(USWEstPay.Q1) + get_currency(USWEstPay.Q2) + get_currency(USWEstPay.Q3){n}{n}
def TotPYEst_Calculation():{n}{t}if GetDate(USWSpouse.PY4EstDate) > datetime.datetime(12, 31, 2017):{n}{t}{t}return get_currency(USWSpouse.PY4Est) + get_currency(USWSpouse.PYLateEst){n}{t}else:{n}{t}{t}return get_currency(USWSpouse.PYLateEst){n}{n}
def TPCYEst_Calculation():{n}{t}return max_value(0, get_currency(IAFEDEST.TotCYEst) - get_currency(IAFEDEST.SPCYEst)){n}{n}
def TPName_Calculation():{n}{t}return get_string(USWBasicInfo.TPCommon){n}{n}
def TPPYEst_Calculation():{n}{t}return max_value(0, get_currency(IAFEDEST.TotPYEst) - get_currency(IAFEDEST.SPPYEst)){n}{n}
def TPTotEst_Calculation():{n}{t}return get_currency(IAFEDEST.TPCYEst) + get_currency(IAFEDEST.TPPYEst){n}{n}def Description_Calculation():{n}{t}Total = Currency(){n}{t}Total = get_currency(IAFEDREF.TPST) + get_currency(IAFEDREF.SPST){n}{t}return CStr(Total){n}{n}
def Names_Calculation():{n}{t}return get_string(IAREQUIRED.CombNames){n}{n}
def NetRef_Calculation():{n}{t}if get_bool(IAFEDREF.PYNR) == True:{n}{t}{t}return 0{n}{t}else:{n}{t}{t}return max_value(0, get_currency(IAFEDREF.PyRef) - get_currency(IAFEDREF.PYEIC) - get_currency(IAFEDREF.PYAddCTC) - get_currency(IAFEDREF.PYRefHopeCr) - get_currency(IAFEDREF.PYPTC)){n}{n}
def PYAddCTC_Calculation():{n}{t}if get_bool(USWSpouse.NonRes) == True:{n}{t}{t}return get_currency(USWRec.PYAddCTCNR){n}{t}else:{n}{t}{t}return get_currency(USWRec.PYAddCTC){n}{n}
def PYEIC_Calculation():{n}{t}return get_currency(USWRec.PYEIC){n}{n}
def PYNR_Calculation():{n}{t}if get_bool(IAREQUIRED.AskSpouse) == True:{n}{t}{t}if ( get_bool(IAF126.TpPYRes) == True and GetDate(IAF126.TpDateIn) > datetime.datetime(12, 31, 2017) )  and  ( get_bool(IAF126.SpPYRes) == True and GetDate(IAF126.SpDateIn) > datetime.datetime(12, 31, 2017) ) :{n}{t}{t}{t}return 1{n}{t}{t}else:{n}{t}{t}{t}return 0{n}{t}elif  ( get_bool(IAF126.TpPYRes) == True and GetDate(IAF126.TpDateIn) > datetime.datetime(12, 31, 2017) ) :{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def PYPTC_Calculation():{n}{t}if get_bool(USWSpouse.NonRes) == True:{n}{t}{t}return get_currency(USWRec.PYNPTCNR){n}{t}else:{n}{t}{t}return get_currency(USWRec.PYNPTC){n}{n}
def PyRef_Calculation():{n}{t}if get_bool(USWSpouse.NonRes) == True:{n}{t}{t}return get_currency(USWRec.PYRefNR){n}{t}else:{n}{t}{t}return get_currency(USWRec.PYRef){n}{n}
def PYRefHopeCr_Calculation():{n}{t}return get_currency(USWRec.PYRefHopeCr){n}{n}
def SPName_Calculation():{n}{t}return get_string(USWBasicInfo.SPCommon){n}{n}
def SPST_Calculation():{n}{t}return c_dollar(get_float(IAREQUIRED.PYRatio) * get_float(IAFEDREF.NetRef)){n}{n}
def SSN_Calculation():{n}{t}return get_string(IAF1040.SSN){n}{n}
def TPName_Calculation():{n}{t}return get_string(USWBasicInfo.TPCommon){n}{n}
def TPST_Calculation():{n}{t}return max_value(0, get_currency(IAFEDREF.NetRef) - get_currency(IAFEDREF.SPST)){n}{n}def Attach1_Calculation():{n}{t}return 'Please include a complete copy of your federal return. '{n}{n}
def Attach2_Calculation():{n}{t}if get_bool(IAFILINGINST.AttWHStmt) == True:{n}{t}{t}return 'Please attach state copies of W-2(s), W-2G(s) and/or 1099(s) showing Iowa tax withheld.'{n}{t}else:{n}{t}{t}return ''{n}{n}
def Attach3_Calculation():{n}{t}if get_number(IAFILINGINST.OtherState) > 0:{n}{t}{t}return 'Please attach a copy of the other state return for Schedule IA 130.'{n}{t}else:{n}{t}{t}return ''{n}{n}
def Attach4_Calculation():{n}{t}if get_bool(IA148.Print) == True or get_bool(IA148SP.Print) == True:{n}{t}{t}return 'Please attach all supporting forms for the credits claimed on Schedule IA 148.'{n}{t}else:{n}{t}{t}return ''{n}{n}
def AttWHStmt_Calculation():{n}{t}if get_currency(IAF1040.AIATaxWith) > 0:{n}{t}{t}return 1{n}{t}elif get_currency(IAF1040.BIATaxWith) > 0:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def C1Est1_Calculation():{n}{t}return get_bool(IAESTIMATES.EstPay1, 1){n}{n}
def C1Est2_Calculation():{n}{t}return get_bool(IAESTIMATES.EstPay2, 1){n}{n}
def C1Est3_Calculation():{n}{t}return get_bool(IAESTIMATES.EstPay3, 1){n}{n}
def C1Est4_Calculation():{n}{t}return get_bool(IAESTIMATES.EstPay4, 1){n}{n}
def C1EstInfo_Calculation():{n}{t}if get_bool(IAESTIMATES.Print, 1) == True:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def C1EstInfoDirDeb_Calculation():{n}{t}if get_bool(IAESTIMATES.Print, 1) == True and get_bool(IAESTIMATES.EstEFW, 1) == True:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def C1Owner_Calculation():{n}{t}if get_bool(IAESTIMATES.Print, 1) == True and get_bool(IAESTIMATES.Print, 2) == True:{n}{t}{t}return ' for ' + get_string(IAESTIMATES.Owner, 1){n}{t}else:{n}{t}{t}return ''{n}{n}
def C1Q1_Calculation():{n}{t}return get_currency(IAESTIMATES.V1PayAmt1, 1){n}{n}
def C1Q1WithDate_Calculation():{n}{t}return GetVerboseDate(GetDate(IAESTIMATES.Est1Date, 1)){n}{n}
def C1Q2_Calculation():{n}{t}return get_currency(IAESTIMATES.V2PayAmt1, 1){n}{n}
def C1Q2WithDate_Calculation():{n}{t}return GetVerboseDate(GetDate(IAESTIMATES.Est2Date, 1)){n}{n}
def C1Q3_Calculation():{n}{t}return get_currency(IAESTIMATES.V3PayAmt1, 1){n}{n}
def C1Q3WithDate_Calculation():{n}{t}return GetVerboseDate(GetDate(IAESTIMATES.Est3Date, 1)){n}{n}
def C1Q4_Calculation():{n}{t}return get_currency(IAESTIMATES.V4PayAmt1, 1){n}{n}
def C1Q4WithDate_Calculation():{n}{t}return GetVerboseDate(GetDate(IAESTIMATES.Est4Date, 1)){n}{n}
def C2Est1_Calculation():{n}{t}return get_bool(IAESTIMATES.EstPay1, 2){n}{n}
def C2Est2_Calculation():{n}{t}return get_bool(IAESTIMATES.EstPay2, 2){n}{n}
def C2Est3_Calculation():{n}{t}return get_bool(IAESTIMATES.EstPay3, 2){n}{n}
def C2Est4_Calculation():{n}{t}return get_bool(IAESTIMATES.EstPay4, 2){n}{n}
def C2EstInfo_Calculation():{n}{t}if get_bool(IAESTIMATES.Print, 2) == True:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def C2EstInfoDirDeb_Calculation():{n}{t}if get_bool(IAESTIMATES.Print, 2) == True and get_bool(IAESTIMATES.EstEFW, 2) == True:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def C2Owner_Calculation():{n}{t}if get_bool(IAESTIMATES.Print, 1) == True and get_bool(IAESTIMATES.Print, 2) == True:{n}{t}{t}return ' for ' + get_string(IAESTIMATES.Owner, 2){n}{t}else:{n}{t}{t}return ''{n}{n}
def C2Q1_Calculation():{n}{t}return get_currency(IAESTIMATES.V1PayAmt1, 2){n}{n}
def C2Q1WithDate_Calculation():{n}{t}return GetVerboseDate(GetDate(IAESTIMATES.Est1Date, 2)){n}{n}
def C2Q2_Calculation():{n}{t}return get_currency(IAESTIMATES.V2PayAmt1, 2){n}{n}
def C2Q2WithDate_Calculation():{n}{t}return GetVerboseDate(GetDate(IAESTIMATES.Est2Date, 2)){n}{n}
def C2Q3_Calculation():{n}{t}return get_currency(IAESTIMATES.V3PayAmt1, 2){n}{n}
def C2Q3WithDate_Calculation():{n}{t}return GetVerboseDate(GetDate(IAESTIMATES.Est3Date, 2)){n}{n}
def C2Q4_Calculation():{n}{t}return get_currency(IAESTIMATES.V4PayAmt1, 2){n}{n}
def C2Q4WithDate_Calculation():{n}{t}return GetVerboseDate(GetDate(IAESTIMATES.Est4Date, 2)){n}{n}
def DueDate_Calculation():{n}{t}return 'April 30, 2019'{n}{n}
def EitherDirDeb_Calculation():{n}{t}if get_number(IAFILINGINST.C1EstInfoDirDeb) == 1 or get_number(IAFILINGINST.C2EstInfoDirDeb) == 1:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def EstAdd1_Calculation():{n}{t}return 'Iowa Department of Revenue<br>PO Box 10466 <br>Des Moines, IA 50306-0466'{n}{n}
def EstInfo_Calculation():{n}{t}if get_bool(IAFILINGINST.C1EstInfo) == True:{n}{t}{t}return 1{n}{t}elif get_bool(IAFILINGINST.C2EstInfo) == True:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def IRSAdd1_Calculation():{n}{t}return 'Iowa Income Tax Document Processing'{n}{n}
def IRSAdd2_Calculation():{n}{t}return 'PO Box 9187'{n}{n}
def IRSAdd3_Calculation():{n}{t}return 'Des Moines, IA  50306-9187'{n}{n}
def Names_Calculation():{n}{t}return get_string(IAREQUIRED.CombNames){n}{n}
def OtherState_Calculation():{n}{t}if get_currency(IAF1040.AOutState) > 0 or get_currency(IAF1040.BOutState) > 0:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def Pay1_Calculation():{n}{t}if get_currency(IAF1040.RefBalDue) < 0:{n}{t}{t}return 'The balance due on your Iowa return is ' + get_string(IAF1040.TotDue){n}{t}else:{n}{t}{t}return 'The overpayment on your return is ' + get_string(IAF1040.OVerPaid){n}{n}
def Pay2_Calculation():{n}{t}if get_currency(IAF1040.RefBalDue) < 0:{n}{t}{t}return 'Make your check payable to: Treasurer, State of Iowa'{n}{t}else:{n}{t}{t}return 'The amount of overpayment applied to your 2019 estimates is ' + get_string(IAREQUIRED.TotApplied){n}{n}
def Pay3_Calculation():{n}{t}if get_currency(IAF1040.RefBalDue) < 0:{n}{t}{t}return 'Write \'2018 Form 1040\' on your check.'{n}{t}else:{n}{t}{t}return 'The amount to be refunded to you is ' + get_string(IAF1040.Refund) + '.'{n}{n}
def Pay4_Calculation():{n}{t}if get_currency(IAF1040.RefBalDue) <= 0:{n}{t}{t}return ''{n}{t}elif trim(get_string(IAF1040.ActNum)) != '':{n}{t}{t}return 'You have elected to receive your refund via direct deposit.'{n}{t}else:{n}{t}{t}return 'You have elected to receive your refund on a paper check.'{n}{n}
def Q1Date_Calculation():{n}{t}return 'April 30, 2019'{n}{n}
def Q2Date_Calculation():{n}{t}return 'July 1, 2019'{n}{n}
def Q3Date_Calculation():{n}{t}return 'September 30, 2019'{n}{n}
def Q4Date_Calculation():{n}{t}return 'January 31, 2020'{n}{n}def Description_Calculation():{n}{t}Total = Currency(){n}{t}Total = get_currency(IAFIRECR.SPTotCr) + get_currency(IAFIRECR.TPTotCr){n}{t}return CStr(Total){n}{n}
def MobDisQual_Calculation():{n}{t}if get_currency(IAFIRECR.SPTotCr) + get_currency(IAFIRECR.TPTotCr) > 0:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def Names_Calculation():{n}{t}return get_string(IAREQUIRED.CombNames){n}{n}
def SPName_Calculation():{n}{t}return get_string(USWBasicInfo.SPCommon){n}{n}
def SPTotCr_Calculation():{n}{t}# updated for 2018{n}{t}if get_bool(IAFIRECR.SPQual) == True and get_bool(IAREQUIRED.AskSpouse) == True:{n}{t}{t}return min_value(Decimal("100"), c_dollar(get_float(IAFIRECR.SPMonths) * 834)){n}{t}else:{n}{t}{t}return 0{n}{n}
def SSN_Calculation():{n}{t}return get_string(IAF1040.SSN){n}{n}
def TPName_Calculation():{n}{t}return get_string(USWBasicInfo.TPCommon){n}{n}
def TPTotCr_Calculation():{n}{t}# updated for 2018{n}{t}if get_bool(IAFIRECR.TPQual) == True:{n}{t}{t}return min_value(Decimal("100"), c_dollar(get_float(IAFIRECR.TPMonths) * 834)){n}{t}else:{n}{t}{t}return 0{n}{n}def Code_Calculation(Index):{n}{t}count = Integer(){n}{n}{t}Hold = String(){n}{t}count = 0{n}{t}Hold = ''{n}{t}if get_currency(IANROTHADJ.TOth1) != 0 or get_currency(IANROTHADJ.SOth1) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'dd'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPActiveMil) != 0 or get_currency(IANROTHADJ.SPActiveMil) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'b'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPAltMV) != 0 or get_currency(IANROTHADJ.SPAltMV) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'c'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPInvolConv) != 0 or get_currency(IANROTHADJ.SPInvolConv) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'e'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPClaimOfRight) != 0 or get_currency(IANROTHADJ.SPClaimOfRight) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'f'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPIAEd) != 0 or get_currency(IANROTHADJ.SPIAEd) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'g'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPIADis) != 0 or get_currency(IANROTHADJ.SPIADis) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'h'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPDomProd) != 0 or get_currency(IANROTHADJ.SPDomProd) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'i'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPFirstHmBuy) != 0 or get_currency(IANROTHADJ.SPFirstHmBuy) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'j'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPEmployerSS) != 0 or get_currency(IANROTHADJ.SPEmployerSS) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'k'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPFedFuels) != 0 or get_currency(IANROTHADJ.SPFedFuels) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'l'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPForeign) != 0 or get_currency(IANROTHADJ.SPForeign) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'm'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TP2555) != 0 or get_currency(IANROTHADJ.SP2555) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'm'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPDistressed) != 0 or get_currency(IANROTHADJ.SPDistressed) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'n'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPHealthSav) != 0 or get_currency(IANROTHADJ.SPHealthSav) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'o'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPVet) != 0 or get_currency(IANROTHADJ.SPVet) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'p'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPVetGrant) != 0 or get_currency(IANROTHADJ.SPVetGrant) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'q'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPHomeHealth) != 0 or get_currency(IANROTHADJ.SPHomeHealth) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'r'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPIAVetTrust) != 0 or get_currency(IANROTHADJ.SPIAVetTrust) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 's'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPMilitaryExem) != 0 or get_currency(IANROTHADJ.SPMilitaryExem) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 't'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TIANOL) != 0 or get_currency(IANROTHADJ.SIANOL) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'u'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPOrgan) != 0 or get_currency(IANROTHADJ.SPOrgan) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'v'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPK1) != 0 or get_currency(IANROTHADJ.SPK1) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'w'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPSegal) != 0 or get_currency(IANROTHADJ.SPSegal) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'x'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPShell) != 0 or get_currency(IANROTHADJ.SPShell) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'y'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TStud) != 0 or get_currency(IANROTHADJ.SStud) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'z'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPVictim) != 0 or get_currency(IANROTHADJ.SPVictim) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'aa'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPWages) != 0 or get_currency(IANROTHADJ.SPWages) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'bb'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPWorkCr) != 0 or get_currency(IANROTHADJ.SPWorkCr) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'cc'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TP2106) != 0 or get_currency(IANROTHADJ.SP2106) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'dd'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TMSA) != 0 or get_currency(IANROTHADJ.SMSA) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'dd'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPJury) != 0 or get_currency(IANROTHADJ.SPJury) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'dd'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPRFST) != 0 or get_currency(IANROTHADJ.SPRFST) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'dd'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPSub) != 0 or get_currency(IANROTHADJ.SPSub) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'dd'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TP501c) != 0 or get_currency(IANROTHADJ.SP501c) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'dd'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPPerRent) != 0 or get_currency(IANROTHADJ.SPPerRent) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'dd'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TP403b) != 0 or get_currency(IANROTHADJ.SP403b) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'dd'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPUDC) != 0 or get_currency(IANROTHADJ.SPUDC) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'dd'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPWBF) != 0 or get_currency(IANROTHADJ.SPWBF) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'dd'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TP8873) != 0 or get_currency(IANROTHADJ.SP8873) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'dd'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPOlympic) != 0 or get_currency(IANROTHADJ.SPOlympic) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'dd'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPEducator) != 0 or get_currency(IANROTHADJ.SPEducator) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'ee'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPTuition) != 0 or get_currency(IANROTHADJ.SPTuition) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'ff'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPElectric) != 0 or get_currency(IANROTHADJ.SPElectric) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'gg'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPRapid) != 0 or get_currency(IANROTHADJ.SPRapid) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'hh'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPIAABLE) != 0 or get_currency(IANROTHADJ.SPIAABLE) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'ii'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}return Hold{n}{n}
def Desc_Calculation():{n}{t}Total = Currency(){n}{t}Total = get_currency(IANROTHADJ.TPTot) + get_currency(IANROTHADJ.SPTot){n}{t}return CStr(Total){n}{n}
def Description_Calculation(Index):{n}{t}count = Integer(){n}{n}{t}Hold = String(){n}{t}count = 0{n}{t}Hold = ''{n}{t}if get_currency(IANROTHADJ.TOth1) != 0 or get_currency(IANROTHADJ.SOth1) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_string(IANROTHADJ.TxtOth1){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPActiveMil) != 0 or get_currency(IANROTHADJ.SPActiveMil) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Active duty military pay'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPAltMV) != 0 or get_currency(IANROTHADJ.SPAltMV) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Alternative motor vehicle deduction'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPInvolConv) != 0 or get_currency(IANROTHADJ.SPInvolConv) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Capital or ordinary gain from involuntary conversion'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPClaimOfRight) != 0 or get_currency(IANROTHADJ.SPClaimOfRight) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Claim of Right deduction'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPIAEd) != 0 or get_currency(IANROTHADJ.SPIAEd) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'College Savings Iowa or Iowa Advisor 529 Plan'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPIADis) != 0 or get_currency(IANROTHADJ.SPIADis) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Disability income exclusion'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPDomProd) != 0 or get_currency(IANROTHADJ.SPDomProd) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Domestic production activities deduction'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPFirstHmBuy) != 0 or get_currency(IANROTHADJ.SPFirstHmBuy) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'First-Time Homebuyer Savings Account qualifying contributions'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPEmployerSS) != 0 or get_currency(IANROTHADJ.SPEmployerSS) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Employer social security credit, federal Form 8846'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPFedFuels) != 0 or get_currency(IANROTHADJ.SPFedFuels) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Alcohol and cellulosic biofuel credit, federal Form 6478'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPForeign) != 0 or get_currency(IANROTHADJ.SPForeign) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Foreign earned income exclusion, federal Form 2555'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TP2555) != 0 or get_currency(IANROTHADJ.SP2555) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Foreign housing deduction, federal Form 2555'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPDistressed) != 0 or get_currency(IANROTHADJ.SPDistressed) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Gains or losses from distressed sale transactions'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPHealthSav) != 0 or get_currency(IANROTHADJ.SPHealthSav) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Health savings account deduction, federal Form 8889'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPVet) != 0 or get_currency(IANROTHADJ.SPVet) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Injured veterans programs - contributions'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPVetGrant) != 0 or get_currency(IANROTHADJ.SPVetGrant) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Injured veterans programs - grants'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPHomeHealth) != 0 or get_currency(IANROTHADJ.SPHomeHealth) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'In-home health care'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPIAVetTrust) != 0 or get_currency(IANROTHADJ.SPIAVetTrust) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Iowa Veterans Trust Fund'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPMilitaryExem) != 0 or get_currency(IANROTHADJ.SPMilitaryExem) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Military exemptions'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TIANOL) != 0 or get_currency(IANROTHADJ.SIANOL) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Iowa Net Operating Loss'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPOrgan) != 0 or get_currency(IANROTHADJ.SPOrgan) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Organ transplant expenses'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPK1) != 0 or get_currency(IANROTHADJ.SPK1) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Partnership income and/or S Corporation income'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPSegal) != 0 or get_currency(IANROTHADJ.SPSegal) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Segal Americorps Education Award payments'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPShell) != 0 or get_currency(IANROTHADJ.SPShell) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Speculative shell buildings'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TStud) != 0 or get_currency(IANROTHADJ.SStud) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Student loan interest deduction'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPVictim) != 0 or get_currency(IANROTHADJ.SPVictim) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Victim compensation awards'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPWages) != 0 or get_currency(IANROTHADJ.SPWages) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Wages paid to certain individuals'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPWorkCr) != 0 or get_currency(IANROTHADJ.SPWorkCr) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Work opportunity credit, federal Form 5884'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TP2106) != 0 or get_currency(IANROTHADJ.SP2106) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Business expenses of reservists, QPA, FBO, federal Form 2106'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TMSA) != 0 or get_currency(IANROTHADJ.SMSA) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Archer MSA deduction, federal Form 8853'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPJury) != 0 or get_currency(IANROTHADJ.SPJury) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Jury pay repayment to employer'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPRFST) != 0 or get_currency(IANROTHADJ.SPRFST) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Reforestation amortization and expenses'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPSub) != 0 or get_currency(IANROTHADJ.SPSub) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Repayment of supplemental unemployment benefits'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TP501c) != 0 or get_currency(IANROTHADJ.SP501c) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Contributions to a 501(c)(18) pension plan'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPPerRent) != 0 or get_currency(IANROTHADJ.SPPerRent) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Expenses for personal property rental'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TP403b) != 0 or get_currency(IANROTHADJ.SP403b) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Contributions by certain chaplains to a 403(b) plan'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPUDC) != 0 or get_currency(IANROTHADJ.SPUDC) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Qualified attorney/court fees paid after 10/22/2004'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPWBF) != 0 or get_currency(IANROTHADJ.SPWBF) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Qualified whistleblower fees'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TP8873) != 0 or get_currency(IANROTHADJ.SP8873) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Extraterritorial Income Exclusion, federal Form 8873'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPOlympic) != 0 or get_currency(IANROTHADJ.SPOlympic) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Nontaxable amount of Olympic and Paralympic medals and USOC prize money'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPEducator) != 0 or get_currency(IANROTHADJ.SPEducator) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Educator expenses'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPTuition) != 0 or get_currency(IANROTHADJ.SPTuition) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Tuition and fees deduction'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPElectric) != 0 or get_currency(IANROTHADJ.SPElectric) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Nonresident Electric Utility Reciprocity'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPRapid) != 0 or get_currency(IANROTHADJ.SPRapid) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Rapid Response to State Disasters'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPIAABLE) != 0 or get_currency(IANROTHADJ.SPIAABLE) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Iowa ABLE savings plan trust'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}return Hold{n}{n}
def Names_Calculation():{n}{t}return get_string(IAREQUIRED.CombNames){n}{n}
def PrintMe_Calculation():{n}{t}if get_currency(IANROTHADJ.TPTot) != 0 or get_currency(IANROTHADJ.SPTot) != 0:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def SPAmount_Calculation(Index):{n}{t}count = Integer(){n}{n}{t}Hold = Currency(){n}{t}count = 0{n}{t}Hold = 0{n}{t}if get_currency(IANROTHADJ.TOth1) != 0 or get_currency(IANROTHADJ.SOth1) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHADJ.SOth1){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPActiveMil) != 0 or get_currency(IANROTHADJ.SPActiveMil) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHADJ.SPActiveMil){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPAltMV) != 0 or get_currency(IANROTHADJ.SPAltMV) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHADJ.SPAltMV){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPInvolConv) != 0 or get_currency(IANROTHADJ.SPInvolConv) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHADJ.SPInvolConv){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPClaimOfRight) != 0 or get_currency(IANROTHADJ.SPClaimOfRight) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHADJ.SPClaimOfRight){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPIAEd) != 0 or get_currency(IANROTHADJ.SPIAEd) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHADJ.SPIAEd){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPIADis) != 0 or get_currency(IANROTHADJ.SPIADis) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHADJ.SPIADis){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPDomProd) != 0 or get_currency(IANROTHADJ.SPDomProd) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHADJ.SPDomProd){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPFirstHmBuy) != 0 or get_currency(IANROTHADJ.SPFirstHmBuy) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHADJ.SPFirstHmBuy){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPEmployerSS) != 0 or get_currency(IANROTHADJ.SPEmployerSS) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHADJ.SPEmployerSS){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPFedFuels) != 0 or get_currency(IANROTHADJ.SPFedFuels) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHADJ.SPFedFuels){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPForeign) != 0 or get_currency(IANROTHADJ.SPForeign) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHADJ.SPForeign){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TP2555) != 0 or get_currency(IANROTHADJ.SP2555) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHADJ.SP2555){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPDistressed) != 0 or get_currency(IANROTHADJ.SPDistressed) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHADJ.SPDistressed){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPHealthSav) != 0 or get_currency(IANROTHADJ.SPHealthSav) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHADJ.SPHealthSav){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPVet) != 0 or get_currency(IANROTHADJ.SPVet) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHADJ.SPVet){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPVetGrant) != 0 or get_currency(IANROTHADJ.SPVetGrant) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHADJ.SPVetGrant){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPHomeHealth) != 0 or get_currency(IANROTHADJ.SPHomeHealth) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHADJ.SPHomeHealth){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPIAVetTrust) != 0 or get_currency(IANROTHADJ.SPIAVetTrust) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHADJ.SPIAVetTrust){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPMilitaryExem) != 0 or get_currency(IANROTHADJ.SPMilitaryExem) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHADJ.SPMilitaryExem){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TIANOL) != 0 or get_currency(IANROTHADJ.SIANOL) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHADJ.SIANOL){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPOrgan) != 0 or get_currency(IANROTHADJ.SPOrgan) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHADJ.SPOrgan){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPK1) != 0 or get_currency(IANROTHADJ.SPK1) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHADJ.SPK1){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPSegal) != 0 or get_currency(IANROTHADJ.SPSegal) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHADJ.SPSegal){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPShell) != 0 or get_currency(IANROTHADJ.SPShell) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHADJ.SPShell){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TStud) != 0 or get_currency(IANROTHADJ.SStud) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHADJ.SStud){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPVictim) != 0 or get_currency(IANROTHADJ.SPVictim) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHADJ.SPVictim){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPWages) != 0 or get_currency(IANROTHADJ.SPWages) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHADJ.SPWages){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPWorkCr) != 0 or get_currency(IANROTHADJ.SPWorkCr) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHADJ.SPWorkCr){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TP2106) != 0 or get_currency(IANROTHADJ.SP2106) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHADJ.SP2106){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TMSA) != 0 or get_currency(IANROTHADJ.SMSA) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHADJ.SMSA){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPJury) != 0 or get_currency(IANROTHADJ.SPJury) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHADJ.SPJury){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPRFST) != 0 or get_currency(IANROTHADJ.SPRFST) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHADJ.SPRFST){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPSub) != 0 or get_currency(IANROTHADJ.SPSub) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHADJ.SPSub){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TP501c) != 0 or get_currency(IANROTHADJ.SP501c) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHADJ.SP501c){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPPerRent) != 0 or get_currency(IANROTHADJ.SPPerRent) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHADJ.SPPerRent){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TP403b) != 0 or get_currency(IANROTHADJ.SP403b) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHADJ.SP403b){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPUDC) != 0 or get_currency(IANROTHADJ.SPUDC) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHADJ.SPUDC){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPWBF) != 0 or get_currency(IANROTHADJ.SPWBF) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHADJ.SPWBF){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TP8873) != 0 or get_currency(IANROTHADJ.SP8873) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHADJ.SP8873){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPOlympic) != 0 or get_currency(IANROTHADJ.SPOlympic) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHADJ.SPOlympic){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPEducator) != 0 or get_currency(IANROTHADJ.SPEducator) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHADJ.SPEducator){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPTuition) != 0 or get_currency(IANROTHADJ.SPTuition) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHADJ.SPTuition){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPElectric) != 0 or get_currency(IANROTHADJ.SPElectric) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHADJ.SPElectric){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPRapid) != 0 or get_currency(IANROTHADJ.SPRapid) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHADJ.SPRapid){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPIAABLE) != 0 or get_currency(IANROTHADJ.SPIAABLE) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHADJ.SPIAABLE){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}return Hold{n}{n}
def SPName_Calculation():{n}{t}return get_string(USWBasicInfo.SPCommon){n}{n}
def SPTot_Calculation():{n}{t}if get_bool(IAREQUIRED.AskSpouse) == True and get_bool(IAF126.SpRes) == False:{n}{t}{t}return get_currency(IANROTHADJ.SOth1) + get_currency(IANROTHADJ.SPActiveMil) + get_currency(IANROTHADJ.SPAltMV) + get_currency(IANROTHADJ.SPInvolConv) + get_currency(IANROTHADJ.SPClaimOfRight) + get_currency(IANROTHADJ.SPIAEd) + get_currency(IANROTHADJ.SPIADis) + get_currency(IANROTHADJ.SPDomProd) + get_currency(IANROTHADJ.SPFirstHmBuy) + get_currency(IANROTHADJ.SPEmployerSS) + get_currency(IANROTHADJ.SPFedFuels) + get_currency(IANROTHADJ.SPForeign) + get_currency(IANROTHADJ.SP2555) + get_currency(IANROTHADJ.SPDistressed) + get_currency(IANROTHADJ.SPHealthSav) + get_currency(IANROTHADJ.SPVet) + get_currency(IANROTHADJ.SPVetGrant) + get_currency(IANROTHADJ.SPHomeHealth) + get_currency(IANROTHADJ.SPIAVetTrust) + get_currency(IANROTHADJ.SPMilitaryExem) + get_currency(IANROTHADJ.SIANOL) + get_currency(IANROTHADJ.SPOrgan) + get_currency(IANROTHADJ.SPK1) + get_currency(IANROTHADJ.SPSegal) + get_currency(IANROTHADJ.SPShell) + get_currency(IANROTHADJ.SStud) + get_currency(IANROTHADJ.SPVictim) + get_currency(IANROTHADJ.SPWages) + get_currency(IANROTHADJ.SPWorkCr) + get_currency(IANROTHADJ.SP2106) + get_currency(IANROTHADJ.SMSA) + get_currency(IANROTHADJ.SPJury) + get_currency(IANROTHADJ.SPRFST) + get_currency(IANROTHADJ.SPSub) + get_currency(IANROTHADJ.SP501c) + get_currency(IANROTHADJ.SPPerRent) + get_currency(IANROTHADJ.SP403b) + get_currency(IANROTHADJ.SPUDC) + get_currency(IANROTHADJ.SPWBF) + get_currency(IANROTHADJ.SP8873) + get_currency(IANROTHADJ.SPOlympic) + get_currency(IANROTHADJ.SPEducator) + get_currency(IANROTHADJ.SPTuition) + get_currency(IANROTHADJ.SPElectric) + get_currency(IANROTHADJ.SPRapid) + get_currency(IANROTHADJ.SPIAABLE){n}{t}else:{n}{t}{t}return 0{n}{n}
def SSN_Calculation():{n}{t}return get_string(IAF1040.SSN){n}{n}
def TPAmount_Calculation(Index):{n}{t}count = Integer(){n}{n}{t}Hold = Currency(){n}{t}count = 0{n}{t}Hold = 0{n}{t}if get_currency(IANROTHADJ.TOth1) != 0 or get_currency(IANROTHADJ.SOth1) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHADJ.TOth1){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPActiveMil) != 0 or get_currency(IANROTHADJ.SPActiveMil) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHADJ.TPActiveMil){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPAltMV) != 0 or get_currency(IANROTHADJ.SPAltMV) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHADJ.TPAltMV){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPInvolConv) != 0 or get_currency(IANROTHADJ.SPInvolConv) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHADJ.TPInvolConv){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPClaimOfRight) != 0 or get_currency(IANROTHADJ.SPClaimOfRight) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHADJ.TPClaimOfRight){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPIAEd) != 0 or get_currency(IANROTHADJ.SPIAEd) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHADJ.TPIAEd){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPIADis) != 0 or get_currency(IANROTHADJ.SPIADis) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHADJ.TPIADis){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPDomProd) != 0 or get_currency(IANROTHADJ.SPDomProd) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHADJ.TPDomProd){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPFirstHmBuy) != 0 or get_currency(IANROTHADJ.SPFirstHmBuy) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHADJ.TPFirstHmBuy){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPEmployerSS) != 0 or get_currency(IANROTHADJ.SPEmployerSS) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHADJ.TPEmployerSS){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPFedFuels) != 0 or get_currency(IANROTHADJ.SPFedFuels) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHADJ.TPFedFuels){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPForeign) != 0 or get_currency(IANROTHADJ.SPForeign) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHADJ.TPForeign){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TP2555) != 0 or get_currency(IANROTHADJ.SP2555) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHADJ.TP2555){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPDistressed) != 0 or get_currency(IANROTHADJ.SPDistressed) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHADJ.TPDistressed){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPHealthSav) != 0 or get_currency(IANROTHADJ.SPHealthSav) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHADJ.TPHealthSav){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPVet) != 0 or get_currency(IANROTHADJ.SPVet) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHADJ.TPVet){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPVetGrant) != 0 or get_currency(IANROTHADJ.SPVetGrant) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHADJ.TPVetGrant){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPHomeHealth) != 0 or get_currency(IANROTHADJ.SPHomeHealth) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHADJ.TPHomeHealth){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPIAVetTrust) != 0 or get_currency(IANROTHADJ.SPIAVetTrust) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHADJ.TPIAVetTrust){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPMilitaryExem) != 0 or get_currency(IANROTHADJ.SPMilitaryExem) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHADJ.TPMilitaryExem){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TIANOL) != 0 or get_currency(IANROTHADJ.SIANOL) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHADJ.TIANOL){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPOrgan) != 0 or get_currency(IANROTHADJ.SPOrgan) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHADJ.TPOrgan){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPK1) != 0 or get_currency(IANROTHADJ.SPK1) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHADJ.TPK1){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPSegal) != 0 or get_currency(IANROTHADJ.SPSegal) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHADJ.TPSegal){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPShell) != 0 or get_currency(IANROTHADJ.SPShell) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHADJ.TPShell){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TStud) != 0 or get_currency(IANROTHADJ.SStud) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHADJ.TStud){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPVictim) != 0 or get_currency(IANROTHADJ.SPVictim) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHADJ.TPVictim){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPWages) != 0 or get_currency(IANROTHADJ.SPWages) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHADJ.TPWages){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPWorkCr) != 0 or get_currency(IANROTHADJ.SPWorkCr) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHADJ.TPWorkCr){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TP2106) != 0 or get_currency(IANROTHADJ.SP2106) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHADJ.TP2106){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TMSA) != 0 or get_currency(IANROTHADJ.SMSA) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHADJ.TMSA){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPJury) != 0 or get_currency(IANROTHADJ.SPJury) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHADJ.TPJury){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPRFST) != 0 or get_currency(IANROTHADJ.SPRFST) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHADJ.TPRFST){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPSub) != 0 or get_currency(IANROTHADJ.SPSub) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHADJ.TPSub){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TP501c) != 0 or get_currency(IANROTHADJ.SP501c) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHADJ.TP501c){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPPerRent) != 0 or get_currency(IANROTHADJ.SPPerRent) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHADJ.TPPerRent){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TP403b) != 0 or get_currency(IANROTHADJ.SP403b) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHADJ.TP403b){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPUDC) != 0 or get_currency(IANROTHADJ.SPUDC) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHADJ.TPUDC){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPWBF) != 0 or get_currency(IANROTHADJ.SPWBF) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHADJ.TPWBF){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TP8873) != 0 or get_currency(IANROTHADJ.SP8873) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHADJ.TP8873){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPOlympic) != 0 or get_currency(IANROTHADJ.SPOlympic) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHADJ.TPOlympic){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPEducator) != 0 or get_currency(IANROTHADJ.SPEducator) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHADJ.TPEducator){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPTuition) != 0 or get_currency(IANROTHADJ.SPTuition) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHADJ.TPTuition){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPElectric) != 0 or get_currency(IANROTHADJ.SPElectric) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHADJ.TPElectric){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPRapid) != 0 or get_currency(IANROTHADJ.SPRapid) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHADJ.TPRapid){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHADJ.TPIAABLE) != 0 or get_currency(IANROTHADJ.SPIAABLE) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHADJ.TPIAABLE){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}return Hold{n}{n}
def TPJointAmount_Calculation(Index):{n}{t}if get_bool(IAF1040.CombMFS) == True:{n}{t}{t}return get_currency(IANROTHADJ.TPAmount(Index)){n}{t}else:{n}{t}{t}return get_currency(IANROTHADJ.TPAmount(Index)) + get_currency(IANROTHADJ.SPAmount(Index)){n}{n}
def TPName_Calculation():{n}{t}return get_string(USWBasicInfo.TPCommon){n}{n}
def TPTot_Calculation():{n}{t}if get_bool(IAF126.TpPYRes) == True or get_bool(IAF126.TpNonRes) == True:{n}{t}{t}return get_currency(IANROTHADJ.TOth1) + get_currency(IANROTHADJ.TPActiveMil) + get_currency(IANROTHADJ.TPAltMV) + get_currency(IANROTHADJ.TPInvolConv) + get_currency(IANROTHADJ.TPClaimOfRight) + get_currency(IANROTHADJ.TPIAEd) + get_currency(IANROTHADJ.TPIADis) + get_currency(IANROTHADJ.TPDomProd) + get_currency(IANROTHADJ.TPFirstHmBuy) + get_currency(IANROTHADJ.TPEmployerSS) + get_currency(IANROTHADJ.TPFedFuels) + get_currency(IANROTHADJ.TPForeign) + get_currency(IANROTHADJ.TP2555) + get_currency(IANROTHADJ.TPDistressed) + get_currency(IANROTHADJ.TPHealthSav) + get_currency(IANROTHADJ.TPVet) + get_currency(IANROTHADJ.TPVetGrant) + get_currency(IANROTHADJ.TPHomeHealth) + get_currency(IANROTHADJ.TPIAVetTrust) + get_currency(IANROTHADJ.TPMilitaryExem) + get_currency(IANROTHADJ.TIANOL) + get_currency(IANROTHADJ.TPOrgan) + get_currency(IANROTHADJ.TPK1) + get_currency(IANROTHADJ.TPSegal) + get_currency(IANROTHADJ.TPShell) + get_currency(IANROTHADJ.TStud) + get_currency(IANROTHADJ.TPVictim) + get_currency(IANROTHADJ.TPWages) + get_currency(IANROTHADJ.TPWorkCr) + get_currency(IANROTHADJ.TP2106) + get_currency(IANROTHADJ.TMSA) + get_currency(IANROTHADJ.TPJury) + get_currency(IANROTHADJ.TPRFST) + get_currency(IANROTHADJ.TPSub) + get_currency(IANROTHADJ.TP501c) + get_currency(IANROTHADJ.TPPerRent) + get_currency(IANROTHADJ.TP403b) + get_currency(IANROTHADJ.TPUDC) + get_currency(IANROTHADJ.TPWBF) + get_currency(IANROTHADJ.TP8873) + get_currency(IANROTHADJ.TPOlympic) + get_currency(IANROTHADJ.TPEducator) + get_currency(IANROTHADJ.TPTuition) + get_currency(IANROTHADJ.TPElectric) + get_currency(IANROTHADJ.TPRapid) + get_currency(IANROTHADJ.TPIAABLE){n}{t}else:{n}{t}{t}return 0{n}{n}
def TxtOth1_Calculation():{n}{t}return get_string(IAOTHADJ.TxtOth1){n}{n}def Code_Calculation(Index):{n}{t}count = Integer(){n}{n}{t}Hold = String(){n}{t}count = 0{n}{t}Hold = ''{n}{t}if get_currency(IANROTHINC.TPOth1) != 0 or get_currency(IANROTHINC.SPOth1) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'm'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPOth2) != 0 or get_currency(IANROTHINC.SPOth2) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'm'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPBabySit) != 0 or get_currency(IANROTHINC.SPBabySit) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'a'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPBonus) != 0 or get_currency(IANROTHINC.SPBonus) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'b'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPIAEd) != 0 or get_currency(IANROTHINC.SPIAEd) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'd'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPDirector) != 0 or get_currency(IANROTHINC.SPDirector) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'e'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPIntangDrill) != 0 or get_currency(IANROTHINC.SPIntangDrill) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'f'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPExecutor) != 0 or get_currency(IANROTHINC.SPExecutor) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'g'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPFirstHmBuy) != 0 or get_currency(IANROTHINC.SPFirstHmBuy) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'h'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPK1) != 0 or get_currency(IANROTHINC.SPK1) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'i'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPRefundCr) != 0 or get_currency(IANROTHINC.SPRefundCr) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'j'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPStRefund) != 0 or get_currency(IANROTHINC.SPStRefund) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'k'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPDepl) != 0 or get_currency(IANROTHINC.SPDepl) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'l'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPJury) != 0 or get_currency(IANROTHINC.SPJury) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'm'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPPerRent) != 0 or get_currency(IANROTHINC.SPPerRent) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'm'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TP8814) != 0 or get_currency(IANROTHINC.SP8814) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'm'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPMSA) != 0 or get_currency(IANROTHINC.SPMSA) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'm'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPMedMSA) != 0 or get_currency(IANROTHINC.SPMedMSA) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'm'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPLTC) != 0 or get_currency(IANROTHINC.SPLTC) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'm'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPMisc) != 0 or get_currency(IANROTHINC.SPMisc) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'm'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPAlaska) != 0 or get_currency(IANROTHINC.SPAlaska) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'm'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPCoverdell) != 0 or get_currency(IANROTHINC.SPCoverdell) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'm'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPCanceled) != 0 or get_currency(IANROTHINC.SPCanceled) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'm'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPPshipCan) != 0 or get_currency(IANROTHINC.SPPshipCan) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'm'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPHSA) != 0 or get_currency(IANROTHINC.SPHSA) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'm'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPAltTrade) != 0 or get_currency(IANROTHINC.SPAltTrade) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'm'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPRecapTuit) != 0 or get_currency(IANROTHINC.SPRecapTuit) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'm'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPRecapChar) != 0 or get_currency(IANROTHINC.SPRecapChar) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'm'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TP5471) != 0 or get_currency(IANROTHINC.SP5471) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'm'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPHobby) != 0 or get_currency(IANROTHINC.SPHobby) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'm'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TP8621) != 0 or get_currency(IANROTHINC.SP8621) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'm'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPDefDist) != 0 or get_currency(IANROTHINC.SPDefDist) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'm'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPDisaster) != 0 or get_currency(IANROTHINC.SPDisaster) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'm'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPFoster) != 0 or get_currency(IANROTHINC.SPFoster) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'm'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPCredAdj) != 0 or get_currency(IANROTHINC.SPCredAdj) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'm'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPPYNPTC) != 0 or get_currency(IANROTHINC.SPPYNPTC) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'n'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TP1099QA) != 0 or get_currency(IANROTHINC.SP1099QA) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'm'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPAirline) != 0 or get_currency(IANROTHINC.SPAirline) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'm'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TP1099B) != 0 or get_currency(IANROTHINC.SP1099B) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'm'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPIAABLE) != 0 or get_currency(IANROTHINC.SPIAABLE) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'o'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPBusPass) != 0 or get_currency(IANROTHINC.SPBusPass) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'p'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPFarmLoss) != 0 or get_currency(IANROTHINC.SPFarmLoss) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'm'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TP8824) != 0 or get_currency(IANROTHINC.SP8824) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'q'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPStudLoanDis) != 0 or get_currency(IANROTHINC.SPStudLoanDis) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'r'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TP4684) != 0 or get_currency(IANROTHINC.SP4684) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 's'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TP3903) != 0 or get_currency(IANROTHINC.SP3903) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 't'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPBusInt) != 0 or get_currency(IANROTHINC.SPBusInt) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'u'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPEntExp) != 0 or get_currency(IANROTHINC.SPEntExp) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'v'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TP2106) != 0 or get_currency(IANROTHINC.SP2106) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'w'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPOthNC) != 0 or get_currency(IANROTHINC.SPOthNC) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'x'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}return Hold{n}{n}
def Desc_Calculation():{n}{t}Total = Currency(){n}{t}Total = get_currency(IANROTHINC.TPTot) + get_currency(IANROTHINC.SPTot){n}{t}return CStr(Total){n}{n}
def Description_Calculation(Index):{n}{t}count = Integer(){n}{n}{t}Hold = String(){n}{t}count = 0{n}{t}Hold = ''{n}{t}if get_currency(IANROTHINC.TPOth1) != 0 or get_currency(IANROTHINC.SPOth1) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_string(IANROTHINC.Txt1){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPOth2) != 0 or get_currency(IANROTHINC.SPOth2) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_string(IANROTHINC.Txt2){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPBabySit) != 0 or get_currency(IANROTHINC.SPBabySit) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Baby-sitting income not reported on federal Schedule C'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPBonus) != 0 or get_currency(IANROTHINC.SPBonus) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Bonus depreciation/section 179 adjustment'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPIAEd) != 0 or get_currency(IANROTHINC.SPIAEd) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'College Savings Iowa or Iowa Advisor 529 Plan'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPDirector) != 0 or get_currency(IANROTHINC.SPDirector) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Director\'s fees'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPIntangDrill) != 0 or get_currency(IANROTHINC.SPIntangDrill) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Drilling'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPExecutor) != 0 or get_currency(IANROTHINC.SPExecutor) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Executor\'s fees'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPFirstHmBuy) != 0 or get_currency(IANROTHINC.SPFirstHmBuy) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'First-time homebuyers account non-qualifying withdrawals'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPK1) != 0 or get_currency(IANROTHINC.SPK1) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Partnership income and/or S Corporation income'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPRefundCr) != 0 or get_currency(IANROTHINC.SPRefundCr) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Refundable Iowa credits'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPStRefund) != 0 or get_currency(IANROTHINC.SPStRefund) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'State income tax refunds'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPDepl) != 0 or get_currency(IANROTHINC.SPDepl) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Wells'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPJury) != 0 or get_currency(IANROTHINC.SPJury) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Jury pay'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPPerRent) != 0 or get_currency(IANROTHINC.SPPerRent) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Income from personal property'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TP8814) != 0 or get_currency(IANROTHINC.SP8814) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Child\'s income amount, federal Form 8814'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPMSA) != 0 or get_currency(IANROTHINC.SPMSA) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'MSA distributions, federal Form 8853'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPMedMSA) != 0 or get_currency(IANROTHINC.SPMedMSA) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Medicare Advantage distributions, federal Form 8853'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPLTC) != 0 or get_currency(IANROTHINC.SPLTC) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Long-term care distribution, federal Form 8853'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPMisc) != 0 or get_currency(IANROTHINC.SPMisc) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Form 1099-MISC, boxes 3 or 8'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPAlaska) != 0 or get_currency(IANROTHINC.SPAlaska) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Alaska Permanent Fund dividends'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPCoverdell) != 0 or get_currency(IANROTHINC.SPCoverdell) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Coverdell ESA Or Qualified Tuition Program'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPCanceled) != 0 or get_currency(IANROTHINC.SPCanceled) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Cancellation of nonbusiness debt, federal Form 1099-C'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPPshipCan) != 0 or get_currency(IANROTHINC.SPPshipCan) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Cancellation of business debt, Partnership Schedule K-1'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPHSA) != 0 or get_currency(IANROTHINC.SPHSA) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'HSA distributions, federal Form 8889'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPAltTrade) != 0 or get_currency(IANROTHINC.SPAltTrade) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Alternative trade adjustment assistance payments'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPRecapTuit) != 0 or get_currency(IANROTHINC.SPRecapTuit) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Recapture of prior year tuition and fees deduction'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPRecapChar) != 0 or get_currency(IANROTHINC.SPRecapChar) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Recapture of charitable contribution deduction'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TP5471) != 0 or get_currency(IANROTHINC.SP5471) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Income from a foreign corporation, federal Form 5471'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPHobby) != 0 or get_currency(IANROTHINC.SPHobby) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Hobby income'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TP8621) != 0 or get_currency(IANROTHINC.SP8621) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Income or loss from Section 1291, federal Form 8621'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPDefDist) != 0 or get_currency(IANROTHINC.SPDefDist) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Loss on excess 
def Names_Calculation():{n}{t}return get_string(IAREQUIRED.CombNames){n}{n}
def Print_Calculation():{n}{t}if get_currency(IANROTHINC.TPTot) != 0 or get_currency(IANROTHINC.SPTot) != 0:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def SP1099B_Calculation():{n}{t}if get_bool(IAREQUIRED.AskSpouse) == True:{n}{t}{t}return get_currency(IAWOTHINC.SP1099B){n}{t}else:{n}{t}{t}return 0{n}{n}
def SP1099QA_Calculation():{n}{t}if get_bool(IAREQUIRED.AskSpouse) == True:{n}{t}{t}return get_currency(IAWOTHINC.SP1099QA){n}{t}else:{n}{t}{t}return 0{n}{n}
def SP2106_Calculation():{n}{t}if get_bool(IAREQUIRED.AskSpouse) == True:{n}{t}{t}return get_currency(IAWOTHINC.SP2106){n}{t}else:{n}{t}{t}return 0{n}{n}
def SP3903_Calculation():{n}{t}if get_bool(IAREQUIRED.AskSpouse) == True:{n}{t}{t}return get_currency(IAWOTHINC.SP3903){n}{t}else:{n}{t}{t}return 0{n}{n}
def SP4684_Calculation():{n}{t}if get_bool(IAREQUIRED.AskSpouse) == True:{n}{t}{t}return get_currency(IAWOTHINC.SP4684){n}{t}else:{n}{t}{t}return 0{n}{n}
def SP5471_Calculation():{n}{t}if get_bool(IAREQUIRED.AskSpouse) == True:{n}{t}{t}return get_currency(IAWOTHINC.SP5471){n}{t}else:{n}{t}{t}return 0{n}{n}
def SP8621_Calculation():{n}{t}if get_bool(IAREQUIRED.AskSpouse) == True:{n}{t}{t}return get_currency(IAWOTHINC.SP8621){n}{t}else:{n}{t}{t}return 0{n}{n}
def SP8814_Calculation():{n}{t}if get_bool(IAREQUIRED.AskSpouse) == True:{n}{t}{t}return get_currency(IAWOTHINC.SP8814){n}{t}else:{n}{t}{t}return 0{n}{n}
def SP8824_Calculation():{n}{t}if get_bool(IAREQUIRED.AskSpouse) == True:{n}{t}{t}return get_currency(IAWOTHINC.SP8824){n}{t}else:{n}{t}{t}return 0{n}{n}
def SPAirline_Calculation():{n}{t}if get_bool(IAREQUIRED.AskSpouse) == True:{n}{t}{t}return get_currency(IAWOTHINC.SPAirline){n}{t}else:{n}{t}{t}return 0{n}{n}
def SPAlaska_Calculation():{n}{t}if get_bool(IAREQUIRED.AskSpouse) == True:{n}{t}{t}return get_currency(IAWOTHINC.SPAlaska){n}{t}else:{n}{t}{t}return 0{n}{n}
def SPAltTrade_Calculation():{n}{t}if get_bool(IAREQUIRED.AskSpouse) == True:{n}{t}{t}return get_currency(IAWOTHINC.SPAltTrade){n}{t}else:{n}{t}{t}return 0{n}{n}
def SPAmount_Calculation(Index):{n}{t}count = Integer(){n}{n}{t}Hold = Currency(){n}{t}count = 0{n}{t}Hold = 0{n}{t}if get_currency(IANROTHINC.TPOth1) != 0 or get_currency(IANROTHINC.SPOth1) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHINC.SPOth1){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPOth2) != 0 or get_currency(IANROTHINC.SPOth2) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHINC.SPOth2){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPBabySit) != 0 or get_currency(IANROTHINC.SPBabySit) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHINC.SPBabySit){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPBonus) != 0 or get_currency(IANROTHINC.SPBonus) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHINC.SPBonus){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPIAEd) != 0 or get_currency(IANROTHINC.SPIAEd) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHINC.SPIAEd){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPDirector) != 0 or get_currency(IANROTHINC.SPDirector) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHINC.SPDirector){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPIntangDrill) != 0 or get_currency(IANROTHINC.SPIntangDrill) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHINC.SPIntangDrill){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPExecutor) != 0 or get_currency(IANROTHINC.SPExecutor) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHINC.SPExecutor){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPFirstHmBuy) != 0 or get_currency(IANROTHINC.SPFirstHmBuy) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHINC.SPFirstHmBuy){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPK1) != 0 or get_currency(IANROTHINC.SPK1) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHINC.SPK1){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPRefundCr) != 0 or get_currency(IANROTHINC.SPRefundCr) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHINC.SPRefundCr){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPStRefund) != 0 or get_currency(IANROTHINC.SPStRefund) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHINC.SPStRefund){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPDepl) != 0 or get_currency(IANROTHINC.SPDepl) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHINC.SPDepl){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPJury) != 0 or get_currency(IANROTHINC.SPJury) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHINC.SPJury){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPPerRent) != 0 or get_currency(IANROTHINC.SPPerRent) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHINC.SPPerRent){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TP8814) != 0 or get_currency(IANROTHINC.SP8814) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHINC.SP8814){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPMSA) != 0 or get_currency(IANROTHINC.SPMSA) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHINC.SPMSA){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPMedMSA) != 0 or get_currency(IANROTHINC.SPMedMSA) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHINC.SPMedMSA){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPLTC) != 0 or get_currency(IANROTHINC.SPLTC) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHINC.SPLTC){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPMisc) != 0 or get_currency(IANROTHINC.SPMisc) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHINC.SPMisc){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPAlaska) != 0 or get_currency(IANROTHINC.SPAlaska) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHINC.SPAlaska){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPCoverdell) != 0 or get_currency(IANROTHINC.SPCoverdell) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHINC.SPCoverdell){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPCanceled) != 0 or get_currency(IANROTHINC.SPCanceled) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHINC.SPCanceled){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPPshipCan) != 0 or get_currency(IANROTHINC.SPPshipCan) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHINC.SPPshipCan){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPHSA) != 0 or get_currency(IANROTHINC.SPHSA) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHINC.SPHSA){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPAltTrade) != 0 or get_currency(IANROTHINC.SPAltTrade) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHINC.SPAltTrade){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPRecapTuit) != 0 or get_currency(IANROTHINC.SPRecapTuit) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHINC.SPRecapTuit){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPRecapChar) != 0 or get_currency(IANROTHINC.SPRecapChar) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHINC.SPRecapChar){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TP5471) != 0 or get_currency(IANROTHINC.SP5471) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHINC.SP5471){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPHobby) != 0 or get_currency(IANROTHINC.SPHobby) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHINC.SPHobby){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TP8621) != 0 or get_currency(IANROTHINC.SP8621) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHINC.SP8621){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPDefDist) != 0 or get_currency(IANROTHINC.SPDefDist) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHINC.SPDefDist){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPDisaster) != 0 or get_currency(IANROTHINC.SPDisaster) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHINC.SPDisaster){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPFoster) != 0 or get_currency(IANROTHINC.SPFoster) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHINC.SPFoster){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPCredAdj) != 0 or get_currency(IANROTHINC.SPCredAdj) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHINC.SPCredAdj){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPPYNPTC) != 0 or get_currency(IANROTHINC.SPPYNPTC) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHINC.SPPYNPTC){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TP1099QA) != 0 or get_currency(IANROTHINC.SP1099QA) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHINC.SP1099QA){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPAirline) != 0 or get_currency(IANROTHINC.SPAirline) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHINC.SPAirline){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TP1099B) != 0 or get_currency(IANROTHINC.SP1099B) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHINC.SP1099B){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPIAABLE) != 0 or get_currency(IANROTHINC.SPIAABLE) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHINC.SPIAABLE){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPBusPass) != 0 or get_currency(IANROTHINC.SPBusPass) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHINC.SPBusPass){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPFarmLoss) != 0 or get_currency(IANROTHINC.SPFarmLoss) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHINC.SPFarmLoss){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TP8824) != 0 or get_currency(IANROTHINC.SP8824) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHINC.SP8824){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPStudLoanDis) != 0 or get_currency(IANROTHINC.SPStudLoanDis) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHINC.SPStudLoanDis){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TP4684) != 0 or get_currency(IANROTHINC.SP4684) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHINC.SP4684){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TP3903) != 0 or get_currency(IANROTHINC.SP3903) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHINC.SP3903){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPBusInt) != 0 or get_currency(IANROTHINC.SPBusInt) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHINC.SPBusInt){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPEntExp) != 0 or get_currency(IANROTHINC.SPEntExp) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHINC.SPEntExp){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TP2106) != 0 or get_currency(IANROTHINC.SP2106) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHINC.SP2106){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPOthNC) != 0 or get_currency(IANROTHINC.SPOthNC) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHINC.SPOthNC){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}return Hold{n}{n}
def SPBabySit_Calculation():{n}{t}if get_bool(IAREQUIRED.AskSpouse) == True:{n}{t}{t}return get_currency(IAWOTHINC.SPBabySit){n}{t}else:{n}{t}{t}return 0{n}{n}
def SPBonus_Calculation():{n}{t}if get_bool(IAREQUIRED.AskSpouse) == True:{n}{t}{t}return get_currency(IAWOTHINC.SPBonus){n}{t}else:{n}{t}{t}return 0{n}{n}
def SPBusInt_Calculation():{n}{t}if get_bool(IAREQUIRED.AskSpouse) == True:{n}{t}{t}return get_currency(IAWOTHINC.SPBusInt){n}{t}else:{n}{t}{t}return 0{n}{n}
def SPBusPass_Calculation():{n}{t}if get_bool(IAREQUIRED.AskSpouse) == True:{n}{t}{t}return get_currency(IAWOTHINC.SPBusPass){n}{t}else:{n}{t}{t}return 0{n}{n}
def SPCanceled_Calculation():{n}{t}if get_bool(IAREQUIRED.AskSpouse) == True:{n}{t}{t}return get_currency(IAWOTHINC.SPCanceled){n}{t}else:{n}{t}{t}return 0{n}{n}
def SPCoverdell_Calculation():{n}{t}if get_bool(IAREQUIRED.AskSpouse) == True:{n}{t}{t}return get_currency(IAWOTHINC.SPCoverdell){n}{t}else:{n}{t}{t}return 0{n}{n}
def SPCredAdj_Calculation():{n}{t}if get_bool(IAREQUIRED.AskSpouse) == True:{n}{t}{t}return get_currency(IAWOTHINC.SPCredAdj){n}{t}else:{n}{t}{t}return 0{n}{n}
def SPDefDist_Calculation():{n}{t}if get_bool(IAREQUIRED.AskSpouse) == True:{n}{t}{t}return get_currency(IAWOTHINC.SPDefDist){n}{t}else:{n}{t}{t}return 0{n}{n}
def SPDepl_Calculation():{n}{t}if get_bool(IAREQUIRED.AskSpouse) == True:{n}{t}{t}return get_currency(IAWOTHINC.SPDepl){n}{t}else:{n}{t}{t}return 0{n}{n}
def SPDirector_Calculation():{n}{t}if get_bool(IAREQUIRED.AskSpouse) == True:{n}{t}{t}return get_currency(IAWOTHINC.SPDirector){n}{t}else:{n}{t}{t}return 0{n}{n}
def SPDisaster_Calculation():{n}{t}if get_bool(IAREQUIRED.AskSpouse) == True:{n}{t}{t}return get_currency(IAWOTHINC.SPDisaster){n}{t}else:{n}{t}{t}return 0{n}{n}
def SPEntExp_Calculation():{n}{t}if get_bool(IAREQUIRED.AskSpouse) == True:{n}{t}{t}return get_currency(IAWOTHINC.SPEntExp){n}{t}else:{n}{t}{t}return 0{n}{n}
def SPExecutor_Calculation():{n}{t}if get_bool(IAREQUIRED.AskSpouse) == True:{n}{t}{t}return get_currency(IAWOTHINC.SPExecutor){n}{t}else:{n}{t}{t}return 0{n}{n}
def SPFarmLoss_Calculation():{n}{t}if get_bool(IAREQUIRED.AskSpouse) == True:{n}{t}{t}return get_currency(IAWOTHINC.SPFarmLoss){n}{t}else:{n}{t}{t}return 0{n}{n}
def SPFirstHmBuy_Calculation():{n}{t}if get_bool(IAREQUIRED.AskSpouse) == True:{n}{t}{t}return get_currency(IAWOTHINC.SPFirstHmBuy){n}{t}else:{n}{t}{t}return 0{n}{n}
def SPFoster_Calculation():{n}{t}if get_bool(IAREQUIRED.AskSpouse) == True:{n}{t}{t}return get_currency(IAWOTHINC.SPFoster){n}{t}else:{n}{t}{t}return 0{n}{n}
def SPHobby_Calculation():{n}{t}if get_bool(IAREQUIRED.AskSpouse) == True:{n}{t}{t}return get_currency(IAWOTHINC.SPHobby){n}{t}else:{n}{t}{t}return 0{n}{n}
def SPHSA_Calculation():{n}{t}if get_bool(IAREQUIRED.AskSpouse) == True:{n}{t}{t}return get_currency(IAWOTHINC.SPHSA){n}{t}else:{n}{t}{t}return 0{n}{n}
def SPIAABLE_Calculation():{n}{t}if get_bool(IAREQUIRED.AskSpouse) == True:{n}{t}{t}return get_currency(IAWOTHINC.SPIAABLE){n}{t}else:{n}{t}{t}return 0{n}{n}
def SPIAEd_Calculation():{n}{t}if get_bool(IAREQUIRED.AskSpouse) == True:{n}{t}{t}return get_currency(IAWOTHINC.SPIAEd){n}{t}else:{n}{t}{t}return 0{n}{n}
def SPIntangDrill_Calculation():{n}{t}if get_bool(IAREQUIRED.AskSpouse) == True:{n}{t}{t}return get_currency(IAWOTHINC.SPIntangDrill){n}{t}else:{n}{t}{t}return 0{n}{n}
def SPJury_Calculation():{n}{t}if get_bool(IAREQUIRED.AskSpouse) == True:{n}{t}{t}return get_currency(IAWOTHINC.SPJury){n}{t}else:{n}{t}{t}return 0{n}{n}
def SPK1_Calculation():{n}{t}if get_bool(IAREQUIRED.AskSpouse) == True:{n}{t}{t}return get_currency(IAWOTHINC.SPK1){n}{t}else:{n}{t}{t}return 0{n}{n}
def SPLTC_Calculation():{n}{t}if get_bool(IAREQUIRED.AskSpouse) == True:{n}{t}{t}return get_currency(IAWOTHINC.SPLTC){n}{t}else:{n}{t}{t}return 0{n}{n}
def SPMedMSA_Calculation():{n}{t}if get_bool(IAREQUIRED.AskSpouse) == True:{n}{t}{t}return get_currency(IAWOTHINC.SPMedMSA){n}{t}else:{n}{t}{t}return 0{n}{n}
def SPMisc_Calculation():{n}{t}if get_bool(IAREQUIRED.AskSpouse) == True:{n}{t}{t}return get_currency(IAWOTHINC.SPMisc){n}{t}else:{n}{t}{t}return 0{n}{n}
def SPMSA_Calculation():{n}{t}if get_bool(IAREQUIRED.AskSpouse) == True:{n}{t}{t}return get_currency(IAWOTHINC.SPMSA){n}{t}else:{n}{t}{t}return 0{n}{n}
def SPName_Calculation():{n}{t}return get_string(USWBasicInfo.SPCommon){n}{n}
def SPOth1_Calculation():{n}{t}if get_bool(IAREQUIRED.AskSpouse) == True:{n}{t}{t}return get_currency(IAWOTHINC.SPOth1){n}{t}else:{n}{t}{t}return 0{n}{n}
def SPOth2_Calculation():{n}{t}if get_bool(IAREQUIRED.AskSpouse) == True:{n}{t}{t}return get_currency(IAWOTHINC.SPOth2){n}{t}else:{n}{t}{t}return 0{n}{n}
def SPOthNC_Calculation():{n}{t}if get_bool(IAREQUIRED.AskSpouse) == True:{n}{t}{t}return get_currency(IAWOTHINC.SPOthNC){n}{t}else:{n}{t}{t}return 0{n}{n}
def SPPerRent_Calculation():{n}{t}if get_bool(IAREQUIRED.AskSpouse) == True:{n}{t}{t}return get_currency(IAWOTHINC.SPPerRent){n}{t}else:{n}{t}{t}return 0{n}{n}
def SPPshipCan_Calculation():{n}{t}if get_bool(IAREQUIRED.AskSpouse) == True:{n}{t}{t}return get_currency(IAWOTHINC.SPPshipCan){n}{t}else:{n}{t}{t}return 0{n}{n}
def SPPYNPTC_Calculation():{n}{t}if get_bool(IAREQUIRED.AskSpouse) == True:{n}{t}{t}return get_currency(IAWOTHINC.SPPYNPTC){n}{t}else:{n}{t}{t}return 0{n}{n}
def SPRecapChar_Calculation():{n}{t}if get_bool(IAREQUIRED.AskSpouse) == True:{n}{t}{t}return get_currency(IAWOTHINC.SPRecapChar){n}{t}else:{n}{t}{t}return 0{n}{n}
def SPRecapTuit_Calculation():{n}{t}if get_bool(IAREQUIRED.AskSpouse) == True:{n}{t}{t}return get_currency(IAWOTHINC.SPRecapTuit){n}{t}else:{n}{t}{t}return 0{n}{n}
def SPRefundCr_Calculation():{n}{t}if get_bool(IAREQUIRED.AskSpouse) == True:{n}{t}{t}return get_currency(IAWOTHINC.SPRefundCr){n}{t}else:{n}{t}{t}return 0{n}{n}
def SPStRefund_Calculation():{n}{t}if get_bool(IAREQUIRED.AskSpouse) == True:{n}{t}{t}return get_currency(IAWOTHINC.SPStRefund){n}{t}else:{n}{t}{t}return 0{n}{n}
def SPStudLoanDis_Calculation():{n}{t}if get_bool(IAREQUIRED.AskSpouse) == True:{n}{t}{t}return get_currency(IAWOTHINC.SPStudLoanDis){n}{t}else:{n}{t}{t}return 0{n}{n}
def SPTot_Calculation():{n}{t}if get_bool(IAREQUIRED.AskSpouse) == True:{n}{t}{t}return get_currency(IANROTHINC.SPOth1) + get_currency(IANROTHINC.SPOth2) + get_currency(IANROTHINC.SPBabySit) + get_currency(IANROTHINC.SPBonus) + get_currency(IANROTHINC.SPIAEd) + get_currency(IANROTHINC.SPDirector) + get_currency(IANROTHINC.SPIntangDrill) + get_currency(IANROTHINC.SPExecutor) + get_currency(IANROTHINC.SPFirstHmBuy) + get_currency(IANROTHINC.SPK1) + get_currency(IANROTHINC.SPRefundCr) + get_currency(IANROTHINC.SPStRefund) + get_currency(IANROTHINC.SPDepl) + get_currency(IANROTHINC.SPJury) + get_currency(IANROTHINC.SPPerRent) + get_currency(IANROTHINC.SP8814) + get_currency(IANROTHINC.SPMSA) + get_currency(IANROTHINC.SPMedMSA) + get_currency(IANROTHINC.SPLTC) + get_currency(IANROTHINC.SPMisc) + get_currency(IANROTHINC.SPAlaska) + get_currency(IANROTHINC.SPCoverdell) + get_currency(IANROTHINC.SPCanceled) + get_currency(IANROTHINC.SPPshipCan) + get_currency(IANROTHINC.SPHSA) + get_currency(IANROTHINC.SPAltTrade) + get_currency(IANROTHINC.SPRecapTuit) + get_currency(IANROTHINC.SPRecapChar) + get_currency(IANROTHINC.SP5471) + get_currency(IANROTHINC.SPHobby) + get_currency(IANROTHINC.SP8621) + get_currency(IANROTHINC.SPDefDist) + get_currency(IANROTHINC.SPDisaster) + get_currency(IANROTHINC.SPFoster) + get_currency(IANROTHINC.SPCredAdj) + get_currency(IANROTHINC.SPPYNPTC) + get_currency(IANROTHINC.SP1099QA) + get_currency(IANROTHINC.SPIAABLE) + get_currency(IANROTHINC.SPBusPass) + get_currency(IANROTHINC.SPAirline) + get_currency(IANROTHINC.SP1099B) + get_currency(IANROTHINC.SPFarmLoss) + get_currency(IANROTHINC.SP8824) + get_currency(IANROTHINC.SPStudLoanDis) + get_currency(IANROTHINC.SP4684) + get_currency(IANROTHINC.SP3903) + get_currency(IANROTHINC.SPBusInt) + get_currency(IANROTHINC.SPEntExp) + get_currency(IANROTHINC.SP2106) + get_currency(IANROTHINC.SPOthNC){n}{t}else:{n}{t}{t}return 0{n}{n}
def SSN_Calculation():{n}{t}return get_string(IAF1040.SSN){n}{n}
def TP1099B_Calculation():{n}{t}if ( IAFS() == 2 and get_bool(IAF126.SpRes) == False )  or get_bool(IAF126.TpRes) == False:{n}{t}{t}return get_currency(IAWOTHINC.TP1099B){n}{t}else:{n}{t}{t}return 0{n}{n}
def TP1099QA_Calculation():{n}{t}if ( IAFS() == 2 and get_bool(IAF126.SpRes) == False )  or get_bool(IAF126.TpRes) == False:{n}{t}{t}return get_currency(IAWOTHINC.TP1099QA){n}{t}else:{n}{t}{t}return 0{n}{n}
def TP2106_Calculation():{n}{t}if ( IAFS() == 2 and get_bool(IAF126.SpRes) == False )  or get_bool(IAF126.TpRes) == False:{n}{t}{t}return get_currency(IAWOTHINC.TP2106){n}{t}else:{n}{t}{t}return 0{n}{n}
def TP3903_Calculation():{n}{t}if ( IAFS() == 2 and get_bool(IAF126.SpRes) == False )  or get_bool(IAF126.TpRes) == False:{n}{t}{t}return get_currency(IAWOTHINC.TP3903){n}{t}else:{n}{t}{t}return 0{n}{n}
def TP4684_Calculation():{n}{t}if ( IAFS() == 2 and get_bool(IAF126.SpRes) == False )  or get_bool(IAF126.TpRes) == False:{n}{t}{t}return get_currency(IAWOTHINC.TP4684){n}{t}else:{n}{t}{t}return 0{n}{n}
def TP5471_Calculation():{n}{t}if ( IAFS() == 2 and get_bool(IAF126.SpRes) == False )  or get_bool(IAF126.TpRes) == False:{n}{t}{t}return get_currency(IAWOTHINC.TP5471){n}{t}else:{n}{t}{t}return 0{n}{n}
def TP8621_Calculation():{n}{t}if ( IAFS() == 2 and get_bool(IAF126.SpRes) == False )  or get_bool(IAF126.TpRes) == False:{n}{t}{t}return get_currency(IAWOTHINC.TP8621){n}{t}else:{n}{t}{t}return 0{n}{n}
def TP8814_Calculation():{n}{t}if ( IAFS() == 2 and get_bool(IAF126.SpRes) == False )  or get_bool(IAF126.TpRes) == False:{n}{t}{t}return get_currency(IAWOTHINC.TP8814){n}{t}else:{n}{t}{t}return 0{n}{n}
def TP8824_Calculation():{n}{t}if ( IAFS() == 2 and get_bool(IAF126.SpRes) == False )  or get_bool(IAF126.TpRes) == False:{n}{t}{t}return get_currency(IAWOTHINC.TP8824){n}{t}else:{n}{t}{t}return 0{n}{n}
def TPAirline_Calculation():{n}{t}if ( IAFS() == 2 and get_bool(IAF126.SpRes) == False )  or get_bool(IAF126.TpRes) == False:{n}{t}{t}return get_currency(IAWOTHINC.TPAirline){n}{t}else:{n}{t}{t}return 0{n}{n}
def TPAlaska_Calculation():{n}{t}if ( IAFS() == 2 and get_bool(IAF126.SpRes) == False )  or get_bool(IAF126.TpRes) == False:{n}{t}{t}return get_currency(IAWOTHINC.TPAlaska){n}{t}else:{n}{t}{t}return 0{n}{n}
def TPAltTrade_Calculation():{n}{t}if ( IAFS() == 2 and get_bool(IAF126.SpRes) == False )  or get_bool(IAF126.TpRes) == False:{n}{t}{t}return get_currency(IAWOTHINC.TPAltTrade){n}{t}else:{n}{t}{t}return 0{n}{n}
def TPAmount_Calculation(Index):{n}{t}count = Integer(){n}{n}{t}Hold = Currency(){n}{t}count = 0{n}{t}Hold = 0{n}{t}if get_currency(IANROTHINC.TPOth1) != 0 or get_currency(IANROTHINC.SPOth1) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHINC.TPOth1){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPOth2) != 0 or get_currency(IANROTHINC.SPOth2) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHINC.TPOth2){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPBabySit) != 0 or get_currency(IANROTHINC.SPBabySit) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHINC.TPBabySit){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPBonus) != 0 or get_currency(IANROTHINC.SPBonus) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHINC.TPBonus){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPIAEd) != 0 or get_currency(IANROTHINC.SPIAEd) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHINC.TPIAEd){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPDirector) != 0 or get_currency(IANROTHINC.SPDirector) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHINC.TPDirector){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPIntangDrill) != 0 or get_currency(IANROTHINC.SPIntangDrill) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHINC.TPIntangDrill){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPExecutor) != 0 or get_currency(IANROTHINC.SPExecutor) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHINC.TPExecutor){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPFirstHmBuy) != 0 or get_currency(IANROTHINC.SPFirstHmBuy) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHINC.TPFirstHmBuy){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPK1) != 0 or get_currency(IANROTHINC.SPK1) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHINC.TPK1){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPRefundCr) != 0 or get_currency(IANROTHINC.SPRefundCr) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHINC.TPRefundCr){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPStRefund) != 0 or get_currency(IANROTHINC.SPStRefund) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHINC.TPStRefund){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPDepl) != 0 or get_currency(IANROTHINC.SPDepl) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHINC.TPDepl){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPJury) != 0 or get_currency(IANROTHINC.SPJury) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHINC.TPJury){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPPerRent) != 0 or get_currency(IANROTHINC.SPPerRent) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHINC.TPPerRent){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TP8814) != 0 or get_currency(IANROTHINC.SP8814) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHINC.TP8814){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPMSA) != 0 or get_currency(IANROTHINC.SPMSA) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHINC.TPMSA){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPMedMSA) != 0 or get_currency(IANROTHINC.SPMedMSA) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHINC.TPMedMSA){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPLTC) != 0 or get_currency(IANROTHINC.SPLTC) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHINC.TPLTC){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPMisc) != 0 or get_currency(IANROTHINC.SPMisc) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHINC.TPMisc){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPAlaska) != 0 or get_currency(IANROTHINC.SPAlaska) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHINC.TPAlaska){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPCoverdell) != 0 or get_currency(IANROTHINC.SPCoverdell) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHINC.TPCoverdell){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPCanceled) != 0 or get_currency(IANROTHINC.SPCanceled) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHINC.TPCanceled){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPPshipCan) != 0 or get_currency(IANROTHINC.SPPshipCan) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHINC.TPPshipCan){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPHSA) != 0 or get_currency(IANROTHINC.SPHSA) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHINC.TPHSA){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPAltTrade) != 0 or get_currency(IANROTHINC.SPAltTrade) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHINC.TPAltTrade){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPRecapTuit) != 0 or get_currency(IANROTHINC.SPRecapTuit) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHINC.TPRecapTuit){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPRecapChar) != 0 or get_currency(IANROTHINC.SPRecapChar) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHINC.TPRecapChar){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TP5471) != 0 or get_currency(IANROTHINC.SP5471) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHINC.TP5471){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPHobby) != 0 or get_currency(IANROTHINC.SPHobby) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHINC.TPHobby){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TP8621) != 0 or get_currency(IANROTHINC.SP8621) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHINC.TP8621){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPDefDist) != 0 or get_currency(IANROTHINC.SPDefDist) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHINC.TPDefDist){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPDisaster) != 0 or get_currency(IANROTHINC.SPDisaster) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHINC.TPDisaster){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPFoster) != 0 or get_currency(IANROTHINC.SPFoster) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHINC.TPFoster){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPCredAdj) != 0 or get_currency(IANROTHINC.SPCredAdj) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHINC.TPCredAdj){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPPYNPTC) != 0 or get_currency(IANROTHINC.SPPYNPTC) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHINC.TPPYNPTC){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TP1099QA) != 0 or get_currency(IANROTHINC.SP1099QA) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHINC.TP1099QA){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPAirline) != 0 or get_currency(IANROTHINC.SPAirline) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHINC.TPAirline){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TP1099B) != 0 or get_currency(IANROTHINC.SP1099B) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHINC.TP1099B){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPIAABLE) != 0 or get_currency(IANROTHINC.SPIAABLE) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHINC.TPIAABLE){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPBusPass) != 0 or get_currency(IANROTHINC.SPBusPass) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHINC.TPBusPass){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPFarmLoss) != 0 or get_currency(IANROTHINC.SPFarmLoss) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHINC.TPFarmLoss){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TP8824) != 0 or get_currency(IANROTHINC.SP8824) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHINC.TP8824){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPStudLoanDis) != 0 or get_currency(IANROTHINC.SPStudLoanDis) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHINC.TPStudLoanDis){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TP4684) != 0 or get_currency(IANROTHINC.SP4684) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHINC.TP4684){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TP3903) != 0 or get_currency(IANROTHINC.SP3903) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHINC.TP3903){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPBusInt) != 0 or get_currency(IANROTHINC.SPBusInt) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHINC.TPBusInt){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPEntExp) != 0 or get_currency(IANROTHINC.SPEntExp) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHINC.TPEntExp){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TP2106) != 0 or get_currency(IANROTHINC.SP2106) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHINC.TP2106){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IANROTHINC.TPOthNC) != 0 or get_currency(IANROTHINC.SPOthNC) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IANROTHINC.TPOthNC){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}return Hold{n}{n}
def TPBabySit_Calculation():{n}{t}if ( IAFS() == 2 and get_bool(IAF126.SpRes) == False )  or get_bool(IAF126.TpRes) == False:{n}{t}{t}return get_currency(IAWOTHINC.TPBabySit){n}{t}else:{n}{t}{t}return 0{n}{n}
def TPBonus_Calculation():{n}{t}if ( IAFS() == 2 and get_bool(IAF126.SpRes) == False )  or get_bool(IAF126.TpRes) == False:{n}{t}{t}return get_currency(IAWOTHINC.TPBonus){n}{t}else:{n}{t}{t}return 0{n}{n}
def TPBusInt_Calculation():{n}{t}if ( IAFS() == 2 and get_bool(IAF126.SpRes) == False )  or get_bool(IAF126.TpRes) == False:{n}{t}{t}return get_currency(IAWOTHINC.TPBusInt){n}{t}else:{n}{t}{t}return 0{n}{n}
def TPBusPass_Calculation():{n}{t}if ( IAFS() == 2 and get_bool(IAF126.SpRes) == False )  or get_bool(IAF126.TpRes) == False:{n}{t}{t}return get_currency(IAWOTHINC.TPBusPass){n}{t}else:{n}{t}{t}return 0{n}{n}
def TPCanceled_Calculation():{n}{t}if ( IAFS() == 2 and get_bool(IAF126.SpRes) == False )  or get_bool(IAF126.TpRes) == False:{n}{t}{t}return get_currency(IAWOTHINC.TPCanceled){n}{t}else:{n}{t}{t}return 0{n}{n}
def TPCoverdell_Calculation():{n}{t}if ( IAFS() == 2 and get_bool(IAF126.SpRes) == False )  or get_bool(IAF126.TpRes) == False:{n}{t}{t}return get_currency(IAWOTHINC.TPCoverdell){n}{t}else:{n}{t}{t}return 0{n}{n}
def TPCredAdj_Calculation():{n}{t}if ( IAFS() == 2 and get_bool(IAF126.SpRes) == False )  or get_bool(IAF126.TpRes) == False:{n}{t}{t}return get_currency(IAWOTHINC.TPCredAdj){n}{t}else:{n}{t}{t}return 0{n}{n}
def TPDefDist_Calculation():{n}{t}if ( IAFS() == 2 and get_bool(IAF126.SpRes) == False )  or get_bool(IAF126.TpRes) == False:{n}{t}{t}return get_currency(IAWOTHINC.TPDefDist){n}{t}else:{n}{t}{t}return 0{n}{n}
def TPDepl_Calculation():{n}{t}if ( IAFS() == 2 and get_bool(IAF126.SpRes) == False )  or get_bool(IAF126.TpRes) == False:{n}{t}{t}return get_currency(IAWOTHINC.TPDepl){n}{t}else:{n}{t}{t}return 0{n}{n}
def TPDirector_Calculation():{n}{t}if ( IAFS() == 2 and get_bool(IAF126.SpRes) == False )  or get_bool(IAF126.TpRes) == False:{n}{t}{t}return get_currency(IAWOTHINC.TPDirector){n}{t}else:{n}{t}{t}return 0{n}{n}
def TPDisaster_Calculation():{n}{t}if ( IAFS() == 2 and get_bool(IAF126.SpRes) == False )  or get_bool(IAF126.TpRes) == False:{n}{t}{t}return get_currency(IAWOTHINC.TPDisaster){n}{t}else:{n}{t}{t}return 0{n}{n}
def TPEntExp_Calculation():{n}{t}if ( IAFS() == 2 and get_bool(IAF126.SpRes) == False )  or get_bool(IAF126.TpRes) == False:{n}{t}{t}return get_currency(IAWOTHINC.TPEntExp){n}{t}else:{n}{t}{t}return 0{n}{n}
def TPExecutor_Calculation():{n}{t}if ( IAFS() == 2 and get_bool(IAF126.SpRes) == False )  or get_bool(IAF126.TpRes) == False:{n}{t}{t}return get_currency(IAWOTHINC.TPExecutor){n}{t}else:{n}{t}{t}return 0{n}{n}
def TPFarmLoss_Calculation():{n}{t}if ( IAFS() == 2 and get_bool(IAF126.SpRes) == False )  or get_bool(IAF126.TpRes) == False:{n}{t}{t}return get_currency(IAWOTHINC.TPFarmLoss){n}{t}else:{n}{t}{t}return 0{n}{n}
def TPFirstHmBuy_Calculation():{n}{t}if ( IAFS() == 2 and get_bool(IAF126.SpRes) == False )  or get_bool(IAF126.TpRes) == False:{n}{t}{t}return get_currency(IAWOTHINC.TPFirstHmBuy){n}{t}else:{n}{t}{t}return 0{n}{n}
def TPFoster_Calculation():{n}{t}if ( IAFS() == 2 and get_bool(IAF126.SpRes) == False )  or get_bool(IAF126.TpRes) == False:{n}{t}{t}return get_currency(IAWOTHINC.TPFoster){n}{t}else:{n}{t}{t}return 0{n}{n}
def TPHobby_Calculation():{n}{t}if ( IAFS() == 2 and get_bool(IAF126.SpRes) == False )  or get_bool(IAF126.TpRes) == False:{n}{t}{t}return get_currency(IAWOTHINC.TPHobby){n}{t}else:{n}{t}{t}return 0{n}{n}
def TPHSA_Calculation():{n}{t}if ( IAFS() == 2 and get_bool(IAF126.SpRes) == False )  or get_bool(IAF126.TpRes) == False:{n}{t}{t}return get_currency(IAWOTHINC.TPHSA){n}{t}else:{n}{t}{t}return 0{n}{n}
def TPIAABLE_Calculation():{n}{t}if ( IAFS() == 2 and get_bool(IAF126.SpRes) == False )  or get_bool(IAF126.TpRes) == False:{n}{t}{t}return get_currency(IAWOTHINC.TPIAABLE){n}{t}else:{n}{t}{t}return 0{n}{n}
def TPIAEd_Calculation():{n}{t}if ( IAFS() == 2 and get_bool(IAF126.SpRes) == False )  or get_bool(IAF126.TpRes) == False:{n}{t}{t}return get_currency(IAWOTHINC.TPIAEd){n}{t}else:{n}{t}{t}return 0{n}{n}
def TPIntangDrill_Calculation():{n}{t}if ( IAFS() == 2 and get_bool(IAF126.SpRes) == False )  or get_bool(IAF126.TpRes) == False:{n}{t}{t}return get_currency(IAWOTHINC.TPIntangDrill){n}{t}else:{n}{t}{t}return 0{n}{n}
def TPJointAmount_Calculation(Index):{n}{t}if get_bool(IAF1040.CombMFS) == True:{n}{t}{t}return get_currency(IANROTHINC.TPAmount(Index)){n}{t}else:{n}{t}{t}return get_currency(IANROTHINC.TPAmount(Index)) + get_currency(IANROTHINC.SPAmount(Index)){n}{n}
def TPJury_Calculation():{n}{t}if ( IAFS() == 2 and get_bool(IAF126.SpRes) == False )  or get_bool(IAF126.TpRes) == False:{n}{t}{t}return get_currency(IAWOTHINC.TPJury){n}{t}else:{n}{t}{t}return 0{n}{n}
def TPK1_Calculation():{n}{t}if ( IAFS() == 2 and get_bool(IAF126.SpRes) == False )  or get_bool(IAF126.TpRes) == False:{n}{t}{t}return get_currency(IAWOTHINC.TPK1){n}{t}else:{n}{t}{t}return 0{n}{n}
def TPLTC_Calculation():{n}{t}if ( IAFS() == 2 and get_bool(IAF126.SpRes) == False )  or get_bool(IAF126.TpRes) == False:{n}{t}{t}return get_currency(IAWOTHINC.TPLTC){n}{t}else:{n}{t}{t}return 0{n}{n}
def TPMedMSA_Calculation():{n}{t}if ( IAFS() == 2 and get_bool(IAF126.SpRes) == False )  or get_bool(IAF126.TpRes) == False:{n}{t}{t}return get_currency(IAWOTHINC.TPMedMSA){n}{t}else:{n}{t}{t}return 0{n}{n}
def TPMisc_Calculation():{n}{t}if ( IAFS() == 2 and get_bool(IAF126.SpRes) == False )  or get_bool(IAF126.TpRes) == False:{n}{t}{t}return get_currency(IAWOTHINC.TPMisc){n}{t}else:{n}{t}{t}return 0{n}{n}
def TPMSA_Calculation():{n}{t}if ( IAFS() == 2 and get_bool(IAF126.SpRes) == False )  or get_bool(IAF126.TpRes) == False:{n}{t}{t}return get_currency(IAWOTHINC.TPMSA){n}{t}else:{n}{t}{t}return 0{n}{n}
def TPName_Calculation():{n}{t}return get_string(USWBasicInfo.TPCommon){n}{n}
def TPOth1_Calculation():{n}{t}if ( IAFS() == 2 and get_bool(IAF126.SpRes) == False )  or get_bool(IAF126.TpRes) == False:{n}{t}{t}return get_currency(IAWOTHINC.TPOth1){n}{t}else:{n}{t}{t}return 0{n}{n}
def TPOth2_Calculation():{n}{t}if ( IAFS() == 2 and get_bool(IAF126.SpRes) == False )  or get_bool(IAF126.TpRes) == False:{n}{t}{t}return get_currency(IAWOTHINC.TPOth2){n}{t}else:{n}{t}{t}return 0{n}{n}
def TPOthNC_Calculation():{n}{t}if ( IAFS() == 2 and get_bool(IAF126.SpRes) == False )  or get_bool(IAF126.TpRes) == False:{n}{t}{t}return get_currency(IAWOTHINC.TPOthNC){n}{t}else:{n}{t}{t}return 0{n}{n}
def TPPerRent_Calculation():{n}{t}if ( IAFS() == 2 and get_bool(IAF126.SpRes) == False )  or get_bool(IAF126.TpRes) == False:{n}{t}{t}return get_currency(IAWOTHINC.TPPerRent){n}{t}else:{n}{t}{t}return 0{n}{n}
def TPPshipCan_Calculation():{n}{t}if ( IAFS() == 2 and get_bool(IAF126.SpRes) == False )  or get_bool(IAF126.TpRes) == False:{n}{t}{t}return get_currency(IAWOTHINC.TPPshipCan){n}{t}else:{n}{t}{t}return 0{n}{n}
def TPPYNPTC_Calculation():{n}{t}if ( IAFS() == 2 and get_bool(IAF126.SpRes) == False )  or get_bool(IAF126.TpRes) == False:{n}{t}{t}return get_currency(IAWOTHINC.TPPYNPTC){n}{t}else:{n}{t}{t}return 0{n}{n}
def TPRecapChar_Calculation():{n}{t}if ( IAFS() == 2 and get_bool(IAF126.SpRes) == False )  or get_bool(IAF126.TpRes) == False:{n}{t}{t}return get_currency(IAWOTHINC.TPRecapChar){n}{t}else:{n}{t}{t}return 0{n}{n}
def TPRecapTuit_Calculation():{n}{t}if ( IAFS() == 2 and get_bool(IAF126.SpRes) == False )  or get_bool(IAF126.TpRes) == False:{n}{t}{t}return get_currency(IAWOTHINC.TPRecapTuit){n}{t}else:{n}{t}{t}return 0{n}{n}
def TPRefundCr_Calculation():{n}{t}if ( IAFS() == 2 and get_bool(IAF126.SpRes) == False )  or get_bool(IAF126.TpRes) == False:{n}{t}{t}return get_currency(IAWOTHINC.TPRefundCr){n}{t}else:{n}{t}{t}return 0{n}{n}
def TPStRefund_Calculation():{n}{t}if ( IAFS() == 2 and get_bool(IAF126.SpRes) == False )  or get_bool(IAF126.TpRes) == False:{n}{t}{t}return get_currency(IAWOTHINC.TPStRefund){n}{t}else:{n}{t}{t}return 0{n}{n}
def TPStudLoanDis_Calculation():{n}{t}if ( IAFS() == 2 and get_bool(IAF126.SpRes) == False )  or get_bool(IAF126.TpRes) == False:{n}{t}{t}return get_currency(IAWOTHINC.TPStudLoanDis){n}{t}else:{n}{t}{t}return 0{n}{n}
def TPTot_Calculation():{n}{t}if ( IAFS() == 2 and get_bool(IAF126.SpRes) == False )  or get_bool(IAF126.TpRes) == False:{n}{t}{t}return get_currency(IANROTHINC.TPOth1) + get_currency(IANROTHINC.TPOth2) + get_currency(IANROTHINC.TPBabySit) + get_currency(IANROTHINC.TPBonus) + get_currency(IANROTHINC.TPIAEd) + get_currency(IANROTHINC.TPDirector) + get_currency(IANROTHINC.TPIntangDrill) + get_currency(IANROTHINC.TPExecutor) + get_currency(IANROTHINC.TPFirstHmBuy) + get_currency(IANROTHINC.TPK1) + get_currency(IANROTHINC.TPRefundCr) + get_currency(IANROTHINC.TPStRefund) + get_currency(IANROTHINC.TPDepl) + get_currency(IANROTHINC.TPJury) + get_currency(IANROTHINC.TPPerRent) + get_currency(IANROTHINC.TP8814) + get_currency(IANROTHINC.TPMSA) + get_currency(IANROTHINC.TPMedMSA) + get_currency(IANROTHINC.TPLTC) + get_currency(IANROTHINC.TPMisc) + get_currency(IANROTHINC.TPAlaska) + get_currency(IANROTHINC.TPCoverdell) + get_currency(IANROTHINC.TPCanceled) + get_currency(IANROTHINC.TPPshipCan) + get_currency(IANROTHINC.TPHSA) + get_currency(IANROTHINC.TPAltTrade) + get_currency(IANROTHINC.TPRecapTuit) + get_currency(IANROTHINC.TPRecapChar) + get_currency(IANROTHINC.TP5471) + get_currency(IANROTHINC.TPHobby) + get_currency(IANROTHINC.TP8621) + get_currency(IANROTHINC.TPDefDist) + get_currency(IANROTHINC.TPDisaster) + get_currency(IANROTHINC.TPFoster) + get_currency(IANROTHINC.TPCredAdj) + get_currency(IANROTHINC.TPPYNPTC) + get_currency(IANROTHINC.TP1099QA) + get_currency(IANROTHINC.TPIAABLE) + get_currency(IANROTHINC.TPBusPass) + get_currency(IANROTHINC.TPAirline) + get_currency(IANROTHINC.TP1099B) + get_currency(IANROTHINC.TPFarmLoss) + get_currency(IANROTHINC.TP8824) + get_currency(IANROTHINC.TPStudLoanDis) + get_currency(IANROTHINC.TP4684) + get_currency(IANROTHINC.TP3903) + get_currency(IANROTHINC.TPBusInt) + get_currency(IANROTHINC.TPEntExp) + get_currency(IANROTHINC.TP2106) + get_currency(IANROTHINC.TPOthNC){n}{t}else:{n}{t}{t}return 0{n}{n}
def Txt1_Calculation():{n}{t}return get_string(IAWOTHINC.Txt1){n}{n}
def Txt2_Calculation():{n}{t}return get_string(IAWOTHINC.Txt2){n}{n}def ANet_Calculation():{n}{t}ATotAdj = Currency(){n}{t}ATotAdj = get_currency(IAF1040.AKeogh) + get_currency(IAF1040.ABusIncL) + get_currency(IAF1040.AHealth) + get_currency(IAF1040.APenalty) + get_currency(IAF1040.AAlimonyP) + get_currency(IAF1040.APenExcl) + get_currency(IAF1040.AMove) + get_currency(IAF1040.AGainDed) + get_currency(IAOTHADJ.ModTPTot){n}{t}return get_currency(IAF1040.AGross) - ATotAdj{n}{n}
def BNet_Calculation():{n}{t}BTotAdj = Currency(){n}{t}BTotAdj = get_currency(IAF1040.BKeogh) + get_currency(IAF1040.BBusIncL) + get_currency(IAF1040.BHealth) + get_currency(IAF1040.BPenalty) + get_currency(IAF1040.BAlimonyP) + get_currency(IAF1040.BPenExcl) + get_currency(IAF1040.BMove) + get_currency(IAF1040.BGainDed) + get_currency(IAOTHADJ.ModSPTot){n}{t}return get_currency(IAF1040.BGross) - BTotAdj{n}{n}
def BProRate_Calculation():{n}{t}if IAFS() == 3:{n}{t}{t}if get_currency(IAOTHADJ.BNet) < 0 and get_currency(IAOTHADJ.ANet) < 0:{n}{t}{t}{t}if get_currency(IAOTHADJ.BNet) < get_currency(IAOTHADJ.ANet):{n}{t}{t}{t}{t}return 0{n}{t}{t}{t}else:{n}{t}{t}{t}{t}return 1{n}{t}{t}elif get_currency(IAOTHADJ.BNet) < 0:{n}{t}{t}{t}return 0{n}{t}{t}elif get_currency(IAOTHADJ.BNet) > 0 and get_currency(IAOTHADJ.TotNI) <= 0:{n}{t}{t}{t}return 1{n}{t}{t}elif get_currency(IAOTHADJ.TotNI) == 0:{n}{t}{t}{t}return 0{n}{t}{t}else:{n}{t}{t}{t}return max_value(0, ( min_value(1, get_float(IAOTHADJ.BNet) / get_float(IAOTHADJ.TotNI)) )){n}{t}else:{n}{t}{t}return 0{n}{n}
def Code_Calculation(Index):{n}{t}count = Integer(){n}{n}{t}Hold = String(){n}{t}count = 0{n}{t}Hold = ''{n}{t}if get_currency(IAOTHADJ.TOth1) != 0 or get_currency(IAOTHADJ.SOth1) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'dd'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPActiveMil) != 0 or get_currency(IAOTHADJ.SPActiveMil) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'b'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPAltMV) != 0 or get_currency(IAOTHADJ.SPAltMV) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'c'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPInvolConv) != 0 or get_currency(IAOTHADJ.SPInvolConv) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'e'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPClaimOfRight) != 0 or get_currency(IAOTHADJ.SPClaimOfRight) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'f'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPIAEd) != 0 or get_currency(IAOTHADJ.SPIAEd) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'g'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPIADis) != 0 or get_currency(IAOTHADJ.SPIADis) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'h'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPDomProd) != 0 or get_currency(IAOTHADJ.SPDomProd) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'i'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPFirstHmBuy) != 0 or get_currency(IAOTHADJ.SPFirstHmBuy) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'j'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPEmployerSS) != 0 or get_currency(IAOTHADJ.SPEmployerSS) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'k'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPFedFuels) != 0 or get_currency(IAOTHADJ.SPFedFuels) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'l'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPForeign) != 0 or get_currency(IAOTHADJ.SPForeign) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'm'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TP2555) != 0 or get_currency(IAOTHADJ.SP2555) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'm'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPDistressed) != 0 or get_currency(IAOTHADJ.SPDistressed) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'n'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPHealthSav) != 0 or get_currency(IAOTHADJ.SPHealthSav) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'o'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPVet) != 0 or get_currency(IAOTHADJ.SPVet) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'p'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPVetGrant) != 0 or get_currency(IAOTHADJ.SPVetGrant) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'q'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPHomeHealth) != 0 or get_currency(IAOTHADJ.SPHomeHealth) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'r'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPIAVetTrust) != 0 or get_currency(IAOTHADJ.SPIAVetTrust) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 's'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPMilitaryExem) != 0 or get_currency(IAOTHADJ.SPMilitaryExem) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 't'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TIANOL) != 0 or get_currency(IAOTHADJ.SIANOL) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'u'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPOrgan) != 0 or get_currency(IAOTHADJ.SPOrgan) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'v'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPK1) != 0 or get_currency(IAOTHADJ.SPK1) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'w'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPSegal) != 0 or get_currency(IAOTHADJ.SPSegal) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'x'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPShell) != 0 or get_currency(IAOTHADJ.SPShell) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'y'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TStud) != 0 or get_currency(IAOTHADJ.SStud) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'z'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPVictim) != 0 or get_currency(IAOTHADJ.SPVictim) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'aa'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPWages) != 0 or get_currency(IAOTHADJ.SPWages) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'bb'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPWorkCr) != 0 or get_currency(IAOTHADJ.SPWorkCr) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'cc'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TP2106) != 0 or get_currency(IAOTHADJ.SP2106) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'dd'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TMSA) != 0 or get_currency(IAOTHADJ.SMSA) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'dd'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPJury) != 0 or get_currency(IAOTHADJ.SPJury) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'dd'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPRFST) != 0 or get_currency(IAOTHADJ.SPRFST) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'dd'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPSub) != 0 or get_currency(IAOTHADJ.SPSub) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'dd'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TP501c) != 0 or get_currency(IAOTHADJ.SP501c) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'dd'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPPerRent) != 0 or get_currency(IAOTHADJ.SPPerRent) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'dd'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TP403b) != 0 or get_currency(IAOTHADJ.SP403b) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'dd'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPUDC) != 0 or get_currency(IAOTHADJ.SPUDC) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'dd'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPWBF) != 0 or get_currency(IAOTHADJ.SPWBF) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'dd'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TP8873) != 0 or get_currency(IAOTHADJ.SP8873) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'dd'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPOlympic) != 0 or get_currency(IAOTHADJ.SPOlympic) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'dd'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPEducator) != 0 or get_currency(IAOTHADJ.SPEducator) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'ee'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPTuition) != 0 or get_currency(IAOTHADJ.SPTuition) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'ff'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPElectric) != 0 or get_currency(IAOTHADJ.SPElectric) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'gg'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPRapid) != 0 or get_currency(IAOTHADJ.SPRapid) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'hh'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPIAABLE) != 0 or get_currency(IAOTHADJ.SPIAABLE) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'ii'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}return Hold{n}{n}
def Desc_Calculation():{n}{t}Total = Currency(){n}{t}Total = get_currency(IAOTHADJ.TPTot) + get_currency(IAOTHADJ.SPTot){n}{t}return CStr(Total){n}{n}
def Description_Calculation(Index):{n}{t}count = Integer(){n}{n}{t}Hold = String(){n}{t}count = 0{n}{t}Hold = ''{n}{t}if get_currency(IAOTHADJ.TOth1) != 0 or get_currency(IAOTHADJ.SOth1) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_string(IAOTHADJ.TxtOth1){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPActiveMil) != 0 or get_currency(IAOTHADJ.SPActiveMil) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Active duty military pay'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPAltMV) != 0 or get_currency(IAOTHADJ.SPAltMV) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Alternative motor vehicle deduction'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPInvolConv) != 0 or get_currency(IAOTHADJ.SPInvolConv) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Capital or ordinary gain from involuntary conversion'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPClaimOfRight) != 0 or get_currency(IAOTHADJ.SPClaimOfRight) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Claim of Right deduction'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPIAEd) != 0 or get_currency(IAOTHADJ.SPIAEd) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'College Savings Iowa or Iowa Advisor 529 Plan'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPIADis) != 0 or get_currency(IAOTHADJ.SPIADis) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Disability income exclusion'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPDomProd) != 0 or get_currency(IAOTHADJ.SPDomProd) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Domestic production activities deduction'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPFirstHmBuy) != 0 or get_currency(IAOTHADJ.SPFirstHmBuy) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'First-Time Homebuyer Savings Account qualifying contributions'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPEmployerSS) != 0 or get_currency(IAOTHADJ.SPEmployerSS) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Employer social security credit, federal Form 8846'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPFedFuels) != 0 or get_currency(IAOTHADJ.SPFedFuels) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Alcohol and cellulosic biofuel credit, federal Form 6478'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPForeign) != 0 or get_currency(IAOTHADJ.SPForeign) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Foreign earned income exclusion, federal Form 2555'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TP2555) != 0 or get_currency(IAOTHADJ.SP2555) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Foreign housing deduction, federal Form 2555'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPDistressed) != 0 or get_currency(IAOTHADJ.SPDistressed) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Gains or losses from distressed sale transactions'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPHealthSav) != 0 or get_currency(IAOTHADJ.SPHealthSav) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Health savings account deduction, federal Form 8889'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPVet) != 0 or get_currency(IAOTHADJ.SPVet) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Injured veterans programs - contributions'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPVetGrant) != 0 or get_currency(IAOTHADJ.SPVetGrant) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Injured veterans programs - grants'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPHomeHealth) != 0 or get_currency(IAOTHADJ.SPHomeHealth) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'In-home health care'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPIAVetTrust) != 0 or get_currency(IAOTHADJ.SPIAVetTrust) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Iowa Veterans Trust Fund'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPMilitaryExem) != 0 or get_currency(IAOTHADJ.SPMilitaryExem) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Military exemptions'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TIANOL) != 0 or get_currency(IAOTHADJ.SIANOL) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Iowa Net Operating Loss'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPOrgan) != 0 or get_currency(IAOTHADJ.SPOrgan) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Organ transplant expenses'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPK1) != 0 or get_currency(IAOTHADJ.SPK1) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Partnership income and/or S Corporation income'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPSegal) != 0 or get_currency(IAOTHADJ.SPSegal) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Segal Americorps Education Award payments'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPShell) != 0 or get_currency(IAOTHADJ.SPShell) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Speculative shell buildings'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TStud) != 0 or get_currency(IAOTHADJ.SStud) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Student loan interest deduction'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPVictim) != 0 or get_currency(IAOTHADJ.SPVictim) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Victim compensation awards'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPWages) != 0 or get_currency(IAOTHADJ.SPWages) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Wages paid to certain individuals'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPWorkCr) != 0 or get_currency(IAOTHADJ.SPWorkCr) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Work opportunity credit, federal Form 5884'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TP2106) != 0 or get_currency(IAOTHADJ.SP2106) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Business expenses of reservists, QPA, FBO, federal Form 2106'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TMSA) != 0 or get_currency(IAOTHADJ.SMSA) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Archer MSA deduction, federal Form 8853'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPJury) != 0 or get_currency(IAOTHADJ.SPJury) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Jury pay repayment to employer'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPRFST) != 0 or get_currency(IAOTHADJ.SPRFST) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Reforestation amortization and expenses'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPSub) != 0 or get_currency(IAOTHADJ.SPSub) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Repayment of supplemental unemployment benefits'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TP501c) != 0 or get_currency(IAOTHADJ.SP501c) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Contributions to a 501(c)(18) pension plan'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPPerRent) != 0 or get_currency(IAOTHADJ.SPPerRent) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Expenses for personal property rental'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TP403b) != 0 or get_currency(IAOTHADJ.SP403b) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Contributions by certain chaplains to a 403(b) plan'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPUDC) != 0 or get_currency(IAOTHADJ.SPUDC) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Qualified attorney/court fees paid after 10/22/2004'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPWBF) != 0 or get_currency(IAOTHADJ.SPWBF) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Qualified whistleblower fees'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TP8873) != 0 or get_currency(IAOTHADJ.SP8873) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Extraterritorial Income Exclusion, federal Form 8873'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPOlympic) != 0 or get_currency(IAOTHADJ.SPOlympic) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Nontaxable amount of Olympic and Paralympic medals and USOC prize money'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPEducator) != 0 or get_currency(IAOTHADJ.SPEducator) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Educator expenses'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPTuition) != 0 or get_currency(IAOTHADJ.SPTuition) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Tuition and fees deduction'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPElectric) != 0 or get_currency(IAOTHADJ.SPElectric) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Nonresident Electric Utility Reciprocity'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPRapid) != 0 or get_currency(IAOTHADJ.SPRapid) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Rapid Response to State Disasters'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPIAABLE) != 0 or get_currency(IAOTHADJ.SPIAABLE) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Iowa ABLE savings plan trust'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}return Hold{n}{n}
def Exist_Calculation():{n}{t}return 1{n}{n}
def ModSPTot_Calculation():{n}{t}return get_currency(IAOTHADJ.SOth1) + get_currency(IAOTHADJ.SPActiveMil) + get_currency(IAOTHADJ.SPInvolConv) + get_currency(IAOTHADJ.SPClaimOfRight) + get_currency(IAOTHADJ.SPIAEd) + get_currency(IAOTHADJ.SPIADis) + get_currency(IAOTHADJ.SPDomProd) + get_currency(IAOTHADJ.SPFirstHmBuy) + get_currency(IAOTHADJ.SPEmployerSS) + get_currency(IAOTHADJ.SPFedFuels) + get_currency(IAOTHADJ.SPForeign) + get_currency(IAOTHADJ.SP2555) + get_currency(IAOTHADJ.SPDistressed) + get_currency(IAOTHADJ.SPHealthSav) + get_currency(IAOTHADJ.SPVet) + get_currency(IAOTHADJ.SPVetGrant) + get_currency(IAOTHADJ.SPHomeHealth) + get_currency(IAOTHADJ.SPIAVetTrust) + get_currency(IAOTHADJ.SPMilitaryExem) + get_currency(IAOTHADJ.SIANOL) + get_currency(IAOTHADJ.SPOrgan) + get_currency(IAOTHADJ.SPK1) + get_currency(IAOTHADJ.SPSegal) + get_currency(IAOTHADJ.SPShell) + get_currency(IAOTHADJ.SStud) + get_currency(IAOTHADJ.SPVictim) + get_currency(IAOTHADJ.SPWages) + get_currency(IAOTHADJ.SPWorkCr) + get_currency(IAOTHADJ.SP2106) + get_currency(IAOTHADJ.SMSA) + get_currency(IAOTHADJ.SPJury) + get_currency(IAOTHADJ.SPRFST) + get_currency(IAOTHADJ.SPSub) + get_currency(IAOTHADJ.SP501c) + get_currency(IAOTHADJ.SPPerRent) + get_currency(IAOTHADJ.SP403b) + get_currency(IAOTHADJ.SPUDC) + get_currency(IAOTHADJ.SPWBF) + get_currency(IAOTHADJ.SP8873) + get_currency(IAOTHADJ.SPOlympic) + get_currency(IAOTHADJ.SPEducator) + get_currency(IAOTHADJ.SPTuition) + get_currency(IAOTHADJ.SPElectric) + get_currency(IAOTHADJ.SPRapid) + get_currency(IAOTHADJ.SPIAABLE){n}{n}
def ModTPTot_Calculation():{n}{t}return get_currency(IAOTHADJ.TOth1) + get_currency(IAOTHADJ.TPActiveMil) + get_currency(IAOTHADJ.TPInvolConv) + get_currency(IAOTHADJ.TPClaimOfRight) + get_currency(IAOTHADJ.TPIAEd) + get_currency(IAOTHADJ.TPIADis) + get_currency(IAOTHADJ.TPDomProd) + get_currency(IAOTHADJ.TPFirstHmBuy) + get_currency(IAOTHADJ.TPEmployerSS) + get_currency(IAOTHADJ.TPFedFuels) + get_currency(IAOTHADJ.TPForeign) + get_currency(IAOTHADJ.TP2555) + get_currency(IAOTHADJ.TPDistressed) + get_currency(IAOTHADJ.TPHealthSav) + get_currency(IAOTHADJ.TPVet) + get_currency(IAOTHADJ.TPVetGrant) + get_currency(IAOTHADJ.TPHomeHealth) + get_currency(IAOTHADJ.TPIAVetTrust) + get_currency(IAOTHADJ.TPMilitaryExem) + get_currency(IAOTHADJ.TIANOL) + get_currency(IAOTHADJ.TPOrgan) + get_currency(IAOTHADJ.TPK1) + get_currency(IAOTHADJ.TPSegal) + get_currency(IAOTHADJ.TPShell) + get_currency(IAOTHADJ.TStud) + get_currency(IAOTHADJ.TPVictim) + get_currency(IAOTHADJ.TPWages) + get_currency(IAOTHADJ.TPWorkCr) + get_currency(IAOTHADJ.TP2106) + get_currency(IAOTHADJ.TMSA) + get_currency(IAOTHADJ.TPJury) + get_currency(IAOTHADJ.TPRFST) + get_currency(IAOTHADJ.TPSub) + get_currency(IAOTHADJ.TP501c) + get_currency(IAOTHADJ.TPPerRent) + get_currency(IAOTHADJ.TP403b) + get_currency(IAOTHADJ.TPUDC) + get_currency(IAOTHADJ.TPWBF) + get_currency(IAOTHADJ.TP8873) + get_currency(IAOTHADJ.TPOlympic) + get_currency(IAOTHADJ.TPEducator) + get_currency(IAOTHADJ.TPTuition) + get_currency(IAOTHADJ.TPElectric) + get_currency(IAOTHADJ.TPRapid) + get_currency(IAOTHADJ.TPIAABLE){n}{n}
def Names_Calculation():{n}{t}return get_string(IAREQUIRED.CombNames){n}{n}
def PrintMe_Calculation():{n}{t}if get_currency(IAOTHADJ.TPTot) != 0 or get_currency(IAOTHADJ.SPTot) != 0:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def SIANOL_Calculation():{n}{t}if get_bool(IAF126.SpNonRes) == True:{n}{t}{t}return 0{n}{t}elif get_bool(USWResidency.F1040NR) == False:{n}{t}{t}return Abs(get_currency(USWOthInc.SPNOL)){n}{t}else:{n}{t}{t}return 0{n}{n}
def SMSA_Calculation():{n}{t}if get_bool(USWResidency.F1040NR) == False:{n}{t}{t}return get_currency(USWOthAdj.SP8853){n}{t}else:{n}{t}{t}return 0{n}{n}
def SP2106_Calculation():{n}{t}return get_currency(USWRec.SBusExp2106){n}{n}
def SP2555_Calculation():{n}{t}return get_currency(USWOthAdj.SP2555){n}{n}
def SP403b_Calculation():{n}{t}if get_bool(USWResidency.F1040NR) == False:{n}{t}{t}return get_currency(USWOthAdj.SP403b){n}{t}else:{n}{t}{t}return 0{n}{n}
def SP501c_Calculation():{n}{t}if get_bool(USWResidency.F1040NR) == False:{n}{t}{t}return get_currency(USWOthAdj.SPTotal501){n}{t}else:{n}{t}{t}return 0{n}{n}
def SP8873_Calculation():{n}{t}if get_bool(USWResidency.F1040NR) == False:{n}{t}{t}return get_currency(USWOthAdj.SP8873){n}{t}else:{n}{t}{t}return 0{n}{n}
def SPAltMV_Calculation():{n}{t}#2018 expanded instructions - deduction does not apply to purchases on or after 1/1/2015 due to nonconformity, federal does not ask for a purchase date, believe will be very uncommon for ability to take this credit on Iowa, remove math and make user entered{n}{t}#If IAFS() = 3 And get_bool(USF8910.Print) = True Then{n}{t}#{t}return c_dollar(get_float(IAOTHADJ.BProRate) * 2000@){n}{t}#Else{n}{t}return 0{n}{t}#End If{n}{n}
def SPAmount_Calculation(Index):{n}{t}count = Integer(){n}{n}{t}Hold = Currency(){n}{t}count = 0{n}{t}Hold = 0{n}{t}if get_currency(IAOTHADJ.TOth1) != 0 or get_currency(IAOTHADJ.SOth1) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAOTHADJ.SOth1){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPActiveMil) != 0 or get_currency(IAOTHADJ.SPActiveMil) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAOTHADJ.SPActiveMil){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPAltMV) != 0 or get_currency(IAOTHADJ.SPAltMV) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAOTHADJ.SPAltMV){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPInvolConv) != 0 or get_currency(IAOTHADJ.SPInvolConv) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAOTHADJ.SPInvolConv){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPClaimOfRight) != 0 or get_currency(IAOTHADJ.SPClaimOfRight) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAOTHADJ.SPClaimOfRight){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPIAEd) != 0 or get_currency(IAOTHADJ.SPIAEd) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAOTHADJ.SPIAEd){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPIADis) != 0 or get_currency(IAOTHADJ.SPIADis) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAOTHADJ.SPIADis){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPDomProd) != 0 or get_currency(IAOTHADJ.SPDomProd) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAOTHADJ.SPDomProd){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPFirstHmBuy) != 0 or get_currency(IAOTHADJ.SPFirstHmBuy) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAOTHADJ.SPFirstHmBuy){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPEmployerSS) != 0 or get_currency(IAOTHADJ.SPEmployerSS) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAOTHADJ.SPEmployerSS){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPFedFuels) != 0 or get_currency(IAOTHADJ.SPFedFuels) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAOTHADJ.SPFedFuels){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPForeign) != 0 or get_currency(IAOTHADJ.SPForeign) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAOTHADJ.SPForeign){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TP2555) != 0 or get_currency(IAOTHADJ.SP2555) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAOTHADJ.SP2555){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPDistressed) != 0 or get_currency(IAOTHADJ.SPDistressed) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAOTHADJ.SPDistressed){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPHealthSav) != 0 or get_currency(IAOTHADJ.SPHealthSav) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAOTHADJ.SPHealthSav){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPVet) != 0 or get_currency(IAOTHADJ.SPVet) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAOTHADJ.SPVet){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPVetGrant) != 0 or get_currency(IAOTHADJ.SPVetGrant) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAOTHADJ.SPVetGrant){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPHomeHealth) != 0 or get_currency(IAOTHADJ.SPHomeHealth) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAOTHADJ.SPHomeHealth){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPIAVetTrust) != 0 or get_currency(IAOTHADJ.SPIAVetTrust) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAOTHADJ.SPIAVetTrust){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPMilitaryExem) != 0 or get_currency(IAOTHADJ.SPMilitaryExem) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAOTHADJ.SPMilitaryExem){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TIANOL) != 0 or get_currency(IAOTHADJ.SIANOL) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAOTHADJ.SIANOL){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPOrgan) != 0 or get_currency(IAOTHADJ.SPOrgan) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAOTHADJ.SPOrgan){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPK1) != 0 or get_currency(IAOTHADJ.SPK1) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAOTHADJ.SPK1){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPSegal) != 0 or get_currency(IAOTHADJ.SPSegal) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAOTHADJ.SPSegal){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPShell) != 0 or get_currency(IAOTHADJ.SPShell) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAOTHADJ.SPShell){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TStud) != 0 or get_currency(IAOTHADJ.SStud) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAOTHADJ.SStud){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPVictim) != 0 or get_currency(IAOTHADJ.SPVictim) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAOTHADJ.SPVictim){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPWages) != 0 or get_currency(IAOTHADJ.SPWages) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAOTHADJ.SPWages){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPWorkCr) != 0 or get_currency(IAOTHADJ.SPWorkCr) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAOTHADJ.SPWorkCr){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TP2106) != 0 or get_currency(IAOTHADJ.SP2106) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAOTHADJ.SP2106){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TMSA) != 0 or get_currency(IAOTHADJ.SMSA) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAOTHADJ.SMSA){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPJury) != 0 or get_currency(IAOTHADJ.SPJury) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAOTHADJ.SPJury){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPRFST) != 0 or get_currency(IAOTHADJ.SPRFST) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAOTHADJ.SPRFST){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPSub) != 0 or get_currency(IAOTHADJ.SPSub) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAOTHADJ.SPSub){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TP501c) != 0 or get_currency(IAOTHADJ.SP501c) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAOTHADJ.SP501c){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPPerRent) != 0 or get_currency(IAOTHADJ.SPPerRent) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAOTHADJ.SPPerRent){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TP403b) != 0 or get_currency(IAOTHADJ.SP403b) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAOTHADJ.SP403b){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPUDC) != 0 or get_currency(IAOTHADJ.SPUDC) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAOTHADJ.SPUDC){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPWBF) != 0 or get_currency(IAOTHADJ.SPWBF) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAOTHADJ.SPWBF){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TP8873) != 0 or get_currency(IAOTHADJ.SP8873) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAOTHADJ.SP8873){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPOlympic) != 0 or get_currency(IAOTHADJ.SPOlympic) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAOTHADJ.SPOlympic){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPEducator) != 0 or get_currency(IAOTHADJ.SPEducator) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAOTHADJ.SPEducator){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPTuition) != 0 or get_currency(IAOTHADJ.SPTuition) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAOTHADJ.SPTuition){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPElectric) != 0 or get_currency(IAOTHADJ.SPElectric) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAOTHADJ.SPElectric){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPRapid) != 0 or get_currency(IAOTHADJ.SPRapid) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAOTHADJ.SPRapid){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPIAABLE) != 0 or get_currency(IAOTHADJ.SPIAABLE) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAOTHADJ.SPIAABLE){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}return Hold{n}{n}
def SPDomProd_Calculation():{n}{t}#Iowa expanded instructions - Iowa has not conformed to the repeal of the federal domestic production activities deduction. For Iowa will need to complete a federal 8903 and keep with their records and follow IA instructions for adjustments needed when calcing.{n}{t}#return get_currency(USWRec.SDomProd){n}{t}return 0{n}{n}
def SPEducator_Calculation():{n}{t}return get_currency(USWRec.SEdExp){n}{n}
def SPForeign_Calculation():{n}{t}return Abs(get_currency(USWOthInc.SP2555)){n}{n}
def SPHealthSav_Calculation():{n}{t}return get_currency(USWRec.SHealthSav){n}{n}
def SPJury_Calculation():{n}{t}if get_bool(USWResidency.F1040NR) == False:{n}{t}{t}return get_currency(USWOthAdj.SPJury){n}{t}else:{n}{t}{t}return 0{n}{n}
def SPK1_Calculation():{n}{t}if get_bool(USWResidency.F1040NR) == False and get_currency(USWOthInc.SPK1) < 0:{n}{t}{t}return Abs(get_currency(USWOthInc.SPK1)){n}{t}else:{n}{t}{t}return 0{n}{n}
def SPName_Calculation():{n}{t}return get_string(USWBasicInfo.SPCommon){n}{n}
def SPOlympic_Calculation():{n}{t}if get_bool(USWResidency.F1040NR) == False:{n}{t}{t}return get_currency(USWOthAdj.Text2){n}{t}else:{n}{t}{t}return 0{n}{n}
def SPPerRent_Calculation():{n}{t}if get_bool(USWResidency.F1040NR) == False:{n}{t}{t}return get_currency(USWOthAdj.SPPerRent){n}{t}else:{n}{t}{t}return 0{n}{n}
def SPRFST_Calculation():{n}{t}if get_bool(USWResidency.F1040NR) == False:{n}{t}{t}return get_currency(USWOthAdj.SPRFST){n}{t}else:{n}{t}{t}return 0{n}{n}
def SPSub_Calculation():{n}{t}if get_bool(USWResidency.F1040NR) == False:{n}{t}{t}return get_currency(USWOthAdj.SPSub){n}{t}else:{n}{t}{t}return 0{n}{n}
def SPTot_Calculation():{n}{t}return get_currency(IAOTHADJ.SOth1) + get_currency(IAOTHADJ.SPActiveMil) + get_currency(IAOTHADJ.SPAltMV) + get_currency(IAOTHADJ.SPInvolConv) + get_currency(IAOTHADJ.SPClaimOfRight) + get_currency(IAOTHADJ.SPIAEd) + get_currency(IAOTHADJ.SPIADis) + get_currency(IAOTHADJ.SPDomProd) + get_currency(IAOTHADJ.SPFirstHmBuy) + get_currency(IAOTHADJ.SPEmployerSS) + get_currency(IAOTHADJ.SPFedFuels) + get_currency(IAOTHADJ.SPForeign) + get_currency(IAOTHADJ.SP2555) + get_currency(IAOTHADJ.SPDistressed) + get_currency(IAOTHADJ.SPHealthSav) + get_currency(IAOTHADJ.SPVet) + get_currency(IAOTHADJ.SPVetGrant) + get_currency(IAOTHADJ.SPHomeHealth) + get_currency(IAOTHADJ.SPIAVetTrust) + get_currency(IAOTHADJ.SPMilitaryExem) + get_currency(IAOTHADJ.SIANOL) + get_currency(IAOTHADJ.SPOrgan) + get_currency(IAOTHADJ.SPK1) + get_currency(IAOTHADJ.SPSegal) + get_currency(IAOTHADJ.SPShell) + get_currency(IAOTHADJ.SStud) + get_currency(IAOTHADJ.SPVictim) + get_currency(IAOTHADJ.SPWages) + get_currency(IAOTHADJ.SPWorkCr) + get_currency(IAOTHADJ.SP2106) + get_currency(IAOTHADJ.SMSA) + get_currency(IAOTHADJ.SPJury) + get_currency(IAOTHADJ.SPRFST) + get_currency(IAOTHADJ.SPSub) + get_currency(IAOTHADJ.SP501c) + get_currency(IAOTHADJ.SPPerRent) + get_currency(IAOTHADJ.SP403b) + get_currency(IAOTHADJ.SPUDC) + get_currency(IAOTHADJ.SPWBF) + get_currency(IAOTHADJ.SP8873) + get_currency(IAOTHADJ.SPEducator) + get_currency(IAOTHADJ.SPTuition) + get_currency(IAOTHADJ.SPElectric) + get_currency(IAOTHADJ.SPRapid) + get_currency(IAOTHADJ.SPOlympic) + get_currency(IAOTHADJ.SPIAABLE){n}{n}
def SPTuition_Calculation():{n}{t}return 0{n}{t}#return get_currency(USWRec.STuitAdj){n}{n}
def SPUDC_Calculation():{n}{t}if get_bool(USWResidency.F1040NR) == False:{n}{t}{t}return get_currency(USWOthAdj.SPUDC){n}{t}else:{n}{t}{t}return 0{n}{n}
def SPWBF_Calculation():{n}{t}if get_bool(USWResidency.F1040NR) == False:{n}{t}{t}return get_currency(USWOthAdj.SPWBF){n}{t}else:{n}{t}{t}return 0{n}{n}
def SSN_Calculation():{n}{t}return get_string(IAF1040.SSN){n}{n}
def SStud_Calculation():{n}{t}return get_currency(USWRec.SStudAdj){n}{n}
def TIANOL_Calculation():{n}{t}if get_bool(IAF126.TpNonRes) == True:{n}{t}{t}return 0{n}{t}elif get_bool(USWResidency.F1040NR) == False:{n}{t}{t}return Abs(get_currency(USWOthInc.TPNOL)){n}{t}else:{n}{t}{t}return Abs(get_currency(USWOthIncNR.TPNOL)){n}{n}
def TMSA_Calculation():{n}{t}if get_bool(USWResidency.F1040NR) == False:{n}{t}{t}return get_currency(USWOthAdj.TP8853){n}{t}else:{n}{t}{t}return get_currency(USWOthAdjNR.TP8853){n}{n}
def TotNI_Calculation():{n}{t}return get_currency(IAOTHADJ.ANet) + get_currency(IAOTHADJ.BNet){n}{n}
def TP2106_Calculation():{n}{t}return get_currency(USWRec.TBusExp2106){n}{n}
def TP2555_Calculation():{n}{t}return get_currency(USWOthAdj.TP2555){n}{n}
def TP403b_Calculation():{n}{t}if get_bool(USWResidency.F1040NR) == False:{n}{t}{t}return get_currency(USWOthAdj.TP403b){n}{t}else:{n}{t}{t}return get_currency(USWOthAdjNR.TP403b){n}{n}
def TP501c_Calculation():{n}{t}if get_bool(USWResidency.F1040NR) == False:{n}{t}{t}return get_currency(USWOthAdj.TPTotal501){n}{t}else:{n}{t}{t}return get_currency(USWOthAdjNR.Total501){n}{n}
def TP8873_Calculation():{n}{t}if get_bool(USWResidency.F1040NR) == False:{n}{t}{t}return get_currency(USWOthAdj.TP8873){n}{t}else:{n}{t}{t}return get_currency(USWOthAdjNR.TP8873){n}{n}
def TPAltMV_Calculation():{n}{t}#2018 expanded instructions - deduction does not apply to purchases on or after 1/1/2015 due to nonconformity, federal does not ask for a purchase date, believe will be very uncommon for ability to take this credit on Iowa, remove math and make user entered{n}{t}#If get_bool(USF8910.Print) = False Then{n}{t}return 0{n}{t}#ElseIf IAFS() = 3 Then{n}{t}#{t}return max_value(0, 2000@ - get_currency(IAOTHADJ.SPAltMV)){n}{t}#Else{n}{t}#{t}return 2000@{n}{t}#End If{n}{n}
def TPAmount_Calculation(Index):{n}{t}count = Integer(){n}{n}{t}Hold = Currency(){n}{t}count = 0{n}{t}Hold = 0{n}{t}if get_currency(IAOTHADJ.TOth1) != 0 or get_currency(IAOTHADJ.SOth1) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAOTHADJ.TOth1){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPActiveMil) != 0 or get_currency(IAOTHADJ.SPActiveMil) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAOTHADJ.TPActiveMil){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPAltMV) != 0 or get_currency(IAOTHADJ.SPAltMV) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAOTHADJ.TPAltMV){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPInvolConv) != 0 or get_currency(IAOTHADJ.SPInvolConv) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAOTHADJ.TPInvolConv){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPClaimOfRight) != 0 or get_currency(IAOTHADJ.SPClaimOfRight) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAOTHADJ.TPClaimOfRight){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPIAEd) != 0 or get_currency(IAOTHADJ.SPIAEd) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAOTHADJ.TPIAEd){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPIADis) != 0 or get_currency(IAOTHADJ.SPIADis) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAOTHADJ.TPIADis){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPDomProd) != 0 or get_currency(IAOTHADJ.SPDomProd) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAOTHADJ.TPDomProd){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPFirstHmBuy) != 0 or get_currency(IAOTHADJ.SPFirstHmBuy) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAOTHADJ.TPFirstHmBuy){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPEmployerSS) != 0 or get_currency(IAOTHADJ.SPEmployerSS) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAOTHADJ.TPEmployerSS){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPFedFuels) != 0 or get_currency(IAOTHADJ.SPFedFuels) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAOTHADJ.TPFedFuels){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPForeign) != 0 or get_currency(IAOTHADJ.SPForeign) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAOTHADJ.TPForeign){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TP2555) != 0 or get_currency(IAOTHADJ.SP2555) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAOTHADJ.TP2555){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPDistressed) != 0 or get_currency(IAOTHADJ.SPDistressed) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAOTHADJ.TPDistressed){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPHealthSav) != 0 or get_currency(IAOTHADJ.SPHealthSav) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAOTHADJ.TPHealthSav){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPVet) != 0 or get_currency(IAOTHADJ.SPVet) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAOTHADJ.TPVet){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPVetGrant) != 0 or get_currency(IAOTHADJ.SPVetGrant) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAOTHADJ.TPVetGrant){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPHomeHealth) != 0 or get_currency(IAOTHADJ.SPHomeHealth) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAOTHADJ.TPHomeHealth){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPIAVetTrust) != 0 or get_currency(IAOTHADJ.SPIAVetTrust) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAOTHADJ.TPIAVetTrust){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPMilitaryExem) != 0 or get_currency(IAOTHADJ.SPMilitaryExem) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAOTHADJ.TPMilitaryExem){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TIANOL) != 0 or get_currency(IAOTHADJ.SIANOL) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAOTHADJ.TIANOL){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPOrgan) != 0 or get_currency(IAOTHADJ.SPOrgan) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAOTHADJ.TPOrgan){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPK1) != 0 or get_currency(IAOTHADJ.SPK1) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAOTHADJ.TPK1){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPSegal) != 0 or get_currency(IAOTHADJ.SPSegal) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAOTHADJ.TPSegal){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPShell) != 0 or get_currency(IAOTHADJ.SPShell) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAOTHADJ.TPShell){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TStud) != 0 or get_currency(IAOTHADJ.SStud) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAOTHADJ.TStud){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPVictim) != 0 or get_currency(IAOTHADJ.SPVictim) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAOTHADJ.TPVictim){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPWages) != 0 or get_currency(IAOTHADJ.SPWages) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAOTHADJ.TPWages){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPWorkCr) != 0 or get_currency(IAOTHADJ.SPWorkCr) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAOTHADJ.TPWorkCr){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TP2106) != 0 or get_currency(IAOTHADJ.SP2106) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAOTHADJ.TP2106){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TMSA) != 0 or get_currency(IAOTHADJ.SMSA) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAOTHADJ.TMSA){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPJury) != 0 or get_currency(IAOTHADJ.SPJury) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAOTHADJ.TPJury){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPRFST) != 0 or get_currency(IAOTHADJ.SPRFST) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAOTHADJ.TPRFST){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPSub) != 0 or get_currency(IAOTHADJ.SPSub) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAOTHADJ.TPSub){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TP501c) != 0 or get_currency(IAOTHADJ.SP501c) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAOTHADJ.TP501c){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPPerRent) != 0 or get_currency(IAOTHADJ.SPPerRent) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAOTHADJ.TPPerRent){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TP403b) != 0 or get_currency(IAOTHADJ.SP403b) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAOTHADJ.TP403b){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPUDC) != 0 or get_currency(IAOTHADJ.SPUDC) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAOTHADJ.TPUDC){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPWBF) != 0 or get_currency(IAOTHADJ.SPWBF) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAOTHADJ.TPWBF){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TP8873) != 0 or get_currency(IAOTHADJ.SP8873) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAOTHADJ.TP8873){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPOlympic) != 0 or get_currency(IAOTHADJ.SPOlympic) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAOTHADJ.TPOlympic){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPEducator) != 0 or get_currency(IAOTHADJ.SPEducator) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAOTHADJ.TPEducator){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPTuition) != 0 or get_currency(IAOTHADJ.SPTuition) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAOTHADJ.TPTuition){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPElectric) != 0 or get_currency(IAOTHADJ.SPElectric) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAOTHADJ.TPElectric){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPRapid) != 0 or get_currency(IAOTHADJ.SPRapid) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAOTHADJ.TPRapid){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAOTHADJ.TPIAABLE) != 0 or get_currency(IAOTHADJ.SPIAABLE) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAOTHADJ.TPIAABLE){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}return Hold{n}{n}
def TPDomProd_Calculation():{n}{t}#Iowa expanded instructions - Iowa has not conformed to the repeal of the federal domestic production activities deduction. For Iowa will need to complete a federal 8903 and keep with their records and follow IA instructions for adjustments needed when calcing.{n}{t}#return get_currency(USWRec.TDomProd){n}{t}return 0{n}{n}
def TPEducator_Calculation():{n}{t}return get_currency(USWRec.TEdExp){n}{n}
def TPForeign_Calculation():{n}{t}return Abs(get_currency(USWOthInc.TP2555)){n}{n}
def TPHealthSav_Calculation():{n}{t}return get_currency(USWRec.THealthSav){n}{n}
def TPJointAmount_Calculation(Index):{n}{t}if get_bool(IAF1040.CombMFS) == True:{n}{t}{t}return get_currency(IAOTHADJ.TPAmount(Index)){n}{t}else:{n}{t}{t}return get_currency(IAOTHADJ.TPAmount(Index)) + get_currency(IAOTHADJ.SPAmount(Index)){n}{n}
def TPJury_Calculation():{n}{t}if get_bool(USWResidency.F1040NR) == False:{n}{t}{t}return get_currency(USWOthAdj.TPJury){n}{t}else:{n}{t}{t}return 0{n}{n}
def TPK1_Calculation():{n}{t}if get_bool(USWResidency.F1040NR) == False and get_currency(USWOthInc.TPK1) < 0:{n}{t}{t}return Abs(get_currency(USWOthInc.TPK1)){n}{t}elif get_bool(USWResidency.F1040NR) == True and get_currency(USWOthIncNR.TPK1) < 0:{n}{t}{t}return Abs(get_currency(USWOthIncNR.TPK1)){n}{t}else:{n}{t}{t}return 0{n}{n}
def TPName_Calculation():{n}{t}return get_string(USWBasicInfo.TPCommon){n}{n}
def TPOlympic_Calculation():{n}{t}if get_bool(USWResidency.F1040NR) == False:{n}{t}{t}return get_currency(USWOthAdj.Text1){n}{t}else:{n}{t}{t}return 0{n}{n}
def TPPerRent_Calculation():{n}{t}if get_bool(USWResidency.F1040NR) == False:{n}{t}{t}return get_currency(USWOthAdj.TPPerRent){n}{t}else:{n}{t}{t}return 0{n}{n}
def TPRFST_Calculation():{n}{t}if get_bool(USWResidency.F1040NR) == False:{n}{t}{t}return get_currency(USWOthAdj.TPRFST){n}{t}else:{n}{t}{t}return get_currency(USWOthAdjNR.TPRFST){n}{n}
def TPSub_Calculation():{n}{t}if get_bool(USWResidency.F1040NR) == False:{n}{t}{t}return get_currency(USWOthAdj.TPSub){n}{t}else:{n}{t}{t}return get_currency(USWOthAdjNR.TPSub){n}{n}
def TPTot_Calculation():{n}{t}return get_currency(IAOTHADJ.TOth1) + get_currency(IAOTHADJ.TPActiveMil) + get_currency(IAOTHADJ.TPAltMV) + get_currency(IAOTHADJ.TPInvolConv) + get_currency(IAOTHADJ.TPClaimOfRight) + get_currency(IAOTHADJ.TPIAEd) + get_currency(IAOTHADJ.TPIADis) + get_currency(IAOTHADJ.TPDomProd) + get_currency(IAOTHADJ.TPFirstHmBuy) + get_currency(IAOTHADJ.TPEmployerSS) + get_currency(IAOTHADJ.TPFedFuels) + get_currency(IAOTHADJ.TPForeign) + get_currency(IAOTHADJ.TP2555) + get_currency(IAOTHADJ.TPDistressed) + get_currency(IAOTHADJ.TPHealthSav) + get_currency(IAOTHADJ.TPVet) + get_currency(IAOTHADJ.TPVetGrant) + get_currency(IAOTHADJ.TPHomeHealth) + get_currency(IAOTHADJ.TPIAVetTrust) + get_currency(IAOTHADJ.TPMilitaryExem) + get_currency(IAOTHADJ.TIANOL) + get_currency(IAOTHADJ.TPOrgan) + get_currency(IAOTHADJ.TPK1) + get_currency(IAOTHADJ.TPSegal) + get_currency(IAOTHADJ.TPShell) + get_currency(IAOTHADJ.TStud) + get_currency(IAOTHADJ.TPVictim) + get_currency(IAOTHADJ.TPWages) + get_currency(IAOTHADJ.TPWorkCr) + get_currency(IAOTHADJ.TP2106) + get_currency(IAOTHADJ.TMSA) + get_currency(IAOTHADJ.TPJury) + get_currency(IAOTHADJ.TPRFST) + get_currency(IAOTHADJ.TPSub) + get_currency(IAOTHADJ.TP501c) + get_currency(IAOTHADJ.TPPerRent) + get_currency(IAOTHADJ.TP403b) + get_currency(IAOTHADJ.TPUDC) + get_currency(IAOTHADJ.TPWBF) + get_currency(IAOTHADJ.TP8873) + get_currency(IAOTHADJ.TPEducator) + get_currency(IAOTHADJ.TPTuition) + get_currency(IAOTHADJ.TPElectric) + get_currency(IAOTHADJ.TPRapid) + get_currency(IAOTHADJ.TPOlympic) + get_currency(IAOTHADJ.TPIAABLE){n}{n}
def TPTuition_Calculation():{n}{t}return 0{n}{t}#return get_currency(USWRec.TTuitAdj){n}{n}
def TPUDC_Calculation():{n}{t}if get_bool(USWResidency.F1040NR) == False:{n}{t}{t}return get_currency(USWOthAdj.TPUDC){n}{t}else:{n}{t}{t}return get_currency(USWOthAdjNR.TPUDC){n}{n}
def TPWBF_Calculation():{n}{t}if get_bool(USWResidency.F1040NR) == False:{n}{t}{t}return get_currency(USWOthAdj.TPWBF){n}{t}else:{n}{t}{t}return get_currency(USWOthAdjNR.TPWBF){n}{n}
def TStud_Calculation():{n}{t}return get_currency(USWRec.TStudAdj){n}{n}def DatePaid_Calculation():{n}{t}return GetDate(IAF1040.DateDuePaid){n}{n}
def Desc_Calculation():{n}{t}return CStr(get_currency(IAPENALTY.TotPen)){n}{n}
def Exist_Calculation():{n}{t}return 1{n}{n}
def Names_Calculation():{n}{t}if get_bool(IAF1040.CombMFS) == True:{n}{t}{t}return get_string(IAREQUIRED.TPCombName){n}{t}else:{n}{t}{t}return get_string(IAREQUIRED.CombNames){n}{n}
def Q1Days1_Calculation():{n}{t}if GetDate(IASTATEEST.TPStQ2Date) < datetime.datetime(7, 2, 2018):{n}{t}{t}return max_value(0, DaysDiff(GetDate(IASTATEEST.TPStQ2Date), datetime.datetime(4, 30, 2018))){n}{t}else:{n}{t}{t}return 63{n}{n}
def Q1Days2_Calculation():{n}{t}if GetDate(IASTATEEST.TPStQ2Date) < datetime.datetime(7, 2, 2018) and get_currency(IAPENALTY.Q1UnPay2) > 0:{n}{t}{t}return max_value(0, DaysDiff(datetime.datetime(7, 2, 2018), GetDate(IASTATEEST.TPStQ2Date))){n}{t}else:{n}{t}{t}return 0{n}{n}
def Q1Pen1_Calculation():{n}{t}return CCur(Round(( get_float(IAPENALTY.Q1Days1) / 365 )  * 0.06 * get_float(IAPENALTY.Q1UnPay1))){n}{n}
def Q1Pen2_Calculation():{n}{t}return CCur(Round(( get_float(IAPENALTY.Q1Days2) / 365 )  * 0.06 * get_float(IAPENALTY.Q1UnPay2))){n}{n}
def Q1UnPay1_Calculation():{n}{t}return get_currency(IA2210.Q1Undpay){n}{n}
def Q1UnPay2_Calculation():{n}{t}if GetDate(IASTATEEST.TPStQ2Date) < datetime.datetime(7, 2, 2018):{n}{t}{t}return max_value(0, get_currency(IAPENALTY.Q1UnPay1) - get_currency(IASTATEEST.TPStQ2)){n}{t}else:{n}{t}{t}return 0{n}{n}
def Q2Days1_Calculation():{n}{t}if GetDate(IASTATEEST.TPStQ3Date) < datetime.datetime(10, 1, 2018):{n}{t}{t}return max_value(0, DaysDiff(GetDate(IASTATEEST.TPStQ3Date), datetime.datetime(7, 2, 2018))){n}{t}else:{n}{t}{t}return 91{n}{n}
def Q2Days2_Calculation():{n}{t}if GetDate(IASTATEEST.TPStQ3Date) < datetime.datetime(10, 1, 2018) and get_currency(IAPENALTY.Q2UnPay2) > 0:{n}{t}{t}return max_value(0, DaysDiff(datetime.datetime(10, 1, 2018), GetDate(IASTATEEST.TPStQ3Date))){n}{t}else:{n}{t}{t}return 0{n}{n}
def Q2Pen1_Calculation():{n}{t}return CCur(Round(( get_float(IAPENALTY.Q2Days1) / 365 )  * 0.06 * get_float(IAPENALTY.Q2UnPay1))){n}{n}
def Q2Pen2_Calculation():{n}{t}return CCur(Round(( get_float(IAPENALTY.Q2Days2) / 365 )  * 0.06 * get_float(IAPENALTY.Q2UnPay2))){n}{n}
def Q2UnPay1_Calculation():{n}{t}return max_value(0, get_currency(IA2210.Q1Ln11) + get_currency(IA2210.Q2Ln11) - get_currency(IA2210.Q1Est) - get_currency(IA2210.Q2est)){n}{n}
def Q2UnPay2_Calculation():{n}{t}if GetDate(IASTATEEST.TPStQ3Date) < datetime.datetime(10, 1, 2018):{n}{t}{t}return max_value(0, get_currency(IAPENALTY.Q2UnPay1) - get_currency(IASTATEEST.TPStQ3)){n}{t}else:{n}{t}{t}return 0{n}{n}
def Q3Days1_Calculation():{n}{t}if GetDate(IASTATEEST.TPStQ4Date) < datetime.datetime(12, 31, 2018):{n}{t}{t}return max_value(0, DaysDiff(GetDate(IASTATEEST.TPStQ4Date), datetime.datetime(10, 1, 2018))){n}{t}else:{n}{t}{t}return 91{n}{n}
def Q3Days2_Calculation():{n}{t}if GetDate(IASTATEEST.TPStQ4Date) < datetime.datetime(12, 31, 2018) and get_currency(IAPENALTY.Q3UnPay2) > 0:{n}{t}{t}return max_value(0, DaysDiff(datetime.datetime(12, 31, 2018), GetDate(IASTATEEST.TPStQ4Date))){n}{t}else:{n}{t}{t}return 0{n}{n}
def Q3Days3_Calculation():{n}{t}if GetDate(IASTATEEST.TPStQ4Date) < datetime.datetime(1, 31, 2019) and GetDate(IASTATEEST.TPStQ4Date) > datetime.datetime(12, 31, 2018):{n}{t}{t}return max_value(0, DaysDiff(GetDate(IASTATEEST.TPStQ4Date), datetime.datetime(12, 31, 2018))){n}{t}elif get_currency(IAPENALTY.Q3Unpay3) >= 0:{n}{t}{t}return 31{n}{t}else:{n}{t}{t}return 0{n}{n}
def Q3Days4_Calculation():{n}{t}if GetDate(IASTATEEST.TPStQ4Date) > datetime.datetime(12, 31, 2018) and GetDate(IASTATEEST.TPStQ4Date) < datetime.datetime(1, 31, 2019) and get_currency(IAPENALTY.Q3Unpay4) > 0:{n}{t}{t}return max_value(0, DaysDiff(datetime.datetime(1, 31, 2019), GetDate(IASTATEEST.TPStQ4Date))){n}{t}else:{n}{t}{t}return 0{n}{n}
def Q3Pen1_Calculation():{n}{t}return CCur(Round(( get_float(IAPENALTY.Q3Days1) / 365 )  * 0.06 * get_float(IAPENALTY.Q3Unpay1))){n}{n}
def Q3Pen2_Calculation():{n}{t}return CCur(Round(( get_float(IAPENALTY.Q3Days2) / 365 )  * 0.06 * get_float(IAPENALTY.Q3UnPay2))){n}{n}
def Q3Pen3_Calculation():{n}{t}return CCur(Round(( get_float(IAPENALTY.Q3Days3) / 365 )  * 0.07 * get_float(IAPENALTY.Q3Unpay3))){n}{n}
def Q3Pen4_Calculation():{n}{t}return CCur(Round(( get_float(IAPENALTY.Q3Days4) / 365 )  * 0.07 * get_float(IAPENALTY.Q3Unpay4))){n}{n}
def Q3Unpay1_Calculation():{n}{t}return max_value(0, get_currency(IA2210.Q1Ln11) + get_currency(IA2210.Q2Ln11) + get_currency(IA2210.Q3Ln11) - get_currency(IA2210.Q1Est) - get_currency(IA2210.Q2est) - get_currency(IA2210.Q3Est)){n}{n}
def Q3UnPay2_Calculation():{n}{t}if GetDate(IASTATEEST.TPStQ4Date) < datetime.datetime(12, 31, 2018):{n}{t}{t}return max_value(0, get_currency(IAPENALTY.Q3Unpay1) - get_currency(IASTATEEST.TPStQ4)){n}{t}else:{n}{t}{t}return 0{n}{n}
def Q3Unpay3_Calculation():{n}{t}if get_currency(IAPENALTY.Q3UnPay2) > 0:{n}{t}{t}return get_currency(IAPENALTY.Q3UnPay2){n}{t}elif GetDate(IASTATEEST.TPStQ4Date) < datetime.datetime(1, 1, 2019):{n}{t}{t}return max_value(0, get_currency(IAPENALTY.Q3Unpay1) - get_currency(IASTATEEST.TPStQ4)){n}{t}else:{n}{t}{t}return get_currency(IAPENALTY.Q3Unpay1){n}{n}
def Q3Unpay4_Calculation():{n}{t}if GetDate(IASTATEEST.TPStQ4Date) > datetime.datetime(12, 31, 2018) and GetDate(IASTATEEST.TPStQ4Date) < datetime.datetime(1, 31, 2019):{n}{t}{t}return max_value(0, get_currency(IAPENALTY.Q3Unpay1) - get_currency(IASTATEEST.TPStQ4)){n}{t}else:{n}{t}{t}return 0{n}{n}
def Q4Days1_Calculation():{n}{t}# 89 days max in 2018{n}{t}if GetDate(IASTATEEST.TPStLateDate) < GetDate(IAF1040.DateDuePaid) and get_currency(IASTATEEST.TPStLate) > 0:{n}{t}{t}return max_value(0, DaysDiff(GetDate(IASTATEEST.TPStLateDate), datetime.datetime(1, 31, 2019))){n}{t}else:{n}{t}{t}return max_value(0, DaysDiff(GetDate(IAF1040.DateDuePaid), datetime.datetime(1, 31, 2019))){n}{n}
def Q4Days2_Calculation():{n}{t}if GetDate(IASTATEEST.TPStLateDate) < datetime.datetime(4, 30, 2019) and get_currency(IAPENALTY.Q4Unpay2) > 0:{n}{t}{t}return max_value(0, DaysDiff(GetDate(IAF1040.DateDuePaid), GetDate(IASTATEEST.TPStLateDate))){n}{t}else:{n}{t}{t}return 0{n}{n}
def Q4Pen1_Calculation():{n}{t}return CCur(Round(( get_float(IAPENALTY.Q4Days1) / 365 )  * 0.07 * get_float(IAPENALTY.Q4UnPay1))){n}{n}
def Q4Pen2_Calculation():{n}{t}return CCur(Round(( get_float(IAPENALTY.Q4Days2) / 365 )  * 0.07 * get_float(IAPENALTY.Q4Unpay2))){n}{n}
def Q4UnPay1_Calculation():{n}{t}return max_value(0, get_currency(IA2210.Q1Ln11) + get_currency(IA2210.Q2Ln11) + get_currency(IA2210.Q3Ln11) + get_currency(IA2210.Q4Ln11) - get_currency(IA2210.Q1Est) - get_currency(IA2210.Q2est) - get_currency(IA2210.Q3Est) - get_currency(IA2210.Q4Est)){n}{n}
def Q4Unpay2_Calculation():{n}{t}if GetDate(IASTATEEST.TPStLateDate) < datetime.datetime(4, 30, 2019) and get_currency(IASTATEEST.TPStLate) > 0:{n}{t}{t}return max_value(0, get_currency(IAPENALTY.Q4UnPay1) - get_currency(IASTATEEST.TPStLate)){n}{t}else:{n}{t}{t}return 0{n}{n}
def SSN_Calculation():{n}{t}return get_string(IAF1040.SSN){n}{n}
def TotPen_Calculation():{n}{t}return Round(get_currency(IAPENALTY.Q1Pen1) + get_currency(IAPENALTY.Q1Pen2) + get_currency(IAPENALTY.Q2Pen1) + get_currency(IAPENALTY.Q2Pen2) + get_currency(IAPENALTY.Q3Pen1) + get_currency(IAPENALTY.Q3Pen2) + get_currency(IAPENALTY.Q3Pen3) + get_currency(IAPENALTY.Q3Pen4) + get_currency(IAPENALTY.Q4Pen1) + get_currency(IAPENALTY.Q4Pen2)){n}{n}def DatePaid_Calculation():{n}{t}return GetDate(IAF1040.DateDuePaid){n}{n}
def Desc_Calculation():{n}{t}return CStr(get_currency(IAPENALTYSP.TotPen)){n}{n}
def Exist_Calculation():{n}{t}return 1{n}{n}
def Names_Calculation():{n}{t}return get_string(IAREQUIRED.SPCombName){n}{n}
def Q1Days1_Calculation():{n}{t}if GetDate(IASTATEEST.SPStQ2Date) < datetime.datetime(7, 2, 2018):{n}{t}{t}return max_value(0, DaysDiff(GetDate(IASTATEEST.SPStQ2Date), datetime.datetime(4, 30, 2018))){n}{t}else:{n}{t}{t}return 63{n}{n}
def Q1Days2_Calculation():{n}{t}if GetDate(IASTATEEST.SPStQ2Date) < datetime.datetime(7, 2, 2018) and get_currency(IAPENALTYSP.Q1UnPay2) > 0:{n}{t}{t}return max_value(0, DaysDiff(datetime.datetime(7, 2, 2018), GetDate(IASTATEEST.SPStQ2Date))){n}{t}else:{n}{t}{t}return 0{n}{n}
def Q1Pen1_Calculation():{n}{t}return CCur(Round(( get_float(IAPENALTYSP.Q1Days1) / 365 )  * 0.06 * get_float(IAPENALTYSP.Q1UnPay1))){n}{n}
def Q1Pen2_Calculation():{n}{t}return CCur(Round(( get_float(IAPENALTYSP.Q1Days2) / 365 )  * 0.06 * get_float(IAPENALTYSP.Q1UnPay2))){n}{n}
def Q1UnPay1_Calculation():{n}{t}return get_currency(IA2210SP.Q1Undpay){n}{n}
def Q1UnPay2_Calculation():{n}{t}if GetDate(IASTATEEST.SPStQ2Date) < datetime.datetime(7, 2, 2018):{n}{t}{t}return max_value(0, get_currency(IAPENALTYSP.Q1UnPay1) - get_currency(IASTATEEST.SPStQ2)){n}{t}else:{n}{t}{t}return 0{n}{n}
def Q2Days1_Calculation():{n}{t}if GetDate(IASTATEEST.SPStQ3Date) < datetime.datetime(10, 1, 2018):{n}{t}{t}return max_value(0, DaysDiff(GetDate(IASTATEEST.SPStQ3Date), datetime.datetime(7, 2, 2018))){n}{t}else:{n}{t}{t}return 91{n}{n}
def Q2Days2_Calculation():{n}{t}if GetDate(IASTATEEST.SPStQ3Date) < datetime.datetime(10, 1, 2018) and get_currency(IAPENALTYSP.Q2UnPay2) > 0:{n}{t}{t}return max_value(0, DaysDiff(datetime.datetime(10, 1, 2018), GetDate(IASTATEEST.SPStQ3Date))){n}{t}else:{n}{t}{t}return 0{n}{n}
def Q2Pen1_Calculation():{n}{t}return CCur(Round(( get_float(IAPENALTYSP.Q2Days1) / 365 )  * 0.06 * get_float(IAPENALTYSP.Q2UnPay1))){n}{n}
def Q2Pen2_Calculation():{n}{t}return CCur(Round(( get_float(IAPENALTYSP.Q2Days2) / 365 )  * 0.06 * get_float(IAPENALTYSP.Q2UnPay2))){n}{n}
def Q2UnPay1_Calculation():{n}{t}return max_value(0, get_currency(IA2210SP.Q1Ln11) + get_currency(IA2210SP.Q2Ln11) - get_currency(IA2210SP.Q1Est) - get_currency(IA2210SP.Q2est)){n}{n}
def Q2UnPay2_Calculation():{n}{t}if GetDate(IASTATEEST.SPStQ3Date) < datetime.datetime(10, 1, 2018):{n}{t}{t}return max_value(0, get_currency(IAPENALTYSP.Q2UnPay1) - get_currency(IASTATEEST.SPStQ3)){n}{t}else:{n}{t}{t}return 0{n}{n}
def Q3Days1_Calculation():{n}{t}if GetDate(IASTATEEST.SPStQ4Date) < datetime.datetime(12, 31, 2018):{n}{t}{t}return max_value(0, DaysDiff(GetDate(IASTATEEST.SPStQ4Date), datetime.datetime(10, 1, 2018))){n}{t}else:{n}{t}{t}return 91{n}{n}
def Q3Days2_Calculation():{n}{t}if GetDate(IASTATEEST.SPStQ4Date) < datetime.datetime(12, 31, 2018) and get_currency(IAPENALTYSP.Q3UnPay2) > 0:{n}{t}{t}return max_value(0, DaysDiff(datetime.datetime(12, 31, 2018), GetDate(IASTATEEST.SPStQ4Date))){n}{t}else:{n}{t}{t}return 0{n}{n}
def Q3Days3_Calculation():{n}{t}if GetDate(IASTATEEST.SPStQ4Date) < datetime.datetime(1, 31, 2019) and GetDate(IASTATEEST.SPStQ4Date) > datetime.datetime(12, 31, 2018):{n}{t}{t}return max_value(0, DaysDiff(GetDate(IASTATEEST.SPStQ4Date), datetime.datetime(12, 31, 2018))){n}{t}elif get_currency(IAPENALTYSP.Q3Unpay3) >= 0:{n}{t}{t}return 31{n}{t}else:{n}{t}{t}return 0{n}{n}
def Q3Days4_Calculation():{n}{t}if GetDate(IASTATEEST.SPStQ4Date) > datetime.datetime(12, 31, 2018) and GetDate(IASTATEEST.SPStQ4Date) < datetime.datetime(1, 31, 2019) and get_currency(IAPENALTYSP.Q3Unpay4) > 0:{n}{t}{t}return max_value(0, DaysDiff(datetime.datetime(1, 31, 2019), GetDate(IASTATEEST.SPStQ4Date))){n}{t}else:{n}{t}{t}return 0{n}{n}
def Q3Pen1_Calculation():{n}{t}return CCur(Round(( get_float(IAPENALTYSP.Q3Days1) / 365 )  * 0.06 * get_float(IAPENALTYSP.Q3Unpay1))){n}{n}
def Q3Pen2_Calculation():{n}{t}return CCur(Round(( get_float(IAPENALTYSP.Q3Days2) / 365 )  * 0.06 * get_float(IAPENALTYSP.Q3UnPay2))){n}{n}
def Q3Pen3_Calculation():{n}{t}return CCur(Round(( get_float(IAPENALTYSP.Q3Days3) / 365 )  * 0.07 * get_float(IAPENALTYSP.Q3Unpay3))){n}{n}
def Q3Pen4_Calculation():{n}{t}return CCur(Round(( get_float(IAPENALTYSP.Q3Days4) / 365 )  * 0.07 * get_float(IAPENALTYSP.Q3Unpay4))){n}{n}
def Q3Unpay1_Calculation():{n}{t}return max_value(0, get_currency(IA2210SP.Q1Ln11) + get_currency(IA2210SP.Q2Ln11) + get_currency(IA2210SP.Q3Ln11) - get_currency(IA2210SP.Q1Est) - get_currency(IA2210SP.Q2est) - get_currency(IA2210SP.Q3Est)){n}{n}
def Q3UnPay2_Calculation():{n}{t}if GetDate(IASTATEEST.SPStQ4Date) < datetime.datetime(12, 31, 2018):{n}{t}{t}return max_value(0, get_currency(IAPENALTYSP.Q3Unpay1) - get_currency(IASTATEEST.SPStQ4)){n}{t}else:{n}{t}{t}return 0{n}{n}
def Q3Unpay3_Calculation():{n}{t}if get_currency(IAPENALTYSP.Q3UnPay2) > 0:{n}{t}{t}return get_currency(IAPENALTYSP.Q3UnPay2){n}{t}elif GetDate(IASTATEEST.SPStQ4Date) < datetime.datetime(1, 1, 2019):{n}{t}{t}return max_value(0, get_currency(IAPENALTYSP.Q3Unpay1) - get_currency(IASTATEEST.SPStQ4)){n}{t}else:{n}{t}{t}return get_currency(IAPENALTYSP.Q3Unpay1){n}{n}
def Q3Unpay4_Calculation():{n}{t}if GetDate(IASTATEEST.SPStQ4Date) > datetime.datetime(12, 31, 2018) and GetDate(IASTATEEST.SPStQ4Date) < datetime.datetime(1, 31, 2019):{n}{t}{t}return max_value(0, get_currency(IAPENALTYSP.Q3Unpay1) - get_currency(IASTATEEST.SPStQ4)){n}{t}else:{n}{t}{t}return 0{n}{n}
def Q4Days1_Calculation():{n}{t}# 89 days max in 2018{n}{t}if GetDate(IASTATEEST.SPStLateDate) < GetDate(IAF1040.DateDuePaid) and get_currency(IASTATEEST.SPStLate) > 0:{n}{t}{t}return max_value(0, DaysDiff(GetDate(IASTATEEST.SPStLateDate), datetime.datetime(1, 31, 2019))){n}{t}else:{n}{t}{t}return max_value(0, DaysDiff(GetDate(IAF1040.DateDuePaid), datetime.datetime(1, 31, 2019))){n}{n}
def Q4Days2_Calculation():{n}{t}if GetDate(IASTATEEST.SPStLateDate) < datetime.datetime(4, 30, 2019) and get_currency(IAPENALTYSP.Q4Unpay2) > 0:{n}{t}{t}return max_value(0, DaysDiff(GetDate(IAF1040.DateDuePaid), GetDate(IASTATEEST.SPStLateDate))){n}{t}else:{n}{t}{t}return 0{n}{n}
def Q4Pen1_Calculation():{n}{t}return CCur(Round(( get_float(IAPENALTYSP.Q4Days1) / 365 )  * 0.07 * get_float(IAPENALTYSP.Q4UnPay1))){n}{n}
def Q4Pen2_Calculation():{n}{t}return CCur(Round(( get_float(IAPENALTYSP.Q4Days2) / 365 )  * 0.07 * get_float(IAPENALTYSP.Q4Unpay2))){n}{n}
def Q4UnPay1_Calculation():{n}{t}return max_value(0, get_currency(IA2210SP.Q1Ln11) + get_currency(IA2210SP.Q2Ln11) + get_currency(IA2210SP.Q3Ln11) + get_currency(IA2210SP.Q4Ln11) - get_currency(IA2210SP.Q1Est) - get_currency(IA2210SP.Q2est) - get_currency(IA2210SP.Q3Est) - get_currency(IA2210SP.Q4Est)){n}{n}
def Q4Unpay2_Calculation():{n}{t}if GetDate(IASTATEEST.SPStLateDate) < datetime.datetime(4, 30, 2019) and get_currency(IASTATEEST.SPStLate) > 0:{n}{t}{t}return max_value(0, get_currency(IAPENALTYSP.Q4UnPay1) - get_currency(IASTATEEST.SPStLate)){n}{t}else:{n}{t}{t}return 0{n}{n}
def SSN_Calculation():{n}{t}return get_string(IAF1040.SpouseSSN){n}{n}
def TotPen_Calculation():{n}{t}if get_bool(IAF1040.CombMFS) == False:{n}{t}{t}return 0{n}{t}else:{n}{t}{t}return Round(get_currency(IAPENALTYSP.Q1Pen1) + get_currency(IAPENALTYSP.Q1Pen2) + get_currency(IAPENALTYSP.Q2Pen1) + get_currency(IAPENALTYSP.Q2Pen2) + get_currency(IAPENALTYSP.Q3Pen1) + get_currency(IAPENALTYSP.Q3Pen2) + get_currency(IAPENALTYSP.Q3Pen3) + get_currency(IAPENALTYSP.Q3Pen4) + get_currency(IAPENALTYSP.Q4Pen1) + get_currency(IAPENALTYSP.Q4Pen2)){n}{n}def AAltTax_Calculation():{n}{t}if get_number(IAPRINT.LowInc) == 1:{n}{t}{t}return get_currency(IAF1040.AAltTax){n}{t}else:{n}{t}{t}return 0{n}{n}
def ABal1_Calculation():{n}{t}if get_number(IAPRINT.LowInc) == 1:{n}{t}{t}return get_currency(IAF1040.ABal1){n}{t}else:{n}{t}{t}return 0{n}{n}
def ABal2_Calculation():{n}{t}if get_number(IAPRINT.LowInc) == 1:{n}{t}{t}return get_currency(IAF1040.ABal2){n}{t}else:{n}{t}{t}return 0{n}{n}
def ABal4_Calculation():{n}{t}if get_number(IAPRINT.LowInc) == 1:{n}{t}{t}return get_currency(IAF1040.ABal4){n}{t}else:{n}{t}{t}return 0{n}{n}
def ABal36_Calculation():{n}{t}if get_number(IAPRINT.LowInc) == 1:{n}{t}{t}return get_currency(IAF1040.ABal36){n}{t}else:{n}{t}{t}return 0{n}{n}
def ABal3_Calculation():{n}{t}if get_number(IAPRINT.LowInc) == 1:{n}{t}{t}return get_currency(IAF1040.ABal3){n}{t}else:{n}{t}{t}return 0{n}{n}
def ABalance_Calculation():{n}{t}if get_number(IAPRINT.LowInc) == 1:{n}{t}{t}return get_currency(IAF1040.ABalance){n}{t}else:{n}{t}{t}return 0{n}{n}
def ACredits_Calculation():{n}{t}if get_number(IAPRINT.LowInc) == 1:{n}{t}{t}return get_currency(IAF1040.ACredits){n}{t}else:{n}{t}{t}return 0{n}{n}
def ACrNon_Calculation():{n}{t}if get_number(IAPRINT.LowInc) == 1:{n}{t}{t}return get_currency(IAF1040.ACrNon){n}{t}else:{n}{t}{t}return 0{n}{n}
def ADedBox_Calculation():{n}{t}if get_number(IAPRINT.LowInc) == 1:{n}{t}{t}return get_currency(IAF1040.ADedBox){n}{t}else:{n}{t}{t}return 0{n}{n}
def AEstTax_Calculation():{n}{t}if get_number(IAPRINT.LowInc) == 1:{n}{t}{t}return get_currency(IAF1040.AEstTax){n}{t}else:{n}{t}{t}return 0{n}{n}
def AExemCr_Calculation():{n}{t}if get_number(IAPRINT.LowInc) == 1:{n}{t}{t}return get_currency(IAF1040.AExemCr){n}{t}else:{n}{t}{t}return 0{n}{n}
def AFedDed_Calculation():{n}{t}if get_number(IAPRINT.LowInc) == 1:{n}{t}{t}return get_currency(IAF1040.AFedDed){n}{t}else:{n}{t}{t}return 0{n}{n}
def AFedTax_Calculation():{n}{t}if get_number(IAPRINT.LowInc) == 1:{n}{t}{t}return get_currency(IAF1040.AFedTax){n}{t}else:{n}{t}{t}return 0{n}{n}
def AIAMin_Calculation():{n}{t}if get_number(IAPRINT.LowInc) == 1:{n}{t}{t}return get_currency(IAF1040.AIAMin){n}{t}else:{n}{t}{t}return 0{n}{n}
def ALump_Calculation():{n}{t}if get_number(IAPRINT.LowInc) == 1:{n}{t}{t}return get_currency(IAF1040.ALump){n}{t}else:{n}{t}{t}return 0{n}{n}
def AOthIACr_Calculation():{n}{t}if get_number(IAPRINT.LowInc) == 1:{n}{t}{t}return get_currency(IAF1040.AOthIACr){n}{t}else:{n}{t}{t}return 0{n}{n}
def AOutState_Calculation():{n}{t}if get_number(IAPRINT.LowInc) == 1:{n}{t}{t}return get_currency(IAF1040.AOutState){n}{t}else:{n}{t}{t}return 0{n}{n}
def APrior_Calculation():{n}{t}if get_number(IAPRINT.LowInc) == 1:{n}{t}{t}return get_currency(IAF1040.APrior){n}{t}else:{n}{t}{t}return 0{n}{n}
def ARefund_Calculation():{n}{t}if get_number(IAPRINT.LowInc) == 1:{n}{t}{t}return get_currency(IAF1040.ARefund){n}{t}else:{n}{t}{t}return 0{n}{n}
def ASch_Calculation():{n}{t}if get_number(IAPRINT.LowInc) == 1:{n}{t}{t}return get_currency(IAF1040.ASch){n}{t}else:{n}{t}{t}return 0{n}{n}
def ASelf_Calculation():{n}{t}if get_number(IAPRINT.LowInc) == 1:{n}{t}{t}return get_currency(IAF1040.ASelf){n}{t}else:{n}{t}{t}return 0{n}{n}
def ATaxB4Cont_Calculation():{n}{t}if get_number(IAPRINT.LowInc) == 1:{n}{t}{t}return get_currency(IAF1040.ATaxB4Cont){n}{t}else:{n}{t}{t}return 0{n}{n}
def ATaxInc_Calculation():{n}{t}if get_number(IAPRINT.LowInc) == 1:{n}{t}{t}return get_currency(IAF1040.ATaxInc){n}{t}else:{n}{t}{t}return 0{n}{n}
def ATaxWith_Calculation():{n}{t}if get_number(IAPRINT.LowInc) == 1:{n}{t}{t}return get_currency(IAF1040.ATaxWith){n}{t}else:{n}{t}{t}return 0{n}{n}
def ATotIATax_Calculation():{n}{t}if get_number(IAPRINT.LowInc) == 1:{n}{t}{t}return get_currency(IAF1040.ATotIATax){n}{t}else:{n}{t}{t}return 0{n}{n}
def ATotTax_Calculation():{n}{t}if get_number(IAPRINT.LowInc) == 1:{n}{t}{t}return get_currency(IAF1040.ATotTax){n}{t}else:{n}{t}{t}return 0{n}{n}
def ATuit_Calculation():{n}{t}if get_number(IAPRINT.LowInc) == 1:{n}{t}{t}return get_currency(IAF1040.ATuit){n}{t}else:{n}{t}{t}return 0{n}{n}
def AVolFireCr_Calculation():{n}{t}if get_number(IAPRINT.LowInc) == 1:{n}{t}{t}return get_currency(IAF1040.AVolFireCr){n}{t}else:{n}{t}{t}return 0{n}{n}
def BAltTax_Calculation():{n}{t}if get_number(IAPRINT.LowInc) == 1:{n}{t}{t}return get_currency(IAF1040.BAltTax){n}{t}else:{n}{t}{t}return 0{n}{n}
def BBal1_Calculation():{n}{t}if get_number(IAPRINT.LowInc) == 1:{n}{t}{t}return get_currency(IAF1040.BBal1){n}{t}else:{n}{t}{t}return 0{n}{n}
def BBal2_Calculation():{n}{t}if get_number(IAPRINT.LowInc) == 1:{n}{t}{t}return get_currency(IAF1040.BBal2){n}{t}else:{n}{t}{t}return 0{n}{n}
def BBal4_Calculation():{n}{t}if get_number(IAPRINT.LowInc) == 1:{n}{t}{t}return get_currency(IAF1040.BBal4){n}{t}else:{n}{t}{t}return 0{n}{n}
def BBal36_Calculation():{n}{t}if get_number(IAPRINT.LowInc) == 1:{n}{t}{t}return get_currency(IAF1040.BBal36){n}{t}else:{n}{t}{t}return 0{n}{n}
def BBal3_Calculation():{n}{t}if get_number(IAPRINT.LowInc) == 1:{n}{t}{t}return get_currency(IAF1040.BBal3){n}{t}else:{n}{t}{t}return 0{n}{n}
def BBalance_Calculation():{n}{t}if get_number(IAPRINT.LowInc) == 1:{n}{t}{t}return get_currency(IAF1040.BBalance){n}{t}else:{n}{t}{t}return 0{n}{n}
def BCredits_Calculation():{n}{t}if get_number(IAPRINT.LowInc) == 1:{n}{t}{t}return get_currency(IAF1040.BCredits){n}{t}else:{n}{t}{t}return 0{n}{n}
def BCrNon_Calculation():{n}{t}if get_number(IAPRINT.LowInc) == 1:{n}{t}{t}return get_currency(IAF1040.BCrNon){n}{t}else:{n}{t}{t}return 0{n}{n}
def BDedBox_Calculation():{n}{t}if get_number(IAPRINT.LowInc) == 1:{n}{t}{t}return get_currency(IAF1040.BDedBox){n}{t}else:{n}{t}{t}return 0{n}{n}
def BEstTax_Calculation():{n}{t}if get_number(IAPRINT.LowInc) == 1:{n}{t}{t}return get_currency(IAF1040.BEstTax){n}{t}else:{n}{t}{t}return 0{n}{n}
def BExemCr_Calculation():{n}{t}if get_number(IAPRINT.LowInc) == 1:{n}{t}{t}return get_currency(IAF1040.BExemCr){n}{t}else:{n}{t}{t}return 0{n}{n}
def BFedDed_Calculation():{n}{t}if get_number(IAPRINT.LowInc) == 1:{n}{t}{t}return get_currency(IAF1040.BFedDed){n}{t}else:{n}{t}{t}return 0{n}{n}
def BFedTax_Calculation():{n}{t}if get_number(IAPRINT.LowInc) == 1:{n}{t}{t}return get_currency(IAF1040.BFedTax){n}{t}else:{n}{t}{t}return 0{n}{n}
def BIAMin_Calculation():{n}{t}if get_number(IAPRINT.LowInc) == 1:{n}{t}{t}return get_currency(IAF1040.BIAMin){n}{t}else:{n}{t}{t}return 0{n}{n}
def BLump_Calculation():{n}{t}if get_number(IAPRINT.LowInc) == 1:{n}{t}{t}return get_currency(IAF1040.BLump){n}{t}else:{n}{t}{t}return 0{n}{n}
def BOthIACr_Calculation():{n}{t}if get_number(IAPRINT.LowInc) == 1:{n}{t}{t}return get_currency(IAF1040.BOthIACr){n}{t}else:{n}{t}{t}return 0{n}{n}
def BOutState_Calculation():{n}{t}if get_number(IAPRINT.LowInc) == 1:{n}{t}{t}return get_currency(IAF1040.BOutState){n}{t}else:{n}{t}{t}return 0{n}{n}
def BPrior_Calculation():{n}{t}if get_number(IAPRINT.LowInc) == 1:{n}{t}{t}return get_currency(IAF1040.BPrior){n}{t}else:{n}{t}{t}return 0{n}{n}
def BRefund_Calculation():{n}{t}if get_number(IAPRINT.LowInc) == 1:{n}{t}{t}return get_currency(IAF1040.BRefund){n}{t}else:{n}{t}{t}return 0{n}{n}
def BSch_Calculation():{n}{t}if get_number(IAPRINT.LowInc) == 1:{n}{t}{t}return get_currency(IAF1040.BSch){n}{t}else:{n}{t}{t}return 0{n}{n}
def BSelf_Calculation():{n}{t}if get_number(IAPRINT.LowInc) == 1:{n}{t}{t}return get_currency(IAF1040.BSelf){n}{t}else:{n}{t}{t}return 0{n}{n}
def BTaxB4Cont_Calculation():{n}{t}if get_number(IAPRINT.LowInc) == 1:{n}{t}{t}return get_currency(IAF1040.BTaxB4Cont){n}{t}else:{n}{t}{t}return 0{n}{n}
def BTaxInc_Calculation():{n}{t}if get_number(IAPRINT.LowInc) == 1:{n}{t}{t}return get_currency(IAF1040.BTaxInc){n}{t}else:{n}{t}{t}return 0{n}{n}
def BTaxWith_Calculation():{n}{t}if get_number(IAPRINT.LowInc) == 1:{n}{t}{t}return get_currency(IAF1040.BTaxWith){n}{t}else:{n}{t}{t}return 0{n}{n}
def BTotIATax_Calculation():{n}{t}if get_number(IAPRINT.LowInc) == 1:{n}{t}{t}return get_currency(IAF1040.BTotIATax){n}{t}else:{n}{t}{t}return 0{n}{n}
def BTotTax_Calculation():{n}{t}if get_number(IAPRINT.LowInc) == 1:{n}{t}{t}return get_currency(IAF1040.BTotTax){n}{t}else:{n}{t}{t}return 0{n}{n}
def BTuit_Calculation():{n}{t}if get_number(IAPRINT.LowInc) == 1:{n}{t}{t}return get_currency(IAF1040.BTuit){n}{t}else:{n}{t}{t}return 0{n}{n}
def BVolFireCr_Calculation():{n}{t}if get_number(IAPRINT.LowInc) == 1:{n}{t}{t}return get_currency(IAF1040.BVolFireCr){n}{t}else:{n}{t}{t}return 0{n}{n}
def FirstName_Calculation():{n}{t}return get_string(IAF1040.FirstName){n}{n}
def ItemCheck_Calculation():{n}{t}if get_bool(IAREQUIRED.LowInc) == True:{n}{t}{t}return 0{n}{t}else:{n}{t}{t}return get_bool(IAF1040.ItemCheck){n}{n}
def LastName_Calculation():{n}{t}return get_string(IAF1040.LastName){n}{n}
def LowInc_Calculation():{n}{t}if get_bool(IAREQUIRED.LowInc) == True:{n}{t}{t}return 0{n}{t}else:{n}{t}{t}return 1{n}{n}
def SSN_Calculation():{n}{t}return get_string(IAF1040.SSN){n}{n}
def StadCheck_Calculation():{n}{t}if get_bool(IAREQUIRED.LowInc) == True:{n}{t}{t}return 0{n}{t}else:{n}{t}{t}return get_bool(IAF1040.StadCheck){n}{n}
def TotalTax_Calculation():{n}{t}if get_number(IAPRINT.LowInc) == 1:{n}{t}{t}return get_currency(IAF1040.TotalTax){n}{t}else:{n}{t}{t}return 0{n}{n}def Alert10_Calculation():{n}{t}if get_string(IAF1040.CountyNo) == '' or get_string(IAF1040.SchNo) == '':{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def Alert11_Calculation():{n}{t}if get_string(IAF1040.CountyNo) == '':{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def Alert12_Calculation():{n}{t}if get_string(IAF1040.SchNo) == '':{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def Alert15_Calculation():{n}{t}if get_bool(IAF1040.MFJ) == True or get_bool(IAF1040.CombMFS) == True:{n}{t}{t}if ( get_bool(IAF126.TpNonRes) == True or  ( get_bool(IAF126.TpPYRes) == True and  ( GetDate(IAF126.TpDateOut) > 0 and GetDate(IAF126.TpDateOut) < MakeDate(12, 31, YearNumber) ) ) )  and  ( get_bool(IAF126.SpNonRes) == True or  ( get_bool(IAF126.SpPYRes) == True and  ( GetDate(IAF126.SpDateOut) > 0 and GetDate(IAF126.SpDateOut) < MakeDate(12, 31, YearNumber) ) ) ) :{n}{t}{t}{t}if get_string(IAF1040.CountyNo) == '00':{n}{t}{t}{t}{t}return 0{n}{t}{t}{t}else:{n}{t}{t}{t}{t}return 1{n}{t}{t}else:{n}{t}{t}{t}return 0{n}{t}elif get_bool(IAF126.TpNonRes) == True or  ( get_bool(IAF126.TpPYRes) == True and  ( GetDate(IAF126.TpDateOut) > 0 and GetDate(IAF126.TpDateOut) < MakeDate(12, 31, YearNumber) ) ) :{n}{t}{t}if get_string(IAF1040.CountyNo) == '00':{n}{t}{t}{t}return 0{n}{t}{t}else:{n}{t}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def Alert100_Calculation():{n}{t}if IAFS() == 3 and get_currency(IAF1040.BGainDed) != 0:{n}{t}{t}return 1{n}{t}elif get_currency(IAF1040.AGainDed) != 0:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def Alert110_Calculation():{n}{t}if get_number(USD1099R.UnderAge) > 0:{n}{t}{t}if get_currency(IAOTHADJ.TPIADis) + get_currency(IAOTHADJ.SPIADis) == 0:{n}{t}{t}{t}return 1{n}{t}{t}else:{n}{t}{t}{t}return 0{n}{t}else:{n}{t}{t}return 0{n}{n}
def Alert120_Calculation():{n}{t}if get_bool(USWResidency.F1040NR) == False and get_currency(IAOTHADJ.SIANOL) > 0 and get_currency(IAOTHADJ.SIANOL) == Abs(get_currency(USWOthInc.SPNOL)):{n}{t}{t}return 1{n}{t}elif get_bool(USWResidency.F1040NR) == False and get_currency(IAOTHADJ.TIANOL) > 0 and get_currency(IAOTHADJ.TIANOL) == Abs(get_currency(USWOthInc.TPNOL)):{n}{t}{t}return 1{n}{t}elif get_bool(USWResidency.F1040NR) == True and get_currency(IAOTHADJ.TIANOL) > 0 and get_currency(IAOTHADJ.TIANOL) == Abs(get_currency(USWOthIncNR.TPNOL)):{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def Alert130_Calculation():{n}{t}if get_currency(IAADDFEDTAX.TPBalDue) != 0 or get_currency(IAADDFEDTAX.SPBalDue) != 0:{n}{t}{t}return 0{n}{t}elif get_currency(IAF1040.BRefund) == 0 and get_currency(IAF1040.ARefund) == 0:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def Alert150_Calculation():{n}{t}if get_bool(USWRec.ItmDdn) == False and get_bool(IAF1040.ItemCheck) == False:{n}{t}{t}if get_currency(IAREQUIRED.SchADeprAmt) != 0:{n}{t}{t}{t}return 1{n}{t}{t}else:{n}{t}{t}{t}return 0{n}{t}else:{n}{t}{t}return 0{n}{n}
def Alert180_Calculation():{n}{t}if ( get_currency(USF1040.Foreign) > 0 or get_currency(USF1040NR.Foreign) > 0 )  and get_bool(IA130.Exist) == False:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def Alert190_Calculation():{n}{t}count = Integer(){n}{n}{t}Lim = Integer(){n}{n}{t}Total = Integer(){n}{n}{t}Total2 = Integer(){n}{t}Lim = GetAllCopies(IA137){n}{t}count = 1{n}{t}Total = 0{n}{t}Total2 = 0{n}{t}while count <= Lim:{n}{t}{t}if get_bool(IA137.Taxpayer, count) == True and get_bool(IA137.Company, count) == True and get_bool(IA137.Print, count) == True:{n}{t}{t}{t}Total = Total + 1{n}{t}{t}else:{n}{t}{t}{t}Total = Total{n}{t}{t}if get_bool(IA137.Taxpayer, count) == True and get_bool(IA137.Site, count) == True and get_bool(IA137.Print, count) == True:{n}{t}{t}{t}Total2 = Total2 + 1{n}{t}{t}else:{n}{t}{t}{t}Total2 = Total2{n}{t}{t}count = count + 1{n}{t}if Total > 1:{n}{t}{t}return 1{n}{t}elif Total > 0 and Total2 > 0:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def Alert20_Calculation():{n}{t}if FedFS() == 1 and IAFS() != 1:{n}{t}{t}return 1{n}{t}elif FedFS() == 2 and IAFS() != 2 and IAFS() != 3:{n}{t}{t}return 1{n}{t}elif FedFS() == 3 and IAFS() != 4:{n}{t}{t}return 1{n}{t}elif FedFS() == 4 and IAFS() != 5:{n}{t}{t}return 1{n}{t}elif FedFS() == 5 and IAFS() != 6:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def Alert200_Calculation():{n}{t}count = Integer(){n}{n}{t}Lim = Integer(){n}{n}{t}Total = Integer(){n}{n}{t}Total2 = Integer(){n}{t}Lim = GetAllCopies(IA137){n}{t}count = 1{n}{t}Total = 0{n}{t}Total2 = 0{n}{t}while count <= Lim:{n}{t}{t}if get_bool(IA137.Spouse, count) == True and get_bool(IA137.Company, count) == True and get_bool(IA137.Print, count) == True:{n}{t}{t}{t}Total = Total + 1{n}{t}{t}else:{n}{t}{t}{t}Total = Total{n}{t}{t}if get_bool(IA137.Spouse, count) == True and get_bool(IA137.Site, count) == True and get_bool(IA137.Print, count) == True:{n}{t}{t}{t}Total2 = Total2 + 1{n}{t}{t}else:{n}{t}{t}{t}Total2 = Total2{n}{t}{t}count = count + 1{n}{t}if Total > 1:{n}{t}{t}return 1{n}{t}elif Total > 0 and Total2 > 0:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def Alert210_Calculation():{n}{t}if get_number(IASch4136.MEF4136TP) > 1 or get_number(IASch4136.MEF4136SP) > 1:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def Alert220_Calculation():{n}{t}if IAFS() != 3:{n}{t}{t}if get_currency(IASch4136.TotCr, 1) > 0 and get_currency(IASch4136.TotCr, 2) > 0:{n}{t}{t}{t}return 1{n}{t}{t}else:{n}{t}{t}{t}return 0{n}{t}else:{n}{t}{t}return 0{n}{n}
def Alert225_Calculation():{n}{t}return 0{n}{n}
def Alert250_Calculation():{n}{t}if get_currency(IAF1040.Penalty) > 0 and GetDate(IAF1040.DateDuePaid) == datetime.datetime(4, 30, 2019):{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def Alert260_Calculation():{n}{t}Est1 = Long(){n}{n}{t}Est2 = Long(){n}{t}if get_bool(IAESTIMATES.ApplySpecific, 1) == True:{n}{t}{t}if get_currency(IAESTIMATES.SpecAmt, 1) > get_currency(IAESTIMATES.TotNetTax2, 1):{n}{t}{t}{t}Est1 = 1{n}{t}{t}else:{n}{t}{t}{t}Est1 = 0{n}{t}else:{n}{t}{t}Est1 = 0{n}{t}if get_bool(IAESTIMATES.ApplySpecific, 2) == True:{n}{t}{t}if get_currency(IAESTIMATES.SpecAmt, 2) > get_currency(IAESTIMATES.TotNetTax2, 2):{n}{t}{t}{t}Est2 = 1{n}{t}{t}else:{n}{t}{t}{t}Est2 = 0{n}{t}else:{n}{t}{t}Est2 = 0{n}{t}if Est1 + Est2 > 0:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def Alert280_Calculation():{n}{t}count = Integer(){n}{n}{t}Lim = Integer(){n}{n}{t}Total = Integer(){n}{t}Lim = GetAllCopies(IA177){n}{t}count = 1{n}{t}Total = 0{n}{t}while count <= Lim:{n}{t}{t}if get_currency(IA177.CYAdoptionTaxCr, count) > 0:{n}{t}{t}{t}Total = Total + 1{n}{t}{t}else:{n}{t}{t}{t}Total = Total{n}{t}{t}count = count + 1{n}{t}if get_number(USWAdoption.Create) > 0 and get_currency(IASCHA.TotAdoptAmt) == 0 and Total == 0:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def Alert30_Calculation():{n}{t}if get_currency(USWRec.TAGI) > 0 and get_currency(USWRec.SAGI) > 0 and get_bool(IAF1040.MFJ) == True:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def Alert282_Calculation():{n}{t}if get_bool(IAF1040.CombMFS) == True and get_bool(IA177.Spouse) == 0 and get_currency(IA177.CYAdoptionTaxCr) > 0:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def Alert285_Calculation():{n}{t}if get_bool(IAREQUIRED.VerifiedIA177) == True:{n}{t}{t}return 0{n}{t}elif get_bool(IAF1040.CombMFS) == True and get_currency(IA177.CYAdoptionTaxCr) > Decimal("5000"):{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def Alert295A_Calculation():{n}{t}if get_currency(IAF1040.AEst) == 0:{n}{t}{t}return 0{n}{t}elif get_currency(IAF1040.AEst) == get_currency(IAF1040.AIATaxWith):{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def Alert295B_Calculation():{n}{t}if get_currency(IAF1040.BEst) == 0:{n}{t}{t}return 0{n}{t}elif get_currency(IAF1040.BEst) == get_currency(IAF1040.BIATaxWith):{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def Alert300_Calculation():{n}{t}if get_number(IAREQUIRED.SchBIntNoPayer) > 0:{n}{t}{t}return 1{n}{t}elif get_number(IAWBPINT.IntNoPayer) > 0:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def Alert310_Calculation():{n}{t}if get_number(IAREQUIRED.SchBDivNoPayer) > 0:{n}{t}{t}return 1{n}{t}elif get_number(IAWBPDIV.DivNoPayer) > 0:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def Alert320_Calculation():{n}{t}if get_bool(IAF126.TpPYRes) == True:{n}{t}{t}if get_string(IAF126.TpDateIn) == '' and get_string(IAF126.TpDateOut) == '':{n}{t}{t}{t}return 1{n}{t}{t}else:{n}{t}{t}{t}return 0{n}{t}else:{n}{t}{t}return 0{n}{n}
def Alert330_Calculation():{n}{t}if get_bool(IAF126.SpPYRes) == True and get_bool(IAREQUIRED.AskSpouse) == True:{n}{t}{t}if get_string(IAF126.SpDateIn) == '' and get_string(IAF126.SpDateOut) == '':{n}{t}{t}{t}return 1{n}{t}{t}else:{n}{t}{t}{t}return 0{n}{t}else:{n}{t}{t}return 0{n}{n}
def Alert40_Calculation():{n}{t}if get_bool(IAF1040.NoMFSInc) == True:{n}{t}{t}return 0{n}{t}elif get_bool(IAF1040.MFS) == True and get_currency(IAF1040.SpIncome) == 0:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def Alert50_Calculation():{n}{t}if get_bool(IAF1040.MFS) == True and  ( get_currency(IAWKALTTAX.Lesser) > 0 and  ( get_currency(IAWKALTTAX.Lesser) == get_currency(IAWKALTTAX.Mult) ) ) :{n}{t}{t}if get_currency(IAF1040.SpSSB) == 0 and get_bool(IAF1040.NoSpSSB) == False:{n}{t}{t}{t}return 1{n}{t}{t}elif get_currency(IAF1040.SpPenExcl) == 0 and get_bool(IAF1040.NoSpPenExcl) == False:{n}{t}{t}{t}return 1{n}{t}{t}elif get_currency(IAF1040.SpTaxInc) == 0 and get_bool(IAF1040.NoSpTaxInc) == False:{n}{t}{t}{t}return 1{n}{t}{t}else:{n}{t}{t}{t}return 0{n}{t}else:{n}{t}{t}return 0{n}{n}
def Alert60_Calculation():{n}{t}if get_currency(IAREQUIRED.IAEic) > 0:{n}{t}{t}if get_bool(IAF1040.NoMFSEI) == True:{n}{t}{t}{t}return 0{n}{t}{t}elif get_bool(IAF1040.MFS) == True and get_currency(IAF1040.MFSEI) == 0:{n}{t}{t}{t}return 1{n}{t}{t}else:{n}{t}{t}{t}return 0{n}{t}else:{n}{t}{t}return 0{n}{n}
def Alert70_Calculation():{n}{t}return 0{n}{n}
def Alert80_Calculation():{n}{t}#Re-did to factor in prior year 179 assets and use IAStatePrior. Does trigger for any year with bonus.  Next year 2019 need to alert non conformity assets that are disposed? Not this year since should only be current year assets.{n}{t}return get_number(IAWDepr.StatePriorDisposal){n}{n}
def Alert90_Calculation():{n}{t}#for 2018 make no change since need to ask or alert if had depr adjustment in prior year and need to make an entry for catch-up depr. May need to see next year if should exclude 2018 veh that were not reported on IA4562A since was just on IA 2106{n}{t}if get_bool(IAREQUIRED.Ask4562A) == True:{n}{t}{t}if get_currency(IA4562A.TotP2ColF) == 0:{n}{t}{t}{t}return 1{n}{t}{t}else:{n}{t}{t}{t}return 0{n}{t}else:{n}{t}{t}return 0{n}{n}
def Alert340_Calculation():{n}{t}#set this to zero if Iowa passes conformity{n}{t}#return get_number(USWSpouse.StateSec179Tent) fed math for this is below, do similar but with IA fields{n}{t}#If get_currency(USW4562State.TotElect179) <> get_currency(USW4562State.Tent179) Then{n}{t}#{t}return 1{n}{t}#Else{n}{t}#{t}return 0{n}{t}#End If{n}{t}if get_currency(IAREQUIRED.TotElect179) != get_currency(IAREQUIRED.Tent179):{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def Alert345_Calculation():{n}{t}if get_currency(IAREQUIRED.Diss179) > 0:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def Alert350_Calculation():{n}{t}if get_currency(IA1040X.TotPrevTax) > Decimal("0") and  ( get_currency(IA1040X.TotPrevTax) == get_currency(IA1040X.PrevOP) ) :{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def Alert360_Calculation():{n}{t}if get_bool(IAREQUIRED.VerifiedIA126) == True:{n}{t}{t}return 0{n}{t}elif get_number(IAF126.Print) == 1:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def Ask130Copy_Calculation():{n}{t}if get_bool(IAREQUIRED.F130Y) == True and get_number(IA130.Exist) > 0:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def Ask134_Calculation():{n}{t}if get_number(IA134.Exist) > 0:{n}{t}{t}return 1{n}{t}elif get_bool(IAF1040.CombMFS) == True and get_number(IA134SP.Exist) > 0:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def Ask4136_Calculation():{n}{t}if get_bool(USF4136.Exist) == True or get_number(USSchF.Exist) > 0 or get_number(USSchC.Exist) > 0:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def Ask4562A_Calculation():{n}{t}if get_number(IA4562A.StateDispNbr) > 0:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def Ask4562PIV_Calculation():{n}{t}if get_number(USDPartK1.Exist) > 0 or get_number(USDSCorpK1.Exist) > 0:{n}{t}{t}return 1{n}{t}elif get_number(IA4562PIV.Exist) > 0:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def AskCharCont_Calculation():{n}{t}FedContributions = Currency(){n}{t}if get_bool(USWResidency.F1040NR) == False:{n}{t}{t}FedContributions = get_currency(USSchA.Cash) + get_currency(USSchA.NonCash){n}{t}else:{n}{t}{t}FedContributions = get_currency(USSchANR.Cash) + get_currency(USSchANR.NonCash){n}{t}if FedContributions > 0:{n}{t}{t}if get_currency(IAF1040.BOthIACr) > 0 or get_currency(IAF1040.AOthIACr) > 0:{n}{t}{t}{t}return 1{n}{t}{t}elif get_currency(IAOTHADJ.TPVet) > 0 or get_currency(IAOTHADJ.SPVet) > 0:{n}{t}{t}{t}return 1{n}{t}{t}else:{n}{t}{t}{t}return 0{n}{t}else:{n}{t}{t}return 0{n}{n}
def AskEarlyChCr_Calculation():{n}{t}if trim(get_string(IACHILDCREDIT.DepName(0))) != '' and get_currency(IACHILDCREDIT.TotNI) < Decimal("45000"):{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def AskEstCopy_Calculation():{n}{t}if get_bool(IAREQUIRED.EstY) == True and get_number(IAESTIMATES.Exist) > 0:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def AskFedFuel_Calculation():{n}{t}if get_bool(IAREQUIRED.AskSpouse) == True:{n}{t}{t}if get_currency(USF4136.TotalCredit) > 0 or get_currency(IAADDFEDTAX.SPFuel) > 0:{n}{t}{t}{t}return 1{n}{t}{t}else:{n}{t}{t}{t}return 0{n}{t}else:{n}{t}{t}return 0{n}{n}
def AskFilStat_Calculation():{n}{t}if IAFS() == 2 or IAFS() == 3 or IAFS() == 4:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def AskIAEst_Calculation():{n}{t}if get_bool(IAF1040.CombMFS) == True and get_currency(IASTATEEST.TotIAEst) > 0:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def AskMedExp_Calculation():{n}{t}if get_currency(USSchA.MedExp) > 0:{n}{t}{t}if get_currency(IAF1040.BHealth) > 0 or get_currency(IAF1040.AHealth) > 0:{n}{t}{t}{t}return 1{n}{t}{t}else:{n}{t}{t}{t}return 0{n}{t}else:{n}{t}{t}return 0{n}{n}
def AskPenExc_Calculation():{n}{t}if get_currency(IAF1040.AIRA) + get_currency(IAF1040.APensions) + get_currency(IAF1040.BIRA) + get_currency(IAF1040.BPensions) + get_currency(IAF126.AIRA) + get_currency(IAF126.APensions) + get_currency(IAF126.BIRA) + get_currency(IAF126.BPensions) != 0:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def AskPensions_Calculation():{n}{t}if get_currency(USWRec.TotPension) > 0:{n}{t}{t}return 1{n}{t}elif get_currency(IAWPENEXC.TPPensions) + get_currency(IAWPENEXC.SPPensions) != 0:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def AskReviewOthAdj_Calculation():{n}{t}if GetStatusCopies(IAWHEALTH, ModifiedStatus) > 0:{n}{t}{t}return 1{n}{t}elif GetStatusCopies(IAWPENEXC, ModifiedStatus) > 0:{n}{t}{t}return 1{n}{t}elif get_currency(IAF1040.AGainDed) > 0 or get_currency(IAF1040.BGainDed) > 0:{n}{t}{t}return 1{n}{t}elif GetStatusCopies(IAOTHADJ, ModifiedStatus) > 0:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def BalDueAmt_Calculation():{n}{t}return Abs(get_currency(IAF1040.RefBalDue)){n}{n}
def BaseAmt_Calculation():{n}{t}if get_bool(IAF1040.Over65) == True:{n}{t}{t}return Decimal("24000"){n}{t}else:{n}{t}{t}return Decimal("9000"){n}{n}
def BProRate_Calculation():{n}{t}if IAFS() == 3:{n}{t}{t}if get_currency(IAF1040.BNet) < 0 and get_currency(IAF1040.ANet) < 0:{n}{t}{t}{t}if get_currency(IAF1040.BNet) < get_currency(IAF1040.ANet):{n}{t}{t}{t}{t}return 0{n}{t}{t}{t}else:{n}{t}{t}{t}{t}return 1{n}{t}{t}elif get_currency(IAF1040.BNet) < 0:{n}{t}{t}{t}return 0{n}{t}{t}elif get_currency(IAF1040.BNet) > 0 and get_currency(IAREQUIRED.TotNI) <= 0:{n}{t}{t}{t}return 1{n}{t}{t}elif get_currency(IAREQUIRED.TotNI) == 0:{n}{t}{t}{t}return 0{n}{t}{t}else:{n}{t}{t}{t}return max_value(0, ( min_value(1, get_float(IAF1040.BNet) / get_float(IAREQUIRED.TotNI)) )){n}{t}else:{n}{t}{t}return 0{n}{n}
def BusInc179_Calculation():{n}{t}return max_value(0, get_currency(IAREQUIRED.FedLn11) + get_currency(IAREQUIRED.IABusinessNC)){n}{n}
def CombNames_Calculation():{n}{t}if get_bool(IAF1040.MFJ) == True or get_bool(IAF1040.CombMFS) == True:{n}{t}{t}if get_string(IAF1040.LastName) == get_string(IAF1040.SpouseLast):{n}{t}{t}{t}return get_string(IAF1040.FirstName) + ' and ' + get_string(IAF1040.SpouseFirst) + ' ' + get_string(IAF1040.LastName){n}{t}{t}else:{n}{t}{t}{t}return get_string(IAF1040.FirstName) + ' ' + get_string(IAF1040.LastName) + ' and ' + get_string(IAF1040.SpouseFirst) + ' ' + get_string(IAF1040.SpouseLast){n}{t}else:{n}{t}{t}return get_string(IAF1040.FirstName) + ' ' + get_string(IAF1040.LastName){n}{n}
def CrAddFedTax_Calculation():{n}{t}if get_number(USWFICA.Exist) > 0:{n}{t}{t}return 1{n}{t}elif get_number(USF4136.Exist) > 0:{n}{t}{t}return 1{n}{t}elif get_currency(USWRec.PYOwe) > 0:{n}{t}{t}return 1{n}{t}elif get_currency(USWRec.PYOweNR) > 0:{n}{t}{t}return 1{n}{t}elif get_currency(USWRec.PYExt) > 0:{n}{t}{t}return 1{n}{t}elif get_currency(USWRec.PYExtNR) > 0:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def CrOthAdj_Calculation():{n}{t}if get_number(USWOthAdj.Exist) > 0:{n}{t}{t}return 1{n}{t}elif get_number(USWOthAdjNR.Exist) > 0:{n}{t}{t}return 1{n}{t}elif get_number(USWOthInc.Exist) > 0:{n}{t}{t}return 1{n}{t}elif get_number(USWOthIncNR.Exist) > 0:{n}{t}{t}return 1{n}{t}elif get_bool(USF8910.Print) == True:{n}{t}{t}return 1{n}{t}elif get_currency(USWRec.TotEdExp) > 0:{n}{t}{t}return 1{n}{t}elif get_currency(USWRec.TotBusExp2106) > 0:{n}{t}{t}return 1{n}{t}elif get_currency(USWRec.TotStudAdj) > 0:{n}{t}{t}return 1{n}{t}elif get_currency(USWRec.TotTuitAdj) > 0:{n}{t}{t}return 1{n}{t}elif get_currency(USWRec.TotHealthSav) > 0:{n}{t}{t}return 1{n}{t}elif get_currency(USWRec.TotDomProd) > 0:{n}{t}{t}return 1{n}{t}{t}# Need to create if PYNR so interview displays correctly for IA 126 worksheets{n}{t}elif get_bool(IAF126.TpPYNR) == True or get_bool(IAF126.SpPYNR) == True:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def CrOthInc_Calculation():{n}{t}if get_number(USWOthInc.Exist) > 0:{n}{t}{t}return 1{n}{t}elif get_number(USWOthIncNR.Exist) > 0:{n}{t}{t}return 1{n}{t}elif get_currency(IA4562.TotDepAdj) != 0:{n}{t}{t}return 1{n}{t}elif get_currency(IA4562SP.TotDepAdj) != 0:{n}{t}{t}return 1{n}{t}elif get_currency(IA4562A.TotDepAdj) != 0:{n}{t}{t}return 1{n}{t}elif get_currency(USF6251.Depl) != 0:{n}{t}{t}return 1{n}{t}elif get_currency(USF6251.IntangDrill) != 0:{n}{t}{t}return 1{n}{t}{t}# Need to create if PYNR so interview displays correctly for IA 126 worksheets{n}{t}elif get_bool(IAF126.TpPYNR) == True or get_bool(IAF126.SpPYNR) == True:{n}{t}{t}return 1{n}{t}elif get_currency(IAREQUIRED.Tot8824) != 0:{n}{t}{t}return 1{n}{t}elif get_currency(IAREQUIRED.TotIAExReimb) != 0:{n}{t}{t}return 1{n}{t}elif get_currency(IAWNONCONFORMADJ.SPTotNonConformAdj) != 0 or get_currency(IAWNONCONFORMADJ.TPTotNonConformAdj) != 0:{n}{t}{t}return 1{n}{t}elif get_currency(IA4684.IANonConformAdj) != 0:{n}{t}{t}return 1{n}{t}elif get_currency(IA2106.IAWages) != 0:{n}{t}{t}return 1{n}{t}elif get_currency(IAWSchFLoss.ExcessLoss) != 0:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def CrPenExc_Calculation():{n}{t}if get_currency(USWRec.TotIRAInc) != 0:{n}{t}{t}return 1{n}{t}elif get_currency(USWRetirement.TPAddQCD) != 0:{n}{t}{t}return 1{n}{t}elif get_currency(USWRetirement.SPAddQCD) != 0:{n}{t}{t}return 1{n}{t}elif get_currency(USWRec.TotPension) != 0:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def CrSETax_Calculation():{n}{t}if get_currency(USF8962.PTCRepay) != 0:{n}{t}{t}return 1{n}{t}elif get_currency(USF1040.SETax) != 0:{n}{t}{t}return 1{n}{t}elif get_currency(USF1040NR.SETax) != 0:{n}{t}{t}return 1{n}{t}elif get_currency(USF1040.TipTax) != 0:{n}{t}{t}return 1{n}{t}elif get_currency(USF1040NR.TipTax) != 0:{n}{t}{t}return 1{n}{t}elif get_currency(USWRetirement.RetTax) != 0:{n}{t}{t}return 1{n}{t}elif get_currency(USF1040.SchHTax) != 0:{n}{t}{t}return 1{n}{t}elif get_currency(USF1040NR.SchHTax) != 0:{n}{t}{t}return 1{n}{t}elif get_currency(USF1040.HomeBuyRepay) != 0:{n}{t}{t}return 1{n}{t}elif get_currency(USF1040NR.HomeBuyRepay) != 0:{n}{t}{t}return 1{n}{t}elif get_currency(USWHealthPen.Penalty) != 0:{n}{t}{t}return 1{n}{t}elif get_currency(USF8959.TotAddMedTax) != 0:{n}{t}{t}return 1{n}{t}elif get_currency(USWOthTax.TotOthTax) != 0:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def CurrentDate_Calculation():{n}{t}return CDate('Current'){n}{n}
def Ded179_Calculation():{n}{t}return min_value(get_currency(IAREQUIRED.BusInc179), get_currency(IAREQUIRED.Tent179) + get_currency(IAREQUIRED.TotCo179)){n}{n}
def DepLength_Calculation():{n}{t}return Len(get_string(IAREQUIRED.DepNames)){n}{n}
def DepNames_Calculation():{n}{t}DepName = String(){n}{t}if get_string(USWAddDep.DepFName(0)) != '':{n}{t}{t}DepName = get_string(USWAddDep.DepFName(0)) + ' '{n}{t}if get_string(USWAddDep.DepFName(1)) != '':{n}{t}{t}DepName = DepName + get_string(USWAddDep.DepFName(1)) + ' '{n}{t}if get_string(USWAddDep.DepFName(2)) != '':{n}{t}{t}DepName = DepName + get_string(USWAddDep.DepFName(2)) + ' '{n}{t}if get_string(USWAddDep.DepFName(3)) != '':{n}{t}{t}DepName = DepName + get_string(USWAddDep.DepFName(3)) + ' '{n}{t}if get_string(USWAddDep.DepFName(4)) != '':{n}{t}{t}DepName = DepName + get_string(USWAddDep.DepFName(4)) + ' '{n}{t}if get_string(USWAddDep.DepFName(5)) != '':{n}{t}{t}DepName = DepName + get_string(USWAddDep.DepFName(5)) + ' '{n}{t}return DepName{n}{n}
def DeprAdj_Calculation():{n}{t}return get_currency(IAWOTHINC.TotBonus){n}{n}
def Diss179_Calculation():{n}{t}return get_currency(IAREQUIRED.TotCo179) + get_currency(IAREQUIRED.Tent179) - get_currency(IAREQUIRED.Ded179){n}{n}
def EICRatio_Calculation():{n}{t}if get_currency(IAREQUIRED.TotEICEarnInc) == 0:{n}{t}{t}return 0{n}{t}elif get_currency(IAREQUIRED.SEICEarnInc) < 0:{n}{t}{t}return 0{n}{t}else:{n}{t}{t}return min_value(1, max_value(0, get_float(IAREQUIRED.SEICEarnInc) / get_float(IAREQUIRED.TotEICEarnInc))){n}{n}
def FedAGI_Calculation():{n}{t}if get_bool(USWResidency.F1040NR) == False:{n}{t}{t}return get_currency(USF1040.AGI){n}{t}else:{n}{t}{t}return get_currency(USF1040NR.AGI){n}{n}
def FedFilingStatus_Calculation():{n}{t}if FedFS() == 1:{n}{t}{t}return 'single'{n}{t}elif FedFS() == 2:{n}{t}{t}return 'married filing jointly'{n}{t}elif FedFS() == 3:{n}{t}{t}return 'married filing separately'{n}{t}elif FedFS() == 4:{n}{t}{t}return 'head of household'{n}{t}else:{n}{t}{t}return 'qualifying widow(er)'{n}{n}
def FedLn11_Calculation():{n}{t}return get_currency(USF4562.BusInc179, 1){n}{n}
def FilingStatus_Calculation():{n}{t}return IAFS(){n}{n}
def FYEIC_Calculation():{n}{t}return c_dollar(get_float(USF1040.Eic) * 0.15){n}{n}
def FYRes_Calculation():{n}{t}Only1NR = Long(){n}{n}{t}TPRes = Long(){n}{n}{t}SPRes = Long(){n}{t}if get_bool(IAF126.TpNonRes) == True and get_bool(IAF126.SpRes) == True:{n}{t}{t}Only1NR = 1{n}{t}elif get_bool(IAF126.TpRes) == True and get_bool(IAF126.SpNonRes) == True:{n}{t}{t}Only1NR = 1{n}{t}else:{n}{t}{t}Only1NR = 0{n}{t}if get_bool(IAF126.Exist) == False:{n}{t}{t}TPRes = 1{n}{t}elif get_bool(IAF1040.MFJ) == True and Only1NR == 1:{n}{t}{t}TPRes = 1{n}{t}elif get_bool(IAF1040.MFJ) == True and get_bool(IAF126.TpRes) == True and get_bool(IAF126.SpRes) == True:{n}{t}{t}TPRes = 1{n}{t}elif get_bool(IAF1040.MFJ) != True and get_bool(IAF126.TpRes) == True:{n}{t}{t}TPRes = 1{n}{t}else:{n}{t}{t}TPRes = 0{n}{t}if get_bool(IAF1040.CombMFS) == True:{n}{t}{t}if get_bool(IAF126.Exist) == False:{n}{t}{t}{t}SPRes = 1{n}{t}{t}elif get_bool(IAF126.SpRes) == True:{n}{t}{t}{t}SPRes = 1{n}{t}{t}else:{n}{t}{t}{t}SPRes = 0{n}{t}else:{n}{t}{t}SPRes = 0{n}{t}if get_bool(IAF1040.CombMFS) == True:{n}{t}{t}if TPRes + SPRes == 2:{n}{t}{t}{t}return 1{n}{t}{t}else:{n}{t}{t}{t}return 0{n}{t}elif TPRes == 1:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def IAAGI_Calculation():{n}{t}return get_currency(IAREQUIRED.FedAGI) + get_currency(IAREQUIRED.DeprAdj) + get_currency(IAREQUIRED.NonConfLn14) - get_currency(IAREQUIRED.NCMove) - get_currency(IAREQUIRED.NCDomProd){n}{n}
def IABusinessNC_Calculation():{n}{t}return get_currency(IAWOTHINC.TotNonConform){n}{n}
def IAEic_Calculation():{n}{t}if get_bool(IAF126.TpPYNR) == True or get_bool(IAF126.SpPYNR):{n}{t}{t}return get_currency(IAREQUIRED.PYNREIC){n}{t}else:{n}{t}{t}return get_currency(IAREQUIRED.FYEIC){n}{n}
def JointDiv_Calculation():{n}{t}count = Integer(){n}{n}{t}SchBTotal = Currency(){n}{n}{t}count1 = Integer(){n}{n}{t}HowManyWBPDiv = Long(){n}{n}{t}WSTotal = Currency(){n}{n}{t}DivIndex = Long(){n}{t}count = 0{n}{t}SchBTotal = 0{n}{t}while count < 7:{n}{t}{t}if get_bool(IASCHB.DJ1(count)) == True:{n}{t}{t}{t}SchBTotal = SchBTotal + get_currency(IASCHB.TaxDiv(count)){n}{t}{t}else:{n}{t}{t}{t}SchBTotal = SchBTotal{n}{t}{t}count = count + 1{n}{t}count1 = 1{n}{t}HowManyWBPDiv = GetAllCopies(IAWBPDIV){n}{t}WSTotal = 0{n}{t}while count1 <= HowManyWBPDiv:{n}{t}{t}DivIndex = 0{n}{t}{t}while DivIndex < 22:{n}{t}{t}{t}if get_bool(IAWBPDIV.DJ1(DivIndex), count1) == True:{n}{t}{t}{t}{t}WSTotal = WSTotal + get_currency(IAWBPDIV.TaxDiv(DivIndex), count1){n}{t}{t}{t}DivIndex = DivIndex + 1{n}{t}{t}count1 = count1 + 1{n}{t}return SchBTotal + WSTotal{n}{n}
def JointInt_Calculation():{n}{t}count = Integer(){n}{n}{t}SchBTotal = Currency(){n}{n}{t}count1 = Integer(){n}{n}{t}HowManyWBPInt = Long(){n}{n}{t}WSTotal = Currency(){n}{n}{t}IntIndex = Long(){n}{t}count = 0{n}{t}SchBTotal = 0{n}{t}while count < 7:{n}{t}{t}if get_bool(IASCHB.IJ1(count)) == True:{n}{t}{t}{t}SchBTotal = SchBTotal + get_currency(IASCHB.TaxInt(count)){n}{t}{t}else:{n}{t}{t}{t}SchBTotal = SchBTotal{n}{t}{t}count = count + 1{n}{t}count1 = 1{n}{t}HowManyWBPInt = GetAllCopies(IAWBPINT){n}{t}WSTotal = 0{n}{t}while count1 <= HowManyWBPInt:{n}{t}{t}IntIndex = 0{n}{t}{t}while IntIndex < 22:{n}{t}{t}{t}if get_bool(IAWBPINT.IJ1(IntIndex), count1) == True:{n}{t}{t}{t}{t}WSTotal = WSTotal + get_currency(IAWBPINT.TaxInt(IntIndex), count1){n}{t}{t}{t}IntIndex = IntIndex + 1{n}{t}{t}count1 = count1 + 1{n}{t}return SchBTotal + WSTotal{n}{n}
def JointSPDiv_Calculation():{n}{t}return Round(c_dollar(CDbl(get_currency(IAREQUIRED.JointDiv)) * 0.5)){n}{n}
def JointSPInt_Calculation():{n}{t}return Round(c_dollar(CDbl(get_currency(IAREQUIRED.JointInt)) * 0.5)){n}{n}
def JointTPDiv_Calculation():{n}{t}return get_currency(IAREQUIRED.JointDiv) - get_currency(IAREQUIRED.JointSPDiv){n}{n}
def JointTPInt_Calculation():{n}{t}return get_currency(IAREQUIRED.JointInt) - get_currency(IAREQUIRED.JointSPInt){n}{n}
def JTComb_Calculation():{n}{t}if get_string(IAF1040.LastName) == get_string(IAF1040.SpouseLast):{n}{t}{t}return get_string(IAF1040.LastName) + ', ' + get_string(IAF1040.FirstName) + ' and ' + get_string(IAF1040.SpouseFirst){n}{t}else:{n}{t}{t}return get_string(IAF1040.LastName) + ', ' + get_string(IAF1040.FirstName) + ' and ' + get_string(IAF1040.SpouseLast) + ', ' + get_string(IAF1040.SpouseFirst){n}{n}
def LILimit_Calculation():{n}{t}if IAFS() == 1 and get_bool(IAF1040.DepY) == True:{n}{t}{t}return Decimal("5000"){n}{t}elif IAFS() == 1 and get_bool(IAF1040.DepY) == False and get_bool(IAF1040.Over65) == True:{n}{t}{t}return Decimal("24001"){n}{t}elif IAFS() == 1 and get_bool(IAF1040.DepY) == False:{n}{t}{t}return Decimal("9001"){n}{t}elif IAFS() == 1 or get_bool(IAF1040.DepY) == True:{n}{t}{t}return Decimal("0"){n}{t}elif get_bool(IAF1040.Over65) == True:{n}{t}{t}return Decimal("32001"){n}{t}else:{n}{t}{t}return Decimal("13501"){n}{n}
def Limit179_Calculation():{n}{t}return max_value(0, get_currency(IAREQUIRED.Max179) - get_currency(IAREQUIRED.Reduction179)){n}{n}
def LITotIncome_Calculation():{n}{t}return get_currency(IAWKALTTAX.Ln26){n}{n}
def LowInc_Calculation():{n}{t}if get_currency(USF4972.Tax) + get_currency(USF4972SPOUSE.Tax) > 0:{n}{t}{t}return 0{n}{t}elif get_currency(IAF1040.AIAMin) > 0 or get_currency(IAF1040.BIAMin) > 0:{n}{t}{t}return 0{n}{t}elif get_bool(IAF126.TpPYNR) == True or get_bool(IAF126.SpPYNR) == True:{n}{t}{t}return 0{n}{t}elif get_bool(IAREQUIRED.AskFilStat) == True and get_bool(IAWKALTTAX.NOL) == True:{n}{t}{t}return 0{n}{t}elif get_currency(IAREQUIRED.LITotIncome) < get_currency(IAREQUIRED.LILimit):{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def Max179_Calculation():{n}{t}return Decimal("70000"){n}{n}
def MobDisQual_Calculation():{n}{t}return 0{n}{n}
def ModAmt_Calculation():{n}{t}TP = Currency(){n}{n}{t}SP = Currency(){n}{t}TP = get_currency(IAF1040.ATotAdj) - get_currency(IAF1040.AFedTax) + get_currency(IAF1040.AFedDed) + get_currency(IAF1040.ADedBox){n}{t}SP = get_currency(IAF1040.BTotAdj) - get_currency(IAF1040.BFedTax) + get_currency(IAF1040.BFedDed) + get_currency(IAF1040.BDedBox){n}{t}return TP + SP{n}{n}
def ModChg_Calculation():{n}{t}return Abs(get_currency(IAREQUIRED.TotIncChg) - get_currency(IAF1040.AAltTax)){n}{n}
def ModCk_Calculation():{n}{t}Tax = Currency(){n}{n}{t}Modifications = Currency(){n}{t}Tax = get_currency(IAF1040.AAltTax){n}{t}Modifications = get_currency(IAREQUIRED.TotIncChg) - Tax{n}{t}if Modifications > 0:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def Names_Calculation():{n}{t}return get_string(IAREQUIRED.CombNames){n}{n}
def NCDomProd_Calculation():{n}{t}return max_value(0, get_currency(IAOTHADJ.TPDomProd) + get_currency(IAOTHADJ.SPDomProd) - get_currency(USF8903.DPADeduction)){n}{n}
def NCMove_Calculation():{n}{t}return get_currency(IA3903.MovExpDdn){n}{n}
def NonConfLn14_Calculation():{n}{t}return get_currency(IAWOTHINC.TotNonConform){n}{n}
def NonCredAmt_Calculation():{n}{t}TP = Currency(){n}{n}{t}SP = Currency(){n}{t}TP = get_currency(IAF1040.ACredits) + get_currency(IAF1040.ACrNon) + get_currency(IAF1040.AOutState) + get_currency(IAF1040.AOthIACr){n}{t}SP = get_currency(IAF1040.BCredits) + get_currency(IAF1040.BCrNon) + get_currency(IAF1040.BOutState) + get_currency(IAF1040.BOthIACr){n}{t}return TP + SP{n}{n}
def NonCredChg_Calculation():{n}{t}return get_currency(IAREQUIRED.NonCredAmt){n}{n}
def NonCredCk_Calculation():{n}{t}if get_currency(IAREQUIRED.NonCredChg) > 0:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def OthTaxAmt_Calculation():{n}{t}TP = Currency(){n}{n}{t}SP = Currency(){n}{t}TP = get_currency(IAF1040.ALump) + get_currency(IAF1040.AIAMin) + get_currency(IAF1040.ASch){n}{t}TP = get_currency(IAF1040.BLump) + get_currency(IAF1040.BIAMin) + get_currency(IAF1040.BSch){n}{t}return TP + SP + get_currency(IAF1040.TotContrib){n}{n}
def OthTaxChg_Calculation():{n}{t}return get_currency(IAREQUIRED.OthTaxAmt){n}{n}
def OthTaxCk_Calculation():{n}{t}if get_currency(IAREQUIRED.OthTaxChg) > 0:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def PayAmt_Calculation():{n}{t}return get_currency(IAF1040.TotCredit){n}{n}
def PayChg_Calculation():{n}{t}return get_currency(IAREQUIRED.PayAmt){n}{n}
def PayCk_Calculation():{n}{t}if get_currency(IAREQUIRED.PayChg) > 0:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def PenDonAmt_Calculation():{n}{t}return get_currency(IAF1040.BApply99) + get_currency(IAF1040.AApply99) + get_currency(IAF1040.Penalty) + get_currency(IAF1040.PenInt){n}{n}
def PenDonChg_Calculation():{n}{t}return get_currency(IAREQUIRED.PenDonAmt){n}{n}
def PenDonCk_Calculation():{n}{t}if get_currency(IAREQUIRED.PenDonChg) > 0:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def PrnSchCode_Calculation():{n}{t}if get_string(IAF1040.SchNo) == '00811':{n}{t}{t}return '0081'{n}{t}elif get_string(IAF1040.SchNo) == '44911':{n}{t}{t}return '4491'{n}{t}elif get_string(IAF1040.SchNo) == '45181':{n}{t}{t}return '4518'{n}{t}elif get_string(IAF1040.SchNo) == '58951':{n}{t}{t}return '5895'{n}{t}else:{n}{t}{t}return get_string(IAF1040.SchNo){n}{n}
def PrnSurvivorSP_Calculation():{n}{t}if get_string(USWTaxpayer.PrnSurvivorSP) == 'File as Surviving Sp.':{n}{t}{t}return get_string(USWTaxpayer.PrnSurvivorSP) + ' ' + get_string(USWBasicInfo.YouDeath){n}{t}else:{n}{t}{t}return get_string(USWTaxpayer.PrnSurvivorSP){n}{n}
def PrnSurvivorTP_Calculation():{n}{t}if get_string(USWTaxpayer.PrnSurvivorTP) == 'File as Surviving Sp.':{n}{t}{t}return get_string(USWTaxpayer.PrnSurvivorTP){n}{t}else:{n}{t}{t}return get_string(USWTaxpayer.PrnSurvivorTP){n}{n}
def PYNetInc_Calculation():{n}{t}return get_currency(IAREQUIRED.PYNetIncA) + get_currency(IAREQUIRED.PYNetIncB){n}{n}
def PYNetIncA_Calculation():{n}{t}return get_currency(USZIA1040.IAPYNetIncA){n}{n}
def PYNetIncB_Calculation():{n}{t}return get_currency(USZIA1040.IAPYNetIncB){n}{n}
def PYNREIC_Calculation():{n}{t}return min_value(get_currency(IAREQUIRED.FYEIC), ( c_dollar(get_float(IAREQUIRED.FYEIC) * get_float(IACHILDCREDIT.PYNRPercent)) )){n}{n}
def PYRatio_Calculation():{n}{t}if get_bool(IAREQUIRED.AskSpouse) == False:{n}{t}{t}return 0{n}{t}elif get_currency(IAREQUIRED.PYNetIncB) < 0 and get_currency(IAREQUIRED.PYNetIncA) < 0:{n}{t}{t}if get_currency(IAREQUIRED.PYNetIncB) < get_currency(IAREQUIRED.PYNetIncA):{n}{t}{t}{t}return 0{n}{t}{t}else:{n}{t}{t}{t}return 1{n}{t}elif get_currency(IAREQUIRED.PYNetIncB) < 0:{n}{t}{t}return 0{n}{t}elif get_currency(IAREQUIRED.PYNetIncB) > 0 and get_currency(IAREQUIRED.PYNetInc) <= 0:{n}{t}{t}return 1{n}{t}elif get_currency(IAREQUIRED.PYNetInc) == 0:{n}{t}{t}return 0{n}{t}else:{n}{t}{t}return max_value(0, ( min_value(1, get_float(IAREQUIRED.PYNetIncB) / get_float(IAREQUIRED.PYNetInc)) )){n}{n}
def QnACompMob_Calculation():{n}{t}if get_bool(IAREQUIRED.QnAComp) == True:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def QSAmtOwe_Calculation():{n}{t}if get_currency(IAF1040.RefBalDue) < 0:{n}{t}{t}return Abs(get_currency(IAF1040.RefBalDue)){n}{t}else:{n}{t}{t}return 0{n}{n}
def QSRefund_Calculation():{n}{t}if get_currency(IAF1040.RefBalDue) > 0:{n}{t}{t}return get_currency(IAF1040.RefBalDue){n}{t}else:{n}{t}{t}return 0{n}{n}
def Reduction179_Calculation():{n}{t}return max_value(0, get_currency(IAREQUIRED.TotCost179) - get_currency(IAREQUIRED.Threshold179)){n}{n}
def RefundAmt_Calculation():{n}{t}return get_currency(IAF1040.RefBalDue){n}{n}
def RefundCk_Calculation():{n}{t}if get_currency(IAREQUIRED.RefundAmt) > 0:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def S1099RWH_Calculation():{n}{t}count1 = Integer(){n}{n}{t}HowMany1099R = Long(){n}{n}{t}Total1 = Currency(){n}{t}count1 = 1{n}{t}HowMany1099R = GetAllCopies(USD1099R){n}{t}Total1 = 0{n}{t}while count1 <= HowMany1099R:{n}{t}{t}if get_string(USD1099R.St1, count1) == 'IA' and get_bool(USD1099R.Spouse, count1) == True:{n}{t}{t}{t}Total1 = Total1 + get_currency(USD1099R.StWh1, count1){n}{t}{t}if get_string(USD1099R.St2, count1) == 'IA' and get_bool(USD1099R.Spouse, count1) == True:{n}{t}{t}{t}Total1 = Total1 + get_currency(USD1099R.STWh2, count1){n}{t}{t}count1 = count1 + 1{n}{t}return Round(Total1){n}{n}
def SchADeprAmt_Calculation():{n}{t}count = Long(){n}{n}{t}count3 = Long(){n}{n}{t}Total1 = Currency(){n}{n}{t}Total3 = Currency(){n}{n}{t}HowManyIAWDepr = Long(){n}{n}{t}HowManyIA4562A = Long(){n}{t}#believe situation now is that parent A is gone, should only have this situation now when fed 2106 is for a "Disabled" (which goes to Sch A for fed and IA) and have either 4562 or 2106veh depr. All other 2106 depr is either only claimed on IA subject to 2% (no adjustment needed since nothing on fed) or claimed on fed (fed .Quaifies) as an adjustment to AGI and then we will properly account for this on IA4562A{n}{t}count = 1{n}{t}count3 = 1{n}{t}Total1 = 0{n}{t}Total3 = 0{n}{t}HowManyIAWDepr = GetAllCopies(IAWDepr){n}{t}HowManyIA4562A = GetAllCopies(IA4562A){n}{t}while count <= HowManyIAWDepr:{n}{t}{t}if get_string(IAWDepr.ParentType, count) == '2106' and get_bool(IAWDepr.Qualifies, count) == True:{n}{t}{t}{t}Total1 = Total1 + get_currency(IAWDepr.TotAdj, count){n}{t}{t}count = count + 1{n}{t}while count3 <= HowManyIA4562A:{n}{t}{t}if get_string(IA4562A.EmpBusType, count3) == '27':{n}{t}{t}{t}Total3 = Total3 + get_currency(IA4562A.DepAdj, count3){n}{t}{t}count3 = count3 + 1{n}{t}return Total1 + Total3{n}{n}
def SchBDivNoPayer_Calculation():{n}{t}count = Variant(){n}{n}{t}Iter = Integer(){n}{t}count = 0{n}{t}Iter = 0{n}{t}while Iter < 7:{n}{t}{t}if get_currency(IASCHB.Dividend(Iter)) > 0 and trim(get_string(IASCHB.DivPayer(Iter))) == '':{n}{t}{t}{t}count = count + 1{n}{t}{t}Iter = Iter + 1{n}{t}if get_bool(IASCHB.PrintIAB) == True and count > 0:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def SchBIntNoPayer_Calculation():{n}{t}count = Variant(){n}{n}{t}Iter = Integer(){n}{t}count = 0{n}{t}Iter = 0{n}{t}while Iter < 7:{n}{t}{t}if get_currency(IASCHB.Interest(Iter)) > 0 and trim(get_string(IASCHB.Payer(Iter))) == '':{n}{t}{t}{t}count = count + 1{n}{t}{t}Iter = Iter + 1{n}{t}if get_bool(IASCHB.PrintIAB) == True and count > 0:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def SEarnInc_Calculation():{n}{t}Part = Currency(){n}{n}{t}SE = Currency(){n}{n}{t}Wages = Currency(){n}{n}{t}NonTaxCombat = Currency(){n}{n}{t}SP409AInc = Currency(){n}{n}{t}JtSP409AInc = Currency(){n}{t}Part = get_currency(USDPartK1.SEInc, FieldCopies(USDPartK1.Spouse)) + c_dollar(get_float(USDPartK1.SEInc, FieldCopies(USDPartK1.Joint)) * 0.5){n}{t}SE = get_currency(IAF1040.BBusInc) + get_currency(IAF1040.BFarm) - get_currency(IAF1040.BBusIncL) - get_currency(USWRec.SKeough){n}{t}Wages = max_value(0, get_currency(IAF1040.BWages) - get_currency(USDStudent.TaxScholar, FieldCopies(USDStudent.Spouse)) - Round(get_currency(USDW2.NonQual, FieldCopies(USDW2.Spouse))) - Round(get_currency(USDW2AS.NonQual, FieldCopies(USDW2AS.Spouse))) - Round(get_currency(USDW2CM.NonQual, FieldCopies(USDW2CM.Spouse))) - Round(get_currency(USDW2GU.NonQual, FieldCopies(USDW2GU.Spouse))) - Round(get_currency(USDW2VI.NonQual, FieldCopies(USDW2VI.Spouse)))){n}{t}NonTaxCombat = Round(get_currency(USDW2.CodeQ, FieldCopies(USDW2.Spouse))) + Round(get_currency(USDW2AS.CodeQ, FieldCopies(USDW2AS.Spouse))) + Round(get_currency(USDW2CM.CodeQ, FieldCopies(USDW2CM.Spouse))) + Round(get_currency(USDW2GU.CodeQ, FieldCopies(USDW2GU.Spouse))) + Round(get_currency(USDW2VI.CodeQ, FieldCopies(USDW2VI.Spouse))){n}{t}SP409AInc = Round(get_currency(USDW2.CodeZ, FieldCopies(USDW2.Spouse))) + Round(get_currency(USDW2AS.CodeZ, FieldCopies(USDW2AS.Spouse))) + Round(get_currency(USDW2CM.CodeZ, FieldCopies(USDW2CM.Spouse))) + Round(get_currency(USDW2GU.CodeZ, FieldCopies(USDW2GU.Spouse))) + Round(get_currency(USDW2VI.CodeZ, FieldCopies(USDW2VI.Spouse))) + Round(get_currency(USD1099MISC.Income, FieldCopies(USD1099MISC.Spouse))){n}{t}JtSP409AInc = Round(c_dollar(get_float(USD1099MISC.Income, FieldCopies(USD1099MISC.Joint)) * 0.5)){n}{t}return max_value(0, Wages + get_currency(IAF1040.BAlimony) + max_value(0, SE + Part) + get_currency(USWOthInc.SP2555) + NonTaxCombat - SP409AInc - JtSP409AInc){n}{n}
def SEICEarnInc_Calculation():{n}{t}if get_bool(IAF1040.MFS) == True:{n}{t}{t}return get_currency(IAF1040.MFSEI){n}{t}else:{n}{t}{t}return get_currency(IAF1040.BWages) + get_currency(IAF1040.BBusInc) + get_currency(IAF1040.BFarm){n}{n}
def ShowRef_Calculation():{n}{t}if get_currency(IAREQUIRED.QSAmtOwe) > 0:{n}{t}{t}return 0{n}{t}else:{n}{t}{t}return 1{n}{n}
def SIaEIC_Calculation():{n}{t}return c_dollar(get_float(IAREQUIRED.IAEic) * get_float(IAREQUIRED.EICRatio)){n}{n}
def SIAExReimb_Calculation():{n}{t}return get_currency(IAREQUIRED.TotIAExReimb) - get_currency(IAREQUIRED.TIAExReimb){n}{n}
def SIAW2WH_Calculation():{n}{t}count1 = Integer(){n}{n}{t}HowManyW2 = Long(){n}{n}{t}Total1 = Currency(){n}{n}{t}W2Index = Long(){n}{t}count1 = 1{n}{t}HowManyW2 = GetAllCopies(USDW2){n}{t}Total1 = 0{n}{t}while count1 <= HowManyW2:{n}{t}{t}W2Index = 0{n}{t}{t}while W2Index < 8:{n}{t}{t}{t}if get_string(USDW2.St(W2Index), count1) == 'IA' and get_bool(USDW2.Spouse, count1) == True:{n}{t}{t}{t}{t}Total1 = Total1 + get_currency(USDW2.STWh(W2Index), count1){n}{t}{t}{t}W2Index = W2Index + 1{n}{t}{t}count1 = count1 + 1{n}{t}return Round(Total1){n}{n}
def SIRA_Calculation():{n}{t}if IAFS() == 3:{n}{t}{t}if get_currency(IAREQUIRED.TEarnInc) < get_currency(USWIRA.TPDedIRA):{n}{t}{t}{t}return get_currency(USWIRA.TPDedIRA) + get_currency(USWIRA.SPDedIRA) - get_currency(IAREQUIRED.TEarnInc){n}{t}{t}else:{n}{t}{t}{t}return min_value(get_currency(IAREQUIRED.SEarnInc), get_currency(USWIRA.SPDedIRA)){n}{t}else:{n}{t}{t}return 0{n}{n}
def AskSpouse_Calculation():{n}{t}if IAFS() == 2 or IAFS() == 3:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def SLimLoss_Calculation():{n}{t}return get_currency(USWDRec.LimLoss) - get_currency(IAREQUIRED.TLimLoss){n}{n}
def SMove_Calculation():{n}{t}return get_currency(IAREQUIRED.TotMove) - get_currency(IAREQUIRED.TMove){n}{n}
def SP8824_Calculation():{n}{t}return get_currency(IAREQUIRED.Tot8824) - get_currency(IAREQUIRED.TP8824){n}{n}
def SPCapGainWH_Calculation():{n}{t}count1 = Integer(){n}{n}{t}HowManyCapGain = Long(){n}{n}{t}Total1 = Currency(){n}{n}{t}CGIndex = Long(){n}{t}count1 = 1{n}{t}HowManyCapGain = GetAllCopies(USDCapGain){n}{t}Total1 = 0{n}{t}while count1 <= HowManyCapGain:{n}{t}{t}CGIndex = 0{n}{t}{t}while CGIndex < 2:{n}{t}{t}{t}if get_string(USDCapGain.St2(CGIndex), count1) == 'IA' and get_bool(USDCapGain.Spouse, count1) == True:{n}{t}{t}{t}{t}Total1 = Total1 + get_currency(USDCapGain.STWh2(CGIndex), count1){n}{t}{t}{t}elif get_string(USDCapGain.St2(CGIndex), count1) == 'IA' and get_bool(USDCapGain.Joint, count1) == True:{n}{t}{t}{t}{t}Total1 = Total1 + c_dollar(get_float(USDCapGain.STWh2(CGIndex), count1) * 0.5){n}{t}{t}{t}CGIndex = CGIndex + 1{n}{t}{t}count1 = count1 + 1{n}{t}return Round(Total1){n}{n}
def SPComb_Calculation():{n}{t}if get_bool(IAF1040.MFJ) == True or get_bool(IAF1040.CombMFS) == True:{n}{t}{t}return get_string(IAF1040.SpouseLast) + ', ' + get_string(IAF1040.SpouseFirst){n}{t}else:{n}{t}{t}return ''{n}{n}
def SPCombName_Calculation():{n}{t}if get_bool(IAF1040.MFJ) == True or get_bool(IAF1040.CombMFS) == True:{n}{t}{t}return get_string(IAF1040.SpouseFirst) + ' ' + get_string(IAF1040.SpouseLast){n}{t}else:{n}{t}{t}return ''{n}{n}
def SPDivWH_Calculation():{n}{t}count1 = Integer(){n}{n}{t}HowMany1099Div = Long(){n}{n}{t}Total1 = Currency(){n}{n}{t}DivIndex = Long(){n}{t}count1 = 1{n}{t}HowMany1099Div = GetAllCopies(USD1099DIV){n}{t}Total1 = 0{n}{t}while count1 <= HowMany1099Div:{n}{t}{t}DivIndex = 0{n}{t}{t}while DivIndex < 2:{n}{t}{t}{t}if get_string(USD1099DIV.St(DivIndex), count1) == 'IA' and get_bool(USD1099DIV.Spouse, count1) == True:{n}{t}{t}{t}{t}Total1 = Total1 + get_currency(USD1099DIV.STWh(DivIndex), count1){n}{t}{t}{t}elif get_string(USD1099DIV.St(DivIndex), count1) == 'IA' and get_bool(USD1099DIV.Joint, count1) == True:{n}{t}{t}{t}{t}Total1 = Total1 + c_dollar(get_float(USD1099DIV.STWh(DivIndex), count1) * 0.5){n}{t}{t}{t}DivIndex = DivIndex + 1{n}{t}{t}count1 = count1 + 1{n}{t}return Round(Total1){n}{n}
def SPIntWH_Calculation():{n}{t}count1 = Integer(){n}{n}{t}HowMany1099Int = Long(){n}{n}{t}Total1 = Currency(){n}{n}{t}IntIndex = Long(){n}{t}count1 = 1{n}{t}HowMany1099Int = GetAllCopies(USD1099INT){n}{t}Total1 = 0{n}{t}while count1 <= HowMany1099Int:{n}{t}{t}IntIndex = 0{n}{t}{t}while IntIndex < 2:{n}{t}{t}{t}if get_string(USD1099INT.St(IntIndex), count1) == 'IA' and get_bool(USD1099INT.Spouse, count1) == True:{n}{t}{t}{t}{t}Total1 = Total1 + get_currency(USD1099INT.STWh(IntIndex), count1){n}{t}{t}{t}elif get_string(USD1099INT.St(IntIndex), count1) == 'IA' and get_bool(USD1099INT.Joint, count1) == True:{n}{t}{t}{t}{t}Total1 = Total1 + c_dollar(get_float(USD1099INT.STWh(IntIndex), count1) * 0.5){n}{t}{t}{t}IntIndex = IntIndex + 1{n}{t}{t}count1 = count1 + 1{n}{t}return Round(Total1){n}{n}
def SPKWH_Calculation():{n}{t}count1 = Integer(){n}{n}{t}HowMany1099K = Long(){n}{n}{t}Total1 = Currency(){n}{n}{t}KIndex = Long(){n}{t}count1 = 1{n}{t}HowMany1099K = GetAllCopies(USD1099K){n}{t}Total1 = 0{n}{t}while count1 <= HowMany1099K:{n}{t}{t}KIndex = 0{n}{t}{t}while KIndex < 2:{n}{t}{t}{t}if get_string(USD1099K.State(KIndex), count1) == 'IA' and get_bool(USD1099K.Spouse, count1) == True:{n}{t}{t}{t}{t}Total1 = Total1 + get_currency(USD1099K.StateInc(KIndex), count1){n}{t}{t}{t}elif get_string(USD1099K.State(KIndex), count1) == 'IA' and get_bool(USD1099K.Joint, count1) == True:{n}{t}{t}{t}{t}Total1 = Total1 + c_dollar(get_float(USD1099K.StateInc(KIndex), count1) * 0.5){n}{t}{t}{t}KIndex = KIndex + 1{n}{t}{t}count1 = count1 + 1{n}{t}return Round(Total1){n}{n}
def SPMiscWH_Calculation():{n}{t}count1 = Integer(){n}{n}{t}HowMany1099MISC = Long(){n}{n}{t}Total1 = Currency(){n}{t}count1 = 1{n}{t}HowMany1099MISC = GetAllCopies(USD1099MISC){n}{t}Total1 = 0{n}{t}while count1 <= HowMany1099MISC:{n}{t}{t}if get_string(USD1099MISC.State, count1) == 'IA':{n}{t}{t}{t}if get_bool(USD1099MISC.Spouse, count1) == True:{n}{t}{t}{t}{t}Total1 = Total1 + get_currency(USD1099MISC.StateWH, count1){n}{t}{t}{t}elif get_bool(USD1099MISC.Joint, count1) == True:{n}{t}{t}{t}{t}Total1 = Total1 + c_dollar(get_float(USD1099MISC.StateWH, count1) * 0.5){n}{t}{t}{t}else:{n}{t}{t}{t}{t}Total1 = Total1{n}{t}{t}else:{n}{t}{t}{t}Total1 = Total1{n}{t}{t}if get_string(USD1099MISC.State2, count1) == 'IA':{n}{t}{t}{t}if get_bool(USD1099MISC.Spouse, count1) == True:{n}{t}{t}{t}{t}Total1 = Total1 + get_currency(USD1099MISC.StateWH2, count1){n}{t}{t}{t}elif get_bool(USD1099MISC.Joint, count1) == True:{n}{t}{t}{t}{t}Total1 = Total1 + c_dollar(get_float(USD1099MISC.StateWH2, count1) * 0.5){n}{t}{t}{t}else:{n}{t}{t}{t}{t}Total1 = Total1{n}{t}{t}else:{n}{t}{t}{t}Total1 = Total1{n}{t}{t}count1 = count1 + 1{n}{t}return Round(Total1){n}{n}
def SPOIDWH_Calculation():{n}{t}count1 = Integer(){n}{n}{t}HowMany1099OID = Long(){n}{n}{t}Total1 = Currency(){n}{n}{t}OIDIndex = Long(){n}{t}count1 = 1{n}{t}HowMany1099OID = GetAllCopies(USD1099OID){n}{t}Total1 = 0{n}{t}while count1 <= HowMany1099OID:{n}{t}{t}OIDIndex = 0{n}{t}{t}while OIDIndex < 2:{n}{t}{t}{t}if get_string(USD1099OID.St(OIDIndex), count1) == 'IA' and get_bool(USD1099OID.Spouse, count1) == True:{n}{t}{t}{t}{t}Total1 = Total1 + get_currency(USD1099OID.STWh(OIDIndex), count1){n}{t}{t}{t}elif get_string(USD1099OID.St(OIDIndex), count1) == 'IA' and get_bool(USD1099OID.Joint, count1) == True:{n}{t}{t}{t}{t}Total1 = Total1 + c_dollar(get_float(USD1099OID.STWh(OIDIndex), count1) * 0.5){n}{t}{t}{t}OIDIndex = OIDIndex + 1{n}{t}{t}count1 = count1 + 1{n}{t}return Round(Total1){n}{n}
def SPOthIncWH_Calculation():{n}{t}return 0{n}{n}
def SPTotIncChg_Calculation():{n}{t}Mid = Currency(){n}{n}{t}MidInt = Long(){n}{n}{t}TotTaxInc = Currency(){n}{t}# updated for 2018{n}{t}TotTaxInc = get_currency(IAF1040.BGross){n}{t}if TotTaxInc > Decimal("95650"):{n}{t}{t}Mid = TotTaxInc{n}{t}elif TotTaxInc > Decimal("150"):{n}{t}{t}MidInt = CLng(( TotTaxInc - Decimal("1") )  / Decimal("50")){n}{t}{t}Mid = ( CCur(MidInt) * Decimal("50") )  + Decimal("25"){n}{t}else:{n}{t}{t}Mid = Decimal("0"){n}{t}return Tax(Mid){n}{n}
def SPUnemWH_Calculation():{n}{t}count1 = Integer(){n}{n}{t}HowManyUnempl = Long(){n}{n}{t}Total1 = Currency(){n}{n}{t}UnIndex = Long(){n}{t}count1 = 1{n}{t}HowManyUnempl = GetAllCopies(USWUnempl){n}{t}Total1 = 0{n}{t}while count1 <= HowManyUnempl:{n}{t}{t}UnIndex = 0{n}{t}{t}while UnIndex < 2:{n}{t}{t}{t}if get_string(USWUnempl.TPState(UnIndex), count1) == 'IA' and get_bool(USWUnempl.Spouse, count1) == True:{n}{t}{t}{t}{t}Total1 = Total1 + get_currency(USWUnempl.TPStWH(UnIndex), count1){n}{t}{t}{t}UnIndex = UnIndex + 1{n}{t}{t}count1 = count1 + 1{n}{t}return Round(Total1){n}{n}
def SPW2GWH_Calculation():{n}{t}count1 = Integer(){n}{n}{t}HowManyW2G = Long(){n}{n}{t}Total1 = Currency(){n}{t}count1 = 1{n}{t}HowManyW2G = GetAllCopies(USDW2G){n}{t}Total1 = 0{n}{t}while count1 <= HowManyW2G:{n}{t}{t}if get_string(USDW2G.StateWon, count1) == 'IA' and get_bool(USDW2G.Spouse, count1) == True:{n}{t}{t}{t}Total1 = Total1 + get_currency(USDW2G.StateWH, count1){n}{t}{t}count1 = count1 + 1{n}{t}return Round(Total1){n}{n}
def SSN_Calculation():{n}{t}return get_string(IAF1040.SSN){n}{n}
def SummaryScript_Calculation():{n}{t}if get_bool(IAF1040.CombMFS) == True:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def T1099rWH_Calculation():{n}{t}return get_currency(IAREQUIRED.Tot1099rWH) - get_currency(IAREQUIRED.S1099RWH){n}{n}
def TaxReduction_Calculation():{n}{t}return min_value(get_currency(IAREQUIRED.TentTaxRed), get_currency(IAREQUIRED.TentTax)){n}{n}
def TEarnInc_Calculation():{n}{t}return max_value(0, get_currency(USWIRATrad.EarnInc) - get_currency(IAREQUIRED.SEarnInc)){n}{n}
def Tent179_Calculation():{n}{t}return min_value(get_currency(IAREQUIRED.TotElect179), get_currency(IAREQUIRED.Limit179)){n}{n}
def TentTax_Calculation():{n}{t}return max_value(0, get_currency(IAF1040.ATotIATax) - get_currency(IAF1040.ACredits)){n}{n}
def TentTaxRed_Calculation():{n}{t}return max_value(0, get_currency(IAREQUIRED.TotNIPenExc) - get_currency(IAREQUIRED.BaseAmt)){n}{n}
def Threshold179_Calculation():{n}{t}return Decimal("280000"){n}{n}
def TIAEic_Calculation():{n}{t}return max_value(0, get_currency(IAREQUIRED.IAEic) - get_currency(IAREQUIRED.SIaEIC)){n}{n}
def TIAExReimb_Calculation():{n}{t}return get_currency(IA3903.IAExReimb, FieldCopies(IA3903.Taxpayer)) + c_dollar(get_float(IA3903.IAExReimb, FieldCopies(IA3903.Joint)) * 0.5){n}{n}
def TIAW2WH_Calculation():{n}{t}return get_currency(IAREQUIRED.TotIAW2WH) - get_currency(IAREQUIRED.SIAW2WH){n}{n}
def TIRA_Calculation():{n}{t}return get_currency(IAREQUIRED.TotIRA) - get_currency(IAREQUIRED.SIRA){n}{n}
def TLimLoss_Calculation():{n}{t}if get_currency(USWDRec.CapGain) < 0:{n}{t}{t}if get_currency(USWDRec.TCapGain) < 0 and get_currency(USWDRec.SCapGain) < 0 and IAFS() == 3:{n}{t}{t}{t}if get_currency(USWDRec.SCapGain) < - Decimal("1500"):{n}{t}{t}{t}{t}return max_value(get_currency(USWDRec.TCapGain), - Decimal("1500")){n}{t}{t}{t}else:{n}{t}{t}{t}{t}return get_currency(USWDRec.LimLoss) - get_currency(USWDRec.SCapGain){n}{t}{t}elif get_currency(USWDRec.TCapGain) < 0:{n}{t}{t}{t}return get_currency(USWDRec.LimLoss){n}{t}{t}else:{n}{t}{t}{t}return 0{n}{t}else:{n}{t}{t}return 0{n}{n}
def TMove_Calculation():{n}{t}FedMove = Currency(){n}{n}{t}StateMove = Currency(){n}{t}FedMove = get_currency(USWRec.TMove){n}{t}StateMove = Round(get_currency(IA3903.MovExpDdn, FieldCopies(IA3903.Taxpayer)) + c_dollar(get_float(IA3903.MovExpDdn, FieldCopies(IA3903.Joint)) * 0.5)){n}{t}return FedMove + StateMove{n}{n}
def Tot1042S_Calculation():{n}{t}count1 = Integer(){n}{n}{t}HowMany1042S = Long(){n}{n}{t}Total1 = Currency(){n}{n}{t}F1042SIndex = Long(){n}{t}count1 = 1{n}{t}HowMany1042S = GetAllCopies(USD1042S){n}{t}Total1 = 0{n}{t}while count1 <= HowMany1042S:{n}{t}{t}F1042SIndex = 0{n}{t}{t}while F1042SIndex < 4:{n}{t}{t}{t}if get_string(USD1042S.St(F1042SIndex), count1) == 'IA':{n}{t}{t}{t}{t}Total1 = Total1 + get_currency(USD1042S.StWh(F1042SIndex), count1){n}{t}{t}{t}F1042SIndex = F1042SIndex + 1{n}{t}{t}count1 = count1 + 1{n}{t}return Round(Total1){n}{n}
def Tot1099rWH_Calculation():{n}{t}count1 = Integer(){n}{n}{t}HowMany1099R = Long(){n}{n}{t}Total1 = Currency(){n}{t}count1 = 1{n}{t}HowMany1099R = GetAllCopies(USD1099R){n}{t}Total1 = 0{n}{t}while count1 <= HowMany1099R:{n}{t}{t}if get_string(USD1099R.St1, count1) == 'IA':{n}{t}{t}{t}Total1 = Total1 + get_currency(USD1099R.StWh1, count1){n}{t}{t}if get_string(USD1099R.St2, count1) == 'IA':{n}{t}{t}{t}Total1 = Total1 + get_currency(USD1099R.STWh2, count1){n}{t}{t}count1 = count1 + 1{n}{t}return Round(Total1){n}{n}
def Tot8824_Calculation():{n}{t}return get_currency(IA8824.IANonConformAdj){n}{n}
def TotApplied_Calculation():{n}{t}return get_currency(IAF1040.AApply99) + get_currency(IAF1040.BApply99){n}{n}
def TotCapGainWH_Calculation():{n}{t}count1 = Integer(){n}{n}{t}HowManyCapGain = Long(){n}{n}{t}Total1 = Currency(){n}{n}{t}CGIndex = Long(){n}{t}count1 = 1{n}{t}HowManyCapGain = GetAllCopies(USDCapGain){n}{t}Total1 = 0{n}{t}while count1 <= HowManyCapGain:{n}{t}{t}CGIndex = 0{n}{t}{t}while CGIndex < 2:{n}{t}{t}{t}if get_string(USDCapGain.St2(CGIndex), count1) == 'IA':{n}{t}{t}{t}{t}Total1 = Total1 + get_currency(USDCapGain.STWh2(CGIndex), count1){n}{t}{t}{t}CGIndex = CGIndex + 1{n}{t}{t}count1 = count1 + 1{n}{t}return Round(Total1){n}{n}
def TotCo179_Calculation():{n}{t}return 0{n}{n}
def TotCost179_Calculation():{n}{t}#per 2016 Section 179 Expensing FAQs under section III for pass through entities #4 example shows that the cost of section 179 property passed through for federal should not pass through to the partner for purposes of the Iowa section 179 phase-out limits, remove + get_currency(USDPartK1.Sec179) + get_currency(USDSCorpK1.Sec179) from reproduced fed calc below.{n}{t}return get_currency(USWDepr.Sec179Basis) + get_currency(USWDepr.List179basis) + get_currency(USF4562.Sec179Basis2106, 1){n}{n}
def TotCYIAEst_Calculation():{n}{t}TP = Currency(){n}{n}{t}SP = Currency(){n}{t}if GetDate(IASTATEEST.TPStQ4Date) < MakeDate(1, 1, YearNumber + 1):{n}{t}{t}TP = get_currency(IASTATEEST.TPStApply) + get_currency(IASTATEEST.TPStQ1) + get_currency(IASTATEEST.TPStQ2) + get_currency(IASTATEEST.TPStQ3) + get_currency(IASTATEEST.TPStQ4){n}{t}else:{n}{t}{t}TP = get_currency(IASTATEEST.TPStApply) + get_currency(IASTATEEST.TPStQ1) + get_currency(IASTATEEST.TPStQ2) + get_currency(IASTATEEST.TPStQ3){n}{t}if GetDate(IASTATEEST.SPStQ4Date) < MakeDate(1, 1, YearNumber + 1):{n}{t}{t}SP = get_currency(IASTATEEST.SPStApply) + get_currency(IASTATEEST.SPStQ1) + get_currency(IASTATEEST.SPStQ2) + get_currency(IASTATEEST.SPStQ3) + get_currency(IASTATEEST.SPStQ4){n}{t}else:{n}{t}{t}SP = get_currency(IASTATEEST.SPStApply) + get_currency(IASTATEEST.SPStQ1) + get_currency(IASTATEEST.SPStQ2) + get_currency(IASTATEEST.SPStQ3){n}{t}if IAFS() == 3:{n}{t}{t}return TP + SP{n}{t}else:{n}{t}{t}return TP{n}{n}
def TotCyLocEst_Calculation():{n}{t}Local1 = Currency(){n}{n}{t}Local2 = Currency(){n}{n}{t}Local3 = Currency(){n}{t}if get_string(USWEstPay.LocName1) == 'OTHER':{n}{t}{t}Local1 = get_currency(USWLocalEst.CYLocal, 1){n}{t}else:{n}{t}{t}Local1 = 0{n}{t}if get_string(USWEstPay.LocName2) == 'OTHER':{n}{t}{t}Local2 = get_currency(USWLocalEst.CYLocal, 2){n}{t}else:{n}{t}{t}Local2 = 0{n}{t}if get_string(USWEstPay.LocName3) == 'OTHER':{n}{t}{t}Local3 = get_currency(USWLocalEst.CYLocal, 3){n}{t}else:{n}{t}{t}Local3 = 0{n}{t}return Local1 + Local2 + Local3{n}{n}
def TotDiv_Calculation():{n}{t}return get_currency(IASCHB.TotalTaxDiv){n}{n}
def TotDivWH_Calculation():{n}{t}count1 = Integer(){n}{n}{t}HowMany1099Div = Long(){n}{n}{t}Total1 = Currency(){n}{n}{t}DivIndex = Long(){n}{t}count1 = 1{n}{t}HowMany1099Div = GetAllCopies(USD1099DIV){n}{t}Total1 = 0{n}{t}while count1 <= HowMany1099Div:{n}{t}{t}DivIndex = 0{n}{t}{t}while DivIndex < 2:{n}{t}{t}{t}if get_string(USD1099DIV.St(DivIndex), count1) == 'IA':{n}{t}{t}{t}{t}Total1 = Total1 + get_currency(USD1099DIV.STWh(DivIndex), count1){n}{t}{t}{t}DivIndex = DivIndex + 1{n}{t}{t}count1 = count1 + 1{n}{t}return Round(Total1){n}{n}
def TotEICEarnInc_Calculation():{n}{t}if get_bool(IAF1040.MFS) == True:{n}{t}{t}return get_currency(IAF1040.MFSEI) + get_currency(IAF1040.AWages) + get_currency(IAF1040.ABusInc) + get_currency(IAF1040.AFarm){n}{t}else:{n}{t}{t}return get_currency(IAF1040.BWages) + get_currency(IAF1040.BBusInc) + get_currency(IAF1040.BFarm) + get_currency(IAF1040.AWages) + get_currency(IAF1040.ABusInc) + get_currency(IAF1040.AFarm){n}{n}
def TotElect179_Calculation():{n}{t}return get_currency(USWDepr.IACYSec179Rep) + get_currency(USF4562.StateTotCySec1792106, 1) + get_currency(USWSummary179.StateK1){n}{n}
def TotIAExReimb_Calculation():{n}{t}return get_currency(IA3903.IAExReimb){n}{n}
def TotIAW2WH_Calculation():{n}{t}count1 = Integer(){n}{n}{t}HowManyW2 = Long(){n}{n}{t}Total1 = Currency(){n}{n}{t}W2Index = Long(){n}{t}count1 = 1{n}{t}HowManyW2 = GetAllCopies(USDW2){n}{t}Total1 = 0{n}{t}while count1 <= HowManyW2:{n}{t}{t}W2Index = 0{n}{t}{t}while W2Index < 8:{n}{t}{t}{t}if get_string(USDW2.St(W2Index), count1) == 'IA':{n}{t}{t}{t}{t}Total1 = Total1 + get_currency(USDW2.STWh(W2Index), count1){n}{t}{t}{t}W2Index = W2Index + 1{n}{t}{t}count1 = count1 + 1{n}{t}return Round(Total1){n}{n}
def TotIncAmt_Calculation():{n}{t}return get_currency(IAF1040.AGross) + get_currency(IAF1040.BGross){n}{n}
def TotIncChg_Calculation():{n}{t}return get_currency(IAREQUIRED.TPTotIncChg) + get_currency(IAREQUIRED.SPTotIncChg){n}{n}
def TotIncCk_Calculation():{n}{t}if get_currency(IAREQUIRED.TotIncChg) > 0:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def TotInt_Calculation():{n}{t}return get_currency(IASCHB.TotalTaxInt){n}{n}
def TotIntWH_Calculation():{n}{t}count1 = Integer(){n}{n}{t}HowMany1099Int = Long(){n}{n}{t}Total1 = Currency(){n}{n}{t}IntIndex = Long(){n}{t}count1 = 1{n}{t}HowMany1099Int = GetAllCopies(USD1099INT){n}{t}Total1 = 0{n}{t}while count1 <= HowMany1099Int:{n}{t}{t}IntIndex = 0{n}{t}{t}while IntIndex < 2:{n}{t}{t}{t}if get_string(USD1099INT.St(IntIndex), count1) == 'IA':{n}{t}{t}{t}{t}Total1 = Total1 + get_currency(USD1099INT.STWh(IntIndex), count1){n}{t}{t}{t}IntIndex = IntIndex + 1{n}{t}{t}count1 = count1 + 1{n}{t}return Round(Total1){n}{n}
def TotIRA_Calculation():{n}{t}return get_currency(USWRec.TotIRAAdj){n}{n}
def TotKWH_Calculation():{n}{t}count1 = Integer(){n}{n}{t}HowMany1099K = Long(){n}{n}{t}Total1 = Currency(){n}{n}{t}KIndex = Long(){n}{t}count1 = 1{n}{t}HowMany1099K = GetAllCopies(USD1099K){n}{t}Total1 = 0{n}{t}while count1 <= HowMany1099K:{n}{t}{t}KIndex = 0{n}{t}{t}while KIndex < 2:{n}{t}{t}{t}if get_string(USD1099K.State(KIndex), count1) == 'IA':{n}{t}{t}{t}{t}Total1 = Total1 + get_currency(USD1099K.StateInc(KIndex), count1){n}{t}{t}{t}KIndex = KIndex + 1{n}{t}{t}count1 = count1 + 1{n}{t}return Round(Total1){n}{n}
def TotMiscWH_Calculation():{n}{t}count1 = Integer(){n}{n}{t}HowMany1099MISC = Long(){n}{n}{t}Total1 = Currency(){n}{t}count1 = 1{n}{t}HowMany1099MISC = GetAllCopies(USD1099MISC){n}{t}Total1 = 0{n}{t}while count1 <= HowMany1099MISC:{n}{t}{t}if get_string(USD1099MISC.State, count1) == 'IA':{n}{t}{t}{t}Total1 = Total1 + get_currency(USD1099MISC.StateWH, count1){n}{t}{t}if get_string(USD1099MISC.State2, count1) == 'IA':{n}{t}{t}{t}Total1 = Total1 + get_currency(USD1099MISC.StateWH2, count1){n}{t}{t}count1 = count1 + 1{n}{t}return Round(Total1){n}{n}
def TotMove_Calculation():{n}{t}return get_currency(USWRec.TotMove) + get_currency(IA3903.MovExpDdn){n}{n}
def TotNI_Calculation():{n}{t}return get_currency(IAF1040.ANet) + get_currency(IAF1040.BNet){n}{n}
def TotNIPenExc_Calculation():{n}{t}return get_currency(IAWKALTTAX.Ln26){n}{n}
def TotOIDWH_Calculation():{n}{t}count1 = Integer(){n}{n}{t}HowMany1099OID = Long(){n}{n}{t}Total1 = Currency(){n}{n}{t}OIDIndex = Long(){n}{t}count1 = 1{n}{t}HowMany1099OID = GetAllCopies(USD1099OID){n}{t}Total1 = 0{n}{t}while count1 <= HowMany1099OID:{n}{t}{t}OIDIndex = 0{n}{t}{t}while OIDIndex < 2:{n}{t}{t}{t}if get_string(USD1099OID.St(OIDIndex), count1) == 'IA':{n}{t}{t}{t}{t}Total1 = Total1 + get_currency(USD1099OID.STWh(OIDIndex), count1){n}{t}{t}{t}OIDIndex = OIDIndex + 1{n}{t}{t}count1 = count1 + 1{n}{t}return Round(Total1){n}{n}
def TotOthIncWH_Calculation():{n}{t}return 0{n}{n}
def TotSPDiv_Calculation():{n}{t}count = Integer(){n}{n}{t}SchBTotal = Currency(){n}{n}{t}count1 = Integer(){n}{n}{t}HowManyWBPDiv = Long(){n}{n}{t}WSTotal = Currency(){n}{n}{t}DivIndex = Long(){n}{t}count = 0{n}{t}SchBTotal = 0{n}{t}while count < 7:{n}{t}{t}if get_bool(IASCHB.DSp1(count)) == True:{n}{t}{t}{t}SchBTotal = SchBTotal + get_currency(IASCHB.TaxDiv(count)){n}{t}{t}else:{n}{t}{t}{t}SchBTotal = SchBTotal{n}{t}{t}count = count + 1{n}{t}count1 = 1{n}{t}HowManyWBPDiv = GetAllCopies(IAWBPDIV){n}{t}WSTotal = 0{n}{t}while count1 <= HowManyWBPDiv:{n}{t}{t}DivIndex = 0{n}{t}{t}while DivIndex < 22:{n}{t}{t}{t}if get_bool(IAWBPDIV.DSp1(DivIndex), count1) == True:{n}{t}{t}{t}{t}WSTotal = WSTotal + get_currency(IAWBPDIV.TaxDiv(DivIndex), count1){n}{t}{t}{t}DivIndex = DivIndex + 1{n}{t}{t}count1 = count1 + 1{n}{t}return SchBTotal + WSTotal + get_currency(IAREQUIRED.JointSPDiv){n}{n}
def TotSPInt_Calculation():{n}{t}count = Integer(){n}{n}{t}SchBTotal = Currency(){n}{n}{t}count1 = Integer(){n}{n}{t}HowManyWBPInt = Long(){n}{n}{t}WSTotal = Currency(){n}{n}{t}IntIndex = Long(){n}{t}count = 0{n}{t}SchBTotal = 0{n}{t}while count < 7:{n}{t}{t}if get_bool(IASCHB.ISp1(count)) == True:{n}{t}{t}{t}SchBTotal = SchBTotal + get_currency(IASCHB.TaxInt(count)){n}{t}{t}else:{n}{t}{t}{t}SchBTotal = SchBTotal{n}{t}{t}count = count + 1{n}{t}count1 = 1{n}{t}HowManyWBPInt = GetAllCopies(IAWBPINT){n}{t}WSTotal = 0{n}{t}while count1 <= HowManyWBPInt:{n}{t}{t}IntIndex = 0{n}{t}{t}while IntIndex < 22:{n}{t}{t}{t}if get_bool(IAWBPINT.ISp1(IntIndex), count1) == True:{n}{t}{t}{t}{t}WSTotal = WSTotal + get_currency(IAWBPINT.TaxInt(IntIndex), count1){n}{t}{t}{t}IntIndex = IntIndex + 1{n}{t}{t}count1 = count1 + 1{n}{t}return SchBTotal + WSTotal + get_currency(IAREQUIRED.JointSPInt){n}{n}
def TotTPDiv_Calculation():{n}{t}return get_currency(IAREQUIRED.TotDiv) - get_currency(IAREQUIRED.TotSPDiv){n}{n}
def TotTPInt_Calculation():{n}{t}return get_currency(IAREQUIRED.TotInt) - get_currency(IAREQUIRED.TotSPInt){n}{n}
def TotUnemWH_Calculation():{n}{t}count1 = Integer(){n}{n}{t}HowManyUnempl = Long(){n}{n}{t}Total1 = Currency(){n}{n}{t}UnIndex = Long(){n}{t}count1 = 1{n}{t}HowManyUnempl = GetAllCopies(USWUnempl){n}{t}Total1 = 0{n}{t}while count1 <= HowManyUnempl:{n}{t}{t}UnIndex = 0{n}{t}{t}while UnIndex < 2:{n}{t}{t}{t}if get_string(USWUnempl.TPState(UnIndex), count1) == 'IA':{n}{t}{t}{t}{t}Total1 = Total1 + get_currency(USWUnempl.TPStWH(UnIndex), count1){n}{t}{t}{t}UnIndex = UnIndex + 1{n}{t}{t}count1 = count1 + 1{n}{t}return Round(Total1){n}{n}
def TotW2GWH_Calculation():{n}{t}count1 = Integer(){n}{n}{t}HowManyW2G = Long(){n}{n}{t}Total1 = Currency(){n}{t}count1 = 1{n}{t}HowManyW2G = GetAllCopies(USDW2G){n}{t}Total1 = 0{n}{t}while count1 <= HowManyW2G:{n}{t}{t}if get_string(USDW2G.StateWon, count1) == 'IA':{n}{t}{t}{t}Total1 = Total1 + get_currency(USDW2G.StateWH, count1){n}{t}{t}count1 = count1 + 1{n}{t}return Round(Total1){n}{n}
def TP8824_Calculation():{n}{t}return get_currency(IA8824.IANonConformAdj, FieldCopies(IA8824.Taxpayer)) + c_dollar(get_float(IA8824.IANonConformAdj, FieldCopies(IA8824.Joint)) * 0.5){n}{n}
def TPCapGainWH_Calculation():{n}{t}return get_currency(IAREQUIRED.TotCapGainWH) - get_currency(IAREQUIRED.SPCapGainWH){n}{n}
def TPComb_Calculation():{n}{t}return get_string(IAF1040.LastName) + ', ' + get_string(IAF1040.FirstName){n}{n}
def TPCombName_Calculation():{n}{t}return get_string(IAF1040.FirstName) + ' ' + get_string(IAF1040.LastName){n}{n}
def TPDivWH_Calculation():{n}{t}return get_currency(IAREQUIRED.TotDivWH) - get_currency(IAREQUIRED.SPDivWH){n}{n}
def TPIntWH_Calculation():{n}{t}return get_currency(IAREQUIRED.TotIntWH) - get_currency(IAREQUIRED.SPIntWH){n}{n}
def TPKWH_Calculation():{n}{t}return get_currency(USZIA1040.TotKWH) - get_currency(USZIA1040.SPKWH){n}{n}
def TPMiscWH_Calculation():{n}{t}return get_currency(IAREQUIRED.TotMiscWH) - get_currency(IAREQUIRED.SPMiscWH){n}{n}
def TPOIDWH_Calculation():{n}{t}return get_currency(IAREQUIRED.TotOIDWH) - get_currency(IAREQUIRED.SPOIDWH){n}{n}
def TpOthIncWH_Calculation():{n}{t}return get_currency(IAREQUIRED.TotOthIncWH) - get_currency(IAREQUIRED.SPOthIncWH){n}{n}
def TPTotIncChg_Calculation():{n}{t}Mid = Currency(){n}{n}{t}MidInt = Long(){n}{n}{t}TotTaxInc = Currency(){n}{t}# updated for 2018{n}{t}TotTaxInc = get_currency(IAF1040.AGross){n}{t}if TotTaxInc > Decimal("95650"):{n}{t}{t}Mid = TotTaxInc{n}{t}elif TotTaxInc > Decimal("150"):{n}{t}{t}MidInt = CLng(( TotTaxInc - Decimal("1") )  / Decimal("50")){n}{t}{t}Mid = ( CCur(MidInt) * Decimal("50") )  + Decimal("25"){n}{t}else:{n}{t}{t}Mid = Decimal("0"){n}{t}return Tax(Mid){n}{n}
def TPUnemWH_Calculation():{n}{t}return get_currency(IAREQUIRED.TotUnemWH) - get_currency(IAREQUIRED.SPUnemWH){n}{n}
def TPW2GWH_Calculation():{n}{t}return get_currency(IAREQUIRED.TotW2GWH) - get_currency(IAREQUIRED.SPW2GWH){n}{n}def Description_Calculation():{n}{t}Total = Currency(){n}{t}Total = get_currency(IASETAX.TPTotal) + get_currency(IASETAX.SPTotal){n}{t}return CStr(Total){n}{n}
def Exist_Calculation():{n}{t}return 1{n}{n}
def MobDisQual_Calculation():{n}{t}if get_currency(IASETAX.TPTotal) + get_currency(IASETAX.SPTotal) > 0:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def Names_Calculation():{n}{t}return get_string(IAREQUIRED.CombNames){n}{n}
def SPHH_Calculation():{n}{t}if get_bool(USSchH.Taxpayer) == True:{n}{t}{t}return 0{n}{t}elif get_bool(USWResidency.F1040NR) == True:{n}{t}{t}return 0{n}{t}elif get_bool(USSchH.Spouse) == True:{n}{t}{t}return get_currency(USW1040Supp.HTax){n}{t}else:{n}{t}{t}return c_dollar(get_float(USW1040Supp.HTax) * 0.5){n}{n}
def SPName_Calculation():{n}{t}return get_string(USWBasicInfo.SPCommon){n}{n}
def SPRetTax_Calculation():{n}{t}return get_currency(USF5329Spouse.TotAddTax){n}{n}
def SPSE_Calculation():{n}{t}if get_bool(USSchSESpouse.ShortSE) == True:{n}{t}{t}return get_currency(USSchSESpouse.ASETax){n}{t}else:{n}{t}{t}return get_currency(USSchSESpouse.BSETax){n}{n}
def SPTipTax_Calculation():{n}{t}return get_currency(USF4137Spouse.AddLnTen) + get_currency(USF8919Spouse.TotTax){n}{n}
def SPTotal_Calculation():{n}{t}return get_currency(IASETAX.SPRepayPTC) + get_currency(IASETAX.SPSE) + get_currency(IASETAX.SPTipTax) + get_currency(IASETAX.SPRetTax) + get_currency(IASETAX.SPHH) + get_currency(IASETAX.SPHomeBuyRepay) + get_currency(IASETAX.SpHlthCarePen) + get_currency(IASETAX.SPTotAddMedTax) + get_currency(IASETAX.SPOthTax){n}{n}
def SSN_Calculation():{n}{t}return get_string(IAF1040.SSN){n}{n}
def TPHH_Calculation():{n}{t}if get_bool(USWResidency.F1040NR) == True:{n}{t}{t}return get_currency(USF1040NR.SchHTax){n}{t}elif get_bool(USSchH.Spouse) == True:{n}{t}{t}return 0{n}{t}else:{n}{t}{t}return max_value(0, get_currency(USW1040Supp.HTax) - get_currency(IASETAX.SPHH)){n}{n}
def TPHlthCarePen_Calculation():{n}{t}if get_bool(USWResidency.F1040NR) == True:{n}{t}{t}return 0{n}{t}else:{n}{t}{t}return max_value(0, get_currency(USF1040.HlthCarePen) - get_currency(IASETAX.SpHlthCarePen)){n}{n}
def TPHomeBuyRepay_Calculation():{n}{t}if get_bool(USWResidency.F1040NR) == True:{n}{t}{t}return get_currency(USF1040NR.HomeBuyRepay){n}{t}else:{n}{t}{t}return max_value(0, get_currency(USF1040.HomeBuyRepay) - get_currency(IASETAX.SPHomeBuyRepay)){n}{n}
def TPName_Calculation():{n}{t}return get_string(USWBasicInfo.TPCommon){n}{n}
def TPOthTax_Calculation():{n}{t}return max_value(0, get_currency(USWOthTax.TotOthTax) - get_currency(IASETAX.SPOthTax)){n}{n}
def TPRepayPTC_Calculation():{n}{t}return max_value(0, get_currency(USF8962.PTCRepay) - get_currency(IASETAX.SPRepayPTC)){n}{n}
def TPRetTax_Calculation():{n}{t}return get_currency(USF5329.TotAddTax){n}{n}
def TPSE_Calculation():{n}{t}if get_bool(USSchSE.ShortSE) == True:{n}{t}{t}return get_currency(USSchSE.ASETax){n}{t}else:{n}{t}{t}return get_currency(USSchSE.BSETax){n}{n}
def TPTipTax_Calculation():{n}{t}return get_currency(USF4137.AddLnTen) + get_currency(USF8919.TotTax){n}{n}
def TPTotAddMedTax_Calculation():{n}{t}return max_value(0, get_currency(USF8959.TotAddMedTax) - get_currency(IASETAX.SPTotAddMedTax)){n}{n}
def TPTotal_Calculation():{n}{t}return get_currency(IASETAX.TPRepayPTC) + get_currency(IASETAX.TPSE) + get_currency(IASETAX.TPTipTax) + get_currency(IASETAX.TPRetTax) + get_currency(IASETAX.TPHH) + get_currency(IASETAX.TPHomeBuyRepay) + get_currency(IASETAX.TPHlthCarePen) + get_currency(IASETAX.TPTotAddMedTax) + get_currency(IASETAX.TPOthTax){n}{n}def AddMilesDed_Calculation():{n}{t}return max_value(0, get_currency(IASCHA.TotMilesDed) - get_currency(IASCHA.SchAMilesDed)){n}{n}
def AdoptSub_Calculation():{n}{t}return max_value(0, c_dollar(get_float(IACHILDCREDIT.TotNI) * 0.03)){n}{n}
def AGI_Calculation():{n}{t}if get_currency(IASCHA.MedExp) == 0:{n}{t}{t}return 0{n}{t}else:{n}{t}{t}return max_value(0, c_dollar(get_float(IASCHA.IAAGI) * 0.1)){n}{n}
def Alert10_Calculation():{n}{t}FedMedical = Currency(){n}{t}if get_bool(USWResidency.F1040NR) == False:{n}{t}{t}FedMedical = get_currency(USSchA.MedExp){n}{t}else:{n}{t}{t}FedMedical = 0{n}{t}if get_currency(IASCHA.MedExp) >= FedMedical and get_currency(IASCHA.MedExp) > 0:{n}{t}{t}if get_currency(IAF1040.BHealth) > 0 or get_currency(IAF1040.AHealth) > 0:{n}{t}{t}{t}return 1{n}{t}{t}else:{n}{t}{t}{t}return 0{n}{t}else:{n}{t}{t}return 0{n}{n}
def Alert15_Calculation():{n}{t}if get_bool(IAF1040.ItemCheck) == True and get_currency(IASCHA.Mort) > 0:{n}{t}{t}if get_currency(USD1098.MortPrem) > Decimal("1000000"):{n}{t}{t}{t}return 1{n}{t}{t}else:{n}{t}{t}{t}return 0{n}{t}else:{n}{t}{t}return 0{n}{n}
def Alert20_Calculation():{n}{t}#add net nonconformity items? Next year could them factor in. If user imports we should import correct Iowa amounts, if we continue to also pull the federal carryover amounts should still bring up this alert{n}{t}#alert is saying to adjust carryover if had any nonconforming items last year, leave as only depr since othinc ws is only current year items, possibly factor in next year (either imported NC items/bonus and/or current year NC items){n}{t}if get_currency(IASCHA.Over) != 0 and get_currency(IAWOTHINC.TotBonus) != 0:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def Alert22_Calculation():{n}{t}TotCont = Currency(){n}{t}TotCont = get_currency(IAWCONTLIMIT.CY50Lim) + get_currency(IAWCONTLIMIT.CY30Lim) + get_currency(IAWCONTLIMIT.CY30LimCG) + get_currency(IAWCONTLIMIT.CY20Lim) + get_currency(IAWCONTLIMIT.CYNoLim){n}{t}if TotCont > get_currency(IAWCONTLIMIT.CYTot):{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def Alert24_Calculation():{n}{t}if get_currency(IAWCONTLIMIT.PY50Lim) < 0:{n}{t}{t}return 1{n}{t}elif get_currency(IAWCONTLIMIT.PY30Lim) < 0:{n}{t}{t}return 1{n}{t}elif get_currency(IAWCONTLIMIT.PY30LimCG) < 0:{n}{t}{t}return 1{n}{t}elif get_currency(IAWCONTLIMIT.PY20Lim) < 0:{n}{t}{t}return 1{n}{t}elif get_currency(IAWCONTLIMIT.PYNoLim) < 0:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def Alert26_Calculation():{n}{t}if get_currency(IAWCONTLIMIT.NYTot) != 0:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def Alert27_Calculation():{n}{t}if get_currency(IAWCONTLIMIT.CYQualLim) != 0:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def Alert28_Calculation():{n}{t}if get_currency(IAWCONTLIMIT.CYQualLim) > get_currency(IASCHA.Contrib):{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def Alert30_Calculation():{n}{t}return 0{n}{n}
def Alert40_Calculation():{n}{t}if get_bool(IAF1040.ItemCheck) == True and get_currency(IASCHA.OthMisc) > 0:{n}{t}{t}if get_currency(IASCHA.IAAdjOthMisc) != 0 and trim(get_string(IASCHA.IAAdjOthMiscDesc)) == '':{n}{t}{t}{t}return 1{n}{t}{t}else:{n}{t}{t}{t}return 0{n}{t}else:{n}{t}{t}return 0{n}{n}
def Alert50_Calculation():{n}{t}count = Variant(){n}{n}{t}Iter = Integer(){n}{t}count = 0{n}{t}Iter = 0{n}{t}while Iter < 5:{n}{t}{t}if get_currency(IASCHA.DisableAmt(Iter)) > 0 and trim(get_string(IASCHA.DisableExp(Iter))) == '':{n}{t}{t}{t}count = count + 1{n}{t}{t}Iter = Iter + 1{n}{t}if get_bool(IAF1040.ItemCheck) == True and count > 0:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def Alert60_Calculation():{n}{t}count = Integer(){n}{n}{t}Lim = Integer(){n}{n}{t}Total = Integer(){n}{n}{t}count2 = Integer(){n}{n}{t}Lim2 = Integer(){n}{n}{t}Total2 = Integer(){n}{t}Lim = GetAllCopies(IA177){n}{t}count = 1{n}{t}Total = 0{n}{t}while count <= Lim:{n}{t}{t}if get_currency(IA177.CYAdoptionTaxCr, count) > 0 and get_bool(IA177.Taxpayer, count) == True:{n}{t}{t}{t}Total = Total + 1{n}{t}{t}else:{n}{t}{t}{t}Total = Total{n}{t}{t}count = count + 1{n}{t}Lim2 = GetAllCopies(IA177){n}{t}count2 = 1{n}{t}Total2 = 0{n}{t}while count2 <= Lim2:{n}{t}{t}if get_currency(IA177.CYAdoptionTaxCr, count) > 0 and get_bool(IA177.Spouse, count2) == True:{n}{t}{t}{t}Total2 = Total2 + 1{n}{t}{t}else:{n}{t}{t}{t}Total2 = Total2{n}{t}{t}count2 = count2 + 1{n}{t}if get_currency(IASCHA.TotAdoptAmt) > 0:{n}{t}{t}if Total > 0:{n}{t}{t}{t}return 1{n}{t}{t}elif Total2 > 0 and get_bool(IAF1040.CombMFS) == True:{n}{t}{t}{t}return 1{n}{t}{t}else:{n}{t}{t}{t}return 0{n}{t}else:{n}{t}{t}return 0{n}{n}
def Alert70_Calculation():{n}{t}count = Variant(){n}{n}{t}Iter = Integer(){n}{t}count = 0{n}{t}Iter = 0{n}{t}while Iter < 5:{n}{t}{t}if get_currency(IASCHA.AdoptAmt(Iter)) > 0 and trim(get_string(IASCHA.AdoptExp(Iter))) == '':{n}{t}{t}{t}count = count + 1{n}{t}{t}Iter = Iter + 1{n}{t}if get_bool(IAF1040.ItemCheck) == True and get_currency(IASCHA.AllowAdopt) > 0 and count > 0:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def Alert80_Calculation():{n}{t}if get_currency(IAWSCHAPRINT.GamblingLoss) >  ( get_currency(IAF1040.BGamble) + get_currency(IAF1040.AGamble) ) :{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def Alert85_Calculation():{n}{t}if get_bool(IAF1040.ItemCheck) == True:{n}{t}{t}if get_currency(IASCHA.OthTax) != 0 and trim(get_string(IASCHA.OthList)) == '':{n}{t}{t}{t}return 1{n}{t}{t}else:{n}{t}{t}{t}return 0{n}{t}else:{n}{t}{t}return 0{n}{n}
def AllowAdopt_Calculation():{n}{t}return max_value(0, get_currency(IASCHA.TotAdoptAmt) - get_currency(IASCHA.AdoptSub)){n}{n}
def AllowExp_Calculation():{n}{t}return max_value(0, get_currency(IASCHA.Expense) - get_currency(IASCHA.Mult)){n}{n}
def CombOthExpDesc_Calculation():{n}{t}return get_string(IASCHA.OthExpDesc(0)) + ' ' + get_string(IASCHA.OthExpDesc(1)) + ' ' + get_string(IASCHA.OthExpDesc(2)) + ' ' + get_string(IASCHA.OthExpDesc(3)) + ' ' + get_string(IASCHA.OthExpDesc(4)) + ' ' + get_string(IASCHA.OthExpDesc(5)) + ' ' + get_string(IASCHA.OthExpDesc(6)) + ' ' + get_string(IASCHA.OthExpDesc(7)) + ' ' + get_string(IASCHA.OthExpDesc(8)) + ' ' + get_string(IASCHA.OthExpDesc(9)) + ' ' + get_string(IASCHA.OthExpDesc(10)) + ' ' + get_string(IASCHA.OthExpDesc(11)) + ' ' + get_string(IASCHA.OthExpDesc(12)) + ' ' + get_string(IASCHA.OthExpDesc(13)) + ' ' + get_string(IASCHA.OthExpDesc(14)) + ' ' + get_string(IASCHA.OthExpDesc(15)) + ' ' + get_string(IASCHA.OthExpDesc(16)) + ' ' + get_string(IASCHA.OthExpDesc(17)) + ' ' + get_string(IASCHA.OthExpDesc(18)) + ' ' + get_string(IASCHA.OthExpDesc(19)) + ' ' + get_string(IASCHA.OthExpDesc(20)) + ' ' + get_string(IASCHA.OthExpDesc(21)) + ' ' + get_string(IASCHA.OthExpDesc(22)) + ' ' + get_string(IASCHA.OthExpDesc(23)) + ' ' + get_string(IASCHA.OthExpDesc(24)){n}{n}
def CombOthMiscDesc_Calculation():{n}{t}return get_string(IASCHA.OthMiscDesc(0)) + ' ' + get_string(IASCHA.OthMiscDesc(1)) + ' ' + get_string(IASCHA.OthMiscDesc(2)) + ' ' + get_string(IASCHA.OthMiscDesc(3)) + ' ' + get_string(IASCHA.OthMiscDesc(4)) + ' ' + get_string(IASCHA.OthMiscDesc(5)) + ' ' + get_string(IASCHA.OthMiscDesc(6)) + ' ' + get_string(IASCHA.OthMiscDesc(7)) + ' ' + get_string(IASCHA.OthMiscDesc(8)) + ' ' + get_string(IASCHA.OthMiscDesc(9)){n}{n}
def Contrib_Calculation():{n}{t}return max_value(0, get_currency(IASCHA.TotContrib) - get_currency(IASCHA.IAAdjContrib)){n}{n}
def Description_Calculation():{n}{t}return CStr(get_currency(IASCHA.Item)) + ' Itemized Deductions'{n}{n}
def Exist_Calculation():{n}{t}return 1{n}{n}
def Expense_Calculation():{n}{t}return get_currency(IASCHA.Unreimb) + get_currency(IASCHA.TaxFee) + get_currency(IASCHA.OthExp){n}{n}
def GenSales_Calculation():{n}{t}#Iowa expanded instructions can only claim gen sales tax if itemize federally and elect to claim gen sales on fed. Leave calced.{n}{t}if get_bool(USWRec.ItmDdn) == True and get_bool(USWResidency.F1040NR) == False:{n}{t}{t}return get_bool(USSchA.GenSales){n}{t}else:{n}{t}{t}return 0{n}{n}
def Gifts_Calculation():{n}{t}return max_value(0, get_currency(IASCHA.TotNonCash) - get_currency(IASCHA.IAAdjNonCash)){n}{n}
def Header1_Calculation():{n}{t}return 'IA 1040 Schedule A - Itemized Deductions - Line 21 Attachment'{n}{n}
def IAAGI_Calculation():{n}{t}return get_currency(IAREQUIRED.IAAGI){n}{n}
def IATax_Calculation():{n}{t}IAWHEst = Currency(){n}{n}{t}OthIAWH = Currency(){n}{t}IAWHEst = get_currency(IAREQUIRED.TotIAW2WH) + get_currency(IAREQUIRED.TotW2GWH) + get_currency(IAREQUIRED.Tot1042S) + get_currency(IAREQUIRED.TotCapGainWH) + get_currency(IAREQUIRED.TotDivWH) + get_currency(IAREQUIRED.TotUnemWH) + get_currency(IAREQUIRED.TotIntWH) + get_currency(IAREQUIRED.TotKWH) + get_currency(IAREQUIRED.TotMiscWH) + get_currency(IAREQUIRED.TotOIDWH) + get_currency(IAREQUIRED.Tot1099rWH) + get_currency(IAREQUIRED.TotOthIncWH) + get_currency(IAREQUIRED.TotCyLocEst) + get_currency(IAREQUIRED.TotCYIAEst){n}{t}if get_bool(USWResidency.F1040NR) == False:{n}{t}{t}OthIAWH = get_currency(USSchA.StateWH3) + get_currency(USSchA.StateWH4) + get_currency(USSchA.StateWH5){n}{t}else:{n}{t}{t}OthIAWH = get_currency(USSchANR.StateWH3) + get_currency(USSchANR.StateWH4) + get_currency(USSchANR.StateWH5){n}{t}if get_bool(IAF126.TpPYNR) == True or get_bool(IAF126.SpPYNR) == True:{n}{t}{t}return IAWHEst{n}{t}else:{n}{t}{t}return min_value(get_currency(IASCHA.TotStTax), IAWHEst + OthIAWH){n}{n}
def Income_Calculation():{n}{t}if get_bool(IASCHA.GenSales) == True:{n}{t}{t}return 0{n}{t}else:{n}{t}{t}return 1{n}{n}
def Invest_Calculation():{n}{t}return get_currency(USSchA.InvInt){n}{n}
def Item_Calculation():{n}{t}return get_currency(IASCHA.TotDeductions) + get_currency(IASCHA.TotOthDed){n}{n}
def ListExp_Calculation():{n}{t}if get_currency(IASCHA.OthExp) != 0:{n}{t}{t}return get_string(IASCHA.Ln21SeeAtt){n}{t}else:{n}{t}{t}return ''{n}{n}
def ListMisc_Calculation():{n}{t}if get_currency(IASCHA.OthMisc) != 0:{n}{t}{t}return get_string(IASCHA.OthMiscDesc(0)) + ' ' + get_string(IASCHA.OthMiscDesc(1)) + ' ' + get_string(IASCHA.OthMiscDesc(2)) + ' ' + get_string(IASCHA.OthMiscDesc(3)) + ' ' + get_string(IASCHA.OthMiscDesc(4)){n}{t}else:{n}{t}{t}return ''{n}{n}
def Ln21SeeAtt_Calculation():{n}{t}if get_currency(IASCHA.OthLn21Amt(1)) != 0:{n}{t}{t}return 'See Attached'{n}{t}else:{n}{t}{t}return get_string(IASCHA.OthExpDesc(0)){n}{n}
def MedDed_Calculation():{n}{t}if get_bool(USWResidency.F1040NR) == False:{n}{t}{t}return max_value(0, get_currency(IASCHA.MedExp) - get_currency(IASCHA.AGI)){n}{t}else:{n}{t}{t}return 0{n}{n}
def MedExp_Calculation():{n}{t}HealthInsDed = Currency(){n}{t}#removed the prior year excess advanced PTC from the HealthInsDed since should not offset current year medical expenses{n}{t}#adjusted medical expense calc for PTC adjustment if claiming on IA 1040 line 18 (if not claiming on line 18 should follow federal treatment of PTC, if on 18 PTC handled on IA 1040){n}{t}#change was made based on US 433238 see also CSS ticket 8605571{n}{t}HealthInsDed = get_currency(IAWHEALTH.TPInsPrem) + get_currency(IAWHEALTH.TPMedicare) + get_currency(IAWHEALTH.TPLTC) + get_currency(IAWHEALTH.SPInsPrem) + get_currency(IAWHEALTH.SPMedicare) + get_currency(IAWHEALTH.SPLTC){n}{t}if get_bool(USWResidency.F1040NR) == False:{n}{t}{t}if ( get_currency(IAWHEALTH.TPInsPrem) + get_currency(IAWHEALTH.SPInsPrem) )  == 0:{n}{t}{t}{t}return max_value(0, get_currency(USSchA.MedExp) - HealthInsDed){n}{t}{t}else:{n}{t}{t}{t}return max_value(0, max_value(0, get_currency(USSchA.MedExp) + get_currency(USWMedicalWS.PTCAdj)) - HealthInsDed){n}{t}else:{n}{t}{t}return 0{n}{n}
def Mort_Calculation():{n}{t}return get_currency(IASCHA.MortFed) + get_currency(IASCHA.MortAdj){n}{n}
def MortAdj_Calculation():{n}{t}if get_bool(USWResidency.F1040NR) == True:{n}{t}{t}return 0{n}{t}else:{n}{t}{t}return get_currency(USD1098.StateAdj){n}{n}
def MortFed_Calculation():{n}{t}if get_bool(USWResidency.F1040NR) == False:{n}{t}{t}return get_currency(USSchA.MortInt) + get_currency(USF8396.CrInt){n}{t}else:{n}{t}{t}return 0{n}{n}
def MortNot_Calculation():{n}{t}return get_currency(USSchA.Sfm){n}{n}
def MtgePrem_Calculation():{n}{t}return get_currency(USSchA.MtgePrem){n}{n}
def Mult_Calculation():{n}{t}if get_currency(IASCHA.Expense) > 0:{n}{t}{t}return max_value(0, c_dollar(get_float(IASCHA.IAAGI) * 0.02)){n}{t}else:{n}{t}{t}return 0{n}{n}
def Names_Calculation():{n}{t}return get_string(IAREQUIRED.CombNames){n}{n}
def OthExp_Calculation():{n}{t}return get_currency(IAWSCHAPRINT.TotExp){n}{n}
def OthExpDesc_Calculation(Index):{n}{t}count = Integer(){n}{n}{t}Hold = String(){n}{t}count = 0{n}{t}Hold = ''{n}{t}if get_currency(IAWSCHAPRINT.Legal) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Legal Fees - Taxable Income'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWSCHAPRINT.OthLegal) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Other Legal Fees'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWSCHAPRINT.Clerical) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Clerical Help'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWSCHAPRINT.Custodial) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Custodial/Investment Fees'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWSCHAPRINT.Invest) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Investment Expenses Form 1099s'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWSCHAPRINT.InsolventLoss) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Insolvent Losses'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWSCHAPRINT.CasualtyLoss) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Form 4684'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWSCHAPRINT.Appraisal) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Appraisal Fees'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWSCHAPRINT.DeprTot) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Depreciation Computer'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWSCHAPRINT.Amort) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Amortization'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWSCHAPRINT.ExcessDed) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Excess K-1 Ded'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWSCHAPRINT.Fees) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Fees to Collect'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWSCHAPRINT.Hobby) != 0 and get_bool(USWResidency.F1040NR) == False:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Hobby Expenses'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWSCHAPRINT.Indirect) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Indirect Pass-through'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWSCHAPRINT.REMIC) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'REMIC'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWSCHAPRINT.IRALoss) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'IRA Loss'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWSCHAPRINT.RepayInc) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Income Repay'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWSCHAPRINT.RepaySSB) != 0 and get_bool(USWResidency.F1040NR) == False:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'SSB Repay'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWSCHAPRINT.SafeBox) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Safe Deposit'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWSCHAPRINT.ServiceCharge) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Service Charges Div'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWSCHAPRINT.TaxAdvice) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Tax Advice'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWSCHAPRINT.Trustee) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Trustee\'s Fees IRA'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWSCHAPRINT.CreditFees) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Convenience Fee'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWSCHAPRINT.OthExp) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_string(IAWSCHAPRINT.OtherText){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWSCHAPRINT.OthExp2) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_string(IAWSCHAPRINT.OtherText2){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}return Hold{n}{n}
def OthList_Calculation():{n}{t}if get_bool(USWResidency.F1040NR) == False:{n}{t}{t}return get_string(USSchA.OtherTaxType){n}{t}else:{n}{t}{t}return ''{n}{n}
def OthLn21Amt_Calculation(Index):{n}{t}count = Integer(){n}{n}{t}Hold = Currency(){n}{t}count = 0{n}{t}Hold = 0{n}{t}if get_currency(IAWSCHAPRINT.Legal) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAWSCHAPRINT.Legal){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWSCHAPRINT.OthLegal) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAWSCHAPRINT.OthLegal){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWSCHAPRINT.Clerical) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAWSCHAPRINT.Clerical){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWSCHAPRINT.Custodial) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAWSCHAPRINT.Custodial){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWSCHAPRINT.Invest) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAWSCHAPRINT.Invest){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWSCHAPRINT.InsolventLoss) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAWSCHAPRINT.InsolventLoss){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWSCHAPRINT.CasualtyLoss) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAWSCHAPRINT.CasualtyLoss){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWSCHAPRINT.Appraisal) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAWSCHAPRINT.Appraisal){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWSCHAPRINT.DeprTot) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAWSCHAPRINT.DeprTot){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWSCHAPRINT.Amort) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAWSCHAPRINT.Amort){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWSCHAPRINT.ExcessDed) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAWSCHAPRINT.ExcessDed){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWSCHAPRINT.Fees) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAWSCHAPRINT.Fees){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWSCHAPRINT.Hobby) != 0 and get_bool(USWResidency.F1040NR) == False:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAWSCHAPRINT.Hobby){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWSCHAPRINT.Indirect) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAWSCHAPRINT.Indirect){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWSCHAPRINT.REMIC) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAWSCHAPRINT.REMIC){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWSCHAPRINT.IRALoss) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAWSCHAPRINT.IRALoss){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWSCHAPRINT.RepayInc) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAWSCHAPRINT.RepayInc){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWSCHAPRINT.RepaySSB) != 0 and get_bool(USWResidency.F1040NR) == False:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAWSCHAPRINT.RepaySSB){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWSCHAPRINT.SafeBox) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAWSCHAPRINT.SafeBox){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWSCHAPRINT.ServiceCharge) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAWSCHAPRINT.ServiceCharge){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWSCHAPRINT.TaxAdvice) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAWSCHAPRINT.TaxAdvice){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWSCHAPRINT.Trustee) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAWSCHAPRINT.Trustee){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWSCHAPRINT.CreditFees) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAWSCHAPRINT.CreditFees){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWSCHAPRINT.OthExp) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAWSCHAPRINT.OthExp){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWSCHAPRINT.OthExp2) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAWSCHAPRINT.OthExp2){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}return Hold{n}{n}
def OthMisc_Calculation():{n}{t}return max_value(0, get_currency(IASCHA.TotOthMisc) + get_currency(IASCHA.IAAdjOthMisc)){n}{n}
def OthMiscDesc_Calculation(Index):{n}{t}count = Integer(){n}{n}{t}Hold = String(){n}{t}count = 0{n}{t}Hold = ''{n}{t}if get_currency(IAWSCHAPRINT.Form4684) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Casualty and theft loss'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWSCHAPRINT.GamblingLoss) != 0 and get_bool(USWResidency.F1040NR) == False:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Gambling losses'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWSCHAPRINT.K1DedPort) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Schedule K-1'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWSCHAPRINT.ImpWrkExp) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Impairment-related work expenses'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWSCHAPRINT.TotEstK1) != 0 and get_bool(USWResidency.F1040NR) == False:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Federal estate tax'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWSCHAPRINT.Repay) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Claim repayments'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWSCHAPRINT.Bond) != 0 and get_bool(USWResidency.F1040NR) == False:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Amortizable bond premiums'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWSCHAPRINT.Pension) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Unrecovered pension investments'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWSCHAPRINT.Debt) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Ordinary loss'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IASCHA.IAAdjOthMisc) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_string(IASCHA.IAAdjOthMiscDesc){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}return Hold{n}{n}
def OthTax_Calculation():{n}{t}#review to 
def Over_Calculation():{n}{t}return get_currency(IAWCONTLIMIT.PYTot){n}{t}#If get_bool(USWResidency.F1040NR) = False Then{n}{t}#{t}return get_currency(USSchA.Carry){n}{t}#Else{n}{t}#{t}return get_currency(USSchANR.Carry){n}{t}#End If{n}{n}
def Perc_Calculation():{n}{t}TopLim = Double(){n}{t}if get_currency(IASCHA.YouNet) < 0 and get_currency(IASCHA.SpNet) < 0:{n}{t}{t}if get_currency(IASCHA.YouNet) < get_currency(IASCHA.SpNet):{n}{t}{t}{t}return 0{n}{t}{t}else:{n}{t}{t}{t}return 1{n}{t}elif get_currency(IASCHA.YouNet) < 0:{n}{t}{t}return 0{n}{t}elif get_currency(IASCHA.YouNet) > 0 and get_currency(IASCHA.TotNet) <= 0:{n}{t}{t}return 1{n}{t}elif get_currency(IASCHA.TotNet) == 0:{n}{t}{t}return 0{n}{t}else:{n}{t}{t}TopLim = min_value(1, Round(get_float(IASCHA.YouNet) / get_float(IASCHA.TotNet), 3)){n}{t}{t}return max_value(0, TopLim){n}{n}
def PrintSchA_Calculation():{n}{t}if get_bool(IAREQUIRED.LowInc) == True:{n}{t}{t}return 0{n}{t}else:{n}{t}{t}return get_number(IAF1040.ItemCheck){n}{n}
def PrLn21SeeAtt_Calculation():{n}{t}if get_currency(IASCHA.OthLn21Amt(1)) != 0 and get_number(IASCHA.PrintSchA) == 1:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def Prop_Calculation():{n}{t}return get_currency(USSchA.PerPropTax){n}{n}
def PtsNot_Calculation():{n}{t}return get_currency(USSchA.Points){n}{n}
def RealEst_Calculation():{n}{t}return get_currency(USSchA.RealTax){n}{n}
def SalesTax_Calculation():{n}{t}return get_currency(USSchA.SalesTax){n}{n}
def SchAMilesDed_Calculation():{n}{t}Con1 = Currency(){n}{t}#per fed, no change for 2018 remains at 14 cents{n}{t}if get_bool(USWResidency.F1040NR) == False:{n}{t}{t}Con1 = c_dollar(get_float(USSchA.ConMiles) * 14){n}{t}else:{n}{t}{t}Con1 = c_dollar(get_float(USSchANR.ConMiles) * 14){n}{t}return Con1{n}{n}
def SchoolTax_Calculation():{n}{t}if get_bool(IAF1040.MFJ) == True or get_bool(IAF1040.CombMFS) == True:{n}{t}{t}return get_currency(USZIA1040.IAPYSurtaxA) + get_currency(USZIA1040.IAPYSurtaxB){n}{t}else:{n}{t}{t}return get_currency(USZIA1040.IAPYSurtaxA){n}{n}
def SpNet_Calculation():{n}{t}if get_bool(IAF1040.CombMFS) == True or get_bool(IAF1040.MFS) == True:{n}{t}{t}return get_currency(IAF1040.BNet){n}{t}else:{n}{t}{t}return 0{n}{n}
def SpPro_Calculation():{n}{t}if get_bool(IAF1040.CombMFS) == True or get_bool(IAF1040.MFS) == True:{n}{t}{t}return max_value(0, get_currency(IASCHA.Item) - get_currency(IASCHA.YouPC)){n}{t}else:{n}{t}{t}return 0{n}{n}
def SSN_Calculation():{n}{t}return get_string(IAF1040.SSN){n}{n}
def StTax_Calculation():{n}{t}if get_bool(IASCHA.GenSales) == True:{n}{t}{t}return get_currency(IASCHA.SalesTax){n}{t}else:{n}{t}{t}return get_currency(IASCHA.TotIncTax){n}{n}
def TaxFee_Calculation():{n}{t}return 0{n}{t}#If get_bool(USWResidency.F1040NR) = False Then{n}{t}#{t}return get_currency(USSchA.TaxPrep){n}{t}#Else{n}{t}#{t}return get_currency(USSchANR.TaxPrep){n}{t}#End If{n}{n}
def TaxPd_Calculation():{n}{t}return get_currency(IASCHA.StTax) + get_currency(IASCHA.RealEst) + get_currency(IASCHA.Prop) + get_currency(IASCHA.OthTax){n}{n}
def Theft_Calculation():{n}{t}return get_currency(IA4684.SctATot){n}{n}
def TotAdoptAmt_Calculation():{n}{t}return get_currency(IASCHA.AdoptAmt(0)) + get_currency(IASCHA.AdoptAmt(1)) + get_currency(IASCHA.AdoptAmt(2)) + get_currency(IASCHA.AdoptAmt(3)) + get_currency(IASCHA.AdoptAmt(4)){n}{n}
def TotContrib_Calculation():{n}{t}if get_bool(USWResidency.F1040NR) == False:{n}{t}{t}return get_currency(USSchA.Cash){n}{t}else:{n}{t}{t}return get_currency(USSchANR.Cash){n}{n}
def TotDeductions_Calculation():{n}{t}Limit = Currency(){n}{t}# updated for 2018 - RJ{n}{t}if FedFS() == 1:{n}{t}{t}Limit = Decimal("266700"){n}{t}elif FedFS() == 3:{n}{t}{t}Limit = Decimal("160000"){n}{t}elif FedFS() == 4:{n}{t}{t}Limit = Decimal("293350"){n}{t}else:{n}{t}{t}Limit = Decimal("320000"){n}{t}if get_currency(IASCHA.IAAGI) > Limit:{n}{t}{t}return get_currency(IAWITMDED.LimitDed){n}{t}else:{n}{t}{t}return get_currency(IASCHA.OthMisc) + get_currency(IASCHA.AllowExp) + get_currency(IASCHA.Theft) + get_currency(IASCHA.TotGifts) + get_currency(IASCHA.TotInt) + get_currency(IASCHA.TaxPd) + get_currency(IASCHA.MedDed){n}{n}
def TotDisableAmt_Calculation():{n}{t}TotDisable = Currency(){n}{t}TotDisable = get_currency(IASCHA.DisableAmt(0)) + get_currency(IASCHA.DisableAmt(1)) + get_currency(IASCHA.DisableAmt(2)) + get_currency(IASCHA.DisableAmt(3)) + get_currency(IASCHA.DisableAmt(4)){n}{t}return min_value(Decimal("5000"), TotDisable){n}{n}
def TotGifts_Calculation():{n}{t}return get_currency(IAWCONTLIMIT.CYTotAfter){n}{n}
def TotIncTax_Calculation():{n}{t}return max_value(0, get_currency(IASCHA.TotStTax) + get_currency(IASCHA.SchoolTax) - get_currency(IASCHA.IATax)){n}{n}
def TotInt_Calculation():{n}{t}return get_currency(IASCHA.Mort) + get_currency(IASCHA.MortNot) + get_currency(IASCHA.PtsNot) + get_currency(IASCHA.Invest){n}{n}
def TotMilesDed_Calculation():{n}{t}Con1 = Currency(){n}{t}if get_bool(USWResidency.F1040NR) == False:{n}{t}{t}Con1 = c_dollar(get_float(USSchA.ConMiles) * 39){n}{t}else:{n}{t}{t}Con1 = c_dollar(get_float(USSchANR.ConMiles) * 39){n}{t}return Con1{n}{n}
def TotNet_Calculation():{n}{t}return get_currency(IASCHA.SpNet) + get_currency(IASCHA.YouNet){n}{n}
def TotNonCash_Calculation():{n}{t}if get_bool(USWResidency.F1040NR) == False:{n}{t}{t}return get_currency(USSchA.NonCash){n}{t}else:{n}{t}{t}return get_currency(USSchANR.NonCash){n}{n}
def TotOthDed_Calculation():{n}{t}return get_currency(IASCHA.TotDisableAmt) + get_currency(IASCHA.AllowAdopt) + get_currency(IASCHA.AddMilesDed){n}{n}
def TotOthMisc_Calculation():{n}{t}return get_currency(IAWSCHAPRINT.TotOthDed){n}{n}
def TotStTax_Calculation():{n}{t}if get_bool(USWResidency.F1040NR) == False:{n}{t}{t}return max_value(0, get_currency(USSchA.StateWH1) + get_currency(USSchA.StateWH2) + get_currency(USSchA.LocalWH) + get_currency(USSchA.StateWH3) + get_currency(USSchA.StateWH4) + get_currency(USSchA.StateWH5) - get_currency(USSchA.WHOff)){n}{t}else:{n}{t}{t}return max_value(0, get_currency(USSchANR.StateWH1) + get_currency(USSchANR.StateWH2) + get_currency(USSchANR.LocalWH) + get_currency(USSchANR.StateWH3) + get_currency(USSchANR.StateWH4) + get_currency(USSchANR.StateWH5) - get_currency(USSchANR.WHOff)){n}{n}
def Unreimb_Calculation():{n}{t}return get_currency(IAWSCHAPRINT.TotOtherExp){n}{n}
def YouNet_Calculation():{n}{t}if get_bool(IAF1040.CombMFS) == True or get_bool(IAF1040.MFS) == True:{n}{t}{t}return get_currency(IAF1040.ANet){n}{t}else:{n}{t}{t}return 0{n}{n}
def YouPC_Calculation():{n}{t}return c_dollar(get_float(IASCHA.Perc) * get_float(IASCHA.Item)){n}{n}def AccMktDiscIntCopies_Calculation():{n}{t}TPAccMktDiscInt = Integer(){n}{n}{t}SPAccMktDiscInt = Integer(){n}{n}{t}JTAccMktDiscInt = Integer(){n}{t}if get_currency(IASCHB.TPAccMktDiscInt) > 0:{n}{t}{t}TPAccMktDiscInt = 1{n}{t}else:{n}{t}{t}TPAccMktDiscInt = 0{n}{t}if get_currency(IASCHB.SPAccMktDiscInt) > 0:{n}{t}{t}SPAccMktDiscInt = 1{n}{t}else:{n}{t}{t}SPAccMktDiscInt = 0{n}{t}if get_currency(IASCHB.JtAccMktDiscInt) > 0:{n}{t}{t}JTAccMktDiscInt = 1{n}{t}else:{n}{t}{t}JTAccMktDiscInt = 0{n}{t}return TPAccMktDiscInt + SPAccMktDiscInt + JTAccMktDiscInt{n}{n}
def ContigentPayCopies_Calculation():{n}{t}TPContigentPay = Integer(){n}{n}{t}SPContigentPay = Integer(){n}{n}{t}JTContigentPay = Integer(){n}{t}if get_currency(IASCHB.TPContigentPay) > 0:{n}{t}{t}TPContigentPay = 1{n}{t}else:{n}{t}{t}TPContigentPay = 0{n}{t}if get_currency(IASCHB.SPContigentPay) > 0:{n}{t}{t}SPContigentPay = 1{n}{t}else:{n}{t}{t}SPContigentPay = 0{n}{t}if get_currency(IASCHB.JtContigentPay) > 0:{n}{t}{t}JTContigentPay = 1{n}{t}else:{n}{t}{t}JTContigentPay = 0{n}{t}return TPContigentPay + SPContigentPay + JTContigentPay{n}{n}
def CrBP11_Calculation():{n}{t}if get_number(IASCHB.TotINTCopies) > 226:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def CrBP12_Calculation():{n}{t}if get_number(IASCHB.TotINTCopies) > 248:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def CrBP1_Calculation():{n}{t}if get_number(IASCHB.TotINTCopies) > 7:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def CrBP10_Calculation():{n}{t}if get_number(IASCHB.TotINTCopies) > 204:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def CrBP2_Calculation():{n}{t}if get_number(IASCHB.TotINTCopies) > 28:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def CrBP3_Calculation():{n}{t}if get_number(IASCHB.TotINTCopies) > 50:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def CrBP4_Calculation():{n}{t}if get_number(IASCHB.TotINTCopies) > 72:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def CrBP5_Calculation():{n}{t}if get_number(IASCHB.TotINTCopies) > 94:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def CrBP6_Calculation():{n}{t}if get_number(IASCHB.TotINTCopies) > 116:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def CrBP7_Calculation():{n}{t}if get_number(IASCHB.TotINTCopies) > 138:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def CrBP8_Calculation():{n}{t}if get_number(IASCHB.TotINTCopies) > 160:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def CrBP9_Calculation():{n}{t}if get_number(IASCHB.TotINTCopies) > 182:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def CrBPDiv10_Calculation():{n}{t}if get_number(IASCHB.TotDIVCopies) > 204:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def CrBPDiv11_Calculation():{n}{t}if get_number(IASCHB.TotDIVCopies) > 226:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def CrBPDiv1_Calculation():{n}{t}if get_number(IASCHB.TotDIVCopies) > 7:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def CrBPDiv2_Calculation():{n}{t}if get_number(IASCHB.TotDIVCopies) > 28:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def CrBPDiv3_Calculation():{n}{t}if get_number(IASCHB.TotDIVCopies) > 50:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def CrBPDiv4_Calculation():{n}{t}if get_number(IASCHB.TotDIVCopies) > 72:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def CrBPDiv5_Calculation():{n}{t}if get_number(IASCHB.TotDIVCopies) > 94:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def CrBPDiv6_Calculation():{n}{t}if get_number(IASCHB.TotDIVCopies) > 116:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def CrBPDiv7_Calculation():{n}{t}if get_number(IASCHB.TotDIVCopies) > 138:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def CrBPDiv8_Calculation():{n}{t}if get_number(IASCHB.TotDIVCopies) > 160:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def CrBPDiv9_Calculation():{n}{t}if get_number(IASCHB.TotDIVCopies) > 182:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def Desc_Calculation():{n}{t}return get_string(IAREQUIRED.CombNames){n}{n}
def DivAcctOwner_Calculation(Index):{n}{t}if get_bool(IASCHB.DTp1(Index)) == True:{n}{t}{t}return 'Taxpayer'{n}{t}elif get_bool(IASCHB.DSp1(Index)) == True:{n}{t}{t}return 'Spouse'{n}{t}elif get_bool(IASCHB.DJ1(Index)) == True:{n}{t}{t}return 'Joint'{n}{t}else:{n}{t}{t}return ''{n}{n}
def Dividend_Calculation(Index):{n}{t}Stuff = Integer(){n}{n}{t}DIV = Integer(){n}{n}{t}PartK1 = Integer(){n}{n}{t}SCorpK1 = Integer(){n}{n}{t}EstK1 = Integer(){n}{n}{t}F5471 = Integer(){n}{n}{t}F8621 = Integer(){n}{n}{t}F8814 = Integer(){n}{t}DIV = get_number(IAWBBUMP.DIVNbr){n}{t}PartK1 = get_number(IAWBBUMP.PartK1DivNbr){n}{t}SCorpK1 = get_number(IAWBBUMP.SCorpK1DivNbr){n}{t}EstK1 = get_number(IAWBBUMP.EstK1DivNbr){n}{t}F5471 = get_number(IAWBBUMP.F5471Nbr){n}{t}F8621 = get_number(IAWBBUMP.F8621Nbr){n}{t}F8814 = get_number(IAWBBUMP.F8814Nbr){n}{t}if Index == 6 and get_number(IASCHB.TotDIVCopies) > 7:{n}{t}{t}return get_currency(IAWBPDIV.TotalDividend){n}{t}elif DIV > Index:{n}{t}{t}return Round(get_currency(USD1099DIV.ORDDIV, get_number(IAWBBUMP.DIV(Index)))) + Round(get_currency(USD1099DIV.FedExmpt, get_number(IAWBBUMP.DIV(Index)))){n}{t}elif DIV + PartK1 > Index:{n}{t}{t}Stuff = ( Index )  - DIV{n}{t}{t}return get_currency(USDPartK1.Dividends, ( get_number(IAWBBUMP.PartK1Div(Stuff)) )){n}{t}elif DIV + PartK1 + SCorpK1 > Index:{n}{t}{t}Stuff = ( Index )  - DIV - PartK1{n}{t}{t}return get_currency(USDSCorpK1.Dividends, ( get_number(IAWBBUMP.SCorpK1Div(Stuff)) )){n}{t}elif DIV + PartK1 + SCorpK1 + EstK1 > Index:{n}{t}{t}Stuff = ( Index )  - DIV - PartK1 - SCorpK1{n}{t}{t}return get_currency(USDEstK1.Dividends, ( get_number(IAWBBUMP.EstK1Div(Stuff)) )){n}{t}elif DIV + PartK1 + SCorpK1 + EstK1 + F5471 > Index:{n}{t}{t}Stuff = ( Index )  - DIV - PartK1 - SCorpK1 - EstK1{n}{t}{t}return get_currency(USW5471SchI.DivOrd, ( get_number(IAWBBUMP.F5471(Stuff)) )){n}{t}elif DIV + PartK1 + SCorpK1 + EstK1 + F5471 + F8621 > Index:{n}{t}{t}Stuff = ( Index )  - DIV - PartK1 - SCorpK1 - EstK1 - F5471{n}{t}{t}return get_currency(USF8621.DivTo1040, ( get_number(IAWBBUMP.F8621(Stuff)) )){n}{t}elif DIV + PartK1 + SCorpK1 + EstK1 + F5471 + F8621 + F8814 > Index:{n}{t}{t}Stuff = ( Index )  - DIV - PartK1 - SCorpK1 - EstK1 - F5471 - F8621{n}{t}{t}return get_currency(USF8814.L6XL7, ( get_number(IAWBBUMP.F8814(Stuff)) )){n}{t}else:{n}{t}{t}return 0{n}{n}
def DivPayer_Calculation(Index):{n}{t}Stuff = Integer(){n}{n}{t}DIV = Integer(){n}{n}{t}PartK1 = Integer(){n}{n}{t}SCorpK1 = Integer(){n}{n}{t}EstK1 = Integer(){n}{n}{t}F5471 = Integer(){n}{n}{t}F8621 = Integer(){n}{n}{t}F8814 = Integer(){n}{t}DIV = get_number(IAWBBUMP.DIVNbr){n}{t}PartK1 = get_number(IAWBBUMP.PartK1DivNbr){n}{t}SCorpK1 = get_number(IAWBBUMP.SCorpK1DivNbr){n}{t}EstK1 = get_number(IAWBBUMP.EstK1DivNbr){n}{t}F5471 = get_number(IAWBBUMP.F5471Nbr){n}{t}F8621 = get_number(IAWBBUMP.F8621Nbr){n}{t}F8814 = get_number(IAWBBUMP.F8814Nbr){n}{t}if Index == 6 and get_number(IASCHB.TotDIVCopies) > 7:{n}{t}{t}return 'See Statement Attached'{n}{t}elif DIV > Index:{n}{t}{t}return get_string(USD1099DIV.PayerName, get_number(IAWBBUMP.DIV(Index))){n}{t}elif DIV + PartK1 > Index:{n}{t}{t}Stuff = ( Index )  - DIV{n}{t}{t}return get_string(USDPartK1.CoName, ( get_number(IAWBBUMP.PartK1Div(Stuff)) )){n}{t}elif DIV + PartK1 + SCorpK1 > Index:{n}{t}{t}Stuff = ( Index )  - DIV - PartK1{n}{t}{t}return get_string(USDSCorpK1.CoName, ( get_number(IAWBBUMP.SCorpK1Div(Stuff)) )){n}{t}elif DIV + PartK1 + SCorpK1 + EstK1 > Index:{n}{t}{t}Stuff = ( Index )  - DIV - PartK1 - SCorpK1{n}{t}{t}return get_string(USDEstK1.TrustName, ( get_number(IAWBBUMP.EstK1Div(Stuff)) )){n}{t}elif DIV + PartK1 + SCorpK1 + EstK1 + F5471 > Index:{n}{t}{t}Stuff = ( Index )  - DIV - PartK1 - SCorpK1 - EstK1{n}{t}{t}return 'Form 5471'{n}{t}elif DIV + PartK1 + SCorpK1 + EstK1 + F5471 + F8621 > Index:{n}{t}{t}Stuff = ( Index )  - DIV - PartK1 - SCorpK1 - EstK1 - F5471{n}{t}{t}return 'Form 8621 - ' + get_string(USF8621.CoName, ( get_number(IAWBBUMP.F8621(Stuff)) )){n}{t}elif DIV + PartK1 + SCorpK1 + EstK1 + F5471 + F8621 + F8814 > Index:{n}{t}{t}Stuff = ( Index )  - DIV - PartK1 - SCorpK1 - EstK1 - F5471 - F8621{n}{t}{t}return 'Form 8814 - ' + get_string(USF8814.ChName, ( get_number(IAWBBUMP.F8814(Stuff)) )){n}{t}else:{n}{t}{t}return ''{n}{n}
def DJ1_Calculation(Index):{n}{t}Stuff = Integer(){n}{n}{t}DIV = Integer(){n}{n}{t}PartK1 = Integer(){n}{n}{t}SCorpK1 = Integer(){n}{n}{t}EstK1 = Integer(){n}{n}{t}F5471 = Integer(){n}{n}{t}F8621 = Integer(){n}{n}{t}F8814 = Integer(){n}{t}DIV = get_number(IAWBBUMP.DIVNbr){n}{t}PartK1 = get_number(IAWBBUMP.PartK1DivNbr){n}{t}SCorpK1 = get_number(IAWBBUMP.SCorpK1DivNbr){n}{t}EstK1 = get_number(IAWBBUMP.EstK1DivNbr){n}{t}F5471 = get_number(IAWBBUMP.F5471Nbr){n}{t}F8621 = get_number(IAWBBUMP.F8621Nbr){n}{t}F8814 = get_number(IAWBBUMP.F8814Nbr){n}{t}if Index == 6 and get_number(IASCHB.TotDIVCopies) > 7:{n}{t}{t}return 0{n}{t}elif DIV > Index:{n}{t}{t}return get_bool(USD1099DIV.Joint, get_number(IAWBBUMP.DIV(Index))){n}{t}elif DIV + PartK1 > Index:{n}{t}{t}Stuff = ( Index )  - DIV{n}{t}{t}return get_bool(USDPartK1.Joint, ( get_number(IAWBBUMP.PartK1Div(Stuff)) )){n}{t}elif DIV + PartK1 + SCorpK1 > Index:{n}{t}{t}Stuff = ( Index )  - DIV - PartK1{n}{t}{t}return get_bool(USDSCorpK1.Joint, ( get_number(IAWBBUMP.SCorpK1Div(Stuff)) )){n}{t}elif DIV + PartK1 + SCorpK1 + EstK1 > Index:{n}{t}{t}Stuff = ( Index )  - DIV - PartK1 - SCorpK1{n}{t}{t}return get_bool(USDEstK1.Joint, ( get_number(IAWBBUMP.EstK1Div(Stuff)) )){n}{t}elif DIV + PartK1 + SCorpK1 + EstK1 + F5471 > Index:{n}{t}{t}Stuff = ( Index )  - DIV - PartK1 - SCorpK1 - EstK1{n}{t}{t}return 0{n}{t}elif DIV + PartK1 + SCorpK1 + EstK1 + F5471 + F8621 > Index:{n}{t}{t}Stuff = ( Index )  - DIV - PartK1 - SCorpK1 - EstK1 - F5471{n}{t}{t}return get_bool(USF8621.Joint, ( get_number(IAWBBUMP.F8621(Stuff)) )){n}{t}elif DIV + PartK1 + SCorpK1 + EstK1 + F5471 + F8621 + F8814 > Index:{n}{t}{t}Stuff = ( Index )  - DIV - PartK1 - SCorpK1 - EstK1 - F5471 - F8621{n}{t}{t}if get_bool(USWBasicInfo.JointCalc) == True:{n}{t}{t}{t}return 1{n}{t}{t}else:{n}{t}{t}{t}return 0{n}{t}else:{n}{t}{t}return 0{n}{n}
def DSp1_Calculation(Index):{n}{t}Stuff = Integer(){n}{n}{t}DIV = Integer(){n}{n}{t}PartK1 = Integer(){n}{n}{t}SCorpK1 = Integer(){n}{n}{t}EstK1 = Integer(){n}{n}{t}F5471 = Integer(){n}{n}{t}F8621 = Integer(){n}{n}{t}F8814 = Integer(){n}{t}DIV = get_number(IAWBBUMP.DIVNbr){n}{t}PartK1 = get_number(IAWBBUMP.PartK1DivNbr){n}{t}SCorpK1 = get_number(IAWBBUMP.SCorpK1DivNbr){n}{t}EstK1 = get_number(IAWBBUMP.EstK1DivNbr){n}{t}F5471 = get_number(IAWBBUMP.F5471Nbr){n}{t}F8621 = get_number(IAWBBUMP.F8621Nbr){n}{t}F8814 = get_number(IAWBBUMP.F8814Nbr){n}{t}if Index == 6 and get_number(IASCHB.TotDIVCopies) > 7:{n}{t}{t}return 0{n}{t}elif DIV > Index:{n}{t}{t}return get_bool(USD1099DIV.Spouse, get_number(IAWBBUMP.DIV(Index))){n}{t}elif DIV + PartK1 > Index:{n}{t}{t}Stuff = ( Index )  - DIV{n}{t}{t}return get_bool(USDPartK1.Spouse, ( get_number(IAWBBUMP.PartK1Div(Stuff)) )){n}{t}elif DIV + PartK1 + SCorpK1 > Index:{n}{t}{t}Stuff = ( Index )  - DIV - PartK1{n}{t}{t}return get_bool(USDSCorpK1.Spouse, ( get_number(IAWBBUMP.SCorpK1Div(Stuff)) )){n}{t}elif DIV + PartK1 + SCorpK1 + EstK1 > Index:{n}{t}{t}Stuff = ( Index )  - DIV - PartK1 - SCorpK1{n}{t}{t}return get_bool(USDEstK1.Spouse, ( get_number(IAWBBUMP.EstK1Div(Stuff)) )){n}{t}elif DIV + PartK1 + SCorpK1 + EstK1 + F5471 > Index:{n}{t}{t}Stuff = ( Index )  - DIV - PartK1 - SCorpK1 - EstK1{n}{t}{t}if get_string(USW5471SchI.SchISSN, ( get_number(IAWBBUMP.F5471(Stuff)) )) == get_string(USWBasicInfo.SpouseSSN):{n}{t}{t}{t}return 1{n}{t}{t}else:{n}{t}{t}{t}return 0{n}{t}elif DIV + PartK1 + SCorpK1 + EstK1 + F5471 + F8621 > Index:{n}{t}{t}Stuff = ( Index )  - DIV - PartK1 - SCorpK1 - EstK1 - F5471{n}{t}{t}return get_bool(USF8621.Spouse, ( get_number(IAWBBUMP.F8621(Stuff)) )){n}{t}elif DIV + PartK1 + SCorpK1 + EstK1 + F5471 + F8621 + F8814 > Index:{n}{t}{t}Stuff = ( Index )  - DIV - PartK1 - SCorpK1 - EstK1 - F5471 - F8621{n}{t}{t}return 0{n}{t}else:{n}{t}{t}return 0{n}{n}
def DTp1_Calculation(Index):{n}{t}Stuff = Integer(){n}{n}{t}DIV = Integer(){n}{n}{t}PartK1 = Integer(){n}{n}{t}SCorpK1 = Integer(){n}{n}{t}EstK1 = Integer(){n}{n}{t}F5471 = Integer(){n}{n}{t}F8621 = Integer(){n}{n}{t}F8814 = Integer(){n}{t}DIV = get_number(IAWBBUMP.DIVNbr){n}{t}PartK1 = get_number(IAWBBUMP.PartK1DivNbr){n}{t}SCorpK1 = get_number(IAWBBUMP.SCorpK1DivNbr){n}{t}EstK1 = get_number(IAWBBUMP.EstK1DivNbr){n}{t}F5471 = get_number(IAWBBUMP.F5471Nbr){n}{t}F8621 = get_number(IAWBBUMP.F8621Nbr){n}{t}F8814 = get_number(IAWBBUMP.F8814Nbr){n}{t}if Index == 6 and get_number(IASCHB.TotDIVCopies) > 7:{n}{t}{t}return 0{n}{t}elif DIV > Index:{n}{t}{t}return get_bool(USD1099DIV.Taxpayer, get_number(IAWBBUMP.DIV(Index))){n}{t}elif DIV + PartK1 > Index:{n}{t}{t}Stuff = ( Index )  - DIV{n}{t}{t}return get_bool(USDPartK1.Taxpayer, ( get_number(IAWBBUMP.PartK1Div(Stuff)) )){n}{t}elif DIV + PartK1 + SCorpK1 > Index:{n}{t}{t}Stuff = ( Index )  - DIV - PartK1{n}{t}{t}return get_bool(USDSCorpK1.Taxpayer, ( get_number(IAWBBUMP.SCorpK1Div(Stuff)) )){n}{t}elif DIV + PartK1 + SCorpK1 + EstK1 > Index:{n}{t}{t}Stuff = ( Index )  - DIV - PartK1 - SCorpK1{n}{t}{t}return get_bool(USDEstK1.Taxpayer, ( get_number(IAWBBUMP.EstK1Div(Stuff)) )){n}{t}elif DIV + PartK1 + SCorpK1 + EstK1 + F5471 > Index:{n}{t}{t}Stuff = ( Index )  - DIV - PartK1 - SCorpK1 - EstK1{n}{t}{t}if get_string(USW5471SchI.SchISSN, ( get_number(IAWBBUMP.F5471(Stuff)) )) == get_string(USWBasicInfo.SSN):{n}{t}{t}{t}return 1{n}{t}{t}else:{n}{t}{t}{t}return 0{n}{t}elif DIV + PartK1 + SCorpK1 + EstK1 + F5471 + F8621 > Index:{n}{t}{t}Stuff = ( Index )  - DIV - PartK1 - SCorpK1 - EstK1 - F5471{n}{t}{t}return get_bool(USF8621.Taxpayer, ( get_number(IAWBBUMP.F8621(Stuff)) )){n}{t}elif DIV + PartK1 + SCorpK1 + EstK1 + F5471 + F8621 + F8814 > Index:{n}{t}{t}Stuff = ( Index )  - DIV - PartK1 - SCorpK1 - EstK1 - F5471 - F8621{n}{t}{t}if get_bool(USWBasicInfo.JointCalc) == True:{n}{t}{t}{t}return 0{n}{t}{t}else:{n}{t}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def ExemptDiv_Calculation(Index):{n}{t}Stuff = Integer(){n}{n}{t}DIV = Integer(){n}{n}{t}PartK1 = Integer(){n}{n}{t}SCorpK1 = Integer(){n}{n}{t}EstK1 = Integer(){n}{n}{t}F5471 = Integer(){n}{n}{t}F8621 = Integer(){n}{n}{t}F8814 = Integer(){n}{t}DIV = get_number(IAWBBUMP.DIVNbr){n}{t}PartK1 = get_number(IAWBBUMP.PartK1DivNbr){n}{t}SCorpK1 = get_number(IAWBBUMP.SCorpK1DivNbr){n}{t}EstK1 = get_number(IAWBBUMP.EstK1DivNbr){n}{t}F5471 = get_number(IAWBBUMP.F5471Nbr){n}{t}F8621 = get_number(IAWBBUMP.F8621Nbr){n}{t}F8814 = get_number(IAWBBUMP.F8814Nbr){n}{t}if Index == 6 and get_number(IASCHB.TotDIVCopies) > 7:{n}{t}{t}return get_currency(IAWBPDIV.TotalExemptDiv){n}{t}elif DIV > Index:{n}{t}{t}return Round(get_currency(USD1099DIV.Nominee, get_number(IAWBBUMP.DIV(Index)))) + Round(get_currency(USD1099DIV.StExmpt, get_number(IAWBBUMP.DIV(Index)))) + Round(get_currency(USD1099DIV.FedStExmpt, get_number(IAWBBUMP.DIV(Index)))) + Round(get_currency(USD1099DIV.Restricted, get_number(IAWBBUMP.DIV(Index)))){n}{t}elif DIV + PartK1 > Index:{n}{t}{t}Stuff = ( Index )  - DIV{n}{t}{t}return get_currency(USDPartK1.NetStTED, ( get_number(IAWBBUMP.PartK1Div(Stuff)) )){n}{t}elif DIV + PartK1 + SCorpK1 > Index:{n}{t}{t}Stuff = ( Index )  - DIV - PartK1{n}{t}{t}return get_currency(USDSCorpK1.NetStTED, ( get_number(IAWBBUMP.SCorpK1Div(Stuff)) )){n}{t}elif DIV + PartK1 + SCorpK1 + EstK1 > Index:{n}{t}{t}Stuff = ( Index )  - DIV - PartK1 - SCorpK1{n}{t}{t}return get_currency(USDEstK1.NetStTED, ( get_number(IAWBBUMP.EstK1Div(Stuff)) )){n}{t}elif DIV + PartK1 + SCorpK1 + EstK1 + F5471 > Index:{n}{t}{t}Stuff = ( Index )  - DIV - PartK1 - SCorpK1 - EstK1{n}{t}{t}return 0{n}{t}elif DIV + PartK1 + SCorpK1 + EstK1 + F5471 + F8621 > Index:{n}{t}{t}Stuff = ( Index )  - DIV - PartK1 - SCorpK1 - EstK1 - F5471{n}{t}{t}return 0{n}{t}elif DIV + PartK1 + SCorpK1 + EstK1 + F5471 + F8621 + F8814 > Index:{n}{t}{t}Stuff = ( Index )  - DIV - PartK1 - SCorpK1 - EstK1 - F5471 - F8621{n}{t}{t}return 0{n}{t}else:{n}{t}{t}return 0{n}{n}
def ExemptInt_Calculation(Index):{n}{t}Stuff = Integer(){n}{n}{t}ResSFM = Integer(){n}{n}{t}OthSFM = Integer(){n}{n}{t}OID = Integer(){n}{n}{t}INT1099 = Integer(){n}{n}{t}PartK1 = Integer(){n}{n}{t}SCorpK1 = Integer(){n}{n}{t}EstK1 = Integer(){n}{n}{t}TPAccMktDisc = Boolean(){n}{t}ResSFM = get_number(IAWBBUMP.ResSFMNbr){n}{t}OthSFM = get_number(IAWBBUMP.OthSFMNbr){n}{t}OID = get_number(IAWBBUMP.OIDNbr){n}{t}INT1099 = get_number(IAWBBUMP.INTNbr){n}{t}PartK1 = get_number(IAWBBUMP.PartK1Nbr){n}{t}SCorpK1 = get_number(IAWBBUMP.SCorpK1Nbr){n}{t}EstK1 = get_number(IAWBBUMP.EstK1Nbr){n}{t}TPAccMktDisc = get_bool(IASCHB.TPAccMktDiscInt){n}{t}if Index == 6 and get_number(IASCHB.TotINTCopies) > 7:{n}{t}{t}return get_currency(IAWBPINT.TotalExemptInt){n}{t}elif ResSFM > Index:{n}{t}{t}return 0{n}{t}elif ResSFM + OthSFM > Index:{n}{t}{t}Stuff = ( Index )  - ResSFM{n}{t}{t}return 0{n}{t}elif ResSFM + OthSFM + OID > Index:{n}{t}{t}Stuff = ( Index )  - ResSFM - OthSFM{n}{t}{t}return Round(get_currency(USD1099OID.USInt, ( get_number(IAWBBUMP.OID(Stuff)) ))) + Round(get_currency(USD1099OID.StExempt, ( get_number(IAWBBUMP.OID(Stuff)) ))) + Round(get_currency(USD1099OID.Nominee, ( get_number(IAWBBUMP.OID(Stuff)) ))) + max_value(0, Round(get_currency(USD1099OID.BOIDAdjAmt, ( get_number(IAWBBUMP.OID(Stuff)) )))){n}{t}elif ResSFM + OthSFM + OID + INT1099 > Index:{n}{t}{t}Stuff = ( Index )  - ResSFM - OthSFM - OID{n}{t}{t}return Round(get_currency(USD1099INT.USInt, ( get_number(IAWBBUMP.INT(Stuff)) ))) + Round(get_currency(USD1099INT.Nominee, ( get_number(IAWBBUMP.INT(Stuff)) ))) + Round(get_currency(USD1099INT.AccruedInt, ( get_number(IAWBBUMP.INT(Stuff)) ))) + Round(get_currency(USD1099INT.ABP, ( get_number(IAWBBUMP.INT(Stuff)) ))) + Round(get_currency(USD1099INT.StateExmpt, ( get_number(IAWBBUMP.INT(Stuff)) ))){n}{t}elif ResSFM + OthSFM + OID + INT1099 + PartK1 > Index:{n}{t}{t}Stuff = ( Index )  - ResSFM - OthSFM - OID - INT1099{n}{t}{t}return get_currency(USDPartK1.NetStTEI, ( get_number(IAWBBUMP.PartK1(Stuff)) )) + get_currency(USDPartK1.FedStTEI, ( get_number(IAWBBUMP.PartK1(Stuff)) )){n}{t}elif ResSFM + OthSFM + OID + INT1099 + PartK1 + SCorpK1 > Index:{n}{t}{t}Stuff = ( Index )  - ResSFM - OthSFM - OID - INT1099 - PartK1{n}{t}{t}return get_currency(USDSCorpK1.NetStTEI, ( get_number(IAWBBUMP.SCorpK1(Stuff)) )) + get_currency(USDSCorpK1.FedStTEI, ( get_number(IAWBBUMP.SCorpK1(Stuff)) )){n}{t}elif ResSFM + OthSFM + OID + INT1099 + PartK1 + SCorpK1 + EstK1 > Index:{n}{t}{t}Stuff = ( Index )  - ResSFM - OthSFM - OID - INT1099 - PartK1 - SCorpK1{n}{t}{t}return get_currency(USDEstK1.NetStTEI, ( get_number(IAWBBUMP.EstK1(Stuff)) )) + get_currency(USDEstK1.FedStTEI, ( get_number(IAWBBUMP.EstK1(Stuff)) )){n}{t}elif ResSFM + OthSFM + OID + INT1099 + PartK1 + SCorpK1 + EstK1 + get_bool(IASCHB.TPAccMktDiscInt) > Index:{n}{t}{t}Stuff = ( Index )  - ResSFM - OthSFM - OID - INT1099 - PartK1 - SCorpK1 - EstK1{n}{t}{t}return 0{n}{t}elif ResSFM + OthSFM + OID + INT1099 + PartK1 + SCorpK1 + EstK1 + TPAccMktDisc + get_bool(IASCHB.SPAccMktDiscInt) > Index:{n}{t}{t}Stuff = ( Index )  - ResSFM - OthSFM - OID - INT1099 - PartK1 - SCorpK1 - EstK1 - get_bool(IASCHB.TPAccMktDiscInt){n}{t}{t}return 0{n}{t}elif ResSFM + OthSFM + OID + INT1099 + PartK1 + SCorpK1 + EstK1 + TPAccMktDisc + get_bool(IASCHB.SPAccMktDiscInt) + get_bool(IASCHB.JtAccMktDiscInt) > Index:{n}{t}{t}Stuff = ( Index )  - ResSFM - OthSFM - OID - INT1099 - PartK1 - SCorpK1 - EstK1 - TPAccMktDisc - get_bool(IASCHB.SPAccMktDiscInt){n}{t}{t}return 0{n}{t}elif ResSFM + OthSFM + OID + INT1099 + PartK1 + SCorpK1 + EstK1 + TPAccMktDisc + get_bool(IASCHB.SPAccMktDiscInt) + get_bool(IASCHB.JtAccMktDiscInt) + get_bool(IASCHB.TPContigentPay) > Index:{n}{t}{t}Stuff = ( Index )  - ResSFM - OthSFM - OID - INT1099 - PartK1 - SCorpK1 - EstK1 - TPAccMktDisc - get_bool(IASCHB.SPAccMktDiscInt) - get_bool(IASCHB.JtAccMktDiscInt){n}{t}{t}return 0{n}{t}elif ResSFM + OthSFM + OID + INT1099 + PartK1 + SCorpK1 + EstK1 + TPAccMktDisc + get_bool(IASCHB.SPAccMktDiscInt) + get_bool(IASCHB.JtAccMktDiscInt) + get_bool(IASCHB.TPContigentPay) + get_bool(IASCHB.SPContigentPay) > Index:{n}{t}{t}Stuff = ( Index )  - ResSFM - OthSFM - OID - INT1099 - PartK1 - SCorpK1 - EstK1 - TPAccMktDisc - get_bool(IASCHB.SPAccMktDiscInt) - get_bool(IASCHB.JtAccMktDiscInt) - get_bool(IASCHB.TPContigentPay){n}{t}{t}return 0{n}{t}elif ResSFM + OthSFM + OID + INT1099 + PartK1 + SCorpK1 + EstK1 + TPAccMktDisc + get_bool(IASCHB.SPAccMktDiscInt) + get_bool(IASCHB.JtAccMktDiscInt) + get_bool(IASCHB.TPContigentPay) + get_bool(IASCHB.SPContigentPay) + get_bool(IASCHB.JtContigentPay) > Index:{n}{t}{t}Stuff = ( Index )  - ResSFM - OthSFM - OID - INT1099 - PartK1 - SCorpK1 - EstK1 - TPAccMktDisc - get_bool(IASCHB.SPAccMktDiscInt) - get_bool(IASCHB.JtAccMktDiscInt) - get_bool(IASCHB.TPContigentPay) - get_bool(IASCHB.SPContigentPay){n}{t}{t}return 0{n}{t}else:{n}{t}{t}return 0{n}{n}
def IJ1_Calculation(Index):{n}{t}Stuff = Integer(){n}{n}{t}ResSFM = Integer(){n}{n}{t}OthSFM = Integer(){n}{n}{t}OID = Integer(){n}{n}{t}INT1099 = Integer(){n}{n}{t}PartK1 = Integer(){n}{n}{t}SCorpK1 = Integer(){n}{n}{t}EstK1 = Integer(){n}{n}{t}TPAccMktDisc = Boolean(){n}{t}ResSFM = get_number(IAWBBUMP.ResSFMNbr){n}{t}OthSFM = get_number(IAWBBUMP.OthSFMNbr){n}{t}OID = get_number(IAWBBUMP.OIDNbr){n}{t}INT1099 = get_number(IAWBBUMP.INTNbr){n}{t}PartK1 = get_number(IAWBBUMP.PartK1Nbr){n}{t}SCorpK1 = get_number(IAWBBUMP.SCorpK1Nbr){n}{t}EstK1 = get_number(IAWBBUMP.EstK1Nbr){n}{t}TPAccMktDisc = get_bool(IASCHB.TPAccMktDiscInt){n}{t}if Index == 6 and get_number(IASCHB.TotINTCopies) > 7:{n}{t}{t}return 0{n}{t}elif ResSFM > Index:{n}{t}{t}return get_bool(USDSFM.Joint, get_number(IAWBBUMP.ResSFM(Index))){n}{t}elif ResSFM + OthSFM > Index:{n}{t}{t}Stuff = ( Index )  - ResSFM{n}{t}{t}return get_bool(USDSFM.Joint, ( get_number(IAWBBUMP.OthSFM(Stuff)) )){n}{t}elif ResSFM + OthSFM + OID > Index:{n}{t}{t}Stuff = ( Index )  - ResSFM - OthSFM{n}{t}{t}return get_bool(USD1099OID.Joint, ( get_number(IAWBBUMP.OID(Stuff)) )){n}{t}elif ResSFM + OthSFM + OID + INT1099 > Index:{n}{t}{t}Stuff = ( Index )  - ResSFM - OthSFM - OID{n}{t}{t}return get_bool(USD1099INT.Joint, ( get_number(IAWBBUMP.Int(Stuff)) )){n}{t}elif ResSFM + OthSFM + OID + INT1099 + PartK1 > Index:{n}{t}{t}Stuff = ( Index )  - ResSFM - OthSFM - OID - INT1099{n}{t}{t}return get_bool(USDPartK1.Joint, ( get_number(IAWBBUMP.PartK1(Stuff)) )){n}{t}elif ResSFM + OthSFM + OID + INT1099 + PartK1 + SCorpK1 > Index:{n}{t}{t}Stuff = ( Index )  - ResSFM - OthSFM - OID - INT1099 - PartK1{n}{t}{t}return get_bool(USDSCorpK1.Joint, ( get_number(IAWBBUMP.SCorpK1(Stuff)) )){n}{t}elif ResSFM + OthSFM + OID + INT1099 + PartK1 + SCorpK1 + EstK1 > Index:{n}{t}{t}Stuff = ( Index )  - ResSFM - OthSFM - OID - INT1099 - PartK1 - SCorpK1{n}{t}{t}return get_bool(USDEstK1.Joint, ( get_number(IAWBBUMP.EstK1(Stuff)) )){n}{t}elif ResSFM + OthSFM + OID + INT1099 + PartK1 + SCorpK1 + EstK1 + TPAccMktDisc > Index:{n}{t}{t}Stuff = ( Index )  - ResSFM - OthSFM - OID - INT1099 - PartK1 - SCorpK1 - EstK1{n}{t}{t}return 0{n}{t}elif ResSFM + OthSFM + OID + INT1099 + PartK1 + SCorpK1 + EstK1 + TPAccMktDisc + get_bool(IASCHB.SPAccMktDiscInt) > Index:{n}{t}{t}Stuff = ( Index )  - ResSFM - OthSFM - OID - INT1099 - PartK1 - SCorpK1 - EstK1 - TPAccMktDisc{n}{t}{t}return 0{n}{t}elif ResSFM + OthSFM + OID + INT1099 + PartK1 + SCorpK1 + EstK1 + TPAccMktDisc + get_bool(IASCHB.SPAccMktDiscInt) + get_bool(IASCHB.JtAccMktDiscInt) > Index:{n}{t}{t}Stuff = ( Index )  - ResSFM - OthSFM - OID - INT1099 - PartK1 - SCorpK1 - EstK1 - TPAccMktDisc - get_bool(IASCHB.SPAccMktDiscInt){n}{t}{t}return 1{n}{t}elif ResSFM + OthSFM + OID + INT1099 + PartK1 + SCorpK1 + EstK1 + TPAccMktDisc + get_bool(IASCHB.SPAccMktDiscInt) + get_bool(IASCHB.JtAccMktDiscInt) + get_bool(IASCHB.TPContigentPay) > Index:{n}{t}{t}Stuff = ( Index )  - ResSFM - OthSFM - OID - INT1099 - PartK1 - SCorpK1 - EstK1 - TPAccMktDisc - get_bool(IASCHB.SPAccMktDiscInt) - get_bool(IASCHB.JtAccMktDiscInt){n}{t}{t}return 0{n}{t}elif ResSFM + OthSFM + OID + INT1099 + PartK1 + SCorpK1 + EstK1 + TPAccMktDisc + get_bool(IASCHB.SPAccMktDiscInt) + get_bool(IASCHB.JtAccMktDiscInt) + get_bool(IASCHB.TPContigentPay) + get_bool(IASCHB.SPContigentPay) > Index:{n}{t}{t}Stuff = ( Index )  - ResSFM - OthSFM - OID - INT1099 - PartK1 - SCorpK1 - EstK1 - TPAccMktDisc - get_bool(IASCHB.SPAccMktDiscInt) - get_bool(IASCHB.JtAccMktDiscInt) - get_bool(IASCHB.TPContigentPay){n}{t}{t}return 0{n}{t}elif ResSFM + OthSFM + OID + INT1099 + PartK1 + SCorpK1 + EstK1 + TPAccMktDisc + get_bool(IASCHB.SPAccMktDiscInt) + get_bool(IASCHB.JtAccMktDiscInt) + get_bool(IASCHB.TPContigentPay) + get_bool(IASCHB.SPContigentPay) + get_bool(IASCHB.JtContigentPay) > Index:{n}{t}{t}Stuff = ( Index )  - ResSFM - OthSFM - OID - INT1099 - PartK1 - SCorpK1 - EstK1 - TPAccMktDisc - get_bool(IASCHB.SPAccMktDiscInt) - get_bool(IASCHB.JtAccMktDiscInt) - get_bool(IASCHB.TPContigentPay) - get_bool(IASCHB.SPContigentPay){n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def IntAcctOwner_Calculation(Index):{n}{t}if get_bool(IASCHB.ITp1(Index)) == True:{n}{t}{t}return 'Taxpayer'{n}{t}elif get_bool(IASCHB.ISp1(Index)) == True:{n}{t}{t}return 'Spouse'{n}{t}elif get_bool(IASCHB.IJ1(Index)) == True:{n}{t}{t}return 'Joint'{n}{t}else:{n}{t}{t}return ''{n}{n}
def Interest_Calculation(Index):{n}{t}Stuff = Integer(){n}{n}{t}ResSFM = Integer(){n}{n}{t}OthSFM = Integer(){n}{n}{t}OID = Integer(){n}{n}{t}INT1099 = Integer(){n}{n}{t}PartK1 = Integer(){n}{n}{t}SCorpK1 = Integer(){n}{n}{t}EstK1 = Integer(){n}{n}{t}TPAccMktDisc = Boolean(){n}{t}ResSFM = get_number(IAWBBUMP.ResSFMNbr){n}{t}OthSFM = get_number(IAWBBUMP.OthSFMNbr){n}{t}OID = get_number(IAWBBUMP.OIDNbr){n}{t}INT1099 = get_number(IAWBBUMP.INTNbr){n}{t}PartK1 = get_number(IAWBBUMP.PartK1Nbr){n}{t}SCorpK1 = get_number(IAWBBUMP.SCorpK1Nbr){n}{t}EstK1 = get_number(IAWBBUMP.EstK1Nbr){n}{t}TPAccMktDisc = get_bool(IASCHB.TPAccMktDiscInt){n}{t}if Index == 6 and get_number(IASCHB.TotINTCopies) > 7:{n}{t}{t}return get_currency(IAWBPINT.TotalInterest){n}{t}elif ResSFM > Index:{n}{t}{t}return Round(get_currency(USDSFM.Interest, get_number(IAWBBUMP.ResSFM(Index)))){n}{t}elif ResSFM + OthSFM > Index:{n}{t}{t}Stuff = ( Index )  - ResSFM{n}{t}{t}return Round(get_currency(USDSFM.Interest, ( get_number(IAWBBUMP.OthSFM(Stuff)) ))){n}{t}elif ResSFM + OthSFM + OID > Index:{n}{t}{t}Stuff = ( Index )  - ResSFM - OthSFM{n}{t}{t}return get_currency(USD1099OID.BAmt, ( get_number(IAWBBUMP.OID(Stuff)) )) + Round(get_currency(USD1099OID.TaxExempt, ( get_number(IAWBBUMP.OID(Stuff)) ))) - min_value(0, Round(get_currency(USD1099OID.BOIDAdjAmt, ( get_number(IAWBBUMP.OID(Stuff)) )))){n}{t}elif ResSFM + OthSFM + OID + INT1099 > Index:{n}{t}{t}Stuff = ( Index )  - ResSFM - OthSFM - OID{n}{t}{t}return get_currency(USD1099INT.BAmtEF, ( get_number(IAWBBUMP.INT(Stuff)) )) + get_currency(USD1099INT.FedExmpt, ( get_number(IAWBBUMP.INT(Stuff)) )){n}{t}elif ResSFM + OthSFM + OID + INT1099 + PartK1 > Index:{n}{t}{t}Stuff = ( Index )  - ResSFM - OthSFM - OID - INT1099{n}{t}{t}return get_currency(USDPartK1.HaveInt, ( get_number(IAWBBUMP.PartK1(Stuff)) )){n}{t}elif ResSFM + OthSFM + OID + INT1099 + PartK1 + SCorpK1 > Index:{n}{t}{t}Stuff = ( Index )  - ResSFM - OthSFM - OID - INT1099 - PartK1{n}{t}{t}return get_currency(USDSCorpK1.HaveInt, ( get_number(IAWBBUMP.SCorpK1(Stuff)) )){n}{t}elif ResSFM + OthSFM + OID + INT1099 + PartK1 + SCorpK1 + EstK1 > Index:{n}{t}{t}Stuff = ( Index )  - ResSFM - OthSFM - OID - INT1099 - PartK1 - SCorpK1{n}{t}{t}return get_currency(USDEstK1.HaveInt, ( get_number(IAWBBUMP.EstK1(Stuff)) )){n}{t}elif ResSFM + OthSFM + OID + INT1099 + PartK1 + SCorpK1 + EstK1 + TPAccMktDisc > Index:{n}{t}{t}Stuff = ( Index )  - ResSFM - OthSFM - OID - INT1099 - PartK1 - SCorpK1 - EstK1{n}{t}{t}return get_currency(IASCHB.TPAccMktDiscInt){n}{t}elif ResSFM + OthSFM + OID + INT1099 + PartK1 + SCorpK1 + EstK1 + TPAccMktDisc + get_bool(IASCHB.SPAccMktDiscInt) > Index:{n}{t}{t}Stuff = ( Index )  - ResSFM - OthSFM - OID - INT1099 - PartK1 - SCorpK1 - EstK1 - TPAccMktDisc{n}{t}{t}return get_currency(IASCHB.SPAccMktDiscInt){n}{t}elif ResSFM + OthSFM + OID + INT1099 + PartK1 + SCorpK1 + EstK1 + TPAccMktDisc + get_bool(IASCHB.SPAccMktDiscInt) + get_bool(IASCHB.JtAccMktDiscInt) > Index:{n}{t}{t}Stuff = ( Index )  - ResSFM - OthSFM - OID - INT1099 - PartK1 - SCorpK1 - EstK1 - TPAccMktDisc - get_bool(IASCHB.SPAccMktDiscInt){n}{t}{t}return get_currency(IASCHB.JtAccMktDiscInt){n}{t}elif ResSFM + OthSFM + OID + INT1099 + PartK1 + SCorpK1 + EstK1 + TPAccMktDisc + get_bool(IASCHB.SPAccMktDiscInt) + get_bool(IASCHB.JtAccMktDiscInt) + get_bool(IASCHB.TPContigentPay) > Index:{n}{t}{t}Stuff = ( Index )  - ResSFM - OthSFM - OID - INT1099 - PartK1 - SCorpK1 - EstK1 - TPAccMktDisc - get_bool(IASCHB.SPAccMktDiscInt) - get_bool(IASCHB.JtAccMktDiscInt){n}{t}{t}return get_currency(IASCHB.TPContigentPay){n}{t}elif ResSFM + OthSFM + OID + INT1099 + PartK1 + SCorpK1 + EstK1 + TPAccMktDisc + get_bool(IASCHB.SPAccMktDiscInt) + get_bool(IASCHB.JtAccMktDiscInt) + get_bool(IASCHB.TPContigentPay) + get_bool(IASCHB.SPContigentPay) > Index:{n}{t}{t}Stuff = ( Index )  - ResSFM - OthSFM - OID - INT1099 - PartK1 - SCorpK1 - EstK1 - TPAccMktDisc - get_bool(IASCHB.SPAccMktDiscInt) - get_bool(IASCHB.JtAccMktDiscInt) - get_bool(IASCHB.TPContigentPay){n}{t}{t}return get_currency(IASCHB.SPContigentPay){n}{t}elif ResSFM + OthSFM + OID + INT1099 + PartK1 + SCorpK1 + EstK1 + TPAccMktDisc + get_bool(IASCHB.SPAccMktDiscInt) + get_bool(IASCHB.JtAccMktDiscInt) + get_bool(IASCHB.TPContigentPay) + get_bool(IASCHB.SPContigentPay) + get_bool(IASCHB.JtContigentPay) > Index:{n}{t}{t}Stuff = ( Index )  - ResSFM - OthSFM - OID - INT1099 - PartK1 - SCorpK1 - EstK1 - TPAccMktDisc - get_bool(IASCHB.SPAccMktDiscInt) - get_bool(IASCHB.JtAccMktDiscInt) - get_bool(IASCHB.TPContigentPay) - get_bool(IASCHB.SPContigentPay){n}{t}{t}return get_currency(IASCHB.JtContigentPay){n}{t}else:{n}{t}{t}return 0{n}{n}
def ISp1_Calculation(Index):{n}{t}Stuff = Integer(){n}{n}{t}ResSFM = Integer(){n}{n}{t}OthSFM = Integer(){n}{n}{t}OID = Integer(){n}{n}{t}INT1099 = Integer(){n}{n}{t}PartK1 = Integer(){n}{n}{t}SCorpK1 = Integer(){n}{n}{t}EstK1 = Integer(){n}{n}{t}TPAccMktDisc = Boolean(){n}{t}ResSFM = get_number(IAWBBUMP.ResSFMNbr){n}{t}OthSFM = get_number(IAWBBUMP.OthSFMNbr){n}{t}OID = get_number(IAWBBUMP.OIDNbr){n}{t}INT1099 = get_number(IAWBBUMP.INTNbr){n}{t}PartK1 = get_number(IAWBBUMP.PartK1Nbr){n}{t}SCorpK1 = get_number(IAWBBUMP.SCorpK1Nbr){n}{t}EstK1 = get_number(IAWBBUMP.EstK1Nbr){n}{t}TPAccMktDisc = get_bool(IASCHB.TPAccMktDiscInt){n}{t}if Index == 6 and get_number(IASCHB.TotINTCopies) > 7:{n}{t}{t}return 0{n}{t}elif ResSFM > Index:{n}{t}{t}return get_bool(USDSFM.Spouse, get_number(IAWBBUMP.ResSFM(Index))){n}{t}elif ResSFM + OthSFM > Index:{n}{t}{t}Stuff = ( Index )  - ResSFM{n}{t}{t}return get_bool(USDSFM.Spouse, ( get_number(IAWBBUMP.OthSFM(Stuff)) )){n}{t}elif ResSFM + OthSFM + OID > Index:{n}{t}{t}Stuff = ( Index )  - ResSFM - OthSFM{n}{t}{t}return get_bool(USD1099OID.Spouse, ( get_number(IAWBBUMP.OID(Stuff)) )){n}{t}elif ResSFM + OthSFM + OID + INT1099 > Index:{n}{t}{t}Stuff = ( Index )  - ResSFM - OthSFM - OID{n}{t}{t}return get_bool(USD1099INT.Spouse, ( get_number(IAWBBUMP.Int(Stuff)) )){n}{t}elif ResSFM + OthSFM + OID + INT1099 + PartK1 > Index:{n}{t}{t}Stuff = ( Index )  - ResSFM - OthSFM - OID - INT1099{n}{t}{t}return get_bool(USDPartK1.Spouse, ( get_number(IAWBBUMP.PartK1(Stuff)) )){n}{t}elif ResSFM + OthSFM + OID + INT1099 + PartK1 + SCorpK1 > Index:{n}{t}{t}Stuff = ( Index )  - ResSFM - OthSFM - OID - INT1099 - PartK1{n}{t}{t}return get_bool(USDSCorpK1.Spouse, ( get_number(IAWBBUMP.SCorpK1(Stuff)) )){n}{t}elif ResSFM + OthSFM + OID + INT1099 + PartK1 + SCorpK1 + EstK1 > Index:{n}{t}{t}Stuff = ( Index )  - ResSFM - OthSFM - OID - INT1099 - PartK1 - SCorpK1{n}{t}{t}return get_bool(USDEstK1.Spouse, ( get_number(IAWBBUMP.EstK1(Stuff)) )){n}{t}elif ResSFM + OthSFM + OID + INT1099 + PartK1 + SCorpK1 + EstK1 + TPAccMktDisc > Index:{n}{t}{t}Stuff = ( Index )  - ResSFM - OthSFM - OID - INT1099 - PartK1 - SCorpK1 - EstK1{n}{t}{t}return 0{n}{t}elif ResSFM + OthSFM + OID + INT1099 + PartK1 + SCorpK1 + EstK1 + TPAccMktDisc + get_bool(IASCHB.SPAccMktDiscInt) > Index:{n}{t}{t}Stuff = ( Index )  - ResSFM - OthSFM - OID - INT1099 - PartK1 - SCorpK1 - EstK1 - TPAccMktDisc{n}{t}{t}return 1{n}{t}elif ResSFM + OthSFM + OID + INT1099 + PartK1 + SCorpK1 + EstK1 + TPAccMktDisc + get_bool(IASCHB.SPAccMktDiscInt) + get_bool(IASCHB.JtAccMktDiscInt) > Index:{n}{t}{t}Stuff = ( Index )  - ResSFM - OthSFM - OID - INT1099 - PartK1 - SCorpK1 - EstK1 - TPAccMktDisc - get_bool(IASCHB.SPAccMktDiscInt){n}{t}{t}return 0{n}{t}elif ResSFM + OthSFM + OID + INT1099 + PartK1 + SCorpK1 + EstK1 + TPAccMktDisc + get_bool(IASCHB.SPAccMktDiscInt) + get_bool(IASCHB.JtAccMktDiscInt) + get_bool(IASCHB.TPContigentPay) > Index:{n}{t}{t}Stuff = ( Index )  - ResSFM - OthSFM - OID - INT1099 - PartK1 - SCorpK1 - EstK1 - TPAccMktDisc - get_bool(IASCHB.SPAccMktDiscInt) - get_bool(IASCHB.JtAccMktDiscInt){n}{t}{t}return 0{n}{t}elif ResSFM + OthSFM + OID + INT1099 + PartK1 + SCorpK1 + EstK1 + TPAccMktDisc + get_bool(IASCHB.SPAccMktDiscInt) + get_bool(IASCHB.JtAccMktDiscInt) + get_bool(IASCHB.TPContigentPay) + get_bool(IASCHB.SPContigentPay) > Index:{n}{t}{t}Stuff = ( Index )  - ResSFM - OthSFM - OID - INT1099 - PartK1 - SCorpK1 - EstK1 - TPAccMktDisc - get_bool(IASCHB.SPAccMktDiscInt) - get_bool(IASCHB.JtAccMktDiscInt) - get_bool(IASCHB.TPContigentPay){n}{t}{t}return 1{n}{t}elif ResSFM + OthSFM + OID + INT1099 + PartK1 + SCorpK1 + EstK1 + TPAccMktDisc + get_bool(IASCHB.SPAccMktDiscInt) + get_bool(IASCHB.JtAccMktDiscInt) + get_bool(IASCHB.TPContigentPay) + get_bool(IASCHB.SPContigentPay) + get_bool(IASCHB.JtContigentPay) > Index:{n}{t}{t}Stuff = ( Index )  - ResSFM - OthSFM - OID - INT1099 - PartK1 - SCorpK1 - EstK1 - TPAccMktDisc - get_bool(IASCHB.SPAccMktDiscInt) - get_bool(IASCHB.JtAccMktDiscInt) - get_bool(IASCHB.TPContigentPay) - get_bool(IASCHB.SPContigentPay){n}{t}{t}return 0{n}{t}else:{n}{t}{t}return 0{n}{n}
def ITp1_Calculation(Index):{n}{t}Stuff = Integer(){n}{n}{t}ResSFM = Integer(){n}{n}{t}OthSFM = Integer(){n}{n}{t}OID = Integer(){n}{n}{t}INT1099 = Integer(){n}{n}{t}PartK1 = Integer(){n}{n}{t}SCorpK1 = Integer(){n}{n}{t}EstK1 = Integer(){n}{n}{t}TPAccMktDisc = Boolean(){n}{t}ResSFM = get_number(IAWBBUMP.ResSFMNbr){n}{t}OthSFM = get_number(IAWBBUMP.OthSFMNbr){n}{t}OID = get_number(IAWBBUMP.OIDNbr){n}{t}INT1099 = get_number(IAWBBUMP.INTNbr){n}{t}PartK1 = get_number(IAWBBUMP.PartK1Nbr){n}{t}SCorpK1 = get_number(IAWBBUMP.SCorpK1Nbr){n}{t}EstK1 = get_number(IAWBBUMP.EstK1Nbr){n}{t}TPAccMktDisc = get_bool(IASCHB.TPAccMktDiscInt){n}{t}if Index == 6 and get_number(IASCHB.TotINTCopies) > 7:{n}{t}{t}return 0{n}{t}elif ResSFM > Index:{n}{t}{t}return get_bool(USDSFM.Taxpayer, get_number(IAWBBUMP.ResSFM(Index))){n}{t}elif ResSFM + OthSFM > Index:{n}{t}{t}Stuff = ( Index )  - ResSFM{n}{t}{t}return get_bool(USDSFM.Taxpayer, ( get_number(IAWBBUMP.OthSFM(Stuff)) )){n}{t}elif ResSFM + OthSFM + OID > Index:{n}{t}{t}Stuff = ( Index )  - ResSFM - OthSFM{n}{t}{t}return get_bool(USD1099OID.Taxpayer, ( get_number(IAWBBUMP.OID(Stuff)) )){n}{t}elif ResSFM + OthSFM + OID + INT1099 > Index:{n}{t}{t}Stuff = ( Index )  - ResSFM - OthSFM - OID{n}{t}{t}return get_bool(USD1099INT.Taxpayer, ( get_number(IAWBBUMP.Int(Stuff)) )){n}{t}elif ResSFM + OthSFM + OID + INT1099 + PartK1 > Index:{n}{t}{t}Stuff = ( Index )  - ResSFM - OthSFM - OID - INT1099{n}{t}{t}return get_bool(USDPartK1.Taxpayer, ( get_number(IAWBBUMP.PartK1(Stuff)) )){n}{t}elif ResSFM + OthSFM + OID + INT1099 + PartK1 + SCorpK1 > Index:{n}{t}{t}Stuff = ( Index )  - ResSFM - OthSFM - OID - INT1099 - PartK1{n}{t}{t}return get_bool(USDSCorpK1.Taxpayer, ( get_number(IAWBBUMP.SCorpK1(Stuff)) )){n}{t}elif ResSFM + OthSFM + OID + INT1099 + PartK1 + SCorpK1 + EstK1 > Index:{n}{t}{t}Stuff = ( Index )  - ResSFM - OthSFM - OID - INT1099 - PartK1 - SCorpK1{n}{t}{t}return get_bool(USDEstK1.Taxpayer, ( get_number(IAWBBUMP.EstK1(Stuff)) )){n}{t}elif ResSFM + OthSFM + OID + INT1099 + PartK1 + SCorpK1 + EstK1 + TPAccMktDisc > Index:{n}{t}{t}Stuff = ( Index )  - ResSFM - OthSFM - OID - INT1099 - PartK1 - SCorpK1 - EstK1{n}{t}{t}return 1{n}{t}elif ResSFM + OthSFM + OID + INT1099 + PartK1 + SCorpK1 + EstK1 + TPAccMktDisc + get_bool(IASCHB.SPAccMktDiscInt) > Index:{n}{t}{t}Stuff = ( Index )  - ResSFM - OthSFM - OID - INT1099 - PartK1 - SCorpK1 - EstK1 - TPAccMktDisc{n}{t}{t}return 0{n}{t}elif ResSFM + OthSFM + OID + INT1099 + PartK1 + SCorpK1 + EstK1 + TPAccMktDisc + get_bool(IASCHB.SPAccMktDiscInt) + get_bool(IASCHB.JtAccMktDiscInt) > Index:{n}{t}{t}Stuff = ( Index )  - ResSFM - OthSFM - OID - INT1099 - PartK1 - SCorpK1 - EstK1 - TPAccMktDisc - get_bool(IASCHB.SPAccMktDiscInt){n}{t}{t}return 0{n}{t}elif ResSFM + OthSFM + OID + INT1099 + PartK1 + SCorpK1 + EstK1 + TPAccMktDisc + get_bool(IASCHB.SPAccMktDiscInt) + get_bool(IASCHB.JtAccMktDiscInt) + get_bool(IASCHB.TPContigentPay) > Index:{n}{t}{t}Stuff = ( Index )  - ResSFM - OthSFM - OID - INT1099 - PartK1 - SCorpK1 - EstK1 - TPAccMktDisc - get_bool(IASCHB.SPAccMktDiscInt) - get_bool(IASCHB.JtAccMktDiscInt){n}{t}{t}return 1{n}{t}elif ResSFM + OthSFM + OID + INT1099 + PartK1 + SCorpK1 + EstK1 + TPAccMktDisc + get_bool(IASCHB.SPAccMktDiscInt) + get_bool(IASCHB.JtAccMktDiscInt) + get_bool(IASCHB.TPContigentPay) + get_bool(IASCHB.SPContigentPay) > Index:{n}{t}{t}Stuff = ( Index )  - ResSFM - OthSFM - OID - INT1099 - PartK1 - SCorpK1 - EstK1 - TPAccMktDisc - get_bool(IASCHB.SPAccMktDiscInt) - get_bool(IASCHB.JtAccMktDiscInt) - get_bool(IASCHB.TPContigentPay){n}{t}{t}return 0{n}{t}elif ResSFM + OthSFM + OID + INT1099 + PartK1 + SCorpK1 + EstK1 + TPAccMktDisc + get_bool(IASCHB.SPAccMktDiscInt) + get_bool(IASCHB.JtAccMktDiscInt) + get_bool(IASCHB.TPContigentPay) + get_bool(IASCHB.SPContigentPay) + get_bool(IASCHB.JtContigentPay) > Index:{n}{t}{t}Stuff = ( Index )  - ResSFM - OthSFM - OID - INT1099 - PartK1 - SCorpK1 - EstK1 - TPAccMktDisc - get_bool(IASCHB.SPAccMktDiscInt) - get_bool(IASCHB.JtAccMktDiscInt) - get_bool(IASCHB.TPContigentPay) - get_bool(IASCHB.SPContigentPay){n}{t}{t}return 0{n}{t}else:{n}{t}{t}return 0{n}{n}
def JtAccMktDiscInt_Calculation():{n}{t}count = Integer(){n}{n}{t}Lim = Integer(){n}{n}{t}Total = Currency(){n}{t}Lim = GetAllCopies(USDCapGain){n}{t}count = 1{n}{t}Total = 0{n}{t}while count <= Lim:{n}{t}{t}if get_bool(USDCapGain.Joint, count) == True and get_currency(USDCapGain.IntIncome, count) > 0:{n}{t}{t}{t}Total = Total + get_currency(USDCapGain.IntIncome, count){n}{t}{t}else:{n}{t}{t}{t}Total = Total{n}{t}{t}count = count + 1{n}{t}if get_bool(IAREQUIRED.AskSpouse) == True:{n}{t}{t}return Total{n}{t}else:{n}{t}{t}return 0{n}{n}
def JtContigentPay_Calculation():{n}{t}count = Integer(){n}{n}{t}Lim = Integer(){n}{n}{t}Total = Currency(){n}{t}Lim = GetAllCopies(USDCapGain){n}{t}count = 1{n}{t}Total = 0{n}{t}while count <= Lim:{n}{t}{t}if get_bool(USDCapGain.Joint, count) == True and get_bool(USDCapGain.Ordinary, count) == True:{n}{t}{t}{t}Total = Total + get_currency(USDCapGain.OrdGain, count) - get_currency(USDCapGain.OrdLoss, count){n}{t}{t}else:{n}{t}{t}{t}Total = Total{n}{t}{t}count = count + 1{n}{t}if get_bool(IAREQUIRED.AskSpouse) == True:{n}{t}{t}return Total{n}{t}else:{n}{t}{t}return 0{n}{n}
def Names_Calculation():{n}{t}return get_string(IAREQUIRED.CombNames){n}{n}
def Payer_Calculation(Index):{n}{t}Stuff = Integer(){n}{n}{t}ResSFM = Integer(){n}{n}{t}OthSFM = Integer(){n}{n}{t}OID = Integer(){n}{n}{t}INT1099 = Integer(){n}{n}{t}PartK1 = Integer(){n}{n}{t}SCorpK1 = Integer(){n}{n}{t}EstK1 = Integer(){n}{n}{t}TPAccMktDisc = Boolean(){n}{t}ResSFM = get_number(IAWBBUMP.ResSFMNbr){n}{t}OthSFM = get_number(IAWBBUMP.OthSFMNbr){n}{t}OID = get_number(IAWBBUMP.OIDNbr){n}{t}INT1099 = get_number(IAWBBUMP.INTNbr){n}{t}PartK1 = get_number(IAWBBUMP.PartK1Nbr){n}{t}SCorpK1 = get_number(IAWBBUMP.SCorpK1Nbr){n}{t}EstK1 = get_number(IAWBBUMP.EstK1Nbr){n}{t}TPAccMktDisc = get_bool(IASCHB.TPAccMktDiscInt){n}{t}if Index == 6 and get_number(IASCHB.TotINTCopies) > 7:{n}{t}{t}return 'See Statement Attached'{n}{t}elif ResSFM > Index:{n}{t}{t}return get_string(USDSFM.NameAdd, get_number(IAWBBUMP.ResSFM(Index))){n}{t}elif ResSFM + OthSFM > Index:{n}{t}{t}Stuff = ( Index )  - ResSFM{n}{t}{t}return get_string(USDSFM.PayerName, ( get_number(IAWBBUMP.OthSFM(Stuff)) )){n}{t}elif ResSFM + OthSFM + OID > Index:{n}{t}{t}Stuff = ( Index )  - ResSFM - OthSFM{n}{t}{t}return get_string(USD1099OID.PayerName, ( get_number(IAWBBUMP.OID(Stuff)) )){n}{t}elif ResSFM + OthSFM + OID + INT1099 > Index:{n}{t}{t}Stuff = ( Index )  - ResSFM - OthSFM - OID{n}{t}{t}return get_string(USD1099INT.PayerName, ( get_number(IAWBBUMP.Int(Stuff)) )){n}{t}elif ResSFM + OthSFM + OID + INT1099 + PartK1 > Index:{n}{t}{t}Stuff = ( Index )  - ResSFM - OthSFM - OID - INT1099{n}{t}{t}return get_string(USDPartK1.CoName, ( get_number(IAWBBUMP.PartK1(Stuff)) )){n}{t}elif ResSFM + OthSFM + OID + INT1099 + PartK1 + SCorpK1 > Index:{n}{t}{t}Stuff = ( Index )  - ResSFM - OthSFM - OID - INT1099 - PartK1{n}{t}{t}return get_string(USDSCorpK1.CoName, ( get_number(IAWBBUMP.SCorpK1(Stuff)) )){n}{t}elif ResSFM + OthSFM + OID + INT1099 + PartK1 + SCorpK1 + EstK1 > Index:{n}{t}{t}Stuff = ( Index )  - ResSFM - OthSFM - OID - INT1099 - PartK1 - SCorpK1{n}{t}{t}return get_string(USDEstK1.TrustName, ( get_number(IAWBBUMP.EstK1(Stuff)) )){n}{t}elif ResSFM + OthSFM + OID + INT1099 + PartK1 + SCorpK1 + EstK1 + TPAccMktDisc > Index:{n}{t}{t}Stuff = ( Index )  - ResSFM - OthSFM - OID - INT1099 - PartK1 - SCorpK1 - EstK1{n}{t}{t}return 'Accrued Market Discount'{n}{t}elif ResSFM + OthSFM + OID + INT1099 + PartK1 + SCorpK1 + EstK1 + TPAccMktDisc + get_bool(IASCHB.SPAccMktDiscInt) > Index:{n}{t}{t}Stuff = ( Index )  - ResSFM - OthSFM - OID - INT1099 - PartK1 - SCorpK1 - EstK1 - TPAccMktDisc{n}{t}{t}return 'Accrued Market Discount'{n}{t}elif ResSFM + OthSFM + OID + INT1099 + PartK1 + SCorpK1 + EstK1 + TPAccMktDisc + get_bool(IASCHB.SPAccMktDiscInt) + get_bool(IASCHB.JtAccMktDiscInt) > Index:{n}{t}{t}Stuff = ( Index )  - ResSFM - OthSFM - OID - INT1099 - PartK1 - SCorpK1 - EstK1 - TPAccMktDisc - get_bool(IASCHB.SPAccMktDiscInt){n}{t}{t}return 'Accrued Market Discount'{n}{t}elif ResSFM + OthSFM + OID + INT1099 + PartK1 + SCorpK1 + EstK1 + TPAccMktDisc + get_bool(IASCHB.SPAccMktDiscInt) + get_bool(IASCHB.JtAccMktDiscInt) + get_bool(IASCHB.TPContigentPay) > Index:{n}{t}{t}Stuff = ( Index )  - ResSFM - OthSFM - OID - INT1099 - PartK1 - SCorpK1 - EstK1 - TPAccMktDisc - get_bool(IASCHB.SPAccMktDiscInt) - get_bool(IASCHB.JtAccMktDiscInt){n}{t}{t}return 'Contingent Payment Debt Instrument'{n}{t}elif ResSFM + OthSFM + OID + INT1099 + PartK1 + SCorpK1 + EstK1 + TPAccMktDisc + get_bool(IASCHB.SPAccMktDiscInt) + get_bool(IASCHB.JtAccMktDiscInt) + get_bool(IASCHB.TPContigentPay) + get_bool(IASCHB.SPContigentPay) > Index:{n}{t}{t}Stuff = ( Index )  - ResSFM - OthSFM - OID - INT1099 - PartK1 - SCorpK1 - EstK1 - TPAccMktDisc - get_bool(IASCHB.SPAccMktDiscInt) - get_bool(IASCHB.JtAccMktDiscInt) - get_bool(IASCHB.TPContigentPay){n}{t}{t}return 'Contingent Payment Debt Instrument'{n}{t}elif ResSFM + OthSFM + OID + INT1099 + PartK1 + SCorpK1 + EstK1 + TPAccMktDisc + get_bool(IASCHB.SPAccMktDiscInt) + get_bool(IASCHB.JtAccMktDiscInt) + get_bool(IASCHB.TPContigentPay) + get_bool(IASCHB.SPContigentPay) + get_bool(IASCHB.JtContigentPay) > Index:{n}{t}{t}Stuff = ( Index )  - ResSFM - OthSFM - OID - INT1099 - PartK1 - SCorpK1 - EstK1 - TPAccMktDisc - get_bool(IASCHB.SPAccMktDiscInt) - get_bool(IASCHB.JtAccMktDiscInt) - get_bool(IASCHB.TPContigentPay) - get_bool(IASCHB.SPContigentPay){n}{t}{t}return 'Contingent Payment Debt Instrument'{n}{t}else:{n}{t}{t}return ''{n}{n}
def PrintIAB_Calculation():{n}{t}if get_currency(IASCHB.TotalInterest) > Decimal("1500") or get_currency(IASCHB.TotalDividend) > Decimal("1500"):{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def SPAccMktDiscInt_Calculation():{n}{t}count = Integer(){n}{n}{t}Lim = Integer(){n}{n}{t}Total = Currency(){n}{t}Lim = GetAllCopies(USDCapGain){n}{t}count = 1{n}{t}Total = 0{n}{t}while count <= Lim:{n}{t}{t}if get_bool(USDCapGain.Spouse, count) == True and get_currency(USDCapGain.IntIncome, count) > 0:{n}{t}{t}{t}Total = Total + get_currency(USDCapGain.IntIncome, count){n}{t}{t}else:{n}{t}{t}{t}Total = Total{n}{t}{t}count = count + 1{n}{t}if get_bool(IAREQUIRED.AskSpouse) == True:{n}{t}{t}return Total{n}{t}else:{n}{t}{t}return 0{n}{n}
def SPContigentPay_Calculation():{n}{t}count = Integer(){n}{n}{t}Lim = Integer(){n}{n}{t}Total = Currency(){n}{t}Lim = GetAllCopies(USDCapGain){n}{t}count = 1{n}{t}Total = 0{n}{t}while count <= Lim:{n}{t}{t}if get_bool(USDCapGain.Spouse, count) == True and get_bool(USDCapGain.Ordinary, count) == True:{n}{t}{t}{t}Total = Total + get_currency(USDCapGain.OrdGain, count) - get_currency(USDCapGain.OrdLoss, count){n}{t}{t}else:{n}{t}{t}{t}Total = Total{n}{t}{t}count = count + 1{n}{t}if get_bool(IAREQUIRED.AskSpouse) == True:{n}{t}{t}return Total{n}{t}else:{n}{t}{t}return 0{n}{n}
def SSN_Calculation():{n}{t}return get_string(IAF1040.SSN){n}{n}
def TaxDiv_Calculation(Index):{n}{t}return max_value(0, get_currency(IASCHB.Dividend(Index)) - get_currency(IASCHB.ExemptDiv(Index))){n}{n}
def TaxInt_Calculation(Index):{n}{t}return max_value(0, get_currency(IASCHB.Interest(Index)) - get_currency(IASCHB.ExemptInt(Index))){n}{n}
def TotAccMktDiscInt_Calculation():{n}{t}count = Integer(){n}{n}{t}Lim = Integer(){n}{n}{t}Total = Currency(){n}{t}Lim = GetAllCopies(USDCapGain){n}{t}count = 1{n}{t}Total = 0{n}{t}while count <= Lim:{n}{t}{t}if get_currency(USDCapGain.IntIncome, count) > 0:{n}{t}{t}{t}Total = Total + get_currency(USDCapGain.IntIncome, count){n}{t}{t}else:{n}{t}{t}{t}Total = Total{n}{t}{t}count = count + 1{n}{t}return Round(Total){n}{n}
def TotalDividend_Calculation():{n}{t}count = Integer(){n}{n}{t}SubTot = Currency(){n}{t}count = 0{n}{t}SubTot = 0{n}{t}while count < 7:{n}{t}{t}SubTot = SubTot + get_currency(IASCHB.Dividend(count)){n}{t}{t}count = count + 1{n}{t}return SubTot{n}{n}
def TotalExemptDiv_Calculation():{n}{t}count = Integer(){n}{n}{t}SubTot = Currency(){n}{t}count = 0{n}{t}SubTot = 0{n}{t}while count < 7:{n}{t}{t}SubTot = SubTot + get_currency(IASCHB.ExemptDiv(count)){n}{t}{t}count = count + 1{n}{t}return SubTot{n}{n}
def TotalExemptInt_Calculation():{n}{t}count = Integer(){n}{n}{t}SubTot = Currency(){n}{t}count = 0{n}{t}SubTot = 0{n}{t}while count < 7:{n}{t}{t}SubTot = SubTot + get_currency(IASCHB.ExemptInt(count)){n}{t}{t}count = count + 1{n}{t}return SubTot{n}{n}
def TotalInterest_Calculation():{n}{t}count = Integer(){n}{n}{t}SubTot = Currency(){n}{t}count = 0{n}{t}SubTot = 0{n}{t}while count < 7:{n}{t}{t}SubTot = SubTot + get_currency(IASCHB.Interest(count)){n}{t}{t}count = count + 1{n}{t}return SubTot{n}{n}
def TotalTaxDiv_Calculation():{n}{t}count = Integer(){n}{n}{t}SubTot = Currency(){n}{t}count = 0{n}{t}SubTot = 0{n}{t}while count < 7:{n}{t}{t}SubTot = SubTot + get_currency(IASCHB.TaxDiv(count)){n}{t}{t}count = count + 1{n}{t}return SubTot{n}{n}
def TotalTaxInt_Calculation():{n}{t}count = Integer(){n}{n}{t}SubTot = Currency(){n}{t}count = 0{n}{t}SubTot = 0{n}{t}while count < 7:{n}{t}{t}SubTot = SubTot + get_currency(IASCHB.TaxInt(count)){n}{t}{t}count = count + 1{n}{t}return SubTot{n}{n}
def TotContigentPay_Calculation():{n}{t}count = Integer(){n}{n}{t}Lim = Integer(){n}{n}{t}Total = Currency(){n}{t}Lim = GetAllCopies(USDCapGain){n}{t}count = 1{n}{t}Total = 0{n}{t}while count <= Lim:{n}{t}{t}if get_bool(USDCapGain.Ordinary, count) == True:{n}{t}{t}{t}Total = Total + get_currency(USDCapGain.OrdGain, count) - get_currency(USDCapGain.OrdLoss, count){n}{t}{t}else:{n}{t}{t}{t}Total = Total{n}{t}{t}count = count + 1{n}{t}return Round(Total){n}{n}
def TotDIVCopies_Calculation():{n}{t}return get_number(IAWBBUMP.DIVNbr) + get_number(IAWBBUMP.PartK1DivNbr) + get_number(IAWBBUMP.SCorpK1DivNbr) + get_number(IAWBBUMP.EstK1DivNbr) + get_number(IAWBBUMP.F5471Nbr) + get_number(IAWBBUMP.F8621Nbr) + get_number(IAWBBUMP.F8814Nbr){n}{n}
def TotINTCopies_Calculation():{n}{t}return get_number(IAWBBUMP.ResSFMNbr) + get_number(IAWBBUMP.OthSFMNbr) + get_number(IAWBBUMP.OIDNbr) + get_number(IAWBBUMP.INTNbr) + get_number(IAWBBUMP.PartK1Nbr) + get_number(IAWBBUMP.SCorpK1Nbr) + get_number(IAWBBUMP.EstK1Nbr) + get_number(IASCHB.AccMktDiscIntCopies) + get_number(IASCHB.ContigentPayCopies){n}{n}
def TPAccMktDiscInt_Calculation():{n}{t}return get_currency(IASCHB.TotAccMktDiscInt) - get_currency(IASCHB.SPAccMktDiscInt) - get_currency(IASCHB.JtAccMktDiscInt){n}{n}
def TPContigentPay_Calculation():{n}{t}return get_currency(IASCHB.TotContigentPay) - get_currency(IASCHB.SPContigentPay) - get_currency(IASCHB.JtContigentPay){n}{n}def Desc_Calculation():{n}{t}return CStr(get_currency(IASTATEEST.TotIAEst)){n}{n}
def Exist_Calculation():{n}{t}return 1{n}{n}
def MobDisQual_Calculation():{n}{t}if get_currency(IASTATEEST.TotIAEst) > 0:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def Names_Calculation():{n}{t}return get_string(IAREQUIRED.CombNames){n}{n}
def SPIAEst_Calculation():{n}{t}if IAFS() == 3:{n}{t}{t}return get_currency(IASTATEEST.SPStApply) + get_currency(IASTATEEST.SPStQ1) + get_currency(IASTATEEST.SPStQ2) + get_currency(IASTATEEST.SPStQ3) + get_currency(IASTATEEST.SPStQ4) + get_currency(IASTATEEST.SPStLate){n}{t}else:{n}{t}{t}return 0{n}{n}
def SPName_Calculation():{n}{t}return get_string(USWBasicInfo.SPCommon){n}{n}
def SPStLateDate_Calculation():{n}{t}if IAFS() == 3:{n}{t}{t}return GetDate(IASTATEEST.TPStLateDate){n}{t}else:{n}{t}{t}return ''{n}{n}
def SPStQ1Date_Calculation():{n}{t}if IAFS() == 3:{n}{t}{t}return GetDate(IASTATEEST.TPStQ1Date){n}{t}else:{n}{t}{t}return ''{n}{n}
def SPStQ2Date_Calculation():{n}{t}if IAFS() == 3:{n}{t}{t}return GetDate(IASTATEEST.TPStQ2Date){n}{t}else:{n}{t}{t}return ''{n}{n}
def SPStQ3Date_Calculation():{n}{t}if IAFS() == 3:{n}{t}{t}return GetDate(IASTATEEST.TPStQ3Date){n}{t}else:{n}{t}{t}return ''{n}{n}
def SPStQ4Date_Calculation():{n}{t}if IAFS() == 3:{n}{t}{t}return GetDate(IASTATEEST.TPStQ4Date){n}{t}else:{n}{t}{t}return ''{n}{n}
def SSN_Calculation():{n}{t}return get_string(IAF1040.SSN){n}{n}
def StApply_Calculation():{n}{t}if get_string(USWEstPay.StName1) == 'Iowa':{n}{t}{t}return get_currency(USWEstPay.StApply){n}{t}elif get_string(USWEstPay.StName2) == 'Iowa':{n}{t}{t}return get_currency(USWEstPay.St2Apply){n}{t}elif get_string(USWEstPay.StName3) == 'Iowa':{n}{t}{t}return get_currency(USWEstPay.St3Apply){n}{t}else:{n}{t}{t}return 0{n}{n}
def StLate_Calculation():{n}{t}if get_string(USWEstPay.StName1) == 'Iowa':{n}{t}{t}return get_currency(USWEstPay.StLate){n}{t}elif get_string(USWEstPay.StName2) == 'Iowa':{n}{t}{t}return get_currency(USWEstPay.St2Late){n}{t}elif get_string(USWEstPay.StName3) == 'Iowa':{n}{t}{t}return get_currency(USWEstPay.St3Late){n}{t}else:{n}{t}{t}return 0{n}{n}
def StQ1_Calculation():{n}{t}if get_string(USWEstPay.StName1) == 'Iowa':{n}{t}{t}return get_currency(USWEstPay.StQ1){n}{t}elif get_string(USWEstPay.StName2) == 'Iowa':{n}{t}{t}return get_currency(USWEstPay.St2Q1){n}{t}elif get_string(USWEstPay.StName3) == 'Iowa':{n}{t}{t}return get_currency(USWEstPay.St3Q1){n}{t}else:{n}{t}{t}return 0{n}{n}
def StQ2_Calculation():{n}{t}if get_string(USWEstPay.StName1) == 'Iowa':{n}{t}{t}return get_currency(USWEstPay.StQ2){n}{t}elif get_string(USWEstPay.StName2) == 'Iowa':{n}{t}{t}return get_currency(USWEstPay.St2Q2){n}{t}elif get_string(USWEstPay.StName3) == 'Iowa':{n}{t}{t}return get_currency(USWEstPay.St3Q2){n}{t}else:{n}{t}{t}return 0{n}{n}
def StQ3_Calculation():{n}{t}if get_string(USWEstPay.StName1) == 'Iowa':{n}{t}{t}return get_currency(USWEstPay.StQ3){n}{t}elif get_string(USWEstPay.StName2) == 'Iowa':{n}{t}{t}return get_currency(USWEstPay.St2Q3){n}{t}elif get_string(USWEstPay.StName3) == 'Iowa':{n}{t}{t}return get_currency(USWEstPay.St3Q3){n}{t}else:{n}{t}{t}return 0{n}{n}
def StQ4_Calculation():{n}{t}if get_string(USWEstPay.StName1) == 'Iowa':{n}{t}{t}return get_currency(USWEstPay.StQ4){n}{t}elif get_string(USWEstPay.StName2) == 'Iowa':{n}{t}{t}return get_currency(USWEstPay.St2Q4){n}{t}elif get_string(USWEstPay.StName3) == 'Iowa':{n}{t}{t}return get_currency(USWEstPay.St3Q4){n}{t}else:{n}{t}{t}return 0{n}{n}
def TotIAEst_Calculation():{n}{t}return get_currency(IASTATEEST.StApply) + get_currency(IASTATEEST.StQ1) + get_currency(IASTATEEST.StQ2) + get_currency(IASTATEEST.StQ3) + get_currency(IASTATEEST.StQ4) + get_currency(IASTATEEST.StLate){n}{n}
def TPName_Calculation():{n}{t}return get_string(USWBasicInfo.TPCommon){n}{n}
def TPStApply_Calculation():{n}{t}if IAFS() == 3:{n}{t}{t}return max_value(0, get_currency(IASTATEEST.StApply) - get_currency(IASTATEEST.SPStApply)){n}{t}else:{n}{t}{t}return get_currency(IASTATEEST.StApply){n}{n}
def TPStLate_Calculation():{n}{t}if IAFS() == 3:{n}{t}{t}return max_value(0, get_currency(IASTATEEST.StLate) - get_currency(IASTATEEST.SPStLate)){n}{t}else:{n}{t}{t}return get_currency(IASTATEEST.StLate){n}{n}
def TPStLateDate_Calculation():{n}{t}if get_string(USWEstPay.StName1) == 'Iowa':{n}{t}{t}return GetDate(USWEstPay.StLateDate){n}{t}elif get_string(USWEstPay.StName2) == 'Iowa':{n}{t}{t}return GetDate(USWEstPay.St2LateDate){n}{t}elif get_string(USWEstPay.StName3) == 'Iowa':{n}{t}{t}return GetDate(USWEstPay.St3LateDate){n}{t}else:{n}{t}{t}return datetime.datetime(4, 30, 2019){n}{n}
def TPStQ1_Calculation():{n}{t}if IAFS() == 3:{n}{t}{t}return max_value(0, get_currency(IASTATEEST.StQ1) - get_currency(IASTATEEST.SPStQ1)){n}{t}else:{n}{t}{t}return get_currency(IASTATEEST.StQ1){n}{n}
def TPStQ1Date_Calculation():{n}{t}if get_string(USWEstPay.StName1) == 'Iowa':{n}{t}{t}return GetDate(USWEstPay.StQ1Date){n}{t}elif get_string(USWEstPay.StName2) == 'Iowa':{n}{t}{t}return GetDate(USWEstPay.St2Q1Date){n}{t}elif get_string(USWEstPay.StName3) == 'Iowa':{n}{t}{t}return GetDate(USWEstPay.St3Q1Date){n}{t}else:{n}{t}{t}return datetime.datetime(4, 30, 2018){n}{n}
def TPStQ2_Calculation():{n}{t}if IAFS() == 3:{n}{t}{t}return max_value(0, get_currency(IASTATEEST.StQ2) - get_currency(IASTATEEST.SPStQ2)){n}{t}else:{n}{t}{t}return get_currency(IASTATEEST.StQ2){n}{n}
def TPStQ2Date_Calculation():{n}{t}if get_string(USWEstPay.StName1) == 'Iowa':{n}{t}{t}return GetDate(USWEstPay.StQ2Date){n}{t}elif get_string(USWEstPay.StName2) == 'Iowa':{n}{t}{t}return GetDate(USWEstPay.St2Q2Date){n}{t}elif get_string(USWEstPay.StName3) == 'Iowa':{n}{t}{t}return GetDate(USWEstPay.St3Q2Date){n}{t}else:{n}{t}{t}return datetime.datetime(7, 2, 2018){n}{n}
def TPStQ3_Calculation():{n}{t}if IAFS() == 3:{n}{t}{t}return max_value(0, get_currency(IASTATEEST.StQ3) - get_currency(IASTATEEST.SPStQ3)){n}{t}else:{n}{t}{t}return get_currency(IASTATEEST.StQ3){n}{n}
def TPStQ3Date_Calculation():{n}{t}if get_string(USWEstPay.StName1) == 'Iowa':{n}{t}{t}return GetDate(USWEstPay.StQ3Date){n}{t}elif get_string(USWEstPay.StName2) == 'Iowa':{n}{t}{t}return GetDate(USWEstPay.St2Q3Date){n}{t}elif get_string(USWEstPay.StName3) == 'Iowa':{n}{t}{t}return GetDate(USWEstPay.St3Q3Date){n}{t}else:{n}{t}{t}return datetime.datetime(10, 1, 2018){n}{n}
def TPStQ4_Calculation():{n}{t}if IAFS() == 3:{n}{t}{t}return max_value(0, get_currency(IASTATEEST.StQ4) - get_currency(IASTATEEST.SPStQ4)){n}{t}else:{n}{t}{t}return get_currency(IASTATEEST.StQ4){n}{n}
def TPStQ4Date_Calculation():{n}{t}if get_string(USWEstPay.StName1) == 'Iowa':{n}{t}{t}return GetDate(USWEstPay.StQ4Date){n}{t}elif get_string(USWEstPay.StName2) == 'Iowa':{n}{t}{t}return GetDate(USWEstPay.St2Q4Date){n}{t}elif get_string(USWEstPay.StName3) == 'Iowa':{n}{t}{t}return GetDate(USWEstPay.St3Q4Date){n}{t}else:{n}{t}{t}return datetime.datetime(1, 31, 2019){n}{n}def Credit_Calculation(Index):{n}{t}if trim(get_string(IATUITION.DepName(Index))) != '':{n}{t}{t}return c_dollar(CDbl(min_value(get_currency(IATUITION.Expenses(Index)), Decimal("1000"))) * 0.25){n}{t}else:{n}{t}{t}return 0{n}{n}
def DepName_Calculation(Index):{n}{t}count = Integer(){n}{n}{t}Hold = String(){n}{t}count = 0{n}{t}Hold = ''{n}{t}if get_number(IAADDDEP.FDepAge(0)) > 0 and get_number(IAADDDEP.FDepAge(0)) < 20:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_string(IAADDDEP.FDepName(0)) + ' ' + get_string(IAADDDEP.FDepLast(0)){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_number(IAADDDEP.FDepAge(1)) > 0 and get_number(IAADDDEP.FDepAge(1)) < 20:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_string(IAADDDEP.FDepName(1)) + ' ' + get_string(IAADDDEP.FDepLast(1)){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_number(IAADDDEP.FDepAge(2)) > 0 and get_number(IAADDDEP.FDepAge(2)) < 20:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_string(IAADDDEP.FDepName(2)) + ' ' + get_string(IAADDDEP.FDepLast(2)){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_number(IAADDDEP.FDepAge(3)) > 0 and get_number(IAADDDEP.FDepAge(3)) < 20:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_string(IAADDDEP.FDepName(3)) + ' ' + get_string(IAADDDEP.FDepLast(3)){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_number(IAADDDEP.FDepAge(4)) > 0 and get_number(IAADDDEP.FDepAge(4)) < 20:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_string(IAADDDEP.FDepName(4)) + ' ' + get_string(IAADDDEP.FDepLast(4)){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_number(IAADDDEP.FDepAge(5)) > 0 and get_number(IAADDDEP.FDepAge(5)) < 20:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_string(IAADDDEP.FDepName(5)) + ' ' + get_string(IAADDDEP.FDepLast(5)){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_number(IAADDDEP.FDepAge(6)) > 0 and get_number(IAADDDEP.FDepAge(6)) < 20:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_string(IAADDDEP.FDepName(6)) + ' ' + get_string(IAADDDEP.FDepLast(6)){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_number(IAADDDEP.FDepAge(7)) > 0 and get_number(IAADDDEP.FDepAge(7)) < 20:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_string(IAADDDEP.FDepName(7)) + ' ' + get_string(IAADDDEP.FDepLast(7)){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_number(IAADDDEP.FDepAge(8)) > 0 and get_number(IAADDDEP.FDepAge(8)) < 20:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_string(IAADDDEP.FDepName(8)) + ' ' + get_string(IAADDDEP.FDepLast(8)){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_number(IAADDDEP.FDepAge(9)) > 0 and get_number(IAADDDEP.FDepAge(9)) < 20:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_string(IAADDDEP.FDepName(9)) + ' ' + get_string(IAADDDEP.FDepLast(9)){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_number(IAADDDEP.FDepAge(10)) > 0 and get_number(IAADDDEP.FDepAge(10)) < 20:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_string(IAADDDEP.FDepName(10)) + ' ' + get_string(IAADDDEP.FDepLast(10)){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_number(IAADDDEP.FDepAge(11)) > 0 and get_number(IAADDDEP.FDepAge(11)) < 20:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_string(IAADDDEP.FDepName(11)) + ' ' + get_string(IAADDDEP.FDepLast(11)){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_number(IAADDDEP.FDepAge(12)) > 0 and get_number(IAADDDEP.FDepAge(12)) < 20:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_string(IAADDDEP.FDepName(12)) + ' ' + get_string(IAADDDEP.FDepLast(12)){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_number(IAADDDEP.FDepAge(13)) > 0 and get_number(IAADDDEP.FDepAge(13)) < 20:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_string(IAADDDEP.FDepName(13)) + ' ' + get_string(IAADDDEP.FDepLast(13)){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_number(IAADDDEP.FDepAge(14)) > 0 and get_number(IAADDDEP.FDepAge(14)) < 20:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_string(IAADDDEP.FDepName(14)) + ' ' + get_string(IAADDDEP.FDepLast(14)){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}return Hold{n}{n}
def Description_Calculation():{n}{t}return CStr(get_currency(IATUITION.TotCR)){n}{n}
def Names_Calculation():{n}{t}return get_string(IAREQUIRED.CombNames){n}{n}
def Spouse_Calculation(Index):{n}{t}if trim(get_string(IATUITION.DepName(Index))) != '':{n}{t}{t}if get_bool(IAF1040.CombMFS) == False:{n}{t}{t}{t}return 0{n}{t}{t}elif get_number(IAF1040.DC2) == 0:{n}{t}{t}{t}return 0{n}{t}{t}elif get_number(IAF1040.DC2) > Index:{n}{t}{t}{t}return 1{n}{t}{t}else:{n}{t}{t}{t}return 0{n}{t}else:{n}{t}{t}return 0{n}{n}
def SSN_Calculation():{n}{t}return get_string(IAF1040.SSN){n}{n}
def STuit_Calculation():{n}{t}count = Integer(){n}{n}{t}SubTot = Currency(){n}{t}count = 0{n}{t}SubTot = 0{n}{t}while count < 15:{n}{t}{t}if get_bool(IATUITION.Spouse(count)) == True:{n}{t}{t}{t}SubTot = SubTot + get_currency(IATUITION.Credit(count)){n}{t}{t}else:{n}{t}{t}{t}SubTot = SubTot{n}{t}{t}count = count + 1{n}{t}if get_bool(IAF1040.CombMFS) == True and get_number(IAF1040.DC2) > 0:{n}{t}{t}return SubTot{n}{t}else:{n}{t}{t}return 0{n}{n}
def Taxpayer_Calculation(Index):{n}{t}if trim(get_string(IATUITION.DepName(Index))) != '' and get_bool(IATUITION.Spouse(Index)) == False:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def TotCR_Calculation():{n}{t}count = Integer(){n}{n}{t}SubTot = Currency(){n}{t}count = 0{n}{t}SubTot = 0{n}{t}while count < 15:{n}{t}{t}SubTot = SubTot + get_currency(IATUITION.Credit(count)){n}{t}{t}count = count + 1{n}{t}return SubTot{n}{n}
def TotExp_Calculation():{n}{t}count = Integer(){n}{n}{t}SubTot = Currency(){n}{t}count = 0{n}{t}SubTot = 0{n}{t}while count < 15:{n}{t}{t}SubTot = SubTot + get_currency(IATUITION.Expenses(count)){n}{t}{t}count = count + 1{n}{t}return SubTot{n}{n}
def TTuit_Calculation():{n}{t}return get_currency(IATUITION.TotCR) - get_currency(IATUITION.STuit){n}{n}def AMTInt_Calculation():{n}{t}if get_bool(USWResidency.F1040NR) == True:{n}{t}{t}return 0{n}{t}elif get_bool(IAF1040.ItemCheck) == True:{n}{t}{t}return min_value(get_currency(IAW6251MORTINT.TotMortInt), get_currency(IAW6251MORTINT.MortInt98) + get_currency(IAW6251MORTINT.RefinInt) + get_currency(IAW6251MORTINT.OthInt)){n}{t}else:{n}{t}{t}return 0{n}{n}
def Desc_Calculation():{n}{t}return CStr(get_currency(IAW6251MORTINT.AMTInt)){n}{n}
def Exist_Calculation():{n}{t}return 1{n}{n}
def MortInt_Calculation():{n}{t}if get_bool(USWResidency.F1040NR) == True:{n}{t}{t}return 0{n}{t}elif get_bool(IAF1040.ItemCheck) == True:{n}{t}{t}return get_currency(IASCHA.Mort){n}{t}else:{n}{t}{t}return 0{n}{n}
def MortInt98_Calculation():{n}{t}if get_bool(IAF1040.ItemCheck) == True:{n}{t}{t}return get_currency(USD1098.StateAdj){n}{t}else:{n}{t}{t}return 0{n}{n}
def MtgePrem_Calculation():{n}{t}if get_bool(USWResidency.F1040NR) == True:{n}{t}{t}return 0{n}{t}elif get_bool(IAF1040.ItemCheck) == True:{n}{t}{t}return get_currency(IASCHA.MtgePrem){n}{t}else:{n}{t}{t}return 0{n}{n}
def Names_Calculation():{n}{t}return get_string(IAREQUIRED.CombNames){n}{n}
def Points_Calculation():{n}{t}if get_bool(USWResidency.F1040NR) == True:{n}{t}{t}return 0{n}{t}elif get_bool(IAF1040.ItemCheck) == True:{n}{t}{t}return get_currency(IASCHA.PtsNot){n}{t}else:{n}{t}{t}return 0{n}{n}
def Sfm_Calculation():{n}{t}if get_bool(USWResidency.F1040NR) == True:{n}{t}{t}return 0{n}{t}elif get_bool(IAF1040.ItemCheck) == True:{n}{t}{t}return get_currency(IASCHA.MortNot){n}{t}else:{n}{t}{t}return 0{n}{n}
def SSN_Calculation():{n}{t}return get_string(IAF1040.SSN){n}{n}
def TotMortInt_Calculation():{n}{t}if get_bool(USWResidency.F1040NR) == True:{n}{t}{t}return 0{n}{t}elif get_bool(IAF1040.ItemCheck) == True:{n}{t}{t}return get_currency(IAW6251MORTINT.MortInt) + get_currency(IAW6251MORTINT.Sfm) + get_currency(IAW6251MORTINT.Points) + get_currency(IAW6251MORTINT.MtgePrem){n}{t}else:{n}{t}{t}return 0{n}{n}def DIV_Calculation(Index):{n}{t}count = Long(){n}{n}{t}max = Long(){n}{n}{t}listedcount = Long(){n}{t}listedcount = 0{n}{t}max = GetAllCopies(USD1099DIV){n}{t}count = 0{n}{t}while count < max:{n}{t}{t}count = count + 1{n}{t}{t}if get_currency(USD1099DIV.OrdDiv, count) + get_currency(USD1099DIV.FedExmpt, count) > 0:{n}{t}{t}{t}if listedcount == Index:{n}{t}{t}{t}{t}return count{n}{t}{t}{t}else:{n}{t}{t}{t}{t}listedcount = listedcount + 1{n}{t}return 0{n}{n}
def DIVNbr_Calculation():{n}{t}count = Integer(){n}{n}{t}Lim = Integer(){n}{n}{t}Total = Integer(){n}{t}Lim = GetAllCopies(USD1099DIV){n}{t}count = 1{n}{t}Total = 0{n}{t}while count <= Lim:{n}{t}{t}if get_currency(USD1099DIV.OrdDiv, count) + get_currency(USD1099DIV.FedExmpt, count) > 0:{n}{t}{t}{t}Total = Total + 1{n}{t}{t}else:{n}{t}{t}{t}Total = Total{n}{t}{t}count = count + 1{n}{t}return Total{n}{n}
def EstK1_Calculation(Index):{n}{t}count = Long(){n}{n}{t}max = Long(){n}{n}{t}listedcount = Long(){n}{t}listedcount = 0{n}{t}max = GetAllCopies(USDEstK1){n}{t}count = 0{n}{t}while count < max:{n}{t}{t}count = count + 1{n}{t}{t}if get_currency(USDEstK1.HaveInt, count) > 0:{n}{t}{t}{t}if listedcount == Index:{n}{t}{t}{t}{t}return count{n}{t}{t}{t}else:{n}{t}{t}{t}{t}listedcount = listedcount + 1{n}{t}return 0{n}{n}
def EstK1Div_Calculation(Index):{n}{t}count = Long(){n}{n}{t}max = Long(){n}{n}{t}listedcount = Long(){n}{t}listedcount = 0{n}{t}max = GetAllCopies(USDEstK1){n}{t}count = 0{n}{t}while count < max:{n}{t}{t}count = count + 1{n}{t}{t}if get_currency(USDEstK1.Dividends, count) > 0:{n}{t}{t}{t}if listedcount == Index:{n}{t}{t}{t}{t}return count{n}{t}{t}{t}else:{n}{t}{t}{t}{t}listedcount = listedcount + 1{n}{t}return 0{n}{n}
def EstK1DivNbr_Calculation():{n}{t}count = Integer(){n}{n}{t}Lim = Integer(){n}{n}{t}Total = Integer(){n}{t}Lim = GetAllCopies(USDEstK1){n}{t}count = 1{n}{t}Total = 0{n}{t}while count <= Lim:{n}{t}{t}if get_currency(USDEstK1.Dividends, count) > 0:{n}{t}{t}{t}Total = Total + 1{n}{t}{t}else:{n}{t}{t}{t}Total = Total{n}{t}{t}count = count + 1{n}{t}return Total{n}{n}
def EstK1Nbr_Calculation():{n}{t}count = Integer(){n}{n}{t}Lim = Integer(){n}{n}{t}Total = Integer(){n}{t}Lim = GetAllCopies(USDEstK1){n}{t}count = 1{n}{t}Total = 0{n}{t}while count <= Lim:{n}{t}{t}if get_currency(USDEstK1.HaveInt, count) > 0:{n}{t}{t}{t}Total = Total + 1{n}{t}{t}else:{n}{t}{t}{t}Total = Total{n}{t}{t}count = count + 1{n}{t}return Total{n}{n}
def F5471_Calculation(Index):{n}{t}count = Long(){n}{n}{t}max = Long(){n}{n}{t}listedcount = Long(){n}{t}listedcount = 0{n}{t}max = GetAllCopies(USW5471SchI){n}{t}count = 0{n}{t}while count < max:{n}{t}{t}count = count + 1{n}{t}{t}if get_currency(USW5471SchI.DivOrd, count) > 0 and  ( ( get_string(USW5471SchI.SchISSN, count) == get_string(USWBasicInfo.SSN) )  or  ( get_string(USW5471SchI.SchISSN, count) == get_string(USWBasicInfo.SpouseSSN) ) ) :{n}{t}{t}{t}if listedcount == Index:{n}{t}{t}{t}{t}return count{n}{t}{t}{t}else:{n}{t}{t}{t}{t}listedcount = listedcount + 1{n}{t}return 0{n}{n}
def F5471Nbr_Calculation():{n}{t}count = Integer(){n}{n}{t}Lim = Integer(){n}{n}{t}Total = Integer(){n}{t}Lim = GetAllCopies(USW5471SchI){n}{t}count = 1{n}{t}Total = 0{n}{t}while count <= Lim:{n}{t}{t}if get_currency(USW5471SchI.DivOrd, count) > 0 and  ( ( get_string(USW5471SchI.SchISSN, count) == get_string(USWBasicInfo.SSN) )  or  ( get_string(USW5471SchI.SchISSN, count) == get_string(USWBasicInfo.SpouseSSN) ) ) :{n}{t}{t}{t}Total = Total + 1{n}{t}{t}else:{n}{t}{t}{t}Total = Total{n}{t}{t}count = count + 1{n}{t}return Total{n}{n}
def F8621_Calculation(Index):{n}{t}count = Long(){n}{n}{t}max = Long(){n}{n}{t}listedcount = Long(){n}{t}listedcount = 0{n}{t}max = GetAllCopies(USF8621){n}{t}count = 0{n}{t}while count < max:{n}{t}{t}count = count + 1{n}{t}{t}if get_currency(USF8621.DivTo1040, count) > 0:{n}{t}{t}{t}if listedcount == Index:{n}{t}{t}{t}{t}return count{n}{t}{t}{t}else:{n}{t}{t}{t}{t}listedcount = listedcount + 1{n}{t}return 0{n}{n}
def F8621Nbr_Calculation():{n}{t}count = Integer(){n}{n}{t}Lim = Integer(){n}{n}{t}Total = Integer(){n}{t}Lim = GetAllCopies(USF8621){n}{t}count = 1{n}{t}Total = 0{n}{t}while count <= Lim:{n}{t}{t}if get_currency(USF8621.DivTo1040, count) > 0:{n}{t}{t}{t}Total = Total + 1{n}{t}{t}else:{n}{t}{t}{t}Total = Total{n}{t}{t}count = count + 1{n}{t}return Total{n}{n}
def F8814_Calculation(Index):{n}{t}count = Long(){n}{n}{t}max = Long(){n}{n}{t}listedcount = Long(){n}{t}listedcount = 0{n}{t}max = GetAllCopies(USF8814){n}{t}count = 0{n}{t}while count < max:{n}{t}{t}count = count + 1{n}{t}{t}if get_currency(USF8814.L6XL7, count) > 0:{n}{t}{t}{t}if listedcount == Index:{n}{t}{t}{t}{t}return count{n}{t}{t}{t}else:{n}{t}{t}{t}{t}listedcount = listedcount + 1{n}{t}return 0{n}{n}
def F8814Nbr_Calculation():{n}{t}count = Integer(){n}{n}{t}Lim = Integer(){n}{n}{t}Total = Integer(){n}{t}Lim = GetAllCopies(USF8814){n}{t}count = 1{n}{t}Total = 0{n}{t}while count <= Lim:{n}{t}{t}if get_currency(USF8814.L6XL7, count) > 0:{n}{t}{t}{t}Total = Total + 1{n}{t}{t}else:{n}{t}{t}{t}Total = Total{n}{t}{t}count = count + 1{n}{t}return Total{n}{n}
def INT_Calculation(Index):{n}{t}count = Long(){n}{n}{t}max = Long(){n}{n}{t}listedcount = Long(){n}{t}listedcount = 0{n}{t}max = GetAllCopies(USD1099INT){n}{t}count = 0{n}{t}while count < max:{n}{t}{t}count = count + 1{n}{t}{t}if get_currency(USD1099INT.BAmtEF, count) + get_currency(USD1099INT.FedExmpt, count) > 0:{n}{t}{t}{t}if listedcount == Index:{n}{t}{t}{t}{t}return count{n}{t}{t}{t}else:{n}{t}{t}{t}{t}listedcount = listedcount + 1{n}{t}return 0{n}{n}
def INTNbr_Calculation():{n}{t}count = Integer(){n}{n}{t}Lim = Integer(){n}{n}{t}Total = Integer(){n}{t}Lim = GetAllCopies(USD1099INT){n}{t}count = 1{n}{t}Total = 0{n}{t}while count <= Lim:{n}{t}{t}if get_currency(USD1099INT.BAmtEF, count) + get_currency(USD1099INT.FedExmpt, count) > 0:{n}{t}{t}{t}Total = Total + 1{n}{t}{t}else:{n}{t}{t}{t}Total = Total{n}{t}{t}count = count + 1{n}{t}return Total{n}{n}
def Names_Calculation():{n}{t}return get_string(IASCHB.Names){n}{n}
def OID_Calculation(Index):{n}{t}count = Long(){n}{n}{t}max = Long(){n}{n}{t}listedcount = Long(){n}{t}listedcount = 0{n}{t}max = GetAllCopies(USD1099OID){n}{t}count = 0{n}{t}while count < max:{n}{t}{t}count = count + 1{n}{t}{t}if get_currency(USD1099OID.BAmt, count) > 0 or Round(get_currency(USD1099OID.BOIDAdjAmt, count)) != 0 or Round(get_currency(USD1099OID.TaxExempt, count)) != 0:{n}{t}{t}{t}if listedcount == Index:{n}{t}{t}{t}{t}return count{n}{t}{t}{t}else:{n}{t}{t}{t}{t}listedcount = listedcount + 1{n}{t}return 0{n}{n}
def OIDNbr_Calculation():{n}{t}count = Integer(){n}{n}{t}Lim = Integer(){n}{n}{t}Total = Integer(){n}{t}Lim = GetAllCopies(USD1099OID){n}{t}count = 1{n}{t}Total = 0{n}{t}while count <= Lim:{n}{t}{t}if get_currency(USD1099OID.BAmt, count) > 0 or Round(get_currency(USD1099OID.BOIDAdjAmt, count)) != 0 or Round(get_currency(USD1099OID.TaxExempt, count)) != 0:{n}{t}{t}{t}Total = Total + 1{n}{t}{t}else:{n}{t}{t}{t}Total = Total{n}{t}{t}count = count + 1{n}{t}return Total{n}{n}
def OthSFM_Calculation(Index):{n}{t}count = Long(){n}{n}{t}max = Long(){n}{n}{t}listedcount = Long(){n}{t}listedcount = 0{n}{t}max = GetAllCopies(USDSFM){n}{t}count = 0{n}{t}while count < max:{n}{t}{t}count = count + 1{n}{t}{t}if get_bool(USDSFM.Residence, count) == False and get_currency(USDSFM.Interest, count) > 0:{n}{t}{t}{t}if listedcount == Index:{n}{t}{t}{t}{t}return count{n}{t}{t}{t}else:{n}{t}{t}{t}{t}listedcount = listedcount + 1{n}{t}return 0{n}{n}
def OthSFMNbr_Calculation():{n}{t}count = Integer(){n}{n}{t}Lim = Integer(){n}{n}{t}Total = Integer(){n}{t}Lim = GetAllCopies(USDSFM){n}{t}count = 1{n}{t}Total = 0{n}{t}while count <= Lim:{n}{t}{t}if get_bool(USDSFM.Residence, count) == False and get_currency(USDSFM.Interest, count) > 0:{n}{t}{t}{t}Total = Total + 1{n}{t}{t}else:{n}{t}{t}{t}Total = Total{n}{t}{t}count = count + 1{n}{t}return Total{n}{n}
def PartK1_Calculation(Index):{n}{t}count = Long(){n}{n}{t}max = Long(){n}{n}{t}listedcount = Long(){n}{t}listedcount = 0{n}{t}max = GetAllCopies(USDPartK1){n}{t}count = 0{n}{t}while count < max:{n}{t}{t}count = count + 1{n}{t}{t}if get_currency(USDPartK1.HaveInt, count) > 0:{n}{t}{t}{t}if listedcount == Index:{n}{t}{t}{t}{t}return count{n}{t}{t}{t}else:{n}{t}{t}{t}{t}listedcount = listedcount + 1{n}{t}return 0{n}{n}
def PartK1Div_Calculation(Index):{n}{t}count = Long(){n}{n}{t}max = Long(){n}{n}{t}listedcount = Long(){n}{t}listedcount = 0{n}{t}max = GetAllCopies(USDPartK1){n}{t}count = 0{n}{t}while count < max:{n}{t}{t}count = count + 1{n}{t}{t}if get_currency(USDPartK1.Dividends, count) > 0:{n}{t}{t}{t}if listedcount == Index:{n}{t}{t}{t}{t}return count{n}{t}{t}{t}else:{n}{t}{t}{t}{t}listedcount = listedcount + 1{n}{t}return 0{n}{n}
def PartK1DivNbr_Calculation():{n}{t}count = Integer(){n}{n}{t}Lim = Integer(){n}{n}{t}Total = Integer(){n}{t}Lim = GetAllCopies(USDPartK1){n}{t}count = 1{n}{t}Total = 0{n}{t}while count <= Lim:{n}{t}{t}if get_currency(USDPartK1.Dividends, count) > 0:{n}{t}{t}{t}Total = Total + 1{n}{t}{t}else:{n}{t}{t}{t}Total = Total{n}{t}{t}count = count + 1{n}{t}return Total{n}{n}
def PartK1Nbr_Calculation():{n}{t}count = Integer(){n}{n}{t}Lim = Integer(){n}{n}{t}Total = Integer(){n}{t}Lim = GetAllCopies(USDPartK1){n}{t}count = 1{n}{t}Total = 0{n}{t}while count <= Lim:{n}{t}{t}if get_currency(USDPartK1.HaveInt, count) > 0:{n}{t}{t}{t}Total = Total + 1{n}{t}{t}else:{n}{t}{t}{t}Total = Total{n}{t}{t}count = count + 1{n}{t}return Total{n}{n}
def ResSFM_Calculation(Index):{n}{t}count = Long(){n}{n}{t}max = Long(){n}{n}{t}listedcount = Long(){n}{t}listedcount = 0{n}{t}max = GetAllCopies(USDSFM){n}{t}count = 0{n}{t}while count < max:{n}{t}{t}count = count + 1{n}{t}{t}if get_bool(USDSFM.Residence, count) == True and get_currency(USDSFM.Interest, count) > 0:{n}{t}{t}{t}if listedcount == Index:{n}{t}{t}{t}{t}return count{n}{t}{t}{t}else:{n}{t}{t}{t}{t}listedcount = listedcount + 1{n}{t}return 0{n}{n}
def ResSFMNbr_Calculation():{n}{t}count = Integer(){n}{n}{t}Lim = Integer(){n}{n}{t}Total = Integer(){n}{t}Lim = GetAllCopies(USDSFM){n}{t}count = 1{n}{t}Total = 0{n}{t}while count <= Lim:{n}{t}{t}if get_bool(USDSFM.Residence, count) == True and get_currency(USDSFM.Interest, count) > 0:{n}{t}{t}{t}Total = Total + 1{n}{t}{t}else:{n}{t}{t}{t}Total = Total{n}{t}{t}count = count + 1{n}{t}return Total{n}{n}
def SCorpK1_Calculation(Index):{n}{t}count = Long(){n}{n}{t}max = Long(){n}{n}{t}listedcount = Long(){n}{t}listedcount = 0{n}{t}max = GetAllCopies(USDSCorpK1){n}{t}count = 0{n}{t}while count < max:{n}{t}{t}count = count + 1{n}{t}{t}if get_currency(USDSCorpK1.HaveInt, count) > 0:{n}{t}{t}{t}if listedcount == Index:{n}{t}{t}{t}{t}return count{n}{t}{t}{t}else:{n}{t}{t}{t}{t}listedcount = listedcount + 1{n}{t}return 0{n}{n}
def SCorpK1Div_Calculation(Index):{n}{t}count = Long(){n}{n}{t}max = Long(){n}{n}{t}listedcount = Long(){n}{t}listedcount = 0{n}{t}max = GetAllCopies(USDSCorpK1){n}{t}count = 0{n}{t}while count < max:{n}{t}{t}count = count + 1{n}{t}{t}if get_currency(USDSCorpK1.Dividends, count) > 0:{n}{t}{t}{t}if listedcount == Index:{n}{t}{t}{t}{t}return count{n}{t}{t}{t}else:{n}{t}{t}{t}{t}listedcount = listedcount + 1{n}{t}return 0{n}{n}
def SCorpK1DivNbr_Calculation():{n}{t}count = Integer(){n}{n}{t}Lim = Integer(){n}{n}{t}Total = Integer(){n}{t}Lim = GetAllCopies(USDSCorpK1){n}{t}count = 1{n}{t}Total = 0{n}{t}while count <= Lim:{n}{t}{t}if get_currency(USDSCorpK1.Dividends, count) > 0:{n}{t}{t}{t}Total = Total + 1{n}{t}{t}else:{n}{t}{t}{t}Total = Total{n}{t}{t}count = count + 1{n}{t}return Total{n}{n}
def SCorpK1Nbr_Calculation():{n}{t}count = Integer(){n}{n}{t}Lim = Integer(){n}{n}{t}Total = Integer(){n}{t}Lim = GetAllCopies(USDSCorpK1){n}{t}count = 1{n}{t}Total = 0{n}{t}while count <= Lim:{n}{t}{t}if get_currency(USDSCorpK1.HaveInt, count) > 0:{n}{t}{t}{t}Total = Total + 1{n}{t}{t}else:{n}{t}{t}{t}Total = Total{n}{t}{t}count = count + 1{n}{t}return Total{n}{n}
def SSN_Calculation():{n}{t}return get_string(IASCHB.SSN){n}{n}def Desc_Calculation():{n}{t}return 'Additonal Entities'{n}{n}
def Names_Calculation():{n}{t}return get_string(IA148SP.Names){n}{n}
def Offset_Calculation():{n}{t}if GetCopy() == 1:{n}{t}{t}return 5{n}{t}elif GetCopy() == 2:{n}{t}{t}return 35{n}{t}elif GetCopy() == 3:{n}{t}{t}return 65{n}{t}elif GetCopy() == 4:{n}{t}{t}return 95{n}{t}else:{n}{t}{t}return 125{n}{n}
def Print_Calculation():{n}{t}if get_bool(IA148SP.Print) == False:{n}{t}{t}return 0{n}{t}elif trim(get_string(IAWBP148PTESP.PTEName(0))) != '' or trim(get_string(IAWBP148PTESP.PTEEIN(0))) != '':{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def PTEEIN_Calculation(Index):{n}{t}PTE = Integer(){n}{n}{t}RefPTE = Integer(){n}{n}{t}Stuff = Integer(){n}{n}{t}Stuff2 = Integer(){n}{n}{t}MoStuff = Integer(){n}{t}PTE = get_number(IA148BUMPSP.TotPTE){n}{t}RefPTE = get_number(IA148BUMPSP.TotRefPTE){n}{t}MoStuff = Index + get_number(IAWBP148PTESP.Offset){n}{t}if get_number(IA148SP.TotPTE) == 6:{n}{t}{t}return ''{n}{t}elif PTE > MoStuff:{n}{t}{t}Stuff2 = get_number(IA148BUMPSP.PTEIndexNbr(MoStuff)){n}{t}{t}return get_string(IA148BUMPSP.PTEEIN(Stuff2)){n}{t}elif PTE + RefPTE > MoStuff:{n}{t}{t}Stuff = ( MoStuff )  - PTE{n}{t}{t}Stuff2 = get_number(IA148BUMPSP.RefPTEIndexNbr(Stuff)){n}{t}{t}return get_string(IA148BUMPSP.RefPTEEIN(Stuff2)){n}{t}else:{n}{t}{t}return ''{n}{n}
def PTEName_Calculation(Index):{n}{t}PTE = Integer(){n}{n}{t}RefPTE = Integer(){n}{n}{t}Stuff = Integer(){n}{n}{t}Stuff2 = Integer(){n}{n}{t}MoStuff = Integer(){n}{t}PTE = get_number(IA148BUMPSP.TotPTE){n}{t}RefPTE = get_number(IA148BUMPSP.TotRefPTE){n}{t}MoStuff = Index + get_number(IAWBP148PTESP.Offset){n}{t}if get_number(IA148SP.TotPTE) == 6:{n}{t}{t}return ''{n}{t}elif PTE > MoStuff:{n}{t}{t}Stuff2 = get_number(IA148BUMPSP.PTEIndexNbr(MoStuff)){n}{t}{t}return get_string(IA148BUMPSP.PTEName(Stuff2)){n}{t}elif PTE + RefPTE > MoStuff:{n}{t}{t}Stuff = ( MoStuff )  - PTE{n}{t}{t}Stuff2 = get_number(IA148BUMPSP.RefPTEIndexNbr(Stuff)){n}{t}{t}return get_string(IA148BUMPSP.RefPTEName(Stuff2)){n}{t}else:{n}{t}{t}return ''{n}{n}
def SSN_Calculation():{n}{t}return get_string(IA148SP.SSN){n}{n}
def TPPerc_Calculation(Index):{n}{t}PTE = Integer(){n}{n}{t}RefPTE = Integer(){n}{n}{t}Stuff = Integer(){n}{n}{t}Stuff2 = Integer(){n}{n}{t}MoStuff = Integer(){n}{t}PTE = get_number(IA148BUMPSP.TotPTE){n}{t}RefPTE = get_number(IA148BUMPSP.TotRefPTE){n}{t}MoStuff = Index + get_number(IAWBP148PTESP.Offset){n}{t}if get_number(IA148SP.TotPTE) == 6:{n}{t}{t}return 0{n}{t}elif PTE > MoStuff:{n}{t}{t}Stuff2 = get_number(IA148BUMPSP.PTEIndexNbr(MoStuff)){n}{t}{t}return get_float(IA148BUMPSP.TPPerc(Stuff2)){n}{t}elif PTE + RefPTE > MoStuff:{n}{t}{t}Stuff = ( MoStuff )  - PTE{n}{t}{t}Stuff2 = get_number(IA148BUMPSP.RefPTEIndexNbr(Stuff)){n}{t}{t}return get_float(IA148BUMPSP.RefTPPerc(Stuff2)){n}{t}else:{n}{t}{t}return 0{n}{n}def Desc_Calculation():{n}{t}Total1 = Currency(){n}{t}Total1 = get_currency(IAWBP148REFSP.TotRefCr1) + get_currency(IAWBP148REFSP.TotRefCr2){n}{t}return CStr(Total1) + ' Refundable Credits'{n}{n}
def Names_Calculation():{n}{t}return get_string(IA148SP.Names){n}{n}
def Offset_Calculation():{n}{t}if GetCopy() == 1:{n}{t}{t}return 6{n}{t}else:{n}{t}{t}return 56{n}{n}
def Print_Calculation():{n}{t}if get_currency(IAWBP148REFSP.TotRefCr1) > 0 or get_currency(IAWBP148REFSP.TotRefCr2) > 0:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def PTERefTrig_Calculation(Index):{n}{t}if get_string(IAWBP148REFSP.RefPTECode(Index)) == '64' or get_string(IAWBP148REFSP.RefPTECode(Index)) == '58' or get_string(IAWBP148REFSP.RefPTECode(Index)) == '55' or get_string(IAWBP148REFSP.RefPTECode(Index)) == '52' or get_string(IAWBP148REFSP.RefPTECode(Index)) == '59' or get_string(IAWBP148REFSP.RefPTECode(Index)) == '65' or get_string(IAWBP148REFSP.RefPTECode(Index)) == '66':{n}{t}{t}return 0{n}{t}elif trim(get_string(IAWBP148REFSP.RefPTEName(Index))) != '':{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def RefCert_Calculation(Index):{n}{t}strindex = Long(){n}{n}{t}copystr = String(){n}{n}{t}Copy = Long(){n}{t}strindex = ( ( ( ( GetCopy() - 1 )  * 50 )  + 6 + Index )  * 4 )  + 1{n}{t}copystr = trim(Mid(get_string(IA148SP.RefCopiesStr), strindex, 4)){n}{t}if get_number(IA148SP.RefNbr) == 7:{n}{t}{t}return ''{n}{t}elif copystr != '':{n}{t}{t}Copy = CLng(copystr){n}{t}{t}if ( Copy > 100 )  and  ( Copy <= 200 ) :{n}{t}{t}{t}return ''{n}{t}{t}elif  ( Copy > 200 )  and  ( Copy <= 300 ) :{n}{t}{t}{t}return get_string(IACred.CertNumber, ( Copy )  - 200){n}{t}{t}elif  ( Copy > 300 )  and  ( Copy <= 400 ) :{n}{t}{t}{t}return ''{n}{t}{t}elif  ( Copy > 400 )  and  ( Copy <= 500 ) :{n}{t}{t}{t}return get_string(IACred.CertNumber, ( Copy )  - 400){n}{t}{t}elif  ( Copy > 500 )  and  ( Copy <= 600 ) :{n}{t}{t}{t}return ''{n}{t}{t}elif  ( Copy > 600 )  and  ( Copy <= 700 ) :{n}{t}{t}{t}return ''{n}{t}{t}elif  ( Copy > 700 )  and  ( Copy <= 800 ) :{n}{t}{t}{t}return get_string(IA128.SuppCertNbr, ( Copy )  - 700){n}{t}{t}elif  ( Copy > 800 )  and  ( Copy <= 900 ) :{n}{t}{t}{t}return get_string(IA128S.SuppCertNbr, ( Copy )  - 800){n}{t}{t}elif  ( Copy > 900 )  and  ( Copy <= 1000 ) :{n}{t}{t}{t}return ''{n}{t}{t}elif  ( Copy > 1000 )  and  ( Copy <= 1100 ) :{n}{t}{t}{t}return ''{n}{t}{t}elif  ( Copy > 1100 )  and  ( Copy <= 1200 ) :{n}{t}{t}{t}return ''{n}{t}{t}elif  ( Copy > 1200 )  and  ( Copy <= 1300 ) :{n}{t}{t}{t}return get_string(IACred.CertNumber, ( Copy )  - 1200){n}{t}{t}elif  ( Copy > 1300 )  and  ( Copy <= 1400 ) :{n}{t}{t}{t}return get_string(IACred.CertNumber, ( Copy )  - 1300){n}{t}{t}elif  ( Copy > 1400 )  and  ( Copy <= 1500 ) :{n}{t}{t}{t}return get_string(IACred.CertNumber, ( Copy )  - 1400){n}{t}return ''{n}{n}
def RefCode_Calculation(Index):{n}{t}strindex = Long(){n}{n}{t}copystr = String(){n}{n}{t}Copy = Long(){n}{t}strindex = ( ( ( ( GetCopy() - 1 )  * 50 )  + 6 + Index )  * 4 )  + 1{n}{t}copystr = trim(Mid(get_string(IA148SP.RefCopiesStr), strindex, 4)){n}{t}if get_number(IA148SP.RefNbr) == 7:{n}{t}{t}return ''{n}{t}elif copystr != '':{n}{t}{t}Copy = CLng(copystr){n}{t}{t}if ( Copy > 100 )  and  ( Copy <= 200 ) :{n}{t}{t}{t}return '52'{n}{t}{t}elif  ( Copy > 200 )  and  ( Copy <= 300 ) :{n}{t}{t}{t}return get_string(IACred.Code, ( Copy )  - 200){n}{t}{t}elif  ( Copy > 300 )  and  ( Copy <= 400 ) :{n}{t}{t}{t}return '55'{n}{t}{t}elif  ( Copy > 400 )  and  ( Copy <= 500 ) :{n}{t}{t}{t}return get_string(IACred.Code, ( Copy )  - 400){n}{t}{t}elif  ( Copy > 500 )  and  ( Copy <= 600 ) :{n}{t}{t}{t}return '58'{n}{t}{t}elif  ( Copy > 600 )  and  ( Copy <= 700 ) :{n}{t}{t}{t}return '58'{n}{t}{t}elif  ( Copy > 700 )  and  ( Copy <= 800 ) :{n}{t}{t}{t}return '59'{n}{t}{t}elif  ( Copy > 800 )  and  ( Copy <= 900 ) :{n}{t}{t}{t}return '59'{n}{t}{t}elif  ( Copy > 900 )  and  ( Copy <= 1000 ) :{n}{t}{t}{t}return '64'{n}{t}{t}elif  ( Copy > 1000 )  and  ( Copy <= 1100 ) :{n}{t}{t}{t}return '65'{n}{t}{t}elif  ( Copy > 1100 )  and  ( Copy <= 1200 ) :{n}{t}{t}{t}return '66'{n}{t}{t}elif  ( Copy > 1200 )  and  ( Copy <= 1300 ) :{n}{t}{t}{t}return get_string(IACred.Code, ( Copy )  - 1200){n}{t}{t}elif  ( Copy > 1300 )  and  ( Copy <= 1400 ) :{n}{t}{t}{t}return get_string(IACred.Code, ( Copy )  - 1300){n}{t}{t}elif  ( Copy > 1400 )  and  ( Copy <= 1500 ) :{n}{t}{t}{t}return get_string(IACred.Code, ( Copy )  - 1400){n}{t}return ''{n}{n}
def RefCr_Calculation(Index):{n}{t}strindex = Long(){n}{n}{t}copystr = String(){n}{n}{t}Copy = Long(){n}{t}strindex = ( ( ( ( GetCopy() - 1 )  * 50 )  + 6 + Index )  * 4 )  + 1{n}{t}copystr = trim(Mid(get_string(IA148SP.RefCopiesStr), strindex, 4)){n}{t}if get_number(IA148SP.RefNbr) == 7:{n}{t}{t}return 0{n}{t}elif copystr != '':{n}{t}{t}Copy = CLng(copystr){n}{t}{t}if ( Copy > 100 )  and  ( Copy <= 200 ) :{n}{t}{t}{t}return get_currency(IA8864.BiodieselCr, ( Copy )  - 100){n}{t}{t}elif  ( Copy > 200 )  and  ( Copy <= 300 ) :{n}{t}{t}{t}return get_currency(IACred.CYCredit, ( Copy )  - 200){n}{t}{t}elif  ( Copy > 300 )  and  ( Copy <= 400 ) :{n}{t}{t}{t}return get_currency(IA135.E85Credit, ( Copy )  - 300){n}{t}{t}elif  ( Copy > 400 )  and  ( Copy <= 500 ) :{n}{t}{t}{t}return get_currency(IACred.CYCredit, ( Copy )  - 400){n}{t}{t}elif  ( Copy > 500 )  and  ( Copy <= 600 ) :{n}{t}{t}{t}return get_currency(IA128.TotResearchCr, ( Copy )  - 500){n}{t}{t}elif  ( Copy > 600 )  and  ( Copy <= 700 ) :{n}{t}{t}{t}return get_currency(IA128S.TotResearchCr, ( Copy )  - 600){n}{t}{t}elif  ( Copy > 700 )  and  ( Copy <= 800 ) :{n}{t}{t}{t}return get_currency(IA128.TotSuppResearchCr, ( Copy )  - 700){n}{t}{t}elif  ( Copy > 800 )  and  ( Copy <= 900 ) :{n}{t}{t}{t}return get_currency(IA128S.TotSuppResearchCr, ( Copy )  - 800){n}{t}{t}elif  ( Copy > 900 )  and  ( Copy <= 1000 ) :{n}{t}{t}{t}return get_currency(IA137.EthPromoteCr, ( Copy )  - 900){n}{t}{t}elif  ( Copy > 1000 )  and  ( Copy <= 1100 ) :{n}{t}{t}{t}return get_currency(IA138.E15Credit, ( Copy )  - 1000){n}{t}{t}elif  ( Copy > 1100 )  and  ( Copy <= 1200 ) :{n}{t}{t}{t}return get_currency(IA177.CYAdoptionTaxCr, ( Copy )  - 1100){n}{t}{t}elif  ( Copy > 1200 )  and  ( Copy <= 1300 ) :{n}{t}{t}{t}return get_currency(IACred.CYCredit, ( Copy )  - 1200){n}{t}{t}elif  ( Copy > 1300 )  and  ( Copy <= 1400 ) :{n}{t}{t}{t}return get_currency(IACred.CYCredit, ( Copy )  - 1300){n}{t}{t}elif  ( Copy > 1400 )  and  ( Copy <= 1500 ) :{n}{t}{t}{t}return get_currency(IACred.CYCredit, ( Copy )  - 1400){n}{t}return 0{n}{n}
def RefPTECode_Calculation(Index):{n}{t}Stuff = Integer(){n}{t}Stuff = Index + get_number(IAWBP148REFSP.Offset) + 1{n}{t}return get_string(IA148BUMPSP.RefPTECode(Stuff)){n}{n}
def RefPTEEIN_Calculation(Index):{n}{t}Stuff = Integer(){n}{t}Stuff = Index + get_number(IAWBP148REFSP.Offset) + 1{n}{t}return get_string(IA148BUMPSP.RefPTEEIN(Stuff)){n}{n}
def RefPTEName_Calculation(Index):{n}{t}Stuff = Integer(){n}{t}Stuff = Index + get_number(IAWBP148REFSP.Offset) + 1{n}{t}return get_string(IA148BUMPSP.RefPTEName(Stuff)){n}{n}
def RefTPPerc_Calculation(Index):{n}{t}Stuff = Integer(){n}{t}Stuff = Index + get_number(IAWBP148REFSP.Offset) + 1{n}{t}return get_float(IA148BUMPSP.RefTPPerc(Stuff)){n}{n}
def RefTrig_Calculation(Index):{n}{t}if get_string(IAWBP148REFSP.RefCode(Index)) == '64' or get_string(IAWBP148REFSP.RefCode(Index)) == '58' or get_string(IAWBP148REFSP.RefCode(Index)) == '55' or get_string(IAWBP148REFSP.RefCode(Index)) == '52' or get_string(IAWBP148REFSP.RefCode(Index)) == '59' or get_string(IAWBP148REFSP.RefCode(Index)) == '65' or get_string(IAWBP148REFSP.RefCode(Index)) == '66':{n}{t}{t}return 0{n}{t}elif get_currency(IAWBP148REFSP.RefCr(Index)) > 0:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def SSN_Calculation():{n}{t}return get_string(IA148SP.SSN){n}{n}
def TotRefCr1_Calculation():{n}{t}count = Integer(){n}{n}{t}SubTot = Currency(){n}{t}count = 0{n}{t}SubTot = 0{n}{t}while count < 25:{n}{t}{t}SubTot = SubTot + get_currency(IAWBP148REFSP.RefCr(count)){n}{t}{t}count = count + 1{n}{t}return SubTot{n}{n}
def TotRefCr2_Calculation():{n}{t}count = Integer(){n}{n}{t}SubTot = Currency(){n}{t}count = 25{n}{t}SubTot = 0{n}{t}while count < 50:{n}{t}{t}SubTot = SubTot + get_currency(IAWBP148REFSP.RefCr(count)){n}{t}{t}count = count + 1{n}{t}return SubTot{n}{n}def ArrayNonRefCr_Calculation(Index):{n}{t}if Index == 0:{n}{t}{t}return get_currency(IAWBP148SP.NonRefCr1){n}{t}elif Index == 1:{n}{t}{t}return get_currency(IAWBP148SP.NonRefCr2){n}{t}elif Index == 2:{n}{t}{t}return get_currency(IAWBP148SP.NonRefCr3){n}{t}elif Index == 3:{n}{t}{t}return get_currency(IAWBP148SP.NonRefCr4){n}{t}elif Index == 4:{n}{t}{t}return get_currency(IAWBP148SP.NonRefCr5){n}{t}elif Index == 5:{n}{t}{t}return get_currency(IAWBP148SP.NonRefCr6){n}{t}elif Index == 6:{n}{t}{t}return get_currency(IAWBP148SP.NonRefCr7){n}{t}elif Index == 7:{n}{t}{t}return get_currency(IAWBP148SP.NonRefCr8){n}{t}elif Index == 8:{n}{t}{t}return get_currency(IAWBP148SP.NonRefCr9){n}{t}elif Index == 9:{n}{t}{t}return get_currency(IAWBP148SP.NonRefCr10){n}{t}elif Index == 10:{n}{t}{t}return get_currency(IAWBP148SP.NonRefCr11){n}{t}elif Index == 11:{n}{t}{t}return get_currency(IAWBP148SP.NonRefCr12){n}{t}elif Index == 12:{n}{t}{t}return get_currency(IAWBP148SP.NonRefCr13){n}{t}elif Index == 13:{n}{t}{t}return get_currency(IAWBP148SP.NonRefCr14){n}{t}elif Index == 14:{n}{t}{t}return get_currency(IAWBP148SP.NonRefCr15){n}{t}elif Index == 15:{n}{t}{t}return get_currency(IAWBP148SP.NonRefCr16){n}{t}elif Index == 16:{n}{t}{t}return get_currency(IAWBP148SP.NonRefCr17){n}{t}elif Index == 17:{n}{t}{t}return get_currency(IAWBP148SP.NonRefCr18){n}{t}elif Index == 18:{n}{t}{t}return get_currency(IAWBP148SP.NonRefCr19){n}{t}elif Index == 19:{n}{t}{t}return get_currency(IAWBP148SP.NonRefCr20){n}{t}elif Index == 20:{n}{t}{t}return get_currency(IAWBP148SP.NonRefCr21){n}{t}elif Index == 21:{n}{t}{t}return get_currency(IAWBP148SP.NonRefCr22){n}{t}elif Index == 22:{n}{t}{t}return get_currency(IAWBP148SP.NonRefCr23){n}{t}elif Index == 23:{n}{t}{t}return get_currency(IAWBP148SP.NonRefCr24){n}{t}elif Index == 24:{n}{t}{t}return get_currency(IAWBP148SP.NonRefCr25){n}{t}elif Index == 25:{n}{t}{t}return get_currency(IAWBP148SP.NonRefCr26){n}{t}elif Index == 26:{n}{t}{t}return get_currency(IAWBP148SP.NonRefCr27){n}{t}elif Index == 27:{n}{t}{t}return get_currency(IAWBP148SP.NonRefCr28){n}{t}else:{n}{t}{t}return get_currency(IAWBP148SP.NonRefCr29){n}{n}
def AvailCr_Calculation(Index):{n}{t}if get_string(IAWBP148SP.NonRefCode(Index)) == '09':{n}{t}{t}return get_currency(IA8801SP.AMTCR){n}{t}else:{n}{t}{t}return get_currency(IAWBP148SP.PYCarry(Index)) + get_currency(IAWBP148SP.CYCredit(Index)){n}{n}
def CYCarry_Calculation(Index):{n}{t}if get_string(IAWBP148SP.NonRefCode(Index)) == '09':{n}{t}{t}return get_currency(IA8801SP.CYCarryforward){n}{t}else:{n}{t}{t}return max_value(0, get_currency(IAWBP148SP.AvailCr(Index)) - get_currency(IAWBP148SP.ArrayNonRefCr(Index)) - get_currency(IAWBP148SP.ExpCr(Index))){n}{n}
def CYCredit_Calculation(Index):{n}{t}strindex = Long(){n}{n}{t}copystr = String(){n}{n}{t}Copy = Long(){n}{t}strindex = ( ( ( ( GetCopy() - 1 )  * 29 )  + 9 + Index )  * 4 )  + 1{n}{t}copystr = trim(Mid(get_string(IA148SP.NonRefCopiesStr), strindex, 4)){n}{t}if get_number(IA148SP.NonRefNbr) == 10:{n}{t}{t}return 0{n}{t}elif copystr != '':{n}{t}{t}Copy = CLng(copystr){n}{t}{t}if ( Copy > 100 )  and  ( Copy <= 200 ) :{n}{t}{t}{t}return get_currency(IA147.FranchiseCr, ( Copy )  - 100){n}{t}{t}elif  ( Copy > 200 )  and  ( Copy <= 300 ) :{n}{t}{t}{t}return get_currency(IA134.Credit, ( Copy )  - 200){n}{t}{t}elif  ( Copy > 300 )  and  ( Copy <= 400 ) :{n}{t}{t}{t}return get_currency(IACred.CYCredit, ( Copy )  - 300){n}{t}{t}elif  ( Copy > 400 )  and  ( Copy <= 500 ) :{n}{t}{t}{t}return get_currency(IACred.CYCredit, ( Copy )  - 400){n}{t}{t}elif  ( Copy > 500 )  and  ( Copy <= 600 ) :{n}{t}{t}{t}return get_currency(IACred.CYCredit, ( Copy )  - 500){n}{t}{t}elif  ( Copy > 600 )  and  ( Copy <= 700 ) :{n}{t}{t}{t}return get_currency(IACred.CYCredit, ( Copy )  - 600){n}{t}{t}elif  ( Copy > 700 )  and  ( Copy <= 800 ) :{n}{t}{t}{t}return get_currency(IACred.CYCredit, ( Copy )  - 700){n}{t}{t}elif  ( Copy > 800 )  and  ( Copy <= 900 ) :{n}{t}{t}{t}return get_currency(IACred.CYCredit, ( Copy )  - 800){n}{t}{t}elif  ( Copy > 900 )  and  ( Copy <= 1000 ) :{n}{t}{t}{t}return get_currency(IACred.CYCredit, ( Copy )  - 900){n}{t}{t}elif  ( Copy > 1000 )  and  ( Copy <= 1100 ) :{n}{t}{t}{t}return get_currency(IACred.CYCredit, ( Copy )  - 1000){n}{t}{t}elif  ( Copy > 1100 )  and  ( Copy <= 1200 ) :{n}{t}{t}{t}return get_currency(IACred.CYCredit, ( Copy )  - 1100){n}{t}{t}elif  ( Copy > 1200 )  and  ( Copy <= 1300 ) :{n}{t}{t}{t}return get_currency(IACred.CYCredit, ( Copy )  - 1200){n}{t}{t}elif  ( Copy > 1300 )  and  ( Copy <= 1400 ) :{n}{t}{t}{t}return get_currency(IACred.CYCredit, ( Copy )  - 1300){n}{t}{t}elif  ( Copy > 1400 )  and  ( Copy <= 1500 ) :{n}{t}{t}{t}return get_currency(IACred.CYCredit, ( Copy )  - 1400){n}{t}{t}elif  ( Copy > 1500 )  and  ( Copy <= 1600 ) :{n}{t}{t}{t}return get_currency(IACred.CYCredit, ( Copy )  - 1500){n}{t}{t}elif  ( Copy > 1600 )  and  ( Copy <= 1700 ) :{n}{t}{t}{t}return get_currency(IACred.CYCredit, ( Copy )  - 1600){n}{t}{t}elif  ( Copy > 1700 )  and  ( Copy <= 1800 ) :{n}{t}{t}{t}return get_currency(IACred.CYCredit, ( Copy )  - 1700){n}{t}{t}elif  ( Copy > 1800 )  and  ( Copy <= 1900 ) :{n}{t}{t}{t}return get_currency(IACred.CYCredit, ( Copy )  - 1800){n}{t}{t}elif  ( Copy > 1900 )  and  ( Copy <= 2000 ) :{n}{t}{t}{t}return get_currency(IACred.CYCredit, ( Copy )  - 1900){n}{t}{t}elif  ( Copy > 2000 )  and  ( Copy <= 2100 ) :{n}{t}{t}{t}return get_currency(IACred.CYCredit, ( Copy )  - 2000){n}{t}{t}elif  ( Copy > 2100 )  and  ( Copy <= 2200 ) :{n}{t}{t}{t}return get_currency(IACred.CYCredit, ( Copy )  - 2100){n}{t}{t}elif  ( Copy > 2200 )  and  ( Copy <= 2300 ) :{n}{t}{t}{t}return get_currency(IACred.CYCredit, ( Copy )  - 2200){n}{t}{t}elif  ( Copy > 2300 )  and  ( Copy <= 2400 ) :{n}{t}{t}{t}return get_currency(IACred.CYCredit, ( Copy )  - 2300){n}{t}{t}elif  ( Copy > 2400 )  and  ( Copy <= 2500 ) :{n}{t}{t}{t}return get_currency(IA8801SP.PYAMT){n}{t}return 0{n}{n}
def Desc_Calculation():{n}{t}Total1 = Currency(){n}{t}Total1 = get_currency(IAWBP148SP.TotNonRefCr){n}{t}return CStr(Total1) + ' Nonrefundable Credits'{n}{n}
def ExpCr_Calculation(Index):{n}{t}strindex = Long(){n}{n}{t}copystr = String(){n}{n}{t}Copy = Long(){n}{t}strindex = ( ( ( ( GetCopy() - 1 )  * 29 )  + 9 + Index )  * 4 )  + 1{n}{t}copystr = trim(Mid(get_string(IA148SP.NonRefCopiesStr), strindex, 4)){n}{t}if get_number(IA148SP.NonRefNbr) == 10:{n}{t}{t}return 0{n}{t}elif copystr != '':{n}{t}{t}Copy = CLng(copystr){n}{t}{t}if ( Copy > 100 )  and  ( Copy <= 200 ) :{n}{t}{t}{t}return max_value(0, get_currency(IA148SP.AvailCr(Index)) - get_currency(IA148SP.ArrayNonRefCr(Index))){n}{t}{t}elif  ( Copy > 200 )  and  ( Copy <= 300 ) :{n}{t}{t}{t}return max_value(0, get_currency(IA148SP.AvailCr(Index)) - get_currency(IA148SP.ArrayNonRefCr(Index))){n}{t}{t}elif  ( Copy > 300 )  and  ( Copy <= 400 ) :{n}{t}{t}{t}return get_currency(IACred.ExpCr, ( Copy )  - 300){n}{t}{t}elif  ( Copy > 400 )  and  ( Copy <= 500 ) :{n}{t}{t}{t}return get_currency(IACred.ExpCr, ( Copy )  - 400){n}{t}{t}elif  ( Copy > 500 )  and  ( Copy <= 600 ) :{n}{t}{t}{t}return get_currency(IACred.ExpCr, ( Copy )  - 500){n}{t}{t}elif  ( Copy > 600 )  and  ( Copy <= 700 ) :{n}{t}{t}{t}return get_currency(IACred.ExpCr, ( Copy )  - 600){n}{t}{t}elif  ( Copy > 700 )  and  ( Copy <= 800 ) :{n}{t}{t}{t}return get_currency(IACred.ExpCr, ( Copy )  - 700){n}{t}{t}elif  ( Copy > 800 )  and  ( Copy <= 900 ) :{n}{t}{t}{t}return get_currency(IACred.ExpCr, ( Copy )  - 800){n}{t}{t}elif  ( Copy > 900 )  and  ( Copy <= 1000 ) :{n}{t}{t}{t}return get_currency(IACred.ExpCr, ( Copy )  - 900){n}{t}{t}elif  ( Copy > 1000 )  and  ( Copy <= 1100 ) :{n}{t}{t}{t}return get_currency(IACred.ExpCr, ( Copy )  - 1000){n}{t}{t}elif  ( Copy > 1100 )  and  ( Copy <= 1200 ) :{n}{t}{t}{t}return get_currency(IACred.ExpCr, ( Copy )  - 1100){n}{t}{t}elif  ( Copy > 1200 )  and  ( Copy <= 1300 ) :{n}{t}{t}{t}return get_currency(IACred.ExpCr, ( Copy )  - 1200){n}{t}{t}elif  ( Copy > 1300 )  and  ( Copy <= 1400 ) :{n}{t}{t}{t}return get_currency(IACred.ExpCr, ( Copy )  - 1300){n}{t}{t}elif  ( Copy > 1400 )  and  ( Copy <= 1500 ) :{n}{t}{t}{t}return get_currency(IACred.ExpCr, ( Copy )  - 1400){n}{t}{t}elif  ( Copy > 1500 )  and  ( Copy <= 1600 ) :{n}{t}{t}{t}return get_currency(IACred.ExpCr, ( Copy )  - 1500){n}{t}{t}elif  ( Copy > 1600 )  and  ( Copy <= 1700 ) :{n}{t}{t}{t}return get_currency(IACred.ExpCr, ( Copy )  - 1600){n}{t}{t}elif  ( Copy > 1700 )  and  ( Copy <= 1800 ) :{n}{t}{t}{t}return get_currency(IACred.ExpCr, ( Copy )  - 1700){n}{t}{t}elif  ( Copy > 1800 )  and  ( Copy <= 1900 ) :{n}{t}{t}{t}return get_currency(IACred.ExpCr, ( Copy )  - 1800){n}{t}{t}elif  ( Copy > 1900 )  and  ( Copy <= 2000 ) :{n}{t}{t}{t}return get_currency(IACred.ExpCr, ( Copy )  - 1900){n}{t}{t}elif  ( Copy > 2000 )  and  ( Copy <= 2100 ) :{n}{t}{t}{t}return get_currency(IACred.ExpCr, ( Copy )  - 2000){n}{t}{t}elif  ( Copy > 2100 )  and  ( Copy <= 2200 ) :{n}{t}{t}{t}return get_currency(IACred.ExpCr, ( Copy )  - 2100){n}{t}{t}elif  ( Copy > 2200 )  and  ( Copy <= 2300 ) :{n}{t}{t}{t}return get_currency(IACred.ExpCr, ( Copy )  - 2200){n}{t}{t}elif  ( Copy > 2300 )  and  ( Copy <= 2400 ) :{n}{t}{t}{t}return get_currency(IACred.ExpCr, ( Copy )  - 2300){n}{t}{t}elif  ( Copy > 2400 )  and  ( Copy <= 2500 ) :{n}{t}{t}{t}return 0{n}{t}return 0{n}{n}
def Names_Calculation():{n}{t}return get_string(IA148SP.Names){n}{n}
def NonRefCert_Calculation(Index):{n}{t}strindex = Long(){n}{n}{t}copystr = String(){n}{n}{t}Copy = Long(){n}{t}strindex = ( ( ( ( GetCopy() - 1 )  * 29 )  + 9 + Index )  * 4 )  + 1{n}{t}copystr = trim(Mid(get_string(IA148SP.NonRefCopiesStr), strindex, 4)){n}{t}if get_number(IA148SP.NonRefNbr) == 10:{n}{t}{t}return ''{n}{t}elif copystr != '':{n}{t}{t}Copy = CLng(copystr){n}{t}{t}if ( Copy > 100 )  and  ( Copy <= 200 ) :{n}{t}{t}{t}return ''{n}{t}{t}elif  ( Copy > 200 )  and  ( Copy <= 300 ) :{n}{t}{t}{t}return ''{n}{t}{t}elif  ( Copy > 300 )  and  ( Copy <= 400 ) :{n}{t}{t}{t}return get_string(IACred.CertNumber, ( Copy )  - 300){n}{t}{t}elif  ( Copy > 400 )  and  ( Copy <= 500 ) :{n}{t}{t}{t}return get_string(IACred.CertNumber, ( Copy )  - 400){n}{t}{t}elif  ( Copy > 500 )  and  ( Copy <= 600 ) :{n}{t}{t}{t}return get_string(IACred.CertNumber, ( Copy )  - 500){n}{t}{t}elif  ( Copy > 600 )  and  ( Copy <= 700 ) :{n}{t}{t}{t}return get_string(IACred.CertNumber, ( Copy )  - 600){n}{t}{t}elif  ( Copy > 700 )  and  ( Copy <= 800 ) :{n}{t}{t}{t}return get_string(IACred.CertNumber, ( Copy )  - 700){n}{t}{t}elif  ( Copy > 800 )  and  ( Copy <= 900 ) :{n}{t}{t}{t}return get_string(IACred.CertNumber, ( Copy )  - 800){n}{t}{t}elif  ( Copy > 900 )  and  ( Copy <= 1000 ) :{n}{t}{t}{t}return get_string(IACred.CertNumber, ( Copy )  - 900){n}{t}{t}elif  ( Copy > 1000 )  and  ( Copy <= 1100 ) :{n}{t}{t}{t}return get_string(IACred.CertNumber, ( Copy )  - 1000){n}{t}{t}elif  ( Copy > 1100 )  and  ( Copy <= 1200 ) :{n}{t}{t}{t}return get_string(IACred.CertNumber, ( Copy )  - 1100){n}{t}{t}elif  ( Copy > 1200 )  and  ( Copy <= 1300 ) :{n}{t}{t}{t}return get_string(IACred.CertNumber, ( Copy )  - 1200){n}{t}{t}elif  ( Copy > 1300 )  and  ( Copy <= 1400 ) :{n}{t}{t}{t}return get_string(IACred.CertNumber, ( Copy )  - 1300){n}{t}{t}elif  ( Copy > 1400 )  and  ( Copy <= 1500 ) :{n}{t}{t}{t}return get_string(IACred.CertNumber, ( Copy )  - 1400){n}{t}{t}elif  ( Copy > 1500 )  and  ( Copy <= 1600 ) :{n}{t}{t}{t}return get_string(IACred.CertNumber, ( Copy )  - 1500){n}{t}{t}elif  ( Copy > 1600 )  and  ( Copy <= 1700 ) :{n}{t}{t}{t}return get_string(IACred.CertNumber, ( Copy )  - 1600){n}{t}{t}elif  ( Copy > 1700 )  and  ( Copy <= 1800 ) :{n}{t}{t}{t}return get_string(IACred.CertNumber, ( Copy )  - 1700){n}{t}{t}elif  ( Copy > 1800 )  and  ( Copy <= 1900 ) :{n}{t}{t}{t}return get_string(IACred.CertNumber, ( Copy )  - 1800){n}{t}{t}elif  ( Copy > 1900 )  and  ( Copy <= 2000 ) :{n}{t}{t}{t}return get_string(IACred.CertNumber, ( Copy )  - 1900){n}{t}{t}elif  ( Copy > 2000 )  and  ( Copy <= 2100 ) :{n}{t}{t}{t}return get_string(IACred.CertNumber, ( Copy )  - 2000){n}{t}{t}elif  ( Copy > 2100 )  and  ( Copy <= 2200 ) :{n}{t}{t}{t}return get_string(IACred.CertNumber, ( Copy )  - 2100){n}{t}{t}elif  ( Copy > 2200 )  and  ( Copy <= 2300 ) :{n}{t}{t}{t}return get_string(IACred.CertNumber, ( Copy )  - 2200){n}{t}{t}elif  ( Copy > 2300 )  and  ( Copy <= 2400 ) :{n}{t}{t}{t}return get_string(IACred.CertNumber, ( Copy )  - 2300){n}{t}{t}elif  ( Copy > 2400 )  and  ( Copy <= 2500 ) :{n}{t}{t}{t}return ''{n}{t}return ''{n}{n}
def NonRefCode_Calculation(Index):{n}{t}strindex = Long(){n}{n}{t}copystr = String(){n}{n}{t}Copy = Long(){n}{t}strindex = ( ( ( ( GetCopy() - 1 )  * 29 )  + 9 + Index )  * 4 )  + 1{n}{t}copystr = trim(Mid(get_string(IA148SP.NonRefCopiesStr), strindex, 4)){n}{t}if get_number(IA148SP.NonRefNbr) == 10:{n}{t}{t}return ''{n}{t}elif copystr != '':{n}{t}{t}Copy = CLng(copystr){n}{t}{t}if ( Copy > 100 )  and  ( Copy <= 200 ) :{n}{t}{t}{t}return '04'{n}{t}{t}elif  ( Copy > 200 )  and  ( Copy <= 300 ) :{n}{t}{t}{t}return '11'{n}{t}{t}elif  ( Copy > 300 )  and  ( Copy <= 400 ) :{n}{t}{t}{t}return get_string(IACred.Code, ( Copy )  - 300){n}{t}{t}elif  ( Copy > 400 )  and  ( Copy <= 500 ) :{n}{t}{t}{t}return get_string(IACred.Code, ( Copy )  - 400){n}{t}{t}elif  ( Copy > 500 )  and  ( Copy <= 600 ) :{n}{t}{t}{t}return get_string(IACred.Code, ( Copy )  - 500){n}{t}{t}elif  ( Copy > 600 )  and  ( Copy <= 700 ) :{n}{t}{t}{t}return get_string(IACred.Code, ( Copy )  - 600){n}{t}{t}elif  ( Copy > 700 )  and  ( Copy <= 800 ) :{n}{t}{t}{t}return get_string(IACred.Code, ( Copy )  - 700){n}{t}{t}elif  ( Copy > 800 )  and  ( Copy <= 900 ) :{n}{t}{t}{t}return get_string(IACred.Code, ( Copy )  - 800){n}{t}{t}elif  ( Copy > 900 )  and  ( Copy <= 1000 ) :{n}{t}{t}{t}return get_string(IACred.Code, ( Copy )  - 900){n}{t}{t}elif  ( Copy > 1000 )  and  ( Copy <= 1100 ) :{n}{t}{t}{t}return get_string(IACred.Code, ( Copy )  - 1000){n}{t}{t}elif  ( Copy > 1100 )  and  ( Copy <= 1200 ) :{n}{t}{t}{t}return get_string(IACred.Code, ( Copy )  - 1100){n}{t}{t}elif  ( Copy > 1200 )  and  ( Copy <= 1300 ) :{n}{t}{t}{t}return get_string(IACred.Code, ( Copy )  - 1200){n}{t}{t}elif  ( Copy > 1300 )  and  ( Copy <= 1400 ) :{n}{t}{t}{t}return get_string(IACred.Code, ( Copy )  - 1300){n}{t}{t}elif  ( Copy > 1400 )  and  ( Copy <= 1500 ) :{n}{t}{t}{t}return get_string(IACred.Code, ( Copy )  - 1400){n}{t}{t}elif  ( Copy > 1500 )  and  ( Copy <= 1600 ) :{n}{t}{t}{t}return get_string(IACred.Code, ( Copy )  - 1500){n}{t}{t}elif  ( Copy > 1600 )  and  ( Copy <= 1700 ) :{n}{t}{t}{t}return get_string(IACred.Code, ( Copy )  - 1600){n}{t}{t}elif  ( Copy > 1700 )  and  ( Copy <= 1800 ) :{n}{t}{t}{t}return get_string(IACred.Code, ( Copy )  - 1700){n}{t}{t}elif  ( Copy > 1800 )  and  ( Copy <= 1900 ) :{n}{t}{t}{t}return get_string(IACred.Code, ( Copy )  - 1800){n}{t}{t}elif  ( Copy > 1900 )  and  ( Copy <= 2000 ) :{n}{t}{t}{t}return get_string(IACred.Code, ( Copy )  - 1900){n}{t}{t}elif  ( Copy > 2000 )  and  ( Copy <= 2100 ) :{n}{t}{t}{t}return get_string(IACred.Code, ( Copy )  - 2000){n}{t}{t}elif  ( Copy > 2100 )  and  ( Copy <= 2200 ) :{n}{t}{t}{t}return get_string(IACred.Code, ( Copy )  - 2100){n}{t}{t}elif  ( Copy > 2200 )  and  ( Copy <= 2300 ) :{n}{t}{t}{t}return get_string(IACred.Code, ( Copy )  - 2200){n}{t}{t}elif  ( Copy > 2300 )  and  ( Copy <= 2400 ) :{n}{t}{t}{t}return get_string(IACred.Code, ( Copy )  - 2300){n}{t}{t}elif  ( Copy > 2400 )  and  ( Copy <= 2500 ) :{n}{t}{t}{t}return '09'{n}{t}return ''{n}{n}
def NonRefCr1_Calculation():{n}{t}PriorCopy = Long(){n}{n}{t}PriorCopyTax = Currency(){n}{t}PriorCopy = GetCopy(){n}{t}PriorCopyTax = get_currency(IAWBP148SP.NonRefTax30, PriorCopy - 1){n}{t}if GetCopy() == 1:{n}{t}{t}return min_value(get_currency(IAWBP148SP.AvailCr(0)), get_currency(IA148SP.NonRefTax10)){n}{t}else:{n}{t}{t}return min_value(get_currency(IAWBP148SP.AvailCr(0)), PriorCopyTax){n}{n}
def NonRefCr10_Calculation():{n}{t}return min_value(get_currency(IAWBP148SP.AvailCr(9)), get_currency(IAWBP148SP.NonRefTax10)){n}{n}
def NonRefCr11_Calculation():{n}{t}return min_value(get_currency(IAWBP148SP.AvailCr(10)), get_currency(IAWBP148SP.NonRefTax11)){n}{n}
def NonRefCr12_Calculation():{n}{t}return min_value(get_currency(IAWBP148SP.AvailCr(11)), get_currency(IAWBP148SP.NonRefTax12)){n}{n}
def NonRefCr13_Calculation():{n}{t}return min_value(get_currency(IAWBP148SP.AvailCr(12)), get_currency(IAWBP148SP.NonRefTax13)){n}{n}
def NonRefCr14_Calculation():{n}{t}return min_value(get_currency(IAWBP148SP.AvailCr(13)), get_currency(IAWBP148SP.NonRefTax14)){n}{n}
def NonRefCr15_Calculation():{n}{t}return min_value(get_currency(IAWBP148SP.AvailCr(14)), get_currency(IAWBP148SP.NonRefTax15)){n}{n}
def NonRefCr16_Calculation():{n}{t}return min_value(get_currency(IAWBP148SP.AvailCr(15)), get_currency(IAWBP148SP.NonRefTax16)){n}{n}
def NonRefCr17_Calculation():{n}{t}return min_value(get_currency(IAWBP148SP.AvailCr(16)), get_currency(IAWBP148SP.NonRefTax17)){n}{n}
def NonRefCr18_Calculation():{n}{t}return min_value(get_currency(IAWBP148SP.AvailCr(17)), get_currency(IAWBP148SP.NonRefTax18)){n}{n}
def NonRefCr19_Calculation():{n}{t}return min_value(get_currency(IAWBP148SP.AvailCr(18)), get_currency(IAWBP148SP.NonRefTax19)){n}{n}
def NonRefCr2_Calculation():{n}{t}return min_value(get_currency(IAWBP148SP.AvailCr(1)), get_currency(IAWBP148SP.NonRefTax2)){n}{n}
def NonRefCr20_Calculation():{n}{t}return min_value(get_currency(IAWBP148SP.AvailCr(19)), get_currency(IAWBP148SP.NonRefTax20)){n}{n}
def NonRefCr21_Calculation():{n}{t}return min_value(get_currency(IAWBP148SP.AvailCr(20)), get_currency(IAWBP148SP.NonRefTax21)){n}{n}
def NonRefCr22_Calculation():{n}{t}return min_value(get_currency(IAWBP148SP.AvailCr(21)), get_currency(IAWBP148SP.NonRefTax22)){n}{n}
def NonRefCr23_Calculation():{n}{t}return min_value(get_currency(IAWBP148SP.AvailCr(22)), get_currency(IAWBP148SP.NonRefTax23)){n}{n}
def NonRefCr24_Calculation():{n}{t}return min_value(get_currency(IAWBP148SP.AvailCr(23)), get_currency(IAWBP148SP.NonRefTax24)){n}{n}
def NonRefCr25_Calculation():{n}{t}return min_value(get_currency(IAWBP148SP.AvailCr(24)), get_currency(IAWBP148SP.NonRefTax25)){n}{n}
def NonRefCr26_Calculation():{n}{t}return min_value(get_currency(IAWBP148SP.AvailCr(25)), get_currency(IAWBP148SP.NonRefTax26)){n}{n}
def NonRefCr27_Calculation():{n}{t}return min_value(get_currency(IAWBP148SP.AvailCr(26)), get_currency(IAWBP148SP.NonRefTax27)){n}{n}
def NonRefCr28_Calculation():{n}{t}return min_value(get_currency(IAWBP148SP.AvailCr(27)), get_currency(IAWBP148SP.NonRefTax28)){n}{n}
def NonRefCr29_Calculation():{n}{t}return min_value(get_currency(IAWBP148SP.AvailCr(28)), get_currency(IAWBP148SP.NonRefTax29)){n}{n}
def NonRefCr3_Calculation():{n}{t}return min_value(get_currency(IAWBP148SP.AvailCr(2)), get_currency(IAWBP148SP.NonRefTax3)){n}{n}
def NonRefCr4_Calculation():{n}{t}return min_value(get_currency(IAWBP148SP.AvailCr(3)), get_currency(IAWBP148SP.NonRefTax4)){n}{n}
def NonRefCr5_Calculation():{n}{t}return min_value(get_currency(IAWBP148SP.AvailCr(4)), get_currency(IAWBP148SP.NonRefTax5)){n}{n}
def NonRefCr6_Calculation():{n}{t}return min_value(get_currency(IAWBP148SP.AvailCr(5)), get_currency(IAWBP148SP.NonRefTax6)){n}{n}
def NonRefCr7_Calculation():{n}{t}return min_value(get_currency(IAWBP148SP.AvailCr(6)), get_currency(IAWBP148SP.NonRefTax7)){n}{n}
def NonRefCr8_Calculation():{n}{t}return min_value(get_currency(IAWBP148SP.AvailCr(7)), get_currency(IAWBP148SP.NonRefTax8)){n}{n}
def NonRefCr9_Calculation():{n}{t}return min_value(get_currency(IAWBP148SP.AvailCr(8)), get_currency(IAWBP148SP.NonRefTax9)){n}{n}
def NonRefTax10_Calculation():{n}{t}return max_value(0, get_currency(IAWBP148SP.NonRefTax9) - get_currency(IAWBP148SP.NonRefCr9)){n}{n}
def NonRefTax11_Calculation():{n}{t}return max_value(0, get_currency(IAWBP148SP.NonRefTax10) - get_currency(IAWBP148SP.NonRefCr10)){n}{n}
def NonRefTax12_Calculation():{n}{t}return max_value(0, get_currency(IAWBP148SP.NonRefTax11) - get_currency(IAWBP148SP.NonRefCr11)){n}{n}
def NonRefTax13_Calculation():{n}{t}return max_value(0, get_currency(IAWBP148SP.NonRefTax12) - get_currency(IAWBP148SP.NonRefCr12)){n}{n}
def NonRefTax14_Calculation():{n}{t}return max_value(0, get_currency(IAWBP148SP.NonRefTax13) - get_currency(IAWBP148SP.NonRefCr13)){n}{n}
def NonRefTax15_Calculation():{n}{t}return max_value(0, get_currency(IAWBP148SP.NonRefTax14) - get_currency(IAWBP148SP.NonRefCr14)){n}{n}
def NonRefTax16_Calculation():{n}{t}return max_value(0, get_currency(IAWBP148SP.NonRefTax15) - get_currency(IAWBP148SP.NonRefCr15)){n}{n}
def NonRefTax17_Calculation():{n}{t}return max_value(0, get_currency(IAWBP148SP.NonRefTax16) - get_currency(IAWBP148SP.NonRefCr16)){n}{n}
def NonRefTax18_Calculation():{n}{t}return max_value(0, get_currency(IAWBP148SP.NonRefTax17) - get_currency(IAWBP148SP.NonRefCr17)){n}{n}
def NonRefTax19_Calculation():{n}{t}return max_value(0, get_currency(IAWBP148SP.NonRefTax18) - get_currency(IAWBP148SP.NonRefCr18)){n}{n}
def NonRefTax2_Calculation():{n}{t}PriorCopy = Long(){n}{t}PriorCopy = GetCopy(){n}{t}if GetCopy() == 1:{n}{t}{t}return max_value(0, get_currency(IA148SP.NonRefTax10) - get_currency(IAWBP148SP.NonRefCr1)){n}{t}else:{n}{t}{t}return max_value(0, get_currency(IAWBP148SP.NonRefTax30, PriorCopy - 1) - get_currency(IAWBP148SP.NonRefCr1)){n}{n}
def NonRefTax20_Calculation():{n}{t}return max_value(0, get_currency(IAWBP148SP.NonRefTax19) - get_currency(IAWBP148SP.NonRefCr19)){n}{n}
def NonRefTax21_Calculation():{n}{t}return max_value(0, get_currency(IAWBP148SP.NonRefTax20) - get_currency(IAWBP148SP.NonRefCr20)){n}{n}
def NonRefTax22_Calculation():{n}{t}return max_value(0, get_currency(IAWBP148SP.NonRefTax21) - get_currency(IAWBP148SP.NonRefCr21)){n}{n}
def NonRefTax23_Calculation():{n}{t}return max_value(0, get_currency(IAWBP148SP.NonRefTax22) - get_currency(IAWBP148SP.NonRefCr22)){n}{n}
def NonRefTax24_Calculation():{n}{t}return max_value(0, get_currency(IAWBP148SP.NonRefTax23) - get_currency(IAWBP148SP.NonRefCr23)){n}{n}
def NonRefTax25_Calculation():{n}{t}return max_value(0, get_currency(IAWBP148SP.NonRefTax24) - get_currency(IAWBP148SP.NonRefCr24)){n}{n}
def NonRefTax26_Calculation():{n}{t}return max_value(0, get_currency(IAWBP148SP.NonRefTax25) - get_currency(IAWBP148SP.NonRefCr25)){n}{n}
def NonRefTax27_Calculation():{n}{t}return max_value(0, get_currency(IAWBP148SP.NonRefTax26) - get_currency(IAWBP148SP.NonRefCr26)){n}{n}
def NonRefTax28_Calculation():{n}{t}return max_value(0, get_currency(IAWBP148SP.NonRefTax27) - get_currency(IAWBP148SP.NonRefCr27)){n}{n}
def NonRefTax29_Calculation():{n}{t}return max_value(0, get_currency(IAWBP148SP.NonRefTax28) - get_currency(IAWBP148SP.NonRefCr28)){n}{n}
def NonRefTax3_Calculation():{n}{t}return max_value(0, get_currency(IAWBP148SP.NonRefTax2) - get_currency(IAWBP148SP.NonRefCr2)){n}{n}
def NonRefTax30_Calculation():{n}{t}return max_value(0, get_currency(IAWBP148SP.NonRefTax29) - get_currency(IAWBP148SP.NonRefCr29)){n}{n}
def NonRefTax4_Calculation():{n}{t}return max_value(0, get_currency(IAWBP148SP.NonRefTax3) - get_currency(IAWBP148SP.NonRefCr3)){n}{n}
def NonRefTax5_Calculation():{n}{t}return max_value(0, get_currency(IAWBP148SP.NonRefTax4) - get_currency(IAWBP148SP.NonRefCr4)){n}{n}
def NonRefTax6_Calculation():{n}{t}return max_value(0, get_currency(IAWBP148SP.NonRefTax5) - get_currency(IAWBP148SP.NonRefCr5)){n}{n}
def NonRefTax7_Calculation():{n}{t}return max_value(0, get_currency(IAWBP148SP.NonRefTax6) - get_currency(IAWBP148SP.NonRefCr6)){n}{n}
def NonRefTax8_Calculation():{n}{t}return max_value(0, get_currency(IAWBP148SP.NonRefTax7) - get_currency(IAWBP148SP.NonRefCr7)){n}{n}
def NonRefTax9_Calculation():{n}{t}return max_value(0, get_currency(IAWBP148SP.NonRefTax8) - get_currency(IAWBP148SP.NonRefCr8)){n}{n}
def NonRefTrig_Calculation(Index):{n}{t}if get_string(IAWBP148SP.NonRefCode(Index)) == '04' or get_string(IAWBP148SP.NonRefCode(Index)) == '11' or get_string(IAWBP148SP.NonRefCode(Index)) == '09':{n}{t}{t}return 0{n}{t}elif get_currency(IAWBP148SP.AvailCr(Index)) > 0:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def Offset_Calculation():{n}{t}if GetCopy() == 1:{n}{t}{t}return 9{n}{t}elif GetCopy() == 2:{n}{t}{t}return 38{n}{t}else:{n}{t}{t}return 67{n}{n}
def Print_Calculation():{n}{t}if get_currency(IAWBP148SP.TotNonRefCr) > 0:{n}{t}{t}return 1{n}{t}elif trim(get_string(IAWBP148SP.NonRefCode(0))) != '' or get_currency(IAWBP148SP.CYCredit(0)) > 0:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def PTECode_Calculation(Index):{n}{t}Stuff = Integer(){n}{t}Stuff = Index + get_number(IAWBP148SP.Offset) + 1{n}{t}return get_string(IA148BUMPSP.PTECode(Stuff)){n}{n}
def PTEEIN_Calculation(Index):{n}{t}Stuff = Integer(){n}{t}Stuff = Index + get_number(IAWBP148SP.Offset) + 1{n}{t}return get_string(IA148BUMPSP.PTEEIN(Stuff)){n}{n}
def PTEName_Calculation(Index):{n}{t}Stuff = Integer(){n}{t}Stuff = Index + get_number(IAWBP148SP.Offset) + 1{n}{t}return get_string(IA148BUMPSP.PTEName(Stuff)){n}{n}
def PTENRTrig_Calculation(Index):{n}{t}if get_string(IAWBP148SP.NonRefCode(Index)) == '04' or get_string(IAWBP148SP.PTECode(Index)) == '11' or get_string(IAWBP148SP.PTECode(Index)) == '09':{n}{t}{t}return 0{n}{t}elif trim(get_string(IAWBP148SP.PTEName(Index))) != '':{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def PYCarry_Calculation(Index):{n}{t}strindex = Long(){n}{n}{t}copystr = String(){n}{n}{t}Copy = Long(){n}{t}strindex = ( ( ( ( GetCopy() - 1 )  * 29 )  + 9 + Index )  * 4 )  + 1{n}{t}copystr = trim(Mid(get_string(IA148SP.NonRefCopiesStr), strindex, 4)){n}{t}if get_number(IA148SP.NonRefNbr) == 10:{n}{t}{t}return 0{n}{t}elif copystr != '':{n}{t}{t}Copy = CLng(copystr){n}{t}{t}if ( Copy > 100 )  and  ( Copy <= 200 ) :{n}{t}{t}{t}return 0{n}{t}{t}elif  ( Copy > 200 )  and  ( Copy <= 300 ) :{n}{t}{t}{t}return 0{n}{t}{t}elif  ( Copy > 300 )  and  ( Copy <= 400 ) :{n}{t}{t}{t}return get_currency(IACred.PYCarry, ( Copy )  - 300){n}{t}{t}elif  ( Copy > 400 )  and  ( Copy <= 500 ) :{n}{t}{t}{t}return get_currency(IACred.PYCarry, ( Copy )  - 400){n}{t}{t}elif  ( Copy > 500 )  and  ( Copy <= 600 ) :{n}{t}{t}{t}return get_currency(IACred.PYCarry, ( Copy )  - 500){n}{t}{t}elif  ( Copy > 600 )  and  ( Copy <= 700 ) :{n}{t}{t}{t}return get_currency(IACred.PYCarry, ( Copy )  - 600){n}{t}{t}elif  ( Copy > 700 )  and  ( Copy <= 800 ) :{n}{t}{t}{t}return get_currency(IACred.PYCarry, ( Copy )  - 700){n}{t}{t}elif  ( Copy > 800 )  and  ( Copy <= 900 ) :{n}{t}{t}{t}return get_currency(IACred.PYCarry, ( Copy )  - 800){n}{t}{t}elif  ( Copy > 900 )  and  ( Copy <= 1000 ) :{n}{t}{t}{t}return get_currency(IACred.PYCarry, ( Copy )  - 900){n}{t}{t}elif  ( Copy > 1000 )  and  ( Copy <= 1100 ) :{n}{t}{t}{t}return get_currency(IACred.PYCarry, ( Copy )  - 1000){n}{t}{t}elif  ( Copy > 1100 )  and  ( Copy <= 1200 ) :{n}{t}{t}{t}return get_currency(IACred.PYCarry, ( Copy )  - 1100){n}{t}{t}elif  ( Copy > 1200 )  and  ( Copy <= 1300 ) :{n}{t}{t}{t}return get_currency(IACred.PYCarry, ( Copy )  - 1200){n}{t}{t}elif  ( Copy > 1300 )  and  ( Copy <= 1400 ) :{n}{t}{t}{t}return get_currency(IACred.PYCarry, ( Copy )  - 1300){n}{t}{t}elif  ( Copy > 1400 )  and  ( Copy <= 1500 ) :{n}{t}{t}{t}return get_currency(IACred.PYCarry, ( Copy )  - 1400){n}{t}{t}elif  ( Copy > 1500 )  and  ( Copy <= 1600 ) :{n}{t}{t}{t}return get_currency(IACred.PYCarry, ( Copy )  - 1500){n}{t}{t}elif  ( Copy > 1600 )  and  ( Copy <= 1700 ) :{n}{t}{t}{t}return get_currency(IACred.PYCarry, ( Copy )  - 1600){n}{t}{t}elif  ( Copy > 1700 )  and  ( Copy <= 1800 ) :{n}{t}{t}{t}return get_currency(IACred.PYCarry, ( Copy )  - 1700){n}{t}{t}elif  ( Copy > 1800 )  and  ( Copy <= 1900 ) :{n}{t}{t}{t}return get_currency(IACred.PYCarry, ( Copy )  - 1800){n}{t}{t}elif  ( Copy > 1900 )  and  ( Copy <= 2000 ) :{n}{t}{t}{t}return get_currency(IACred.PYCarry, ( Copy )  - 1900){n}{t}{t}elif  ( Copy > 2000 )  and  ( Copy <= 2100 ) :{n}{t}{t}{t}return get_currency(IACred.PYCarry, ( Copy )  - 2000){n}{t}{t}elif  ( Copy > 2100 )  and  ( Copy <= 2200 ) :{n}{t}{t}{t}return get_currency(IACred.PYCarry, ( Copy )  - 2100){n}{t}{t}elif  ( Copy > 2200 )  and  ( Copy <= 2300 ) :{n}{t}{t}{t}return get_currency(IACred.PYCarry, ( Copy )  - 2200){n}{t}{t}elif  ( Copy > 2300 )  and  ( Copy <= 2400 ) :{n}{t}{t}{t}return get_currency(IACred.PYCarry, ( Copy )  - 2300){n}{t}{t}elif  ( Copy > 2400 )  and  ( Copy <= 2500 ) :{n}{t}{t}{t}return get_currency(IA8801SP.PYCarryforward){n}{t}return 0{n}{n}
def SSN_Calculation():{n}{t}return get_string(IA148SP.SSN){n}{n}
def TotNonRefCr_Calculation():{n}{t}NonRefCr1 = Currency(){n}{n}{t}NonRefCr2 = Currency(){n}{n}{t}NonRefCr3 = Currency(){n}{t}NonRefCr1 = get_currency(IAWBP148SP.NonRefCr1) + get_currency(IAWBP148SP.NonRefCr2) + get_currency(IAWBP148SP.NonRefCr3) + get_currency(IAWBP148SP.NonRefCr4) + get_currency(IAWBP148SP.NonRefCr5) + get_currency(IAWBP148SP.NonRefCr6) + get_currency(IAWBP148SP.NonRefCr7) + get_currency(IAWBP148SP.NonRefCr8) + get_currency(IAWBP148SP.NonRefCr9) + get_currency(IAWBP148SP.NonRefCr10){n}{t}NonRefCr2 = get_currency(IAWBP148SP.NonRefCr11) + get_currency(IAWBP148SP.NonRefCr12) + get_currency(IAWBP148SP.NonRefCr13) + get_currency(IAWBP148SP.NonRefCr14) + get_currency(IAWBP148SP.NonRefCr15) + get_currency(IAWBP148SP.NonRefCr16) + get_currency(IAWBP148SP.NonRefCr17) + get_currency(IAWBP148SP.NonRefCr18) + get_currency(IAWBP148SP.NonRefCr19) + get_currency(IAWBP148SP.NonRefCr20){n}{t}NonRefCr3 = get_currency(IAWBP148SP.NonRefCr21) + get_currency(IAWBP148SP.NonRefCr22) + get_currency(IAWBP148SP.NonRefCr23) + get_currency(IAWBP148SP.NonRefCr24) + get_currency(IAWBP148SP.NonRefCr25) + get_currency(IAWBP148SP.NonRefCr26) + get_currency(IAWBP148SP.NonRefCr27) + get_currency(IAWBP148SP.NonRefCr28) + get_currency(IAWBP148SP.NonRefCr29){n}{t}return NonRefCr1 + NonRefCr2 + NonRefCr3{n}{n}
def TPPerc_Calculation(Index):{n}{t}Stuff = Integer(){n}{t}Stuff = Index + get_number(IAWBP148SP.Offset) + 1{n}{t}return get_float(IA148BUMPSP.TPPerc(Stuff)){n}{n}def AccFedDep_Calculation(Index):{n}{t}Stuff = Integer(){n}{t}Stuff = Index + get_number(IAWBPDEPSP.Offset){n}{t}if get_number(IA4562SP.DepSeeAttBool) == 0:{n}{t}{t}return 0{n}{t}elif get_number(IA4562SP.StateDeprNbr) > Stuff:{n}{t}{t}return get_currency(IAWDepr.SPAccFedDep, get_number(IA4562SP.StateDeprCopyNbr(Stuff))){n}{t}else:{n}{t}{t}return 0{n}{n}
def AccIADep_Calculation(Index):{n}{t}Stuff = Integer(){n}{t}Stuff = Index + get_number(IAWBPDEPSP.Offset){n}{t}if get_number(IA4562SP.DepSeeAttBool) == 0:{n}{t}{t}return 0{n}{t}elif get_number(IA4562SP.StateDeprNbr) > Stuff:{n}{t}{t}return get_currency(IAWDepr.SPAccIADep, get_number(IA4562SP.StateDeprCopyNbr(Stuff))){n}{t}else:{n}{t}{t}return 0{n}{n}
def Basis_Calculation(Index):{n}{t}Stuff = Integer(){n}{t}Stuff = Index + get_number(IAWBPDEPSP.Offset){n}{t}if get_number(IA4562SP.DepSeeAttBool) == 0:{n}{t}{t}return 0{n}{t}elif get_number(IA4562SP.StateDeprNbr) > Stuff:{n}{t}{t}return get_currency(IAWDepr.SPBasis, get_number(IA4562SP.StateDeprCopyNbr(Stuff))){n}{t}else:{n}{t}{t}return 0{n}{n}
def DateServ_Calculation(Index):{n}{t}Stuff = Integer(){n}{t}Stuff = Index + get_number(IAWBPDEPSP.Offset){n}{t}if get_number(IA4562SP.DepSeeAttBool) == 0:{n}{t}{t}return ''{n}{t}elif get_number(IA4562SP.StateDeprNbr) > Stuff:{n}{t}{t}return get_string(IAWDepr.DateServ, get_number(IA4562SP.StateDeprCopyNbr(Stuff))){n}{t}else:{n}{t}{t}return ''{n}{n}
def Desc_Calculation():{n}{t}return get_string(IAWBPDEPSP.Names){n}{n}
def Fed179_Calculation(Index):{n}{t}Stuff = Integer(){n}{t}Stuff = Index + get_number(IAWBPDEPSP.Offset){n}{t}if get_number(IA4562SP.DepSeeAttBool) == 0:{n}{t}{t}return 0{n}{t}elif get_number(IA4562SP.StateDeprNbr) > Stuff:{n}{t}{t}return get_currency(IAWDepr.SPFed179, get_number(IA4562SP.StateDeprCopyNbr(Stuff))){n}{t}else:{n}{t}{t}return 0{n}{n}
def FedDepDed_Calculation(Index):{n}{t}Stuff = Integer(){n}{t}Stuff = Index + get_number(IAWBPDEPSP.Offset){n}{t}if get_number(IA4562SP.DepSeeAttBool) == 0:{n}{t}{t}return 0{n}{t}elif get_number(IA4562SP.StateDeprNbr) > Stuff:{n}{t}{t}return get_currency(IAWDepr.SPFedDepDed, get_number(IA4562SP.StateDeprCopyNbr(Stuff))){n}{t}else:{n}{t}{t}return 0{n}{n}
def IA179_Calculation(Index):{n}{t}Stuff = Integer(){n}{t}Stuff = Index + get_number(IAWBPDEPSP.Offset){n}{t}if get_number(IA4562SP.DepSeeAttBool) == 0:{n}{t}{t}return 0{n}{t}elif get_number(IA4562SP.StateDeprNbr) > Stuff:{n}{t}{t}return get_currency(IAWDepr.SPIA179, get_number(IA4562SP.StateDeprCopyNbr(Stuff))){n}{t}else:{n}{t}{t}return 0{n}{n}
def Life_Calculation(Index):{n}{t}Stuff = Integer(){n}{t}Stuff = Index + get_number(IAWBPDEPSP.Offset){n}{t}if get_number(IA4562SP.DepSeeAttBool) == 0:{n}{t}{t}return ''{n}{t}elif get_number(IA4562SP.StateDeprNbr) > Stuff:{n}{t}{t}return get_string(IAWDepr.Life, get_number(IA4562SP.StateDeprCopyNbr(Stuff))){n}{t}else:{n}{t}{t}return ''{n}{n}
def MACRSIA_Calculation(Index):{n}{t}Stuff = Integer(){n}{t}Stuff = Index + get_number(IAWBPDEPSP.Offset){n}{t}if get_number(IA4562SP.DepSeeAttBool) == 0:{n}{t}{t}return 0{n}{t}elif get_number(IA4562SP.StateDeprNbr) > Stuff:{n}{t}{t}return get_currency(IAWDepr.SPMACRSIA, get_number(IA4562SP.StateDeprCopyNbr(Stuff))){n}{t}else:{n}{t}{t}return 0{n}{n}
def Names_Calculation():{n}{t}return get_string(IA4562SP.Names){n}{n}
def Offset_Calculation():{n}{t}if GetCopy() == 1:{n}{t}{t}return 3 - get_number(IA4562PIV.SpCopy){n}{t}elif GetCopy() == 2:{n}{t}{t}return 32 - get_number(IA4562PIV.SpCopy){n}{t}elif GetCopy() == 3:{n}{t}{t}return 61 - get_number(IA4562PIV.SpCopy){n}{t}elif GetCopy() == 4:{n}{t}{t}return 90 - get_number(IA4562PIV.SpCopy){n}{t}elif GetCopy() == 5:{n}{t}{t}return 119 - get_number(IA4562PIV.SpCopy){n}{t}elif GetCopy() == 6:{n}{t}{t}return 148 - get_number(IA4562PIV.SpCopy){n}{t}elif GetCopy() == 7:{n}{t}{t}return 177 - get_number(IA4562PIV.SpCopy){n}{t}elif GetCopy() == 8:{n}{t}{t}return 206 - get_number(IA4562PIV.SpCopy){n}{t}elif GetCopy() == 9:{n}{t}{t}return 235 - get_number(IA4562PIV.SpCopy){n}{t}elif GetCopy() == 10:{n}{t}{t}return 264 - get_number(IA4562PIV.SpCopy){n}{t}elif GetCopy() == 11:{n}{t}{t}return 293 - get_number(IA4562PIV.SpCopy){n}{t}elif GetCopy() == 12:{n}{t}{t}return 322 - get_number(IA4562PIV.SpCopy){n}{t}elif GetCopy() == 13:{n}{t}{t}return 351 - get_number(IA4562PIV.SpCopy){n}{t}elif GetCopy() == 14:{n}{t}{t}return 380 - get_number(IA4562PIV.SpCopy){n}{t}elif GetCopy() == 15:{n}{t}{t}return 409 - get_number(IA4562PIV.SpCopy){n}{t}elif GetCopy() == 16:{n}{t}{t}return 438 - get_number(IA4562PIV.SpCopy){n}{t}elif GetCopy() == 17:{n}{t}{t}return 467 - get_number(IA4562PIV.SpCopy){n}{t}elif GetCopy() == 18:{n}{t}{t}return 496 - get_number(IA4562PIV.SpCopy){n}{t}elif GetCopy() == 19:{n}{t}{t}return 525 - get_number(IA4562PIV.SpCopy){n}{t}else:{n}{t}{t}return 554 - get_number(IA4562PIV.SpCopy){n}{n}
def PropDesc_Calculation(Index):{n}{t}Stuff = Integer(){n}{t}Stuff = Index + get_number(IAWBPDEPSP.Offset){n}{t}if get_number(IA4562SP.DepSeeAttBool) == 0:{n}{t}{t}return ''{n}{t}elif get_number(IA4562SP.StateDeprNbr) > Stuff:{n}{t}{t}return get_string(IAWDepr.PropDesc, get_number(IA4562SP.StateDeprCopyNbr(Stuff))){n}{t}else:{n}{t}{t}return ''{n}{n}
def PrWBPDep_Calculation():{n}{t}if get_currency(IAWBPDEPSP.TotFed179) != 0:{n}{t}{t}return 1{n}{t}elif get_currency(IAWBPDEPSP.TotFDD) != 0:{n}{t}{t}return 1{n}{t}elif get_currency(IAWBPDEPSP.TotIA179) != 0:{n}{t}{t}return 1{n}{t}elif get_currency(IAWBPDEPSP.TotMACRS) != 0:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def SSN_Calculation():{n}{t}return get_string(IA4562SP.SSN){n}{n}
def TotFDD_Calculation():{n}{t}count = Integer(){n}{n}{t}SubTot = Currency(){n}{t}count = 0{n}{t}SubTot = 0{n}{t}while count < 29:{n}{t}{t}SubTot = SubTot + get_currency(IAWBPDEPSP.FedDepDed(count)){n}{t}{t}count = count + 1{n}{t}return SubTot{n}{n}
def TotFed179_Calculation():{n}{t}count = Integer(){n}{n}{t}SubTot = Currency(){n}{t}count = 0{n}{t}SubTot = 0{n}{t}while count < 29:{n}{t}{t}SubTot = SubTot + get_currency(IAWBPDEPSP.Fed179(count)){n}{t}{t}count = count + 1{n}{t}return SubTot{n}{n}
def TotIA179_Calculation():{n}{t}count = Integer(){n}{n}{t}SubTot = Currency(){n}{t}count = 0{n}{t}SubTot = 0{n}{t}while count < 29:{n}{t}{t}SubTot = SubTot + get_currency(IAWBPDEPSP.IA179(count)){n}{t}{t}count = count + 1{n}{t}return SubTot{n}{n}
def TotMACRS_Calculation():{n}{t}count = Integer(){n}{n}{t}SubTot = Currency(){n}{t}count = 0{n}{t}SubTot = 0{n}{t}while count < 29:{n}{t}{t}SubTot = SubTot + get_currency(IAWBPDEPSP.MACRSIA(count)){n}{t}{t}count = count + 1{n}{t}return SubTot{n}{n}def Desc_Calculation():{n}{t}return get_string(IAWBPDISPSP.Names){n}{n}
def DisAdj_Calculation(Index):{n}{t}return get_currency(IAWBPDISPSP.DisIADep(Index)) - get_currency(IAWBPDISPSP.DisFedDep(Index)){n}{n}
def DisDTServ_Calculation(Index):{n}{t}Stuff = Integer(){n}{t}Stuff = Index + get_number(IAWBPDISPSP.Offset){n}{t}if get_number(IA4562SP.StateDispNbr) > Stuff:{n}{t}{t}return get_string(IAWDepr.DateServ, get_number(IA4562SP.StateDispCopyNbr(Stuff))){n}{t}else:{n}{t}{t}return ''{n}{n}
def DisDTSld_Calculation(Index):{n}{t}Stuff = Integer(){n}{t}Stuff = Index + get_number(IAWBPDISPSP.Offset){n}{t}if get_number(IA4562SP.StateDispNbr) > Stuff:{n}{t}{t}return get_string(IAWDepr.DisDTSld, get_number(IA4562SP.StateDispCopyNbr(Stuff))){n}{t}else:{n}{t}{t}return ''{n}{n}
def DisFedDep_Calculation(Index):{n}{t}Stuff = Integer(){n}{t}Stuff = Index + get_number(IAWBPDISPSP.Offset){n}{t}if get_number(IA4562SP.StateDispNbr) > Stuff:{n}{t}{t}return get_currency(IAWDepr.SPDisFedDep, get_number(IA4562SP.StateDispCopyNbr(Stuff))){n}{t}else:{n}{t}{t}return 0{n}{n}
def DisIADep_Calculation(Index):{n}{t}Stuff = Integer(){n}{t}Stuff = Index + get_number(IAWBPDISPSP.Offset){n}{t}if get_number(IA4562SP.StateDispNbr) > Stuff:{n}{t}{t}return get_currency(IAWDepr.SPDisIADep, get_number(IA4562SP.StateDispCopyNbr(Stuff))){n}{t}else:{n}{t}{t}return 0{n}{n}
def DisPropDesc_Calculation(Index):{n}{t}Stuff = Integer(){n}{t}Stuff = Index + get_number(IAWBPDISPSP.Offset){n}{t}if get_number(IA4562SP.StateDispNbr) > Stuff:{n}{t}{t}return get_string(IAWDepr.PropDesc, get_number(IA4562SP.StateDispCopyNbr(Stuff))){n}{t}else:{n}{t}{t}return ''{n}{n}
def Names_Calculation():{n}{t}return get_string(IA4562SP.Names){n}{n}
def Offset_Calculation():{n}{t}if GetCopy() == 1:{n}{t}{t}return 3{n}{t}elif GetCopy() == 2:{n}{t}{t}return 32{n}{t}elif GetCopy() == 3:{n}{t}{t}return 61{n}{t}elif GetCopy() == 4:{n}{t}{t}return 90{n}{t}elif GetCopy() == 5:{n}{t}{t}return 119{n}{t}elif GetCopy() == 6:{n}{t}{t}return 148{n}{t}elif GetCopy() == 7:{n}{t}{t}return 177{n}{t}elif GetCopy() == 8:{n}{t}{t}return 206{n}{t}elif GetCopy() == 9:{n}{t}{t}return 235{n}{t}elif GetCopy() == 10:{n}{t}{t}return 264{n}{t}elif GetCopy() == 11:{n}{t}{t}return 293{n}{t}elif GetCopy() == 12:{n}{t}{t}return 322{n}{t}elif GetCopy() == 13:{n}{t}{t}return 351{n}{t}elif GetCopy() == 14:{n}{t}{t}return 380{n}{t}elif GetCopy() == 15:{n}{t}{t}return 409{n}{t}elif GetCopy() == 16:{n}{t}{t}return 438{n}{t}elif GetCopy() == 17:{n}{t}{t}return 467{n}{t}elif GetCopy() == 18:{n}{t}{t}return 496{n}{t}elif GetCopy() == 19:{n}{t}{t}return 525{n}{t}else:{n}{t}{t}return 554{n}{n}
def PrWBPDisp_Calculation():{n}{t}if get_currency(IAWBPDISPSP.TotDisAdj) != 0:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def SSN_Calculation():{n}{t}return get_string(IA4562SP.SSN){n}{n}
def TotDisAdj_Calculation():{n}{t}count = Integer(){n}{n}{t}SubTot = Currency(){n}{t}count = 0{n}{t}SubTot = 0{n}{t}while count < 29:{n}{t}{t}SubTot = SubTot + get_currency(IAWBPDISPSP.DisAdj(count)){n}{t}{t}count = count + 1{n}{t}return SubTot{n}{n}
def TotDisFedDep_Calculation():{n}{t}count = Integer(){n}{n}{t}SubTot = Currency(){n}{t}count = 0{n}{t}SubTot = 0{n}{t}while count < 29:{n}{t}{t}SubTot = SubTot + get_currency(IAWBPDISPSP.DisFedDep(count)){n}{t}{t}count = count + 1{n}{t}return SubTot{n}{n}
def TotDisIADep_Calculation():{n}{t}count = Integer(){n}{n}{t}SubTot = Currency(){n}{t}count = 0{n}{t}SubTot = 0{n}{t}while count < 29:{n}{t}{t}SubTot = SubTot + get_currency(IAWBPDISPSP.DisIADep(count)){n}{t}{t}count = count + 1{n}{t}return SubTot{n}{n}def Desc_Calculation():{n}{t}return CStr(get_currency(IAWBPDIV.TotalDividend)) + ' Additional Dividends'{n}{n}
def DivAcctOwner_Calculation(Index):{n}{t}if get_bool(IAWBPDIV.DTp1(Index)) == True:{n}{t}{t}return 'Taxpayer'{n}{t}elif get_bool(IAWBPDIV.DSp1(Index)) == True:{n}{t}{t}return 'Spouse'{n}{t}elif get_bool(IAWBPDIV.DJ1(Index)) == True:{n}{t}{t}return 'Joint'{n}{t}else:{n}{t}{t}return ''{n}{n}
def Dividend_Calculation(Index):{n}{t}Stuff = Integer(){n}{n}{t}MoStuff = Integer(){n}{n}{t}DIV = Integer(){n}{n}{t}PartK1 = Integer(){n}{n}{t}SCorpK1 = Integer(){n}{n}{t}EstK1 = Integer(){n}{n}{t}F5471 = Integer(){n}{n}{t}F8621 = Integer(){n}{n}{t}F8814 = Integer(){n}{t}DIV = get_number(IAWBBUMP.DIVNbr){n}{t}PartK1 = get_number(IAWBBUMP.PartK1DivNbr){n}{t}SCorpK1 = get_number(IAWBBUMP.SCorpK1DivNbr){n}{t}EstK1 = get_number(IAWBBUMP.EstK1DivNbr){n}{t}F5471 = get_number(IAWBBUMP.F5471Nbr){n}{t}F8621 = get_number(IAWBBUMP.F8621Nbr){n}{t}F8814 = get_number(IAWBBUMP.F8814Nbr){n}{t}MoStuff = Index + get_number(IAWBPDIV.Offset){n}{t}if get_number(IASCHB.TotDIVCopies) == 7:{n}{t}{t}return 0{n}{t}elif DIV > MoStuff:{n}{t}{t}return Round(get_currency(USD1099DIV.ORDDIV, get_number(IAWBBUMP.DIV(MoStuff)))) + Round(get_currency(USD1099DIV.FedExmpt, get_number(IAWBBUMP.DIV(MoStuff)))){n}{t}elif DIV + PartK1 > MoStuff:{n}{t}{t}Stuff = ( MoStuff )  - DIV{n}{t}{t}return get_currency(USDPartK1.Dividends, ( get_number(IAWBBUMP.PartK1Div(Stuff)) )){n}{t}elif DIV + PartK1 + SCorpK1 > MoStuff:{n}{t}{t}Stuff = ( MoStuff )  - DIV - PartK1{n}{t}{t}return get_currency(USDSCorpK1.Dividends, ( get_number(IAWBBUMP.SCorpK1Div(Stuff)) )){n}{t}elif DIV + PartK1 + SCorpK1 + EstK1 > MoStuff:{n}{t}{t}Stuff = ( MoStuff )  - DIV - PartK1 - SCorpK1{n}{t}{t}return get_currency(USDEstK1.Dividends, ( get_number(IAWBBUMP.EstK1Div(Stuff)) )){n}{t}elif DIV + PartK1 + SCorpK1 + EstK1 + F5471 > MoStuff:{n}{t}{t}Stuff = ( MoStuff )  - DIV - PartK1 - SCorpK1 - EstK1{n}{t}{t}return get_currency(USW5471SchI.DivOrd, ( get_number(IAWBBUMP.F5471(Stuff)) )){n}{t}elif DIV + PartK1 + SCorpK1 + EstK1 + F5471 + F8621 > MoStuff:{n}{t}{t}Stuff = ( MoStuff )  - DIV - PartK1 - SCorpK1 - EstK1 - F5471{n}{t}{t}return get_currency(USF8621.DivTo1040, ( get_number(IAWBBUMP.F8621(Stuff)) )){n}{t}elif DIV + PartK1 + SCorpK1 + EstK1 + F5471 + F8621 + F8814 > MoStuff:{n}{t}{t}Stuff = ( MoStuff )  - DIV - PartK1 - SCorpK1 - EstK1 - F5471 - F8621{n}{t}{t}return get_currency(USF8814.L6XL7, ( get_number(IAWBBUMP.F8814(Stuff)) )){n}{t}else:{n}{t}{t}return 0{n}{n}
def DivNoPayer_Calculation():{n}{t}count = Variant(){n}{n}{t}Iter = Integer(){n}{t}count = 0{n}{t}Iter = 0{n}{t}while Iter < 22:{n}{t}{t}if get_currency(IAWBPDIV.Dividend(Iter)) > 0 and trim(get_string(IAWBPDIV.DivPayer(Iter))) == '':{n}{t}{t}{t}count = count + 1{n}{t}{t}Iter = Iter + 1{n}{t}if get_bool(IAWBPDIV.Print) == True and count > 0:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def DivPayer_Calculation(Index):{n}{t}Stuff = Integer(){n}{n}{t}MoStuff = Integer(){n}{n}{t}DIV = Integer(){n}{n}{t}PartK1 = Integer(){n}{n}{t}SCorpK1 = Integer(){n}{n}{t}EstK1 = Integer(){n}{n}{t}F5471 = Integer(){n}{n}{t}F8621 = Integer(){n}{n}{t}F8814 = Integer(){n}{t}DIV = get_number(IAWBBUMP.DIVNbr){n}{t}PartK1 = get_number(IAWBBUMP.PartK1DivNbr){n}{t}SCorpK1 = get_number(IAWBBUMP.SCorpK1DivNbr){n}{t}EstK1 = get_number(IAWBBUMP.EstK1DivNbr){n}{t}F5471 = get_number(IAWBBUMP.F5471Nbr){n}{t}F8621 = get_number(IAWBBUMP.F8621Nbr){n}{t}F8814 = get_number(IAWBBUMP.F8814Nbr){n}{t}MoStuff = Index + get_number(IAWBPDIV.Offset){n}{t}if get_number(IASCHB.TotDIVCopies) == 7:{n}{t}{t}return ''{n}{t}elif DIV > MoStuff:{n}{t}{t}return get_string(USD1099DIV.PayerName, get_number(IAWBBUMP.DIV(MoStuff))){n}{t}elif DIV + PartK1 > MoStuff:{n}{t}{t}Stuff = ( MoStuff )  - DIV{n}{t}{t}return get_string(USDPartK1.CoName, ( get_number(IAWBBUMP.PartK1Div(Stuff)) )){n}{t}elif DIV + PartK1 + SCorpK1 > MoStuff:{n}{t}{t}Stuff = ( MoStuff )  - DIV - PartK1{n}{t}{t}return get_string(USDSCorpK1.CoName, ( get_number(IAWBBUMP.SCorpK1Div(Stuff)) )){n}{t}elif DIV + PartK1 + SCorpK1 + EstK1 > MoStuff:{n}{t}{t}Stuff = ( MoStuff )  - DIV - PartK1 - SCorpK1{n}{t}{t}return get_string(USDEstK1.TrustName, ( get_number(IAWBBUMP.EstK1Div(Stuff)) )){n}{t}elif DIV + PartK1 + SCorpK1 + EstK1 + F5471 > MoStuff:{n}{t}{t}Stuff = ( MoStuff )  - DIV - PartK1 - SCorpK1 - EstK1{n}{t}{t}return 'Form 5471'{n}{t}elif DIV + PartK1 + SCorpK1 + EstK1 + F5471 + F8621 > MoStuff:{n}{t}{t}Stuff = ( MoStuff )  - DIV - PartK1 - SCorpK1 - EstK1 - F5471{n}{t}{t}return 'Form 8621 - ' + get_string(USF8621.CoName, ( get_number(IAWBBUMP.F8621(Stuff)) )){n}{t}elif DIV + PartK1 + SCorpK1 + EstK1 + F5471 + F8621 + F8814 > MoStuff:{n}{t}{t}Stuff = ( MoStuff )  - DIV - PartK1 - SCorpK1 - EstK1 - F5471 - F8621{n}{t}{t}return 'Form 8814 - ' + get_string(USF8814.ChName, ( get_number(IAWBBUMP.F8814(Stuff)) )){n}{t}else:{n}{t}{t}return ''{n}{n}
def DJ1_Calculation(Index):{n}{t}Stuff = Integer(){n}{n}{t}MoStuff = Integer(){n}{n}{t}DIV = Integer(){n}{n}{t}PartK1 = Integer(){n}{n}{t}SCorpK1 = Integer(){n}{n}{t}EstK1 = Integer(){n}{n}{t}F5471 = Integer(){n}{n}{t}F8621 = Integer(){n}{n}{t}F8814 = Integer(){n}{t}DIV = get_number(IAWBBUMP.DIVNbr){n}{t}PartK1 = get_number(IAWBBUMP.PartK1DivNbr){n}{t}SCorpK1 = get_number(IAWBBUMP.SCorpK1DivNbr){n}{t}EstK1 = get_number(IAWBBUMP.EstK1DivNbr){n}{t}F5471 = get_number(IAWBBUMP.F5471Nbr){n}{t}F8621 = get_number(IAWBBUMP.F8621Nbr){n}{t}F8814 = get_number(IAWBBUMP.F8814Nbr){n}{t}MoStuff = Index + get_number(IAWBPDIV.Offset){n}{t}if get_number(IASCHB.TotDIVCopies) == 7:{n}{t}{t}return 0{n}{t}elif DIV > MoStuff:{n}{t}{t}return get_bool(USD1099DIV.Joint, get_number(IAWBBUMP.DIV(MoStuff))){n}{t}elif DIV + PartK1 > MoStuff:{n}{t}{t}Stuff = ( MoStuff )  - DIV{n}{t}{t}return get_bool(USDPartK1.Joint, ( get_number(IAWBBUMP.PartK1Div(Stuff)) )){n}{t}elif DIV + PartK1 + SCorpK1 > MoStuff:{n}{t}{t}Stuff = ( MoStuff )  - DIV - PartK1{n}{t}{t}return get_bool(USDSCorpK1.Joint, ( get_number(IAWBBUMP.SCorpK1Div(Stuff)) )){n}{t}elif DIV + PartK1 + SCorpK1 + EstK1 > MoStuff:{n}{t}{t}Stuff = ( MoStuff )  - DIV - PartK1 - SCorpK1{n}{t}{t}return get_bool(USDEstK1.Joint, ( get_number(IAWBBUMP.EstK1Div(Stuff)) )){n}{t}elif DIV + PartK1 + SCorpK1 + EstK1 + F5471 > MoStuff:{n}{t}{t}Stuff = ( MoStuff )  - DIV - PartK1 - SCorpK1 - EstK1{n}{t}{t}return 0{n}{t}elif DIV + PartK1 + SCorpK1 + EstK1 + F5471 + F8621 > MoStuff:{n}{t}{t}Stuff = ( MoStuff )  - DIV - PartK1 - SCorpK1 - EstK1 - F5471{n}{t}{t}return get_bool(USF8621.Joint, ( get_number(IAWBBUMP.F8621(Stuff)) )){n}{t}elif DIV + PartK1 + SCorpK1 + EstK1 + F5471 + F8621 + F8814 > MoStuff:{n}{t}{t}Stuff = ( MoStuff )  - DIV - PartK1 - SCorpK1 - EstK1 - F5471 - F8621{n}{t}{t}if get_bool(USWBasicInfo.JointCalc) == True:{n}{t}{t}{t}return 1{n}{t}{t}else:{n}{t}{t}{t}return 0{n}{t}else:{n}{t}{t}return 0{n}{n}
def DSp1_Calculation(Index):{n}{t}Stuff = Integer(){n}{n}{t}MoStuff = Integer(){n}{n}{t}DIV = Integer(){n}{n}{t}PartK1 = Integer(){n}{n}{t}SCorpK1 = Integer(){n}{n}{t}EstK1 = Integer(){n}{n}{t}F5471 = Integer(){n}{n}{t}F8621 = Integer(){n}{n}{t}F8814 = Integer(){n}{t}DIV = get_number(IAWBBUMP.DIVNbr){n}{t}PartK1 = get_number(IAWBBUMP.PartK1DivNbr){n}{t}SCorpK1 = get_number(IAWBBUMP.SCorpK1DivNbr){n}{t}EstK1 = get_number(IAWBBUMP.EstK1DivNbr){n}{t}F5471 = get_number(IAWBBUMP.F5471Nbr){n}{t}F8621 = get_number(IAWBBUMP.F8621Nbr){n}{t}F8814 = get_number(IAWBBUMP.F8814Nbr){n}{t}MoStuff = Index + get_number(IAWBPDIV.Offset){n}{t}if get_number(IASCHB.TotDIVCopies) == 7:{n}{t}{t}return 0{n}{t}elif DIV > MoStuff:{n}{t}{t}return get_bool(USD1099DIV.Spouse, get_number(IAWBBUMP.DIV(MoStuff))){n}{t}elif DIV + PartK1 > MoStuff:{n}{t}{t}Stuff = ( MoStuff )  - DIV{n}{t}{t}return get_bool(USDPartK1.Spouse, ( get_number(IAWBBUMP.PartK1Div(Stuff)) )){n}{t}elif DIV + PartK1 + SCorpK1 > MoStuff:{n}{t}{t}Stuff = ( MoStuff )  - DIV - PartK1{n}{t}{t}return get_bool(USDSCorpK1.Spouse, ( get_number(IAWBBUMP.SCorpK1Div(Stuff)) )){n}{t}elif DIV + PartK1 + SCorpK1 + EstK1 > MoStuff:{n}{t}{t}Stuff = ( MoStuff )  - DIV - PartK1 - SCorpK1{n}{t}{t}return get_bool(USDEstK1.Spouse, ( get_number(IAWBBUMP.EstK1Div(Stuff)) )){n}{t}elif DIV + PartK1 + SCorpK1 + EstK1 + F5471 > MoStuff:{n}{t}{t}Stuff = ( MoStuff )  - DIV - PartK1 - SCorpK1 - EstK1{n}{t}{t}if get_string(USW5471SchI.SchISSN, ( get_number(IAWBBUMP.F5471(Stuff)) )) == get_string(USWBasicInfo.SpouseSSN):{n}{t}{t}{t}return 1{n}{t}{t}else:{n}{t}{t}{t}return 0{n}{t}elif DIV + PartK1 + SCorpK1 + EstK1 + F5471 + F8621 > MoStuff:{n}{t}{t}Stuff = ( MoStuff )  - DIV - PartK1 - SCorpK1 - EstK1 - F5471{n}{t}{t}return get_bool(USF8621.Spouse, ( get_number(IAWBBUMP.F8621(Stuff)) )){n}{t}elif DIV + PartK1 + SCorpK1 + EstK1 + F5471 + F8621 + F8814 > MoStuff:{n}{t}{t}Stuff = ( MoStuff )  - DIV - PartK1 - SCorpK1 - EstK1 - F5471 - F8621{n}{t}{t}return 0{n}{t}else:{n}{t}{t}return 0{n}{n}
def DTp1_Calculation(Index):{n}{t}Stuff = Integer(){n}{n}{t}MoStuff = Integer(){n}{n}{t}DIV = Integer(){n}{n}{t}PartK1 = Integer(){n}{n}{t}SCorpK1 = Integer(){n}{n}{t}EstK1 = Integer(){n}{n}{t}F5471 = Integer(){n}{n}{t}F8621 = Integer(){n}{n}{t}F8814 = Integer(){n}{t}DIV = get_number(IAWBBUMP.DIVNbr){n}{t}PartK1 = get_number(IAWBBUMP.PartK1DivNbr){n}{t}SCorpK1 = get_number(IAWBBUMP.SCorpK1DivNbr){n}{t}EstK1 = get_number(IAWBBUMP.EstK1DivNbr){n}{t}F5471 = get_number(IAWBBUMP.F5471Nbr){n}{t}F8621 = get_number(IAWBBUMP.F8621Nbr){n}{t}F8814 = get_number(IAWBBUMP.F8814Nbr){n}{t}MoStuff = Index + get_number(IAWBPDIV.Offset){n}{t}if get_number(IASCHB.TotDIVCopies) == 7:{n}{t}{t}return 0{n}{t}elif DIV > MoStuff:{n}{t}{t}return get_bool(USD1099DIV.Taxpayer, get_number(IAWBBUMP.DIV(MoStuff))){n}{t}elif DIV + PartK1 > MoStuff:{n}{t}{t}Stuff = ( MoStuff )  - DIV{n}{t}{t}return get_bool(USDPartK1.Taxpayer, ( get_number(IAWBBUMP.PartK1Div(Stuff)) )){n}{t}elif DIV + PartK1 + SCorpK1 > MoStuff:{n}{t}{t}Stuff = ( MoStuff )  - DIV - PartK1{n}{t}{t}return get_bool(USDSCorpK1.Taxpayer, ( get_number(IAWBBUMP.SCorpK1Div(Stuff)) )){n}{t}elif DIV + PartK1 + SCorpK1 + EstK1 > MoStuff:{n}{t}{t}Stuff = ( MoStuff )  - DIV - PartK1 - SCorpK1{n}{t}{t}return get_bool(USDEstK1.Taxpayer, ( get_number(IAWBBUMP.EstK1Div(Stuff)) )){n}{t}elif DIV + PartK1 + SCorpK1 + EstK1 + F5471 > MoStuff:{n}{t}{t}Stuff = ( MoStuff )  - DIV - PartK1 - SCorpK1 - EstK1{n}{t}{t}if get_string(USW5471SchI.SchISSN, ( get_number(IAWBBUMP.F5471(Stuff)) )) == get_string(USWBasicInfo.SSN):{n}{t}{t}{t}return 1{n}{t}{t}else:{n}{t}{t}{t}return 0{n}{t}elif DIV + PartK1 + SCorpK1 + EstK1 + F5471 + F8621 > MoStuff:{n}{t}{t}Stuff = ( MoStuff )  - DIV - PartK1 - SCorpK1 - EstK1 - F5471{n}{t}{t}return get_bool(USF8621.Taxpayer, ( get_number(IAWBBUMP.F8621(Stuff)) )){n}{t}elif DIV + PartK1 + SCorpK1 + EstK1 + F5471 + F8621 + F8814 > MoStuff:{n}{t}{t}Stuff = ( MoStuff )  - DIV - PartK1 - SCorpK1 - EstK1 - F5471 - F8621{n}{t}{t}if get_bool(USWBasicInfo.JointCalc) == True:{n}{t}{t}{t}return 0{n}{t}{t}else:{n}{t}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def ExemptDiv_Calculation(Index):{n}{t}Stuff = Integer(){n}{n}{t}MoStuff = Integer(){n}{n}{t}DIV = Integer(){n}{n}{t}PartK1 = Integer(){n}{n}{t}SCorpK1 = Integer(){n}{n}{t}EstK1 = Integer(){n}{n}{t}F5471 = Integer(){n}{n}{t}F8621 = Integer(){n}{n}{t}F8814 = Integer(){n}{t}DIV = get_number(IAWBBUMP.DIVNbr){n}{t}PartK1 = get_number(IAWBBUMP.PartK1DivNbr){n}{t}SCorpK1 = get_number(IAWBBUMP.SCorpK1DivNbr){n}{t}EstK1 = get_number(IAWBBUMP.EstK1DivNbr){n}{t}F5471 = get_number(IAWBBUMP.F5471Nbr){n}{t}F8621 = get_number(IAWBBUMP.F8621Nbr){n}{t}F8814 = get_number(IAWBBUMP.F8814Nbr){n}{t}MoStuff = Index + get_number(IAWBPDIV.Offset){n}{t}if get_number(IASCHB.TotDIVCopies) == 7:{n}{t}{t}return 0{n}{t}elif DIV > MoStuff:{n}{t}{t}return Round(get_currency(USD1099DIV.Nominee, get_number(IAWBBUMP.DIV(MoStuff)))) + Round(get_currency(USD1099DIV.StExmpt, get_number(IAWBBUMP.DIV(MoStuff)))) + Round(get_currency(USD1099DIV.FedStExmpt, get_number(IAWBBUMP.DIV(MoStuff)))) + Round(get_currency(USD1099DIV.Restricted, get_number(IAWBBUMP.DIV(MoStuff)))){n}{t}elif DIV + PartK1 > MoStuff:{n}{t}{t}Stuff = ( MoStuff )  - DIV{n}{t}{t}return get_currency(USDPartK1.NetStTED, ( get_number(IAWBBUMP.PartK1Div(Stuff)) )){n}{t}elif DIV + PartK1 + SCorpK1 > MoStuff:{n}{t}{t}Stuff = ( MoStuff )  - DIV - PartK1{n}{t}{t}return get_currency(USDSCorpK1.NetStTED, ( get_number(IAWBBUMP.SCorpK1Div(Stuff)) )){n}{t}elif DIV + PartK1 + SCorpK1 + EstK1 > MoStuff:{n}{t}{t}Stuff = ( MoStuff )  - DIV - PartK1 - SCorpK1{n}{t}{t}return get_currency(USDEstK1.NetStTED, ( get_number(IAWBBUMP.EstK1Div(Stuff)) )){n}{t}elif DIV + PartK1 + SCorpK1 + EstK1 + F5471 > MoStuff:{n}{t}{t}Stuff = ( MoStuff )  - DIV - PartK1 - SCorpK1 - EstK1{n}{t}{t}return 0{n}{t}elif DIV + PartK1 + SCorpK1 + EstK1 + F5471 + F8621 > MoStuff:{n}{t}{t}Stuff = ( MoStuff )  - DIV - PartK1 - SCorpK1 - EstK1 - F5471{n}{t}{t}return 0{n}{t}elif DIV + PartK1 + SCorpK1 + EstK1 + F5471 + F8621 + F8814 > MoStuff:{n}{t}{t}Stuff = ( MoStuff )  - DIV - PartK1 - SCorpK1 - EstK1 - F5471 - F8621{n}{t}{t}return 0{n}{t}else:{n}{t}{t}return 0{n}{n}
def Exist_Calculation():{n}{t}return 1{n}{n}
def Names_Calculation():{n}{t}return get_string(IAREQUIRED.CombNames){n}{n}
def Offset_Calculation():{n}{t}if GetCopy() == 1:{n}{t}{t}return 6{n}{t}elif GetCopy() == 2:{n}{t}{t}return 28{n}{t}elif GetCopy() == 3:{n}{t}{t}return 50{n}{t}elif GetCopy() == 4:{n}{t}{t}return 72{n}{t}elif GetCopy() == 5:{n}{t}{t}return 94{n}{t}elif GetCopy() == 6:{n}{t}{t}return 116{n}{t}elif GetCopy() == 7:{n}{t}{t}return 138{n}{t}elif GetCopy() == 8:{n}{t}{t}return 160{n}{t}elif GetCopy() == 9:{n}{t}{t}return 182{n}{t}elif GetCopy() == 10:{n}{t}{t}return 204{n}{t}else:{n}{t}{t}return 226{n}{n}
def Print_Calculation():{n}{t}if get_number(IASCHB.PrintIAB) == 1 and get_currency(IAWBPDIV.TotalDividend) != 0:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def SSN_Calculation():{n}{t}return get_string(IAF1040.SSN){n}{n}
def TaxDiv_Calculation(Index):{n}{t}return max_value(0, get_currency(IAWBPDIV.Dividend(Index)) - get_currency(IAWBPDIV.ExemptDiv(Index))){n}{n}
def TotalDividend_Calculation():{n}{t}count = Integer(){n}{n}{t}SubTot = Currency(){n}{t}count = 0{n}{t}SubTot = 0{n}{t}while count < 22:{n}{t}{t}SubTot = SubTot + get_currency(IAWBPDIV.Dividend(count)){n}{t}{t}count = count + 1{n}{t}return SubTot{n}{n}
def TotalExemptDiv_Calculation():{n}{t}count = Integer(){n}{n}{t}SubTot = Currency(){n}{t}count = 0{n}{t}SubTot = 0{n}{t}while count < 22:{n}{t}{t}SubTot = SubTot + get_currency(IAWBPDIV.ExemptDiv(count)){n}{t}{t}count = count + 1{n}{t}return SubTot{n}{n}
def TotalTaxDiv_Calculation():{n}{t}count = Integer(){n}{n}{t}SubTot = Currency(){n}{t}count = 0{n}{t}SubTot = 0{n}{t}while count < 22:{n}{t}{t}SubTot = SubTot + get_currency(IAWBPDIV.TaxDiv(count)){n}{t}{t}count = count + 1{n}{t}return SubTot{n}{n}def Desc_Calculation():{n}{t}return CStr(get_currency(IAWBPINT.TotalInterest)) + ' Additional Interest'{n}{n}
def ExemptInt_Calculation(Index):{n}{t}Stuff = Integer(){n}{n}{t}MoStuff = Integer(){n}{n}{t}ResSFM = Integer(){n}{n}{t}OthSFM = Integer(){n}{n}{t}OID = Integer(){n}{n}{t}INT1099 = Integer(){n}{n}{t}PartK1 = Integer(){n}{n}{t}SCorpK1 = Integer(){n}{n}{t}EstK1 = Integer(){n}{n}{t}TPAccMktDisc = Boolean(){n}{t}ResSFM = get_number(IAWBBUMP.ResSFMNbr){n}{t}OthSFM = get_number(IAWBBUMP.OthSFMNbr){n}{t}OID = get_number(IAWBBUMP.OIDNbr){n}{t}INT1099 = get_number(IAWBBUMP.INTNbr){n}{t}PartK1 = get_number(IAWBBUMP.PartK1Nbr){n}{t}SCorpK1 = get_number(IAWBBUMP.SCorpK1Nbr){n}{t}EstK1 = get_number(IAWBBUMP.EstK1Nbr){n}{t}TPAccMktDisc = get_bool(IASCHB.TPAccMktDiscInt){n}{t}MoStuff = Index + get_number(IAWBPINT.Offset){n}{t}if get_number(IASCHB.TotINTCopies) == 7:{n}{t}{t}return 0{n}{t}elif ResSFM > MoStuff:{n}{t}{t}return 0{n}{t}elif ResSFM + OthSFM > MoStuff:{n}{t}{t}Stuff = ( MoStuff )  - ResSFM{n}{t}{t}return 0{n}{t}elif ResSFM + OthSFM + OID > MoStuff:{n}{t}{t}Stuff = ( MoStuff )  - ResSFM - OthSFM{n}{t}{t}return Round(get_currency(USD1099OID.USInt, ( get_number(IAWBBUMP.OID(Stuff)) ))) + Round(get_currency(USD1099OID.StExempt, ( get_number(IAWBBUMP.OID(Stuff)) ))) + Round(get_currency(USD1099OID.Nominee, ( get_number(IAWBBUMP.OID(Stuff)) ))) + max_value(0, Round(get_currency(USD1099OID.BOIDAdjAmt, ( get_number(IAWBBUMP.OID(Stuff)) )))){n}{t}elif ResSFM + OthSFM + OID + INT1099 > MoStuff:{n}{t}{t}Stuff = ( MoStuff )  - ResSFM - OthSFM - OID{n}{t}{t}return Round(get_currency(USD1099INT.USInt, ( get_number(IAWBBUMP.INT(Stuff)) ))) + Round(get_currency(USD1099INT.Nominee, ( get_number(IAWBBUMP.INT(Stuff)) ))) + Round(get_currency(USD1099INT.AccruedInt, ( get_number(IAWBBUMP.INT(Stuff)) ))) + Round(get_currency(USD1099INT.ABP, ( get_number(IAWBBUMP.INT(Stuff)) ))) + Round(get_currency(USD1099INT.StateExmpt, ( get_number(IAWBBUMP.INT(Stuff)) ))){n}{t}elif ResSFM + OthSFM + OID + INT1099 + PartK1 > MoStuff:{n}{t}{t}Stuff = ( MoStuff )  - ResSFM - OthSFM - OID - INT1099{n}{t}{t}return get_currency(USDPartK1.NetStTEI, ( get_number(IAWBBUMP.PartK1(Stuff)) )) + get_currency(USDPartK1.FedStTEI, ( get_number(IAWBBUMP.PartK1(Stuff)) )){n}{t}elif ResSFM + OthSFM + OID + INT1099 + PartK1 + SCorpK1 > MoStuff:{n}{t}{t}Stuff = ( MoStuff )  - ResSFM - OthSFM - OID - INT1099 - PartK1{n}{t}{t}return get_currency(USDSCorpK1.NetStTEI, ( get_number(IAWBBUMP.SCorpK1(Stuff)) )) + get_currency(USDSCorpK1.FedStTEI, ( get_number(IAWBBUMP.SCorpK1(Stuff)) )){n}{t}elif ResSFM + OthSFM + OID + INT1099 + PartK1 + SCorpK1 + EstK1 > MoStuff:{n}{t}{t}Stuff = ( MoStuff )  - ResSFM - OthSFM - OID - INT1099 - PartK1 - SCorpK1{n}{t}{t}return get_currency(USDEstK1.NetStTEI, ( get_number(IAWBBUMP.EstK1(Stuff)) )) + get_currency(USDEstK1.FedStTEI, ( get_number(IAWBBUMP.EstK1(Stuff)) )){n}{t}elif ResSFM + OthSFM + OID + INT1099 + PartK1 + SCorpK1 + EstK1 + TPAccMktDisc > MoStuff:{n}{t}{t}Stuff = ( MoStuff )  - ResSFM - OthSFM - OID - INT1099 - PartK1 - SCorpK1 - EstK1{n}{t}{t}return 0{n}{t}elif ResSFM + OthSFM + OID + INT1099 + PartK1 + SCorpK1 + EstK1 + TPAccMktDisc + get_bool(IASCHB.SPAccMktDiscInt) > MoStuff:{n}{t}{t}Stuff = ( MoStuff )  - ResSFM - OthSFM - OID - INT1099 - PartK1 - SCorpK1 - EstK1 - TPAccMktDisc{n}{t}{t}return 0{n}{t}elif ResSFM + OthSFM + OID + INT1099 + PartK1 + SCorpK1 + EstK1 + TPAccMktDisc + get_bool(IASCHB.SPAccMktDiscInt) + get_bool(IASCHB.JtAccMktDiscInt) > MoStuff:{n}{t}{t}Stuff = ( MoStuff )  - ResSFM - OthSFM - OID - INT1099 - PartK1 - SCorpK1 - EstK1 - TPAccMktDisc - get_bool(IASCHB.SPAccMktDiscInt){n}{t}{t}return 0{n}{t}elif ResSFM + OthSFM + OID + INT1099 + PartK1 + SCorpK1 + EstK1 + TPAccMktDisc + get_bool(IASCHB.SPAccMktDiscInt) + get_bool(IASCHB.JtAccMktDiscInt) + get_bool(IASCHB.TPContigentPay) > MoStuff:{n}{t}{t}Stuff = ( MoStuff )  - ResSFM - OthSFM - OID - INT1099 - PartK1 - SCorpK1 - EstK1 - TPAccMktDisc - get_bool(IASCHB.SPAccMktDiscInt) - get_bool(IASCHB.JtAccMktDiscInt){n}{t}{t}return 0{n}{t}elif ResSFM + OthSFM + OID + INT1099 + PartK1 + SCorpK1 + EstK1 + TPAccMktDisc + get_bool(IASCHB.SPAccMktDiscInt) + get_bool(IASCHB.JtAccMktDiscInt) + get_bool(IASCHB.TPContigentPay) + get_bool(IASCHB.SPContigentPay) > MoStuff:{n}{t}{t}Stuff = ( MoStuff )  - ResSFM - OthSFM - OID - INT1099 - PartK1 - SCorpK1 - EstK1 - TPAccMktDisc - get_bool(IASCHB.SPAccMktDiscInt) - get_bool(IASCHB.JtAccMktDiscInt) - get_bool(IASCHB.TPContigentPay){n}{t}{t}return 0{n}{t}elif ResSFM + OthSFM + OID + INT1099 + PartK1 + SCorpK1 + EstK1 + TPAccMktDisc + get_bool(IASCHB.SPAccMktDiscInt) + get_bool(IASCHB.JtAccMktDiscInt) + get_bool(IASCHB.TPContigentPay) + get_bool(IASCHB.SPContigentPay) + get_bool(IASCHB.JtContigentPay) > MoStuff:{n}{t}{t}Stuff = ( MoStuff )  - ResSFM - OthSFM - OID - INT1099 - PartK1 - SCorpK1 - EstK1 - TPAccMktDisc - get_bool(IASCHB.SPAccMktDiscInt) - get_bool(IASCHB.JtAccMktDiscInt) - get_bool(IASCHB.TPContigentPay) - get_bool(IASCHB.SPContigentPay){n}{t}{t}return 0{n}{t}else:{n}{t}{t}return 0{n}{n}
def Exist_Calculation():{n}{t}return 1{n}{n}
def IJ1_Calculation(Index):{n}{t}Stuff = Integer(){n}{n}{t}MoStuff = Integer(){n}{n}{t}ResSFM = Integer(){n}{n}{t}OthSFM = Integer(){n}{n}{t}OID = Integer(){n}{n}{t}INT1099 = Integer(){n}{n}{t}PartK1 = Integer(){n}{n}{t}SCorpK1 = Integer(){n}{n}{t}EstK1 = Integer(){n}{n}{t}TPAccMktDisc = Boolean(){n}{t}ResSFM = get_number(IAWBBUMP.ResSFMNbr){n}{t}OthSFM = get_number(IAWBBUMP.OthSFMNbr){n}{t}OID = get_number(IAWBBUMP.OIDNbr){n}{t}INT1099 = get_number(IAWBBUMP.INTNbr){n}{t}PartK1 = get_number(IAWBBUMP.PartK1Nbr){n}{t}SCorpK1 = get_number(IAWBBUMP.SCorpK1Nbr){n}{t}EstK1 = get_number(IAWBBUMP.EstK1Nbr){n}{t}TPAccMktDisc = get_bool(IASCHB.TPAccMktDiscInt){n}{t}MoStuff = Index + get_number(IAWBPINT.Offset){n}{t}if get_number(IASCHB.TotINTCopies) == 7:{n}{t}{t}return 0{n}{t}elif ResSFM > MoStuff:{n}{t}{t}return get_bool(USDSFM.Joint, get_number(IAWBBUMP.ResSFM(MoStuff))){n}{t}elif ResSFM + OthSFM > MoStuff:{n}{t}{t}Stuff = ( MoStuff )  - ResSFM{n}{t}{t}return get_bool(USDSFM.Joint, ( get_number(IAWBBUMP.OthSFM(Stuff)) )){n}{t}elif ResSFM + OthSFM + OID > MoStuff:{n}{t}{t}Stuff = ( MoStuff )  - ResSFM - OthSFM{n}{t}{t}return get_bool(USD1099OID.Joint, ( get_number(IAWBBUMP.OID(Stuff)) )){n}{t}elif ResSFM + OthSFM + OID + INT1099 > MoStuff:{n}{t}{t}Stuff = ( MoStuff )  - ResSFM - OthSFM - OID{n}{t}{t}return get_bool(USD1099INT.Joint, ( get_number(IAWBBUMP.Int(Stuff)) )){n}{t}elif ResSFM + OthSFM + OID + INT1099 + PartK1 > MoStuff:{n}{t}{t}Stuff = ( MoStuff )  - ResSFM - OthSFM - OID - INT1099{n}{t}{t}return get_bool(USDPartK1.Joint, ( get_number(IAWBBUMP.PartK1(Stuff)) )){n}{t}elif ResSFM + OthSFM + OID + INT1099 + PartK1 + SCorpK1 > MoStuff:{n}{t}{t}Stuff = ( MoStuff )  - ResSFM - OthSFM - OID - INT1099 - PartK1{n}{t}{t}return get_bool(USDSCorpK1.Joint, ( get_number(IAWBBUMP.SCorpK1(Stuff)) )){n}{t}elif ResSFM + OthSFM + OID + INT1099 + PartK1 + SCorpK1 + EstK1 > MoStuff:{n}{t}{t}Stuff = ( MoStuff )  - ResSFM - OthSFM - OID - INT1099 - PartK1 - SCorpK1{n}{t}{t}return get_bool(USDEstK1.Joint, ( get_number(IAWBBUMP.EstK1(Stuff)) )){n}{t}elif ResSFM + OthSFM + OID + INT1099 + PartK1 + SCorpK1 + EstK1 + TPAccMktDisc > MoStuff:{n}{t}{t}Stuff = ( MoStuff )  - ResSFM - OthSFM - OID - INT1099 - PartK1 - SCorpK1 - EstK1{n}{t}{t}return 0{n}{t}elif ResSFM + OthSFM + OID + INT1099 + PartK1 + SCorpK1 + EstK1 + TPAccMktDisc + get_bool(IASCHB.SPAccMktDiscInt) > MoStuff:{n}{t}{t}Stuff = ( MoStuff )  - ResSFM - OthSFM - OID - INT1099 - PartK1 - SCorpK1 - EstK1 - TPAccMktDisc{n}{t}{t}return 0{n}{t}elif ResSFM + OthSFM + OID + INT1099 + PartK1 + SCorpK1 + EstK1 + TPAccMktDisc + get_bool(IASCHB.SPAccMktDiscInt) + get_bool(IASCHB.JtAccMktDiscInt) > MoStuff:{n}{t}{t}Stuff = ( MoStuff )  - ResSFM - OthSFM - OID - INT1099 - PartK1 - SCorpK1 - EstK1 - TPAccMktDisc - get_bool(IASCHB.SPAccMktDiscInt){n}{t}{t}return 1{n}{t}elif ResSFM + OthSFM + OID + INT1099 + PartK1 + SCorpK1 + EstK1 + TPAccMktDisc + get_bool(IASCHB.SPAccMktDiscInt) + get_bool(IASCHB.JtAccMktDiscInt) + get_bool(IASCHB.TPContigentPay) > MoStuff:{n}{t}{t}Stuff = ( MoStuff )  - ResSFM - OthSFM - OID - INT1099 - PartK1 - SCorpK1 - EstK1 - TPAccMktDisc - get_bool(IASCHB.SPAccMktDiscInt) - get_bool(IASCHB.JtAccMktDiscInt){n}{t}{t}return 0{n}{t}elif ResSFM + OthSFM + OID + INT1099 + PartK1 + SCorpK1 + EstK1 + TPAccMktDisc + get_bool(IASCHB.SPAccMktDiscInt) + get_bool(IASCHB.JtAccMktDiscInt) + get_bool(IASCHB.TPContigentPay) + get_bool(IASCHB.SPContigentPay) > MoStuff:{n}{t}{t}Stuff = ( MoStuff )  - ResSFM - OthSFM - OID - INT1099 - PartK1 - SCorpK1 - EstK1 - TPAccMktDisc - get_bool(IASCHB.SPAccMktDiscInt) - get_bool(IASCHB.JtAccMktDiscInt) - get_bool(IASCHB.TPContigentPay){n}{t}{t}return 0{n}{t}elif ResSFM + OthSFM + OID + INT1099 + PartK1 + SCorpK1 + EstK1 + TPAccMktDisc + get_bool(IASCHB.SPAccMktDiscInt) + get_bool(IASCHB.JtAccMktDiscInt) + get_bool(IASCHB.TPContigentPay) + get_bool(IASCHB.SPContigentPay) + get_bool(IASCHB.JtContigentPay) > MoStuff:{n}{t}{t}Stuff = ( MoStuff )  - ResSFM - OthSFM - OID - INT1099 - PartK1 - SCorpK1 - EstK1 - TPAccMktDisc - get_bool(IASCHB.SPAccMktDiscInt) - get_bool(IASCHB.JtAccMktDiscInt) - get_bool(IASCHB.TPContigentPay) - get_bool(IASCHB.SPContigentPay){n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def IntAcctOwner_Calculation(Index):{n}{t}if get_bool(IAWBPINT.ITp1(Index)) == True:{n}{t}{t}return 'Taxpayer'{n}{t}elif get_bool(IAWBPINT.ISp1(Index)) == True:{n}{t}{t}return 'Spouse'{n}{t}elif get_bool(IAWBPINT.IJ1(Index)) == True:{n}{t}{t}return 'Joint'{n}{t}else:{n}{t}{t}return ''{n}{n}
def Interest_Calculation(Index):{n}{t}Stuff = Integer(){n}{n}{t}MoStuff = Integer(){n}{n}{t}ResSFM = Integer(){n}{n}{t}OthSFM = Integer(){n}{n}{t}OID = Integer(){n}{n}{t}INT1099 = Integer(){n}{n}{t}PartK1 = Integer(){n}{n}{t}SCorpK1 = Integer(){n}{n}{t}EstK1 = Integer(){n}{n}{t}TPAccMktDisc = Boolean(){n}{t}ResSFM = get_number(IAWBBUMP.ResSFMNbr){n}{t}OthSFM = get_number(IAWBBUMP.OthSFMNbr){n}{t}OID = get_number(IAWBBUMP.OIDNbr){n}{t}INT1099 = get_number(IAWBBUMP.INTNbr){n}{t}PartK1 = get_number(IAWBBUMP.PartK1Nbr){n}{t}SCorpK1 = get_number(IAWBBUMP.SCorpK1Nbr){n}{t}EstK1 = get_number(IAWBBUMP.EstK1Nbr){n}{t}TPAccMktDisc = get_bool(IASCHB.TPAccMktDiscInt){n}{t}MoStuff = Index + get_number(IAWBPINT.Offset){n}{t}if get_number(IASCHB.TotINTCopies) == 7:{n}{t}{t}return 0{n}{t}elif ResSFM > MoStuff:{n}{t}{t}return Round(get_currency(USDSFM.Interest, get_number(IAWBBUMP.ResSFM(MoStuff)))){n}{t}elif ResSFM + OthSFM > MoStuff:{n}{t}{t}Stuff = ( MoStuff )  - ResSFM{n}{t}{t}return Round(get_currency(USDSFM.Interest, ( get_number(IAWBBUMP.OthSFM(Stuff)) ))){n}{t}elif ResSFM + OthSFM + OID > MoStuff:{n}{t}{t}Stuff = ( MoStuff )  - ResSFM - OthSFM{n}{t}{t}return get_currency(USD1099OID.BAmt, ( get_number(IAWBBUMP.OID(Stuff)) )) + Round(get_currency(USD1099OID.TaxExempt, ( get_number(IAWBBUMP.OID(Stuff)) ))) - min_value(0, Round(get_currency(USD1099OID.BOIDAdjAmt, ( get_number(IAWBBUMP.OID(Stuff)) )))){n}{t}elif ResSFM + OthSFM + OID + INT1099 > MoStuff:{n}{t}{t}Stuff = ( MoStuff )  - ResSFM - OthSFM - OID{n}{t}{t}return get_currency(USD1099INT.BAmtEF, ( get_number(IAWBBUMP.INT(Stuff)) )) + get_currency(USD1099INT.FedExmpt, ( get_number(IAWBBUMP.INT(Stuff)) )){n}{t}elif ResSFM + OthSFM + OID + INT1099 + PartK1 > MoStuff:{n}{t}{t}Stuff = ( MoStuff )  - ResSFM - OthSFM - OID - INT1099{n}{t}{t}return get_currency(USDPartK1.HaveInt, ( get_number(IAWBBUMP.PartK1(Stuff)) )){n}{t}elif ResSFM + OthSFM + OID + INT1099 + PartK1 + SCorpK1 > MoStuff:{n}{t}{t}Stuff = ( MoStuff )  - ResSFM - OthSFM - OID - INT1099 - PartK1{n}{t}{t}return get_currency(USDSCorpK1.HaveInt, ( get_number(IAWBBUMP.SCorpK1(Stuff)) )){n}{t}elif ResSFM + OthSFM + OID + INT1099 + PartK1 + SCorpK1 + EstK1 > MoStuff:{n}{t}{t}Stuff = ( MoStuff )  - ResSFM - OthSFM - OID - INT1099 - PartK1 - SCorpK1{n}{t}{t}return get_currency(USDEstK1.HaveInt, ( get_number(IAWBBUMP.EstK1(Stuff)) )){n}{t}elif ResSFM + OthSFM + OID + INT1099 + PartK1 + SCorpK1 + EstK1 + TPAccMktDisc > MoStuff:{n}{t}{t}Stuff = ( MoStuff )  - ResSFM - OthSFM - OID - INT1099 - PartK1 - SCorpK1 - EstK1{n}{t}{t}return get_currency(IASCHB.TPAccMktDiscInt){n}{t}elif ResSFM + OthSFM + OID + INT1099 + PartK1 + SCorpK1 + EstK1 + TPAccMktDisc + get_bool(IASCHB.SPAccMktDiscInt) > MoStuff:{n}{t}{t}Stuff = ( MoStuff )  - ResSFM - OthSFM - OID - INT1099 - PartK1 - SCorpK1 - EstK1 - TPAccMktDisc{n}{t}{t}return get_currency(IASCHB.SPAccMktDiscInt){n}{t}elif ResSFM + OthSFM + OID + INT1099 + PartK1 + SCorpK1 + EstK1 + TPAccMktDisc + get_bool(IASCHB.SPAccMktDiscInt) + get_bool(IASCHB.JtAccMktDiscInt) > MoStuff:{n}{t}{t}Stuff = ( MoStuff )  - ResSFM - OthSFM - OID - INT1099 - PartK1 - SCorpK1 - EstK1 - TPAccMktDisc - get_bool(IASCHB.SPAccMktDiscInt){n}{t}{t}return get_currency(IASCHB.JtAccMktDiscInt){n}{t}elif ResSFM + OthSFM + OID + INT1099 + PartK1 + SCorpK1 + EstK1 + TPAccMktDisc + get_bool(IASCHB.SPAccMktDiscInt) + get_bool(IASCHB.JtAccMktDiscInt) + get_bool(IASCHB.TPContigentPay) > MoStuff:{n}{t}{t}Stuff = ( MoStuff )  - ResSFM - OthSFM - OID - INT1099 - PartK1 - SCorpK1 - EstK1 - TPAccMktDisc - get_bool(IASCHB.SPAccMktDiscInt) - get_bool(IASCHB.JtAccMktDiscInt){n}{t}{t}return get_currency(IASCHB.TPContigentPay){n}{t}elif ResSFM + OthSFM + OID + INT1099 + PartK1 + SCorpK1 + EstK1 + TPAccMktDisc + get_bool(IASCHB.SPAccMktDiscInt) + get_bool(IASCHB.JtAccMktDiscInt) + get_bool(IASCHB.TPContigentPay) + get_bool(IASCHB.SPContigentPay) > MoStuff:{n}{t}{t}Stuff = ( MoStuff )  - ResSFM - OthSFM - OID - INT1099 - PartK1 - SCorpK1 - EstK1 - TPAccMktDisc - get_bool(IASCHB.SPAccMktDiscInt) - get_bool(IASCHB.JtAccMktDiscInt) - get_bool(IASCHB.TPContigentPay){n}{t}{t}return get_currency(IASCHB.SPContigentPay){n}{t}elif ResSFM + OthSFM + OID + INT1099 + PartK1 + SCorpK1 + EstK1 + TPAccMktDisc + get_bool(IASCHB.SPAccMktDiscInt) + get_bool(IASCHB.JtAccMktDiscInt) + get_bool(IASCHB.TPContigentPay) + get_bool(IASCHB.SPContigentPay) + get_bool(IASCHB.JtContigentPay) > MoStuff:{n}{t}{t}Stuff = ( MoStuff )  - ResSFM - OthSFM - OID - INT1099 - PartK1 - SCorpK1 - EstK1 - TPAccMktDisc - get_bool(IASCHB.SPAccMktDiscInt) - get_bool(IASCHB.JtAccMktDiscInt) - get_bool(IASCHB.TPContigentPay) - get_bool(IASCHB.SPContigentPay){n}{t}{t}return get_currency(IASCHB.JtContigentPay){n}{t}else:{n}{t}{t}return 0{n}{n}
def IntNoPayer_Calculation():{n}{t}count = Variant(){n}{n}{t}Iter = Integer(){n}{t}count = 0{n}{t}Iter = 0{n}{t}while Iter < 22:{n}{t}{t}if get_currency(IAWBPINT.Interest(Iter)) > 0 and trim(get_string(IAWBPINT.Payer(Iter))) == '':{n}{t}{t}{t}count = count + 1{n}{t}{t}Iter = Iter + 1{n}{t}if get_bool(IAWBPINT.Print) == True and count > 0:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def ISp1_Calculation(Index):{n}{t}Stuff = Integer(){n}{n}{t}MoStuff = Integer(){n}{n}{t}ResSFM = Integer(){n}{n}{t}OthSFM = Integer(){n}{n}{t}OID = Integer(){n}{n}{t}INT1099 = Integer(){n}{n}{t}PartK1 = Integer(){n}{n}{t}SCorpK1 = Integer(){n}{n}{t}EstK1 = Integer(){n}{n}{t}TPAccMktDisc = Boolean(){n}{t}ResSFM = get_number(IAWBBUMP.ResSFMNbr){n}{t}OthSFM = get_number(IAWBBUMP.OthSFMNbr){n}{t}OID = get_number(IAWBBUMP.OIDNbr){n}{t}INT1099 = get_number(IAWBBUMP.INTNbr){n}{t}PartK1 = get_number(IAWBBUMP.PartK1Nbr){n}{t}SCorpK1 = get_number(IAWBBUMP.SCorpK1Nbr){n}{t}EstK1 = get_number(IAWBBUMP.EstK1Nbr){n}{t}TPAccMktDisc = get_bool(IASCHB.TPAccMktDiscInt){n}{t}MoStuff = Index + get_number(IAWBPINT.Offset){n}{t}if get_number(IASCHB.TotINTCopies) == 7:{n}{t}{t}return 0{n}{t}elif ResSFM > MoStuff:{n}{t}{t}return get_bool(USDSFM.Spouse, get_number(IAWBBUMP.ResSFM(MoStuff))){n}{t}elif ResSFM + OthSFM > MoStuff:{n}{t}{t}Stuff = ( MoStuff )  - ResSFM{n}{t}{t}return get_bool(USDSFM.Spouse, ( get_number(IAWBBUMP.OthSFM(Stuff)) )){n}{t}elif ResSFM + OthSFM + OID > MoStuff:{n}{t}{t}Stuff = ( MoStuff )  - ResSFM - OthSFM{n}{t}{t}return get_bool(USD1099OID.Spouse, ( get_number(IAWBBUMP.OID(Stuff)) )){n}{t}elif ResSFM + OthSFM + OID + INT1099 > MoStuff:{n}{t}{t}Stuff = ( MoStuff )  - ResSFM - OthSFM - OID{n}{t}{t}return get_bool(USD1099INT.Spouse, ( get_number(IAWBBUMP.Int(Stuff)) )){n}{t}elif ResSFM + OthSFM + OID + INT1099 + PartK1 > MoStuff:{n}{t}{t}Stuff = ( MoStuff )  - ResSFM - OthSFM - OID - INT1099{n}{t}{t}return get_bool(USDPartK1.Spouse, ( get_number(IAWBBUMP.PartK1(Stuff)) )){n}{t}elif ResSFM + OthSFM + OID + INT1099 + PartK1 + SCorpK1 > MoStuff:{n}{t}{t}Stuff = ( MoStuff )  - ResSFM - OthSFM - OID - INT1099 - PartK1{n}{t}{t}return get_bool(USDSCorpK1.Spouse, ( get_number(IAWBBUMP.SCorpK1(Stuff)) )){n}{t}elif ResSFM + OthSFM + OID + INT1099 + PartK1 + SCorpK1 + EstK1 > MoStuff:{n}{t}{t}Stuff = ( MoStuff )  - ResSFM - OthSFM - OID - INT1099 - PartK1 - SCorpK1{n}{t}{t}return get_bool(USDEstK1.Spouse, ( get_number(IAWBBUMP.EstK1(Stuff)) )){n}{t}elif ResSFM + OthSFM + OID + INT1099 + PartK1 + SCorpK1 + EstK1 + TPAccMktDisc > MoStuff:{n}{t}{t}Stuff = ( MoStuff )  - ResSFM - OthSFM - OID - INT1099 - PartK1 - SCorpK1 - EstK1{n}{t}{t}return 0{n}{t}elif ResSFM + OthSFM + OID + INT1099 + PartK1 + SCorpK1 + EstK1 + TPAccMktDisc + get_bool(IASCHB.SPAccMktDiscInt) > MoStuff:{n}{t}{t}Stuff = ( MoStuff )  - ResSFM - OthSFM - OID - INT1099 - PartK1 - SCorpK1 - EstK1 - TPAccMktDisc{n}{t}{t}return 1{n}{t}elif ResSFM + OthSFM + OID + INT1099 + PartK1 + SCorpK1 + EstK1 + TPAccMktDisc + get_bool(IASCHB.SPAccMktDiscInt) + get_bool(IASCHB.JtAccMktDiscInt) > MoStuff:{n}{t}{t}Stuff = ( MoStuff )  - ResSFM - OthSFM - OID - INT1099 - PartK1 - SCorpK1 - EstK1 - TPAccMktDisc - get_bool(IASCHB.SPAccMktDiscInt){n}{t}{t}return 0{n}{t}elif ResSFM + OthSFM + OID + INT1099 + PartK1 + SCorpK1 + EstK1 + TPAccMktDisc + get_bool(IASCHB.SPAccMktDiscInt) + get_bool(IASCHB.JtAccMktDiscInt) + get_bool(IASCHB.TPContigentPay) > MoStuff:{n}{t}{t}Stuff = ( MoStuff )  - ResSFM - OthSFM - OID - INT1099 - PartK1 - SCorpK1 - EstK1 - TPAccMktDisc - get_bool(IASCHB.SPAccMktDiscInt) - get_bool(IASCHB.JtAccMktDiscInt){n}{t}{t}return 0{n}{t}elif ResSFM + OthSFM + OID + INT1099 + PartK1 + SCorpK1 + EstK1 + TPAccMktDisc + get_bool(IASCHB.SPAccMktDiscInt) + get_bool(IASCHB.JtAccMktDiscInt) + get_bool(IASCHB.TPContigentPay) + get_bool(IASCHB.SPContigentPay) > MoStuff:{n}{t}{t}Stuff = ( MoStuff )  - ResSFM - OthSFM - OID - INT1099 - PartK1 - SCorpK1 - EstK1 - TPAccMktDisc - get_bool(IASCHB.SPAccMktDiscInt) - get_bool(IASCHB.JtAccMktDiscInt) - get_bool(IASCHB.TPContigentPay){n}{t}{t}return 1{n}{t}elif ResSFM + OthSFM + OID + INT1099 + PartK1 + SCorpK1 + EstK1 + TPAccMktDisc + get_bool(IASCHB.SPAccMktDiscInt) + get_bool(IASCHB.JtAccMktDiscInt) + get_bool(IASCHB.TPContigentPay) + get_bool(IASCHB.SPContigentPay) + get_bool(IASCHB.JtContigentPay) > MoStuff:{n}{t}{t}Stuff = ( MoStuff )  - ResSFM - OthSFM - OID - INT1099 - PartK1 - SCorpK1 - EstK1 - TPAccMktDisc - get_bool(IASCHB.SPAccMktDiscInt) - get_bool(IASCHB.JtAccMktDiscInt) - get_bool(IASCHB.TPContigentPay) - get_bool(IASCHB.SPContigentPay){n}{t}{t}return 0{n}{t}else:{n}{t}{t}return 0{n}{n}
def ITp1_Calculation(Index):{n}{t}Stuff = Integer(){n}{n}{t}MoStuff = Integer(){n}{n}{t}ResSFM = Integer(){n}{n}{t}OthSFM = Integer(){n}{n}{t}OID = Integer(){n}{n}{t}INT1099 = Integer(){n}{n}{t}PartK1 = Integer(){n}{n}{t}SCorpK1 = Integer(){n}{n}{t}EstK1 = Integer(){n}{n}{t}TPAccMktDisc = Boolean(){n}{t}ResSFM = get_number(IAWBBUMP.ResSFMNbr){n}{t}OthSFM = get_number(IAWBBUMP.OthSFMNbr){n}{t}OID = get_number(IAWBBUMP.OIDNbr){n}{t}INT1099 = get_number(IAWBBUMP.INTNbr){n}{t}PartK1 = get_number(IAWBBUMP.PartK1Nbr){n}{t}SCorpK1 = get_number(IAWBBUMP.SCorpK1Nbr){n}{t}EstK1 = get_number(IAWBBUMP.EstK1Nbr){n}{t}TPAccMktDisc = get_bool(IASCHB.TPAccMktDiscInt){n}{t}MoStuff = Index + get_number(IAWBPINT.Offset){n}{t}if get_number(IASCHB.TotINTCopies) == 7:{n}{t}{t}return 0{n}{t}elif ResSFM > MoStuff:{n}{t}{t}return get_bool(USDSFM.Taxpayer, get_number(IAWBBUMP.ResSFM(MoStuff))){n}{t}elif ResSFM + OthSFM > MoStuff:{n}{t}{t}Stuff = ( MoStuff )  - ResSFM{n}{t}{t}return get_bool(USDSFM.Taxpayer, ( get_number(IAWBBUMP.OthSFM(Stuff)) )){n}{t}elif ResSFM + OthSFM + OID > MoStuff:{n}{t}{t}Stuff = ( MoStuff )  - ResSFM - OthSFM{n}{t}{t}return get_bool(USD1099OID.Taxpayer, ( get_number(IAWBBUMP.OID(Stuff)) )){n}{t}elif ResSFM + OthSFM + OID + INT1099 > MoStuff:{n}{t}{t}Stuff = ( MoStuff )  - ResSFM - OthSFM - OID{n}{t}{t}return get_bool(USD1099INT.Taxpayer, ( get_number(IAWBBUMP.Int(Stuff)) )){n}{t}elif ResSFM + OthSFM + OID + INT1099 + PartK1 > MoStuff:{n}{t}{t}Stuff = ( MoStuff )  - ResSFM - OthSFM - OID - INT1099{n}{t}{t}return get_bool(USDPartK1.Taxpayer, ( get_number(IAWBBUMP.PartK1(Stuff)) )){n}{t}elif ResSFM + OthSFM + OID + INT1099 + PartK1 + SCorpK1 > MoStuff:{n}{t}{t}Stuff = ( MoStuff )  - ResSFM - OthSFM - OID - INT1099 - PartK1{n}{t}{t}return get_bool(USDSCorpK1.Taxpayer, ( get_number(IAWBBUMP.SCorpK1(Stuff)) )){n}{t}elif ResSFM + OthSFM + OID + INT1099 + PartK1 + SCorpK1 + EstK1 > MoStuff:{n}{t}{t}Stuff = ( MoStuff )  - ResSFM - OthSFM - OID - INT1099 - PartK1 - SCorpK1{n}{t}{t}return get_bool(USDEstK1.Taxpayer, ( get_number(IAWBBUMP.EstK1(Stuff)) )){n}{t}elif ResSFM + OthSFM + OID + INT1099 + PartK1 + SCorpK1 + EstK1 + TPAccMktDisc > MoStuff:{n}{t}{t}Stuff = ( MoStuff )  - ResSFM - OthSFM - OID - INT1099 - PartK1 - SCorpK1 - EstK1{n}{t}{t}return 1{n}{t}elif ResSFM + OthSFM + OID + INT1099 + PartK1 + SCorpK1 + EstK1 + TPAccMktDisc + get_bool(IASCHB.SPAccMktDiscInt) > MoStuff:{n}{t}{t}Stuff = ( MoStuff )  - ResSFM - OthSFM - OID - INT1099 - PartK1 - SCorpK1 - EstK1 - TPAccMktDisc{n}{t}{t}return 0{n}{t}elif ResSFM + OthSFM + OID + INT1099 + PartK1 + SCorpK1 + EstK1 + TPAccMktDisc + get_bool(IASCHB.SPAccMktDiscInt) + get_bool(IASCHB.JtAccMktDiscInt) > MoStuff:{n}{t}{t}Stuff = ( MoStuff )  - ResSFM - OthSFM - OID - INT1099 - PartK1 - SCorpK1 - EstK1 - TPAccMktDisc - get_bool(IASCHB.SPAccMktDiscInt){n}{t}{t}return 0{n}{t}elif ResSFM + OthSFM + OID + INT1099 + PartK1 + SCorpK1 + EstK1 + TPAccMktDisc + get_bool(IASCHB.SPAccMktDiscInt) + get_bool(IASCHB.JtAccMktDiscInt) + get_bool(IASCHB.TPContigentPay) > MoStuff:{n}{t}{t}Stuff = ( MoStuff )  - ResSFM - OthSFM - OID - INT1099 - PartK1 - SCorpK1 - EstK1 - TPAccMktDisc - get_bool(IASCHB.SPAccMktDiscInt) - get_bool(IASCHB.JtAccMktDiscInt){n}{t}{t}return 1{n}{t}elif ResSFM + OthSFM + OID + INT1099 + PartK1 + SCorpK1 + EstK1 + TPAccMktDisc + get_bool(IASCHB.SPAccMktDiscInt) + get_bool(IASCHB.JtAccMktDiscInt) + get_bool(IASCHB.TPContigentPay) + get_bool(IASCHB.SPContigentPay) > MoStuff:{n}{t}{t}Stuff = ( MoStuff )  - ResSFM - OthSFM - OID - INT1099 - PartK1 - SCorpK1 - EstK1 - TPAccMktDisc - get_bool(IASCHB.SPAccMktDiscInt) - get_bool(IASCHB.JtAccMktDiscInt) - get_bool(IASCHB.TPContigentPay){n}{t}{t}return 0{n}{t}elif ResSFM + OthSFM + OID + INT1099 + PartK1 + SCorpK1 + EstK1 + TPAccMktDisc + get_bool(IASCHB.SPAccMktDiscInt) + get_bool(IASCHB.JtAccMktDiscInt) + get_bool(IASCHB.TPContigentPay) + get_bool(IASCHB.SPContigentPay) + get_bool(IASCHB.JtContigentPay) > MoStuff:{n}{t}{t}Stuff = ( MoStuff )  - ResSFM - OthSFM - OID - INT1099 - PartK1 - SCorpK1 - EstK1 - TPAccMktDisc - get_bool(IASCHB.SPAccMktDiscInt) - get_bool(IASCHB.JtAccMktDiscInt) - get_bool(IASCHB.TPContigentPay) - get_bool(IASCHB.SPContigentPay){n}{t}{t}return 0{n}{t}else:{n}{t}{t}return 0{n}{n}
def Names_Calculation():{n}{t}return get_string(IAREQUIRED.CombNames){n}{n}
def Offset_Calculation():{n}{t}if GetCopy() == 1:{n}{t}{t}return 6{n}{t}elif GetCopy() == 2:{n}{t}{t}return 28{n}{t}elif GetCopy() == 3:{n}{t}{t}return 50{n}{t}elif GetCopy() == 4:{n}{t}{t}return 72{n}{t}elif GetCopy() == 5:{n}{t}{t}return 94{n}{t}elif GetCopy() == 6:{n}{t}{t}return 116{n}{t}elif GetCopy() == 7:{n}{t}{t}return 138{n}{t}elif GetCopy() == 8:{n}{t}{t}return 160{n}{t}elif GetCopy() == 9:{n}{t}{t}return 182{n}{t}elif GetCopy() == 10:{n}{t}{t}return 204{n}{t}elif GetCopy() == 11:{n}{t}{t}return 226{n}{t}else:{n}{t}{t}return 248{n}{n}
def Payer_Calculation(Index):{n}{t}Stuff = Integer(){n}{n}{t}MoStuff = Integer(){n}{n}{t}ResSFM = Integer(){n}{n}{t}OthSFM = Integer(){n}{n}{t}OID = Integer(){n}{n}{t}INT1099 = Integer(){n}{n}{t}PartK1 = Integer(){n}{n}{t}SCorpK1 = Integer(){n}{n}{t}EstK1 = Integer(){n}{n}{t}TPAccMktDisc = Boolean(){n}{t}ResSFM = get_number(IAWBBUMP.ResSFMNbr){n}{t}OthSFM = get_number(IAWBBUMP.OthSFMNbr){n}{t}OID = get_number(IAWBBUMP.OIDNbr){n}{t}INT1099 = get_number(IAWBBUMP.INTNbr){n}{t}PartK1 = get_number(IAWBBUMP.PartK1Nbr){n}{t}SCorpK1 = get_number(IAWBBUMP.SCorpK1Nbr){n}{t}EstK1 = get_number(IAWBBUMP.EstK1Nbr){n}{t}TPAccMktDisc = get_bool(IASCHB.TPAccMktDiscInt){n}{t}MoStuff = Index + get_number(IAWBPINT.Offset){n}{t}if get_number(IASCHB.TotINTCopies) == 7:{n}{t}{t}return ''{n}{t}elif ResSFM > MoStuff:{n}{t}{t}return get_string(USDSFM.NameAdd, get_number(IAWBBUMP.ResSFM(MoStuff))){n}{t}elif ResSFM + OthSFM > MoStuff:{n}{t}{t}Stuff = ( MoStuff )  - ResSFM{n}{t}{t}return get_string(USDSFM.PayerName, ( get_number(IAWBBUMP.OthSFM(Stuff)) )){n}{t}elif ResSFM + OthSFM + OID > MoStuff:{n}{t}{t}Stuff = ( MoStuff )  - ResSFM - OthSFM{n}{t}{t}return get_string(USD1099OID.PayerName, ( get_number(IAWBBUMP.OID(Stuff)) )){n}{t}elif ResSFM + OthSFM + OID + INT1099 > MoStuff:{n}{t}{t}Stuff = ( MoStuff )  - ResSFM - OthSFM - OID{n}{t}{t}return get_string(USD1099INT.PayerName, ( get_number(IAWBBUMP.INT(Stuff)) )){n}{t}elif ResSFM + OthSFM + OID + INT1099 + PartK1 > MoStuff:{n}{t}{t}Stuff = ( MoStuff )  - ResSFM - OthSFM - OID - INT1099{n}{t}{t}return get_string(USDPartK1.CoName, ( get_number(IAWBBUMP.PartK1(Stuff)) )){n}{t}elif ResSFM + OthSFM + OID + INT1099 + PartK1 + SCorpK1 > MoStuff:{n}{t}{t}Stuff = ( MoStuff )  - ResSFM - OthSFM - OID - INT1099 - PartK1{n}{t}{t}return get_string(USDSCorpK1.CoName, ( get_number(IAWBBUMP.SCorpK1(Stuff)) )){n}{t}elif ResSFM + OthSFM + OID + INT1099 + PartK1 + SCorpK1 + EstK1 > MoStuff:{n}{t}{t}Stuff = ( MoStuff )  - ResSFM - OthSFM - OID - INT1099 - PartK1 - SCorpK1{n}{t}{t}return get_string(USDEstK1.TrustName, ( get_number(IAWBBUMP.EstK1(Stuff)) )){n}{t}elif ResSFM + OthSFM + OID + INT1099 + PartK1 + SCorpK1 + EstK1 + TPAccMktDisc > MoStuff:{n}{t}{t}Stuff = ( MoStuff )  - ResSFM - OthSFM - OID - INT1099 - PartK1 - SCorpK1 - EstK1{n}{t}{t}return 'Accrued Market Discount'{n}{t}elif ResSFM + OthSFM + OID + INT1099 + PartK1 + SCorpK1 + EstK1 + TPAccMktDisc + get_bool(IASCHB.SPAccMktDiscInt) > MoStuff:{n}{t}{t}Stuff = ( MoStuff )  - ResSFM - OthSFM - OID - INT1099 - PartK1 - SCorpK1 - EstK1 - TPAccMktDisc{n}{t}{t}return 'Accrued Market Discount'{n}{t}elif ResSFM + OthSFM + OID + INT1099 + PartK1 + SCorpK1 + EstK1 + TPAccMktDisc + get_bool(IASCHB.SPAccMktDiscInt) + get_bool(IASCHB.JtAccMktDiscInt) > MoStuff:{n}{t}{t}Stuff = ( MoStuff )  - ResSFM - OthSFM - OID - INT1099 - PartK1 - SCorpK1 - EstK1 - TPAccMktDisc - get_bool(IASCHB.SPAccMktDiscInt){n}{t}{t}return 'Accrued Market Discount'{n}{t}elif ResSFM + OthSFM + OID + INT1099 + PartK1 + SCorpK1 + EstK1 + TPAccMktDisc + get_bool(IASCHB.SPAccMktDiscInt) + get_bool(IASCHB.JtAccMktDiscInt) + get_bool(IASCHB.TPContigentPay) > MoStuff:{n}{t}{t}Stuff = ( MoStuff )  - ResSFM - OthSFM - OID - INT1099 - PartK1 - SCorpK1 - EstK1 - TPAccMktDisc - get_bool(IASCHB.SPAccMktDiscInt) - get_bool(IASCHB.JtAccMktDiscInt){n}{t}{t}return 'Contingent Payment Debt Instrument'{n}{t}elif ResSFM + OthSFM + OID + INT1099 + PartK1 + SCorpK1 + EstK1 + TPAccMktDisc + get_bool(IASCHB.SPAccMktDiscInt) + get_bool(IASCHB.JtAccMktDiscInt) + get_bool(IASCHB.TPContigentPay) + get_bool(IASCHB.SPContigentPay) > MoStuff:{n}{t}{t}Stuff = ( MoStuff )  - ResSFM - OthSFM - OID - INT1099 - PartK1 - SCorpK1 - EstK1 - TPAccMktDisc - get_bool(IASCHB.SPAccMktDiscInt) - get_bool(IASCHB.JtAccMktDiscInt) - get_bool(IASCHB.TPContigentPay){n}{t}{t}return 'Contingent Payment Debt Instrument'{n}{t}elif ResSFM + OthSFM + OID + INT1099 + PartK1 + SCorpK1 + EstK1 + TPAccMktDisc + get_bool(IASCHB.SPAccMktDiscInt) + get_bool(IASCHB.JtAccMktDiscInt) + get_bool(IASCHB.TPContigentPay) + get_bool(IASCHB.SPContigentPay) + get_bool(IASCHB.JtContigentPay) > MoStuff:{n}{t}{t}Stuff = ( MoStuff )  - ResSFM - OthSFM - OID - INT1099 - PartK1 - SCorpK1 - EstK1 - TPAccMktDisc - get_bool(IASCHB.SPAccMktDiscInt) - get_bool(IASCHB.JtAccMktDiscInt) - get_bool(IASCHB.TPContigentPay) - get_bool(IASCHB.SPContigentPay){n}{t}{t}return 'Contingent Payment Debt Instrument'{n}{t}else:{n}{t}{t}return ''{n}{n}
def Print_Calculation():{n}{t}if get_number(IASCHB.PrintIAB) == 1 and get_currency(IAWBPINT.TotalInterest) != 0:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def SSN_Calculation():{n}{t}return get_string(IAF1040.SSN){n}{n}
def TaxInt_Calculation(Index):{n}{t}return max_value(0, get_currency(IAWBPINT.Interest(Index)) - get_currency(IAWBPINT.ExemptInt(Index))){n}{n}
def TotalExemptInt_Calculation():{n}{t}count = Integer(){n}{n}{t}SubTot = Currency(){n}{t}count = 0{n}{t}SubTot = 0{n}{t}while count < 22:{n}{t}{t}SubTot = SubTot + get_currency(IAWBPINT.ExemptInt(count)){n}{t}{t}count = count + 1{n}{t}return SubTot{n}{n}
def TotalInterest_Calculation():{n}{t}count = Integer(){n}{n}{t}SubTot = Currency(){n}{t}count = 0{n}{t}SubTot = 0{n}{t}while count < 22:{n}{t}{t}SubTot = SubTot + get_currency(IAWBPINT.Interest(count)){n}{t}{t}count = count + 1{n}{t}return SubTot{n}{n}
def TotalTaxInt_Calculation():{n}{t}count = Integer(){n}{n}{t}SubTot = Currency(){n}{t}count = 0{n}{t}SubTot = 0{n}{t}while count < 22:{n}{t}{t}SubTot = SubTot + get_currency(IAWBPINT.TaxInt(count)){n}{t}{t}count = count + 1{n}{t}return SubTot{n}{n}def AGI20_Calculation():{n}{t}return max_value(0, c_dollar(get_float(IAWCONTLIMIT.CYAGI) * 0.2)){n}{n}
def AGI30_Calculation():{n}{t}return max_value(0, c_dollar(get_float(IAWCONTLIMIT.CYAGI) * 0.3)){n}{n}
def AGI50_Calculation():{n}{t}return max_value(0, c_dollar(get_float(IAWCONTLIMIT.CYAGI) * 0.5)){n}{n}
def AGI100_Calculation():{n}{t}return max_value(0, c_dollar(get_float(IAWCONTLIMIT.CYAGI) * 1)){n}{n}
def CY20After_Calculation():{n}{t}return get_currency(IAWCONTLIMIT.DedCY20) + get_currency(IAWCONTLIMIT.DedPY20){n}{n}
def CY20Lim_Calculation():{n}{t}return get_currency(USWContLimit.CY20Lim){n}{n}
def CY30After_Calculation():{n}{t}return get_currency(IAWCONTLIMIT.DedCY30) + get_currency(IAWCONTLIMIT.DedPY30){n}{n}
def CY30AfterCG_Calculation():{n}{t}return get_currency(IAWCONTLIMIT.DedCY30CG) + get_currency(IAWCONTLIMIT.DedPY30CG){n}{n}
def CY30Lim_Calculation():{n}{t}return get_currency(USWContLimit.CY30Lim){n}{n}
def CY30LimCG_Calculation():{n}{t}return get_currency(USWContLimit.CY30LimCG){n}{n}
def CY50After_Calculation():{n}{t}return get_currency(IAWCONTLIMIT.DedCY50) + get_currency(IAWCONTLIMIT.DedPY50){n}{n}
def CY50Lim_Calculation():{n}{t}return max_value(0, get_currency(IAWCONTLIMIT.CYTot) - get_currency(IAWCONTLIMIT.CY30Lim) - get_currency(IAWCONTLIMIT.CY30LimCG) - get_currency(IAWCONTLIMIT.CY20Lim) - get_currency(IAWCONTLIMIT.CYNoLim) - get_currency(IAWCONTLIMIT.CYQualLim)){n}{n}
def CYAGI_Calculation():{n}{t}return get_currency(IASCHA.IAAGI){n}{n}
def CYNoLim_Calculation():{n}{t}return get_currency(USWContLimit.CYNoLim){n}{n}
def CYNoLimit2_Calculation():{n}{t}return get_currency(IAWCONTLIMIT.DedCY100) + get_currency(IAWCONTLIMIT.DedPY100){n}{n}
def CYQualAfter_Calculation():{n}{t}Contributions = Currency(){n}{t}Contributions = min_value(get_currency(IAWCONTLIMIT.CYQualLim), get_currency(IAWCONTLIMIT.CYAGI) - get_currency(IAWCONTLIMIT.CY50After) - get_currency(IAWCONTLIMIT.CY30After) - get_currency(IAWCONTLIMIT.CY30AfterCG) - get_currency(IAWCONTLIMIT.CY20After) - get_currency(IAWCONTLIMIT.CYNoLimit2)){n}{t}return max_value(0, Contributions){n}{n}
def CYTot_Calculation():{n}{t}return get_currency(IASCHA.Contrib) + get_currency(IASCHA.Gifts){n}{n}
def CYTotAfter_Calculation():{n}{t}return get_currency(IAWCONTLIMIT.CY50After) + get_currency(IAWCONTLIMIT.CY30After) + get_currency(IAWCONTLIMIT.CY30AfterCG) + get_currency(IAWCONTLIMIT.CY20After) + get_currency(IAWCONTLIMIT.CYNoLimit2) + get_currency(IAWCONTLIMIT.CYQualAfter){n}{n}
def DedCY20_Calculation():{n}{t}Rem20 = Currency(){n}{n}{t}Rem30 = Currency(){n}{n}{t}Rem30CG = Currency(){n}{n}{t}Rem50 = Currency(){n}{n}{t}Min2 = Currency(){n}{n}{t}Min3 = Currency(){n}{t}#per pub 526 limited to lesser of 20% of AGI, or 30% of AGI minus 30% contributions or 50% of AGI minus 50% contributions{n}{t}Rem20 = max_value(0, min_value(get_currency(IAWCONTLIMIT.AGI20), get_currency(IAWCONTLIMIT.CY20Lim))){n}{t}Rem30 = max_value(0, get_currency(IAWCONTLIMIT.AGI30) - get_currency(IAWCONTLIMIT.Tot30Cont)){n}{t}Rem30CG = max_value(0, get_currency(IAWCONTLIMIT.AGI30) - get_currency(IAWCONTLIMIT.Tot30ContCG)){n}{t}Rem50 = max_value(0, get_currency(IAWCONTLIMIT.AGI50) - get_currency(IAWCONTLIMIT.Tot50Cont) - get_currency(IAWCONTLIMIT.Tot30ContCG) - get_currency(IAWCONTLIMIT.Tot30Cont)){n}{t}Min2 = min_value(Rem20, Rem30){n}{t}Min3 = min_value(Min2, Rem30CG){n}{t}return max_value(0, min_value(Min3, Rem50)){n}{n}
def DedCY30_Calculation():{n}{t}Rem30 = Currency(){n}{n}{t}Rem50 = Currency(){n}{n}{t}Thirty = Currency(){n}{t}Rem30 = max_value(0, min_value(get_currency(IAWCONTLIMIT.AGI30), get_currency(IAWCONTLIMIT.CY30Lim))){n}{t}Rem50 = max_value(0, get_currency(IAWCONTLIMIT.AGI50) - get_currency(IAWCONTLIMIT.Tot50Cont) - get_currency(IAWCONTLIMIT.Tot30ContCG)){n}{t}return max_value(0, min_value(Rem30, Rem50)){n}{n}
def DedCY30CG_Calculation():{n}{t}Rem30 = Currency(){n}{t}Rem30 = max_value(0, min_value(get_currency(IAWCONTLIMIT.AGI30), get_currency(IAWCONTLIMIT.CY30LimCG))){n}{t}return max_value(0, min_value(Rem30, get_currency(IAWCONTLIMIT.AGI50) - get_currency(IAWCONTLIMIT.Tot50Cont))){n}{n}
def DedCY50_Calculation():{n}{t}return min_value(get_currency(IAWCONTLIMIT.CY50Lim), get_currency(IAWCONTLIMIT.AGI50)){n}{n}
def DedCY100_Calculation():{n}{t}Rem100 = Currency(){n}{n}{t}Hundred = Currency(){n}{t}Rem100 = max_value(0, min_value(get_currency(IAWCONTLIMIT.AGI100), get_currency(IAWCONTLIMIT.CYNoLim))){n}{t}Hundred = max_value(0, min_value(Rem100, get_currency(IAWCONTLIMIT.AGI100) - get_currency(IAWCONTLIMIT.Tot50Cont) - get_currency(IAWCONTLIMIT.Tot30ContCG) - get_currency(IAWCONTLIMIT.Tot30Cont) - get_currency(IAWCONTLIMIT.Tot20Cont))){n}{t}return max_value(0, min_value(Rem100, Hundred)){n}{n}
def DedPY20_Calculation():{n}{t}Rem20 = Currency(){n}{n}{t}Rem30CG = Currency(){n}{n}{t}Rem30 = Currency(){n}{n}{t}Rem50 = Currency(){n}{n}{t}Min2 = Currency(){n}{n}{t}Min3 = Currency(){n}{n}{t}Min4 = Currency(){n}{n}{t}Twenty = Currency(){n}{t}Rem20 = max_value(0, min_value(get_currency(IAWCONTLIMIT.AGI20), get_currency(IAWCONTLIMIT.PY20Lim))){n}{t}Rem30CG = max_value(0, get_currency(IAWCONTLIMIT.AGI30) - get_currency(IAWCONTLIMIT.Tot30ContCG) - get_currency(IAWCONTLIMIT.DedCY20)){n}{t}Rem30 = max_value(0, get_currency(IAWCONTLIMIT.AGI30) - get_currency(IAWCONTLIMIT.Tot30Cont) - get_currency(IAWCONTLIMIT.DedCY20)){n}{t}Rem50 = max_value(0, get_currency(IAWCONTLIMIT.AGI50) - get_currency(IAWCONTLIMIT.Tot50Cont) - get_currency(IAWCONTLIMIT.Tot30ContCG) - get_currency(IAWCONTLIMIT.Tot30Cont) - get_currency(IAWCONTLIMIT.DedCY20)){n}{t}Twenty = max_value(0, get_currency(IAWCONTLIMIT.AGI20) - get_currency(IAWCONTLIMIT.DedCY20)){n}{t}Min2 = min_value(Rem20, Rem30CG){n}{t}Min3 = min_value(Rem30, Rem50){n}{t}Min4 = min_value(Min2, Twenty){n}{t}return max_value(0, min_value(Min3, Min4)){n}{n}
def DedPY30_Calculation():{n}{t}Rem30 = Currency(){n}{n}{t}Tot30 = Currency(){n}{n}{t}Thirty = Currency(){n}{t}Rem30 = max_value(0, min_value(get_currency(IAWCONTLIMIT.AGI30), get_currency(IAWCONTLIMIT.PY30Lim))){n}{t}Tot30 = max_value(0, get_currency(IAWCONTLIMIT.AGI30) - get_currency(IAWCONTLIMIT.CY30Lim)){n}{t}Thirty = max_value(0, min_value(Rem30, get_currency(IAWCONTLIMIT.AGI50) - get_currency(IAWCONTLIMIT.Tot50Cont) - get_currency(IAWCONTLIMIT.Tot30ContCG) - get_currency(IAWCONTLIMIT.DedCY30))){n}{t}return min_value(Thirty, Tot30){n}{n}
def DedPY30CG_Calculation():{n}{t}Rem30CG = Currency(){n}{n}{t}Rem50 = Currency(){n}{n}{t}Min2 = Currency(){n}{n}{t}ThirtyCG = Currency(){n}{t}Rem30CG = max_value(0, min_value(get_currency(IAWCONTLIMIT.AGI30), get_currency(IAWCONTLIMIT.PY30LimCG))){n}{t}Rem50 = max_value(0, get_currency(IAWCONTLIMIT.AGI50) - get_currency(IAWCONTLIMIT.Tot50Cont) - get_currency(IAWCONTLIMIT.DedCY30CG)){n}{t}ThirtyCG = max_value(0, get_currency(IAWCONTLIMIT.AGI30) - get_currency(IAWCONTLIMIT.DedCY30CG)){n}{t}Min2 = min_value(Rem30CG, Rem50){n}{t}return max_value(0, min_value(Min2, ThirtyCG)){n}{n}
def DedPY50_Calculation():{n}{t}Rem50 = Currency(){n}{t}Rem50 = max_value(0, min_value(get_currency(IAWCONTLIMIT.AGI50), get_currency(IAWCONTLIMIT.PY50Lim))){n}{t}return max_value(0, min_value(Rem50, get_currency(IAWCONTLIMIT.AGI50) - get_currency(IAWCONTLIMIT.DedCY50))){n}{n}
def DedPY100_Calculation():{n}{t}Hundred = Currency(){n}{n}{t}Rem100 = Currency(){n}{t}Rem100 = max_value(0, min_value(get_currency(IAWCONTLIMIT.AGI100), get_currency(IAWCONTLIMIT.PYNoLim))){n}{t}Hundred = max_value(0, min_value(Rem100, get_currency(IAWCONTLIMIT.AGI100) - get_currency(IAWCONTLIMIT.Tot50Cont) - get_currency(IAWCONTLIMIT.Tot30ContCG) - get_currency(IAWCONTLIMIT.Tot30Cont) - get_currency(IAWCONTLIMIT.Tot20Cont) - get_currency(IAWCONTLIMIT.DedCY100))){n}{t}return max_value(0, min_value(Rem100, Hundred)){n}{n}
def Desc_Calculation():{n}{t}return 'Contribution Limitation Worksheet'{n}{n}
def Exist_Calculation():{n}{t}return 1{n}{n}
def Names_Calculation():{n}{t}return get_string(IAREQUIRED.CombNames){n}{n}
def NY20Lim_Calculation():{n}{t}return max_value(0, get_currency(IAWCONTLIMIT.Tot20Cont) - get_currency(IAWCONTLIMIT.CY20After)){n}{n}
def NY30Lim_Calculation():{n}{t}return max_value(0, get_currency(IAWCONTLIMIT.Tot30Cont) - get_currency(IAWCONTLIMIT.CY30After)){n}{n}
def NY30LimCG_Calculation():{n}{t}return max_value(0, get_currency(IAWCONTLIMIT.Tot30ContCG) - get_currency(IAWCONTLIMIT.CY30AfterCG)){n}{n}
def NY50Lim_Calculation():{n}{t}return max_value(0, get_currency(IAWCONTLIMIT.Tot50Cont) - get_currency(IAWCONTLIMIT.CY50After)){n}{n}
def NYNoLim_Calculation():{n}{t}return max_value(0, get_currency(IAWCONTLIMIT.Tot100Cont) - get_currency(IAWCONTLIMIT.CYNoLimit2)){n}{n}
def NYQualLim_Calculation():{n}{t}return max_value(0, get_currency(IAWCONTLIMIT.TotQualCont) - get_currency(IAWCONTLIMIT.CYQualAfter)){n}{n}
def NYTot_Calculation():{n}{t}return get_currency(IAWCONTLIMIT.NY50Lim) + get_currency(IAWCONTLIMIT.NY30Lim) + get_currency(IAWCONTLIMIT.NY30LimCG) + get_currency(IAWCONTLIMIT.NY20Lim) + get_currency(IAWCONTLIMIT.NYNoLim) + get_currency(IAWCONTLIMIT.NYQualLim){n}{n}
def PY20Lim_Calculation():{n}{t}return get_currency(USWContLimit.PY20Lim){n}{n}
def PY30Lim_Calculation():{n}{t}return get_currency(USWContLimit.PY30Lim){n}{n}
def PY30LimCG_Calculation():{n}{t}return get_currency(USWContLimit.PY30LimCG){n}{n}
def PY50Lim_Calculation():{n}{t}return get_currency(USWContLimit.PY50Lim){n}{n}
def PYNoLim_Calculation():{n}{t}return get_currency(USWContLimit.PYNoLim){n}{n}
def PYTot_Calculation():{n}{t}return get_currency(IAWCONTLIMIT.PY50Lim) + get_currency(IAWCONTLIMIT.PY30Lim) + get_currency(IAWCONTLIMIT.PY30LimCG) + get_currency(IAWCONTLIMIT.PY20Lim) + get_currency(IAWCONTLIMIT.PYNoLim){n}{n}
def SSN_Calculation():{n}{t}return get_string(IAF1040.SSN){n}{n}
def Tot20Cont_Calculation():{n}{t}return get_currency(IAWCONTLIMIT.PY20Lim) + get_currency(IAWCONTLIMIT.CY20Lim){n}{n}
def Tot30Cont_Calculation():{n}{t}return get_currency(IAWCONTLIMIT.PY30Lim) + get_currency(IAWCONTLIMIT.CY30Lim){n}{n}
def Tot30ContCG_Calculation():{n}{t}return get_currency(IAWCONTLIMIT.PY30LimCG) + get_currency(IAWCONTLIMIT.CY30LimCG){n}{n}
def Tot50Cont_Calculation():{n}{t}return get_currency(IAWCONTLIMIT.PY50Lim) + get_currency(IAWCONTLIMIT.CY50Lim){n}{n}
def Tot100Cont_Calculation():{n}{t}return get_currency(IAWCONTLIMIT.PYNoLim) + get_currency(IAWCONTLIMIT.CYNoLim){n}{n}
def TotCont_Calculation():{n}{t}return get_currency(IAWCONTLIMIT.PYTot) + get_currency(IAWCONTLIMIT.CYTot){n}{n}
def TotQualCont_Calculation():{n}{t}return get_currency(IAWCONTLIMIT.CYQualLim){n}{n}def ExpressCantFile_Calculation():{n}{t}if get_bool(IAF1040.HOH) == True:{n}{t}{t}return 1{n}{t}elif get_bool(IAF1040.QualWidow) == True:{n}{t}{t}return 1{n}{t}elif get_bool(IAF126.SpPYNR) == True:{n}{t}{t}return 1{n}{t}elif get_bool(IAF126.TpPYNR) == True:{n}{t}{t}return 1{n}{t}elif get_bool(IAF1040.ItemCheck) == True:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def NotQualifyEF_Calculation():{n}{t}if get_bool(IAWEFQUAL.QualifiesForEF) == True:{n}{t}{t}return 0{n}{t}else:{n}{t}{t}return 1{n}{n}
def Qual10_Calculation():{n}{t}#State now allows{n}{t}#If get_bool(USWResidency.F1040NR) = True Then{n}{t}#{t}return 1{n}{t}#Else{n}{t}return 0{n}{t}#End If{n}{n}
def Qual20_Calculation():{n}{t}if get_currency(IAF1040.AGainDed) != 0:{n}{t}{t}return 1{n}{t}elif get_currency(IAF1040.BGainDed) != 0 and get_bool(IAF1040.CombMFS) == True:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def Qual30_Calculation():{n}{t}count = Integer(){n}{n}{t}Lim = Integer(){n}{n}{t}Total = Integer(){n}{n}{t}count2 = Integer(){n}{n}{t}Lim2 = Integer(){n}{n}{t}Total2 = Integer(){n}{t}Lim = GetAllCopies(IACred){n}{t}count = 1{n}{t}Total = 0{n}{t}while count <= Lim:{n}{t}{t}if get_bool(IACred.NonRefCr, count) == True and get_bool(IACred.Taxpayer, count) == True and get_string(IACred.Code, count) == '08':{n}{t}{t}{t}Total = Total + 1{n}{t}{t}else:{n}{t}{t}{t}Total = Total{n}{t}{t}count = count + 1{n}{t}Lim2 = GetAllCopies(IACred){n}{t}count2 = 1{n}{t}Total2 = 0{n}{t}while count2 <= Lim2:{n}{t}{t}if get_bool(IACred.NonRefCr, count2) == True and get_bool(IACred.Spouse, count2) == True and get_string(IACred.Code, count2) == '08':{n}{t}{t}{t}Total2 = Total2 + 1{n}{t}{t}else:{n}{t}{t}{t}Total2 = Total2{n}{t}{t}count2 = count2 + 1{n}{t}if Total != 0:{n}{t}{t}return 1{n}{t}elif get_bool(IAF1040.CombMFS) == False:{n}{t}{t}return 0{n}{t}elif Total2 != 0:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def Qual40_Calculation():{n}{t}return 0{n}{n}
def Qual45_Calculation():{n}{t}count = Integer(){n}{n}{t}Lim = Integer(){n}{n}{t}Total = Integer(){n}{n}{t}count2 = Integer(){n}{n}{t}Lim2 = Integer(){n}{n}{t}Total2 = Integer(){n}{t}Lim = GetAllCopies(IACred){n}{t}count = 1{n}{t}Total = 0{n}{t}while count <= Lim:{n}{t}{t}if get_bool(IACred.NonRefCr, count) == True and get_bool(IACred.Taxpayer, count) == True and get_string(IACred.Code, count) == '28':{n}{t}{t}{t}Total = Total + 1{n}{t}{t}else:{n}{t}{t}{t}Total = Total{n}{t}{t}count = count + 1{n}{t}Lim2 = GetAllCopies(IACred){n}{t}count2 = 1{n}{t}Total2 = 0{n}{t}while count2 <= Lim2:{n}{t}{t}if get_bool(IACred.NonRefCr, count2) == True and get_bool(IACred.Spouse, count2) == True and get_string(IACred.Code, count2) == '28':{n}{t}{t}{t}Total2 = Total2 + 1{n}{t}{t}else:{n}{t}{t}{t}Total2 = Total2{n}{t}{t}count2 = count2 + 1{n}{t}if Total != 0:{n}{t}{t}return 1{n}{t}elif get_bool(IAF1040.CombMFS) == False:{n}{t}{t}return 0{n}{t}elif Total2 != 0:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def Qual50_Calculation():{n}{t}if ( get_currency(IA2210.Penalty) > 0 )  or  ( get_currency(IA2210SP.Penalty) > 0 ) :{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def QualifiesForEF_Calculation():{n}{t}if IsPhone() == True:{n}{t}{t}if get_bool(IAWEFQUAL.Qual10) == True or get_bool(IAWEFQUAL.Qual20) == True or get_bool(IAWEFQUAL.Qual30) == True or get_bool(IAWEFQUAL.Qual40) == True or get_bool(IAWEFQUAL.Qual45) == True or get_bool(IAWEFQUAL.Qual50) == True:{n}{t}{t}{t}return 0{n}{t}{t}else:{n}{t}{t}{t}return 1{n}{t}elif get_bool(IAWEFQUAL.Qual10) == True or get_bool(IAWEFQUAL.Qual20) == True or get_bool(IAWEFQUAL.Qual30) == True or get_bool(IAWEFQUAL.Qual40) == True or get_bool(IAWEFQUAL.Qual45) == True:{n}{t}{t}return 0{n}{t}else:{n}{t}{t}return 1{n}{n}
def Names_Calculation():{n}{t}return get_string(IAREQUIRED.CombNames){n}{n}
def Reject10_Calculation():{n}{t}SameRTN = Integer(){n}{n}{t}SameDAN = Integer(){n}{n}{t}SameType = Integer(){n}{t}if get_string(USWRALApp.StateRTRTN) == get_string(IAEFWKSHT.DirDepRTN):{n}{t}{t}SameRTN = 1{n}{t}else:{n}{t}{t}SameRTN = 0{n}{t}if get_string(USWRALApp.StateRTDAN) == get_string(IAEFWKSHT.DirDepDan):{n}{t}{t}SameDAN = 1{n}{t}else:{n}{t}{t}SameDAN = 0{n}{t}if get_bool(USWRALApp.StRTCheck) == True and get_bool(IAEFWKSHT.DirDepChecking) == True:{n}{t}{t}SameType = 1{n}{t}elif get_bool(USWRALApp.StRTSave) == True and get_bool(IAEFWKSHT.DirDepSavings) == True:{n}{t}{t}SameType = 1{n}{t}else:{n}{t}{t}SameType = 0{n}{t}if get_bool(USWBankProd.IsStateRPT) == True and get_bool(IAEFWKSHT.IsStateRPT) == True and get_bool(USWRALApp.StateRTDD) == True:{n}{t}{t}if SameRTN + SameDAN + SameType != 3:{n}{t}{t}{t}return 1{n}{t}{t}else:{n}{t}{t}{t}return 0{n}{t}else:{n}{t}{t}return 0{n}{n}
def Reject20_Calculation():{n}{t}if get_bool(IAEFWKSHT.IsStateRPT) == True:{n}{t}{t}if get_bool(USWRALApp.StateRTDD) == True and get_bool(IAEFWKSHT.DirDeposit) == False:{n}{t}{t}{t}return 1{n}{t}{t}elif get_bool(USWRALApp.StateRTDC) == True and get_bool(IAEFWKSHT.DebitCard) == False and get_bool(IAEFWKSHT.AskDebitCard) == True:{n}{t}{t}{t}return 1{n}{t}{t}else:{n}{t}{t}{t}return 0{n}{t}else:{n}{t}{t}return 0{n}{n}
def Reject50_Calculation():{n}{t}if get_bool(IAEFWKSHT.PrepBPTrans) == True:{n}{t}{t}return 0{n}{t}elif get_bool(IAEFWKSHT.DebitCard) == True and get_currency(IAEFWKSHT.Refund) > 0:{n}{t}{t}return 0{n}{t}elif get_number(IAEFWKSHT.EFDDCode) != 0:{n}{t}{t}if trim(get_string(IAEFWKSHT.Acct)) == '':{n}{t}{t}{t}return 1{n}{t}{t}else:{n}{t}{t}{t}return 0{n}{t}else:{n}{t}{t}return 0{n}{n}
def Reject60_Calculation():{n}{t}if get_number(IAEFWKSHT.EFDDCode) == 2:{n}{t}{t}if GetYear(GetDate(IAEFWKSHT.EFWDate)) == YearNumber + 1:{n}{t}{t}{t}return 0{n}{t}{t}else:{n}{t}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}def Exist_Calculation():{n}{t}return 1{n}{n}
def Description_Calculation():{n}{t}Total = Currency(){n}{t}Total = get_currency(IAWHEALTH.TPTotal) + get_currency(IAWHEALTH.SPTotal){n}{t}return CStr(Total){n}{n}
def MobDisQual_Calculation():{n}{t}if get_currency(IAWHEALTH.TPTotal) + get_currency(IAWHEALTH.SPTotal) > 0:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def Names_Calculation():{n}{t}return get_string(IAREQUIRED.CombNames){n}{n}
def SERatio_Calculation():{n}{t}TotSE = Currency(){n}{t}TotSE = get_currency(IAWHEALTH.SPTotSE) + get_currency(IAWHEALTH.TPTotSE){n}{t}if TotSE > 0:{n}{t}{t}return min_value(1, max_value(0, get_float(IAWHEALTH.SPTotSE) /  ( get_float(IAWHEALTH.SPTotSE) + get_float(IAWHEALTH.TPTotSE) ))){n}{t}else:{n}{t}{t}return 0{n}{n}
def SPMedicare_Calculation():{n}{t}MedBReduce = Currency(){n}{t}if get_currency(IAWHEALTH.TPSEHealth) > 0 and get_currency(IAWHEALTH.SPSEHealth) > 0:{n}{t}{t}MedBReduce = c_dollar(get_float(USWMedicalWS.MedBPremOff) * 0.5){n}{t}elif get_currency(IAWHEALTH.TPSEHealth) == 0 and get_currency(IAWHEALTH.SPSEHealth) > 0:{n}{t}{t}MedBReduce = get_currency(USWMedicalWS.MedBPremOff){n}{t}else:{n}{t}{t}MedBReduce = 0{n}{t}return max_value(0, ( get_currency(USWSSBDetail.SPMedB) + Round(get_currency(USDRRB1099R.MedB, FieldCopies(USDRRB1099R.Spouse))) )  - MedBReduce){n}{n}
def SPName_Calculation():{n}{t}return get_string(USWBasicInfo.SPCommon){n}{n}
def SPSE_Calculation():{n}{t}return get_currency(USDSCorpK1.SeHealthInc, FieldCopies(USDSCorpK1.Spouse)) + c_dollar(get_float(USDSCorpK1.SeHealthInc, FieldCopies(USDSCorpK1.Joint)) * 0.5){n}{n}
def SPSEHealth_Calculation():{n}{t}return c_dollar(get_float(IAWHEALTH.TotHealth) * get_float(IAWHEALTH.SERatio)){n}{n}
def SPTotal_Calculation():{n}{t}return get_currency(IAWHEALTH.SPSEHealth) + get_currency(IAWHEALTH.SPInsPrem) + get_currency(IAWHEALTH.SPMedicare) + get_currency(IAWHEALTH.SPLTC) + get_currency(IAWHEALTH.SPPYRepayPTC){n}{n}
def SPTotSE_Calculation():{n}{t}return get_currency(USSchSESpouse.ANetEarn) + get_currency(USSchSESpouse.BNetEarn) + get_currency(IAWHEALTH.SPSE){n}{n}
def SSN_Calculation():{n}{t}return get_string(IAF1040.SSN){n}{n}
def TotHealth_Calculation():{n}{t}return get_currency(USWSEHealth.InsPrem){n}{n}
def TotLTC_Calculation():{n}{t}return get_currency(USWMedicalWS.LTCPrem) + get_currency(USWMedicalWS.LTCPrem2) + get_currency(USWMedicalWS.LTCPrem3) + get_currency(USWMedicalWS.LTCPrem4){n}{n}
def TotSE_Calculation():{n}{t}return get_currency(USDSCorpK1.SeHealthInc){n}{n}
def TPInsPrem_Calculation():{n}{t}AdjInsPrem = Currency(){n}{t}#removed adjustment for USWMedicalWS.PTCAdj in order to only report what was actually paid out of pocket in the current year. The PTC adjustment (either credit or excess repayment) is handled by including repayment on IA 1040 line 28(current year)/line 18(import from prior year) and IA 1040 line 14 for any current year PTC credit to be imported as income the following year.{n}{t}#change was made based on US 433238 see also CSS ticket 8605571{n}{t}AdjInsPrem = max_value(0, get_currency(USWMedicalWS.MarketplaceIns)) + get_currency(USWMedicalWS.TPSPDepIns){n}{t}return max_value(0, AdjInsPrem - get_currency(IAWHEALTH.SPInsPrem)){n}{n}
def TPLTC_Calculation():{n}{t}return max_value(0, get_currency(IAWHEALTH.TotLTC) - get_currency(IAWHEALTH.SPLTC)){n}{n}
def TPMedicare_Calculation():{n}{t}return max_value(0, get_currency(USWMedicalWS.MedBPremTot) - get_currency(IAWHEALTH.SPMedicare)){n}{n}
def TPName_Calculation():{n}{t}return get_string(USWBasicInfo.TPCommon){n}{n}
def TPPYRepayPTC_Calculation():{n}{t}if get_bool(USWSpouse.NonRes) == True:{n}{t}{t}return max_value(0, get_currency(USWRec.PYRepayPTCNR) - get_currency(IAWHEALTH.SPPYRepayPTC)){n}{t}else:{n}{t}{t}return max_value(0, get_currency(USWRec.PYRepayPTC) - get_currency(IAWHEALTH.SPPYRepayPTC)){n}{n}
def TPSE_Calculation():{n}{t}return max_value(0, get_currency(IAWHEALTH.TotSE) - get_currency(IAWHEALTH.SPSE)){n}{n}
def TPSEHealth_Calculation():{n}{t}return max_value(0, get_currency(IAWHEALTH.TotHealth) - get_currency(IAWHEALTH.SPSEHealth)){n}{n}
def TPTotal_Calculation():{n}{t}return get_currency(IAWHEALTH.TPSEHealth) + get_currency(IAWHEALTH.TPInsPrem) + get_currency(IAWHEALTH.TPMedicare) + get_currency(IAWHEALTH.TPLTC) + get_currency(IAWHEALTH.TPPYRepayPTC){n}{n}
def TPTotSE_Calculation():{n}{t}return get_currency(USSchSE.ANetEarn) + get_currency(USSchSE.BNetEarn) + get_currency(IAWHEALTH.TPSE){n}{n}def AGI_Calculation():{n}{t}return get_currency(IASCHA.IAAGI){n}{n}
def AllowableDed2_Calculation():{n}{t}return get_currency(IAWITMDED.AllowableDed){n}{n}
def AllowableDed_Calculation():{n}{t}return max_value(0, ( get_currency(IAWITMDED.IATotDed) - get_currency(IAWITMDED.Limit) )){n}{n}
def Description_Calculation():{n}{t}return CStr(get_currency(IAWITMDED.LimitDed)) + ' Itemized Deductions'{n}{n}
def Divide_Calculation():{n}{t}if get_currency(IAWITMDED.Subtract2) == 0:{n}{t}{t}return 0{n}{t}else:{n}{t}{t}return Round(get_float(IAWITMDED.Subtract1) / get_float(IAWITMDED.Subtract2), 3){n}{n}
def ExcInc_Calculation():{n}{t}return max_value(0, ( get_currency(IAWITMDED.AGI) - get_currency(IAWITMDED.IncLimit) )){n}{n}
def IADedTax2_Calculation():{n}{t}return get_currency(IAWITMDED.IADedTax){n}{n}
def IADedTax_Calculation():{n}{t}if get_bool(USWRec.ItmDdn) == True:{n}{t}{t}if get_bool(USSchA.Income) == True or get_bool(USWResidency.F1040NR) == True:{n}{t}{t}{t}return max_value(0, get_currency(IASCHA.IATax)){n}{t}{t}else:{n}{t}{t}{t}return 0{n}{t}else:{n}{t}{t}return 0{n}{n}
def IATotDed2_Calculation():{n}{t}return get_currency(IAWITMDED.IATotDed){n}{n}
def IATotDed_Calculation():{n}{t}return get_currency(IAWITMDED.TotDed) + get_currency(IAWITMDED.IADedTax){n}{n}
def IncLimit_Calculation():{n}{t}# updated for 2018 - RJ{n}{t}if FedFS() == 1:{n}{t}{t}return Decimal("266700"){n}{t}elif FedFS() == 3:{n}{t}{t}return Decimal("160000"){n}{t}elif FedFS() == 4:{n}{t}{t}return Decimal("293350"){n}{t}else:{n}{t}{t}return Decimal("320000"){n}{n}
def Limit3_Calculation():{n}{t}return c_dollar(get_float(IAWITMDED.ExcInc) * 0.03){n}{n}
def Limit80_Calculation():{n}{t}return c_dollar(get_float(IAWITMDED.PODed) * 0.8){n}{n}
def Limit_Calculation():{n}{t}return min_value(get_currency(IAWITMDED.Limit80), get_currency(IAWITMDED.Limit3)){n}{n}
def LimitDed_Calculation():{n}{t}return max_value(0, ( get_currency(IAWITMDED.AllowableDed2) - get_currency(IAWITMDED.Multiply) )){n}{n}
def Multiply_Calculation():{n}{t}return c_dollar(get_float(IAWITMDED.IADedTax2) * get_float(IAWITMDED.Divide)){n}{n}
def Names_Calculation():{n}{t}return get_string(IAREQUIRED.CombNames){n}{n}
def No1_Calculation():{n}{t}if get_currency(IAWITMDED.NonPODed) < get_currency(IAWITMDED.IATotDed):{n}{t}{t}return 0{n}{t}else:{n}{t}{t}return 1{n}{n}
def No2_Calculation():{n}{t}if get_currency(IAWITMDED.IncLimit) < get_currency(IAWITMDED.AGI):{n}{t}{t}return 0{n}{t}else:{n}{t}{t}return 1{n}{n}
def NonPODed2_Calculation():{n}{t}return get_currency(IAWITMDED.NonPODed){n}{n}
def NonPODed_Calculation():{n}{t}GamblingLoss = Currency(){n}{t}if get_bool(USWResidency.F1040NR) == True:{n}{t}{t}GamblingLoss = 0{n}{t}else:{n}{t}{t}GamblingLoss = get_currency(IAWSCHAPRINT.GamblingLoss){n}{t}return get_currency(IASCHA.MedDed) + get_currency(IASCHA.Invest) + get_currency(IASCHA.Theft) + get_currency(IAWSCHAPRINT.Form4684) + GamblingLoss{n}{n}
def PODed_Calculation():{n}{t}return max_value(0, ( get_currency(IAWITMDED.IATotDed) - get_currency(IAWITMDED.NonPODed) )){n}{n}
def SSN_Calculation():{n}{t}return get_string(IAF1040.SSN){n}{n}
def Subtract1_Calculation():{n}{t}return max_value(0, ( get_currency(IAWITMDED.AllowableDed2) - get_currency(IAWITMDED.NonPODed2) )){n}{n}
def Subtract2_Calculation():{n}{t}return max_value(0, ( get_currency(IAWITMDED.IATotDed2) - get_currency(IAWITMDED.NonPODed2) )){n}{n}
def TotDed_Calculation():{n}{t}return get_currency(IASCHA.MedDed) + get_currency(IASCHA.TaxPd) + get_currency(IASCHA.TotInt) + get_currency(IASCHA.TotGifts) + get_currency(IASCHA.Theft) + get_currency(IASCHA.AllowExp) + get_currency(IASCHA.OthMisc){n}{n}
def Yes1_Calculation():{n}{t}if get_bool(IAWITMDED.No1) == True:{n}{t}{t}return 0{n}{t}else:{n}{t}{t}return 1{n}{n}
def Yes2_Calculation():{n}{t}if get_bool(IAWITMDED.No2) == True:{n}{t}{t}return 0{n}{t}else:{n}{t}{t}return 1{n}{n}def Description_Calculation():{n}{t}return 'Nonconformity Adjustment ' + CStr(get_currency(IAWNONCONFORMADJ.PrTotNonConformAdj)){n}{n}
def EOYDate_Calculation():{n}{t}return MakeDate(12, 31, YearNumber){n}{n}
def PrAlaskaNativeCorp_Calculation():{n}{t}return get_currency(IAWNONCONFORMADJ.SPAlaskaNativeCorp) + get_currency(IAWNONCONFORMADJ.TPAlaskaNativeCorp){n}{n}
def PrBasisLifeIns_Calculation():{n}{t}return get_currency(IAWNONCONFORMADJ.SPBasisLifeIns) + get_currency(IAWNONCONFORMADJ.TPBasisLifeIns){n}{n}
def PrBasisLimitPartLoss_Calculation():{n}{t}return get_currency(IAWNONCONFORMADJ.SPBasisLimitPartLoss) + get_currency(IAWNONCONFORMADJ.TPBasisLimitPartLoss){n}{n}
def PrBuiltInLosses_Calculation():{n}{t}return get_currency(IAWNONCONFORMADJ.SPBuiltInLosses) + get_currency(IAWNONCONFORMADJ.TPBuiltInLosses){n}{n}
def PrBusInterestLimit_Calculation():{n}{t}return get_currency(IAWNONCONFORMADJ.SPBusInterestLimit) + get_currency(IAWNONCONFORMADJ.TPBusInterestLimit){n}{n}
def PrCapContr_Calculation():{n}{t}return get_currency(IAWNONCONFORMADJ.SPCapContr) + get_currency(IAWNONCONFORMADJ.TPCapContr){n}{n}
def PrCapRules_Calculation():{n}{t}return get_currency(IAWNONCONFORMADJ.SPCapRules) + get_currency(IAWNONCONFORMADJ.TPCapRules){n}{n}
def PrCertCapAssets_Calculation():{n}{t}return get_currency(IAWNONCONFORMADJ.SPCertCapAssets) + get_currency(IAWNONCONFORMADJ.TPCertCapAssets){n}{n}
def PrCertSettlement_Calculation():{n}{t}return get_currency(IAWNONCONFORMADJ.SPCertSettlement) + get_currency(IAWNONCONFORMADJ.TPCertSettlement){n}{n}
def PrCharContLimit_Calculation():{n}{t}return get_currency(IAWNONCONFORMADJ.SPCharContLimit) + get_currency(IAWNONCONFORMADJ.TPCharContLimit){n}{n}
def PrDomProd_Calculation():{n}{t}return get_currency(IAWNONCONFORMADJ.SPDomProd) + get_currency(IAWNONCONFORMADJ.TPDomProd){n}{n}
def PrExcessBusLossLimit_Calculation():{n}{t}return get_currency(IAWNONCONFORMADJ.SPExcessBusLossLimit) + get_currency(IAWNONCONFORMADJ.TPExcessBusLossLimit){n}{n}
def PrExcessiveRemun_Calculation():{n}{t}return get_currency(IAWNONCONFORMADJ.SPExcessiveRemun) + get_currency(IAWNONCONFORMADJ.TPExcessiveRemun){n}{n}
def PrFDICPrem_Calculation():{n}{t}return get_currency(IAWNONCONFORMADJ.SPFDICPrem) + get_currency(IAWNONCONFORMADJ.TPFDICPrem){n}{n}
def PrForSourceDiv_Calculation():{n}{t}return get_currency(IAWNONCONFORMADJ.SPForSourceDiv) + get_currency(IAWNONCONFORMADJ.TPForSourceDiv){n}{n}
def PrGlobalLowTI_Calculation():{n}{t}return get_currency(IAWNONCONFORMADJ.SPGlobalLowTI) + get_currency(IAWNONCONFORMADJ.TPGlobalLowTI){n}{n}
def PrInventorySales_Calculation():{n}{t}return get_currency(IAWNONCONFORMADJ.SPInventorySales) + get_currency(IAWNONCONFORMADJ.TPInventorySales){n}{n}
def PrIRC965Repat_Calculation():{n}{t}return get_currency(IAWNONCONFORMADJ.SPIRC965Repat) + get_currency(IAWNONCONFORMADJ.TPIRC965Repat){n}{n}
def PrLikeKind_Calculation():{n}{t}return get_currency(IAWNONCONFORMADJ.SPLikeKind) + get_currency(IAWNONCONFORMADJ.TPLikeKind){n}{n}
def PrOthBusDed_Calculation():{n}{t}return get_currency(IAWNONCONFORMADJ.SPOthBusDed) + get_currency(IAWNONCONFORMADJ.TPOthBusDed){n}{n}
def PrOtherAdj_Calculation():{n}{t}return get_currency(IAWNONCONFORMADJ.SPOtherAdj) + get_currency(IAWNONCONFORMADJ.TPOtherAdj){n}{n}
def PrOwnedForCorp_Calculation():{n}{t}return get_currency(IAWNONCONFORMADJ.SPOwnedForCorp) + get_currency(IAWNONCONFORMADJ.TPOwnedForCorp){n}{n}
def PrQualEquityGrants_Calculation():{n}{t}return get_currency(IAWNONCONFORMADJ.SPQualEquityGrants) + get_currency(IAWNONCONFORMADJ.TPQualEquityGrants){n}{n}
def PrQualOppZone_Calculation():{n}{t}return get_currency(IAWNONCONFORMADJ.SPQualOppZone) + get_currency(IAWNONCONFORMADJ.TPQualOppZone){n}{n}
def PrRelParHybridTrans_Calculation():{n}{t}return get_currency(IAWNONCONFORMADJ.SPRelParHybridTrans) + get_currency(IAWNONCONFORMADJ.TPRelParHybridTrans){n}{n}
def PrSCorpCharCont_Calculation():{n}{t}return get_currency(IAWNONCONFORMADJ.SPSCorpCharCont) + get_currency(IAWNONCONFORMADJ.TPSCorpCharCont){n}{n}
def PrSec199CoopDed_Calculation():{n}{t}return get_currency(IAWNONCONFORMADJ.SPSec199CoopDed) + get_currency(IAWNONCONFORMADJ.TPSec199CoopDed){n}{n}
def PrSec199QBIDed_Calculation():{n}{t}return get_currency(IAWNONCONFORMADJ.SPSec199QBIDed) + get_currency(IAWNONCONFORMADJ.TPSec199QBIDed){n}{n}
def PrSubPartF_Calculation():{n}{t}return get_currency(IAWNONCONFORMADJ.SPSubPartF) + get_currency(IAWNONCONFORMADJ.TPSubPartF){n}{n}
def PrTotNonConformAdj_Calculation():{n}{t}return get_currency(IAWNONCONFORMADJ.SPTotNonConformAdj) + get_currency(IAWNONCONFORMADJ.TPTotNonConformAdj){n}{n}
def PrTransferValueLifeIns_Calculation():{n}{t}return get_currency(IAWNONCONFORMADJ.SPTransferValueLifeIns) + get_currency(IAWNONCONFORMADJ.TPTransferValueLifeIns){n}{n}
def SPExcessBusLossLimit_Calculation():{n}{t}return 0{n}{n}
def SPLikeKind_Calculation():{n}{t}return 0{n}{n}
def SPName_Calculation():{n}{t}return get_string(USWBasicInfo.SPCommon){n}{n}
def SPQualEquityGrants_Calculation():{n}{t}return Round(get_currency(USDW2.CodeHH, FieldCopies(USDW2.Spouse))){n}{n}
def SPTotNonConformAdj_Calculation():{n}{t}Tot1to10 = Currency(){n}{n}{t}Tot11to20 = Currency(){n}{n}{t}Tot21to30 = Currency(){n}{t}Tot1to10 = get_currency(IAWNONCONFORMADJ.SPCapContr) + get_currency(IAWNONCONFORMADJ.SPLikeKind) + get_currency(IAWNONCONFORMADJ.SPBusInterestLimit) + get_currency(IAWNONCONFORMADJ.SPExcessiveRemun) + get_currency(IAWNONCONFORMADJ.SPCertSettlement) + get_currency(IAWNONCONFORMADJ.SPFDICPrem) + get_currency(IAWNONCONFORMADJ.SPDomProd) + get_currency(IAWNONCONFORMADJ.SPSec199QBIDed) + get_currency(IAWNONCONFORMADJ.SPSec199CoopDed) + get_currency(IAWNONCONFORMADJ.SPOthBusDed){n}{t}Tot11to20 = get_currency(IAWNONCONFORMADJ.SPCharContLimit) + get_currency(IAWNONCONFORMADJ.SPSCorpCharCont) + get_currency(IAWNONCONFORMADJ.SPExcessBusLossLimit) + get_currency(IAWNONCONFORMADJ.SPQualEquityGrants) + get_currency(IAWNONCONFORMADJ.SPCapRules) + get_currency(IAWNONCONFORMADJ.SPCertCapAssets) + get_currency(IAWNONCONFORMADJ.SPQualOppZone) + get_currency(IAWNONCONFORMADJ.SPBuiltInLosses) + get_currency(IAWNONCONFORMADJ.SPBasisLimitPartLoss) + get_currency(IAWNONCONFORMADJ.SPBasisLifeIns){n}{t}Tot21to30 = get_currency(IAWNONCONFORMADJ.SPTransferValueLifeIns) + get_currency(IAWNONCONFORMADJ.SPAlaskaNativeCorp) + get_currency(IAWNONCONFORMADJ.SPGlobalLowTI) + get_currency(IAWNONCONFORMADJ.SPRelParHybridTrans) + get_currency(IAWNONCONFORMADJ.SPInventorySales) + get_currency(IAWNONCONFORMADJ.SPOwnedForCorp) + get_currency(IAWNONCONFORMADJ.SPSubPartF) + get_currency(IAWNONCONFORMADJ.SPForSourceDiv) + get_currency(IAWNONCONFORMADJ.SPIRC965Repat) + get_currency(IAWNONCONFORMADJ.SPOtherAdj){n}{t}return Tot1to10 + Tot11to20 + Tot21to30{n}{n}
def TPExcessBusLossLimit_Calculation():{n}{t}return 0{n}{n}
def Exist_Calculation():{n}{t}return 1{n}{n}
def TPLikeKind_Calculation():{n}{t}return 0{n}{n}
def Names_Calculation():{n}{t}return get_string(USWBasicInfo.CombNames){n}{n}
def PrintMe_Calculation():{n}{t}if get_currency(IAWNONCONFORMADJ.SPTotNonConformAdj) != 0 or get_currency(IAWNONCONFORMADJ.TPTotNonConformAdj) != 0:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def TPName_Calculation():{n}{t}return get_string(USWBasicInfo.TPCommon){n}{n}
def TPQualEquityGrants_Calculation():{n}{t}return Round(get_currency(USDW2.CodeHH, FieldCopies(USDW2.Taxpayer))){n}{n}
def SSN_Calculation():{n}{t}return get_string(IAF1040.SSN){n}{n}
def TPTotNonConformAdj_Calculation():{n}{t}Tot1to10 = Currency(){n}{n}{t}Tot11to20 = Currency(){n}{n}{t}Tot21to30 = Currency(){n}{t}Tot1to10 = get_currency(IAWNONCONFORMADJ.TPCapContr) + get_currency(IAWNONCONFORMADJ.TPLikeKind) + get_currency(IAWNONCONFORMADJ.TPBusInterestLimit) + get_currency(IAWNONCONFORMADJ.TPExcessiveRemun) + get_currency(IAWNONCONFORMADJ.TPCertSettlement) + get_currency(IAWNONCONFORMADJ.TPFDICPrem) + get_currency(IAWNONCONFORMADJ.TPDomProd) + get_currency(IAWNONCONFORMADJ.TPSec199QBIDed) + get_currency(IAWNONCONFORMADJ.TPSec199CoopDed) + get_currency(IAWNONCONFORMADJ.TPOthBusDed){n}{t}Tot11to20 = get_currency(IAWNONCONFORMADJ.TPCharContLimit) + get_currency(IAWNONCONFORMADJ.TPSCorpCharCont) + get_currency(IAWNONCONFORMADJ.TPExcessBusLossLimit) + get_currency(IAWNONCONFORMADJ.TPQualEquityGrants) + get_currency(IAWNONCONFORMADJ.TPCapRules) + get_currency(IAWNONCONFORMADJ.TPCertCapAssets) + get_currency(IAWNONCONFORMADJ.TPQualOppZone) + get_currency(IAWNONCONFORMADJ.TPBuiltInLosses) + get_currency(IAWNONCONFORMADJ.TPBasisLimitPartLoss) + get_currency(IAWNONCONFORMADJ.TPBasisLifeIns){n}{t}Tot21to30 = get_currency(IAWNONCONFORMADJ.TPTransferValueLifeIns) + get_currency(IAWNONCONFORMADJ.TPAlaskaNativeCorp) + get_currency(IAWNONCONFORMADJ.TPGlobalLowTI) + get_currency(IAWNONCONFORMADJ.TPRelParHybridTrans) + get_currency(IAWNONCONFORMADJ.TPInventorySales) + get_currency(IAWNONCONFORMADJ.TPOwnedForCorp) + get_currency(IAWNONCONFORMADJ.TPSubPartF) + get_currency(IAWNONCONFORMADJ.TPForSourceDiv) + get_currency(IAWNONCONFORMADJ.TPIRC965Repat) + get_currency(IAWNONCONFORMADJ.TPOtherAdj){n}{t}return Tot1to10 + Tot11to20 + Tot21to30{n}{n}def Code_Calculation(Index):{n}{t}count = Integer(){n}{n}{t}Hold = String(){n}{t}count = 0{n}{t}Hold = ''{n}{t}if get_currency(IAWOTHINC.TPOth1) != 0 or get_currency(IAWOTHINC.SPOth1) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'm'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPOth2) != 0 or get_currency(IAWOTHINC.SPOth2) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'm'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPBabySit) != 0 or get_currency(IAWOTHINC.SPBabySit) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'a'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPBonus) != 0 or get_currency(IAWOTHINC.SPBonus) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'b'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPIAEd) != 0 or get_currency(IAWOTHINC.SPIAEd) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'd'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPDirector) != 0 or get_currency(IAWOTHINC.SPDirector) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'e'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPIntangDrill) != 0 or get_currency(IAWOTHINC.SPIntangDrill) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'f'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPExecutor) != 0 or get_currency(IAWOTHINC.SPExecutor) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'g'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPFirstHmBuy) != 0 or get_currency(IAWOTHINC.SPFirstHmBuy) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'h'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPK1) != 0 or get_currency(IAWOTHINC.SPK1) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'i'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPRefundCr) != 0 or get_currency(IAWOTHINC.SPRefundCr) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'j'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPStRefund) != 0 or get_currency(IAWOTHINC.SPStRefund) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'k'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPDepl) != 0 or get_currency(IAWOTHINC.SPDepl) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'l'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPJury) != 0 or get_currency(IAWOTHINC.SPJury) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'm'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPPerRent) != 0 or get_currency(IAWOTHINC.SPPerRent) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'm'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TP8814) != 0 or get_currency(IAWOTHINC.SP8814) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'm'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPMSA) != 0 or get_currency(IAWOTHINC.SPMSA) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'm'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPMedMSA) != 0 or get_currency(IAWOTHINC.SPMedMSA) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'm'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPLTC) != 0 or get_currency(IAWOTHINC.SPLTC) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'm'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPMisc) != 0 or get_currency(IAWOTHINC.SPMisc) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'm'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPAlaska) != 0 or get_currency(IAWOTHINC.SPAlaska) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'm'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPCoverdell) != 0 or get_currency(IAWOTHINC.SPCoverdell) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'm'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPCanceled) != 0 or get_currency(IAWOTHINC.SPCanceled) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'm'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPPshipCan) != 0 or get_currency(IAWOTHINC.SPPshipCan) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'm'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPHSA) != 0 or get_currency(IAWOTHINC.SPHSA) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'm'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPAltTrade) != 0 or get_currency(IAWOTHINC.SPAltTrade) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'm'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPRecapTuit) != 0 or get_currency(IAWOTHINC.SPRecapTuit) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'm'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPRecapChar) != 0 or get_currency(IAWOTHINC.SPRecapChar) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'm'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TP5471) != 0 or get_currency(IAWOTHINC.SP5471) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'm'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPHobby) != 0 or get_currency(IAWOTHINC.SPHobby) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'm'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TP8621) != 0 or get_currency(IAWOTHINC.SP8621) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'm'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPDefDist) != 0 or get_currency(IAWOTHINC.SPDefDist) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'm'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPDisaster) != 0 or get_currency(IAWOTHINC.SPDisaster) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'm'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPFoster) != 0 or get_currency(IAWOTHINC.SPFoster) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'm'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPCredAdj) != 0 or get_currency(IAWOTHINC.SPCredAdj) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'm'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPPYNPTC) != 0 or get_currency(IAWOTHINC.SPPYNPTC) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'n'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TP1099QA) != 0 or get_currency(IAWOTHINC.SP1099QA) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'm'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPAirline) != 0 or get_currency(IAWOTHINC.SPAirline) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'm'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TP1099B) != 0 or get_currency(IAWOTHINC.SP1099B) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'm'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPIAABLE) != 0 or get_currency(IAWOTHINC.SPIAABLE) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'o'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPBusPass) != 0 or get_currency(IAWOTHINC.SPBusPass) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'p'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPFarmLoss) != 0 or get_currency(IAWOTHINC.SPFarmLoss) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'm'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TP8824) != 0 or get_currency(IAWOTHINC.SP8824) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'q'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPStudLoanDis) != 0 or get_currency(IAWOTHINC.SPStudLoanDis) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'r'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TP4684) != 0 or get_currency(IAWOTHINC.SP4684) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 's'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TP3903) != 0 or get_currency(IAWOTHINC.SP3903) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 't'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPBusInt) != 0 or get_currency(IAWOTHINC.SPBusInt) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'u'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPEntExp) != 0 or get_currency(IAWOTHINC.SPEntExp) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'v'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TP2106) != 0 or get_currency(IAWOTHINC.SP2106) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'w'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPOthNC) != 0 or get_currency(IAWOTHINC.SPOthNC) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'x'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}return Hold{n}{n}
def Desc_Calculation():{n}{t}Total = Currency(){n}{t}Total = get_currency(IAWOTHINC.TPTot) + get_currency(IAWOTHINC.SPTot){n}{t}return CStr(Total){n}{n}
def Description_Calculation(Index):{n}{t}count = Integer(){n}{n}{t}Hold = String(){n}{t}count = 0{n}{t}Hold = ''{n}{t}if get_currency(IAWOTHINC.TPOth1) != 0 or get_currency(IAWOTHINC.SPOth1) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_string(IAWOTHINC.Txt1){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPOth2) != 0 or get_currency(IAWOTHINC.SPOth2) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_string(IAWOTHINC.Txt2){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPBabySit) != 0 or get_currency(IAWOTHINC.SPBabySit) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Baby-sitting income not reported on federal Schedule C'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPBonus) != 0 or get_currency(IAWOTHINC.SPBonus) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Bonus depreciation/section 179 adjustment'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPIAEd) != 0 or get_currency(IAWOTHINC.SPIAEd) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'College Savings Iowa or Iowa Advisor 529 Plan'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPDirector) != 0 or get_currency(IAWOTHINC.SPDirector) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Director\'s fees'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPIntangDrill) != 0 or get_currency(IAWOTHINC.SPIntangDrill) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Drilling'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPExecutor) != 0 or get_currency(IAWOTHINC.SPExecutor) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Executor\'s fees'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPFirstHmBuy) != 0 or get_currency(IAWOTHINC.SPFirstHmBuy) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'First-time homebuyers account non-qualifying withdrawals'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPK1) != 0 or get_currency(IAWOTHINC.SPK1) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Partnership income and/or S Corporation income'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPRefundCr) != 0 or get_currency(IAWOTHINC.SPRefundCr) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Refundable Iowa credits'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPStRefund) != 0 or get_currency(IAWOTHINC.SPStRefund) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'State income tax refunds'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPDepl) != 0 or get_currency(IAWOTHINC.SPDepl) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Wells'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPJury) != 0 or get_currency(IAWOTHINC.SPJury) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Jury pay'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPPerRent) != 0 or get_currency(IAWOTHINC.SPPerRent) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Income from personal property'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TP8814) != 0 or get_currency(IAWOTHINC.SP8814) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Child\'s income amount, federal Form 8814'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPMSA) != 0 or get_currency(IAWOTHINC.SPMSA) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'MSA distributions, federal Form 8853'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPMedMSA) != 0 or get_currency(IAWOTHINC.SPMedMSA) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Medicare Advantage distributions, federal Form 8853'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPLTC) != 0 or get_currency(IAWOTHINC.SPLTC) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Long-term care distribution, federal Form 8853'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPMisc) != 0 or get_currency(IAWOTHINC.SPMisc) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Form 1099-MISC, boxes 3 or 8'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPAlaska) != 0 or get_currency(IAWOTHINC.SPAlaska) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Alaska Permanent Fund dividends'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPCoverdell) != 0 or get_currency(IAWOTHINC.SPCoverdell) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Coverdell ESA Or Qualified Tuition Program'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPCanceled) != 0 or get_currency(IAWOTHINC.SPCanceled) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Cancellation of nonbusiness debt, federal Form 1099-C'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPPshipCan) != 0 or get_currency(IAWOTHINC.SPPshipCan) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Cancellation of business debt, Partnership Schedule K-1'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPHSA) != 0 or get_currency(IAWOTHINC.SPHSA) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'HSA distributions, federal Form 8889'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPAltTrade) != 0 or get_currency(IAWOTHINC.SPAltTrade) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Alternative trade adjustment assistance payments'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPRecapTuit) != 0 or get_currency(IAWOTHINC.SPRecapTuit) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Recapture of prior year tuition and fees deduction'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPRecapChar) != 0 or get_currency(IAWOTHINC.SPRecapChar) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Recapture of charitable contribution deduction'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TP5471) != 0 or get_currency(IAWOTHINC.SP5471) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Income from a foreign corporation, federal Form 5471'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPHobby) != 0 or get_currency(IAWOTHINC.SPHobby) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Hobby income'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TP8621) != 0 or get_currency(IAWOTHINC.SP8621) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Income or loss from Section 1291, federal Form 8621'{n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPDefDist) != 0 or get_currency(IAWOTHINC.SPDefDist) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = 'Loss on excess 
def Exist_Calculation():{n}{t}return 1{n}{n}
def Names_Calculation():{n}{t}return get_string(IAREQUIRED.CombNames){n}{n}
def Print_Calculation():{n}{t}if get_currency(IAWOTHINC.TPTot) != 0 or get_currency(IAWOTHINC.SPTot) != 0:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def SP1099B_Calculation():{n}{t}if get_bool(USWResidency.F1040NR) == False:{n}{t}{t}return get_currency(USWOthInc.SP1099B){n}{t}else:{n}{t}{t}return 0{n}{n}
def SP1099QA_Calculation():{n}{t}if get_bool(USWResidency.F1040NR) == False:{n}{t}{t}return get_currency(USWOthInc.SP1099QA){n}{t}else:{n}{t}{t}return 0{n}{n}
def SP2106_Calculation():{n}{t}return get_currency(IA2106.IAWages, FieldCopies(IA2106.Spouse)){n}{n}
def SP3903_Calculation():{n}{t}return get_currency(IAREQUIRED.SIAExReimb){n}{n}
def SP5471_Calculation():{n}{t}if get_bool(USWResidency.F1040NR) == False:{n}{t}{t}return get_currency(USWOthInc.SP5471){n}{t}else:{n}{t}{t}return 0{n}{n}
def SP8621_Calculation():{n}{t}if get_bool(USWResidency.F1040NR) == False:{n}{t}{t}return get_currency(USWOthInc.SP8621){n}{t}else:{n}{t}{t}return 0{n}{n}
def SP8814_Calculation():{n}{t}if get_bool(USWResidency.F1040NR) == False:{n}{t}{t}return get_currency(USWOthInc.SP8814){n}{t}else:{n}{t}{t}return 0{n}{n}
def SP8824_Calculation():{n}{t}return get_currency(IAREQUIRED.SP8824){n}{n}
def SPAirline_Calculation():{n}{t}if get_bool(USWResidency.F1040NR) == False:{n}{t}{t}return get_currency(USWOthInc.SPAirline){n}{t}else:{n}{t}{t}return 0{n}{n}
def SPAlaska_Calculation():{n}{t}if get_bool(USWResidency.F1040NR) == False:{n}{t}{t}return get_currency(USWOthInc.SPAlaska){n}{t}else:{n}{t}{t}return 0{n}{n}
def SPAltTrade_Calculation():{n}{t}if get_bool(USWResidency.F1040NR) == False:{n}{t}{t}return get_currency(USWOthInc.SPAltTrade){n}{t}else:{n}{t}{t}return 0{n}{n}
def SPAmount_Calculation(Index):{n}{t}count = Integer(){n}{n}{t}Hold = Currency(){n}{t}count = 0{n}{t}Hold = 0{n}{t}if get_currency(IAWOTHINC.TPOth1) != 0 or get_currency(IAWOTHINC.SPOth1) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAWOTHINC.SPOth1){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPOth2) != 0 or get_currency(IAWOTHINC.SPOth2) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAWOTHINC.SPOth2){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPBabySit) != 0 or get_currency(IAWOTHINC.SPBabySit) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAWOTHINC.SPBabySit){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPBonus) != 0 or get_currency(IAWOTHINC.SPBonus) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAWOTHINC.SPBonus){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPIAEd) != 0 or get_currency(IAWOTHINC.SPIAEd) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAWOTHINC.SPIAEd){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPDirector) != 0 or get_currency(IAWOTHINC.SPDirector) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAWOTHINC.SPDirector){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPIntangDrill) != 0 or get_currency(IAWOTHINC.SPIntangDrill) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAWOTHINC.SPIntangDrill){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPExecutor) != 0 or get_currency(IAWOTHINC.SPExecutor) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAWOTHINC.SPExecutor){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPFirstHmBuy) != 0 or get_currency(IAWOTHINC.SPFirstHmBuy) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAWOTHINC.SPFirstHmBuy){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPK1) != 0 or get_currency(IAWOTHINC.SPK1) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAWOTHINC.SPK1){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPRefundCr) != 0 or get_currency(IAWOTHINC.SPRefundCr) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAWOTHINC.SPRefundCr){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPStRefund) != 0 or get_currency(IAWOTHINC.SPStRefund) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAWOTHINC.SPStRefund){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPDepl) != 0 or get_currency(IAWOTHINC.SPDepl) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAWOTHINC.SPDepl){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPJury) != 0 or get_currency(IAWOTHINC.SPJury) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAWOTHINC.SPJury){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPPerRent) != 0 or get_currency(IAWOTHINC.SPPerRent) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAWOTHINC.SPPerRent){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TP8814) != 0 or get_currency(IAWOTHINC.SP8814) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAWOTHINC.SP8814){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPMSA) != 0 or get_currency(IAWOTHINC.SPMSA) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAWOTHINC.SPMSA){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPMedMSA) != 0 or get_currency(IAWOTHINC.SPMedMSA) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAWOTHINC.SPMedMSA){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPLTC) != 0 or get_currency(IAWOTHINC.SPLTC) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAWOTHINC.SPLTC){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPMisc) != 0 or get_currency(IAWOTHINC.SPMisc) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAWOTHINC.SPMisc){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPAlaska) != 0 or get_currency(IAWOTHINC.SPAlaska) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAWOTHINC.SPAlaska){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPCoverdell) != 0 or get_currency(IAWOTHINC.SPCoverdell) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAWOTHINC.SPCoverdell){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPCanceled) != 0 or get_currency(IAWOTHINC.SPCanceled) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAWOTHINC.SPCanceled){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPPshipCan) != 0 or get_currency(IAWOTHINC.SPPshipCan) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAWOTHINC.SPPshipCan){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPHSA) != 0 or get_currency(IAWOTHINC.SPHSA) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAWOTHINC.SPHSA){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPAltTrade) != 0 or get_currency(IAWOTHINC.SPAltTrade) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAWOTHINC.SPAltTrade){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPRecapTuit) != 0 or get_currency(IAWOTHINC.SPRecapTuit) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAWOTHINC.SPRecapTuit){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPRecapChar) != 0 or get_currency(IAWOTHINC.SPRecapChar) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAWOTHINC.SPRecapChar){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TP5471) != 0 or get_currency(IAWOTHINC.SP5471) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAWOTHINC.SP5471){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPHobby) != 0 or get_currency(IAWOTHINC.SPHobby) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAWOTHINC.SPHobby){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TP8621) != 0 or get_currency(IAWOTHINC.SP8621) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAWOTHINC.SP8621){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPDefDist) != 0 or get_currency(IAWOTHINC.SPDefDist) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAWOTHINC.SPDefDist){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPDisaster) != 0 or get_currency(IAWOTHINC.SPDisaster) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAWOTHINC.SPDisaster){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPFoster) != 0 or get_currency(IAWOTHINC.SPFoster) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAWOTHINC.SPFoster){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPCredAdj) != 0 or get_currency(IAWOTHINC.SPCredAdj) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAWOTHINC.SPCredAdj){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPPYNPTC) != 0 or get_currency(IAWOTHINC.SPPYNPTC) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAWOTHINC.SPPYNPTC){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TP1099QA) != 0 or get_currency(IAWOTHINC.SP1099QA) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAWOTHINC.SP1099QA){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPAirline) != 0 or get_currency(IAWOTHINC.SPAirline) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAWOTHINC.SPAirline){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TP1099B) != 0 or get_currency(IAWOTHINC.SP1099B) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAWOTHINC.SP1099B){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPIAABLE) != 0 or get_currency(IAWOTHINC.SPIAABLE) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAWOTHINC.SPIAABLE){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPBusPass) != 0 or get_currency(IAWOTHINC.SPBusPass) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAWOTHINC.SPBusPass){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPFarmLoss) != 0 or get_currency(IAWOTHINC.SPFarmLoss) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAWOTHINC.SPFarmLoss){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TP8824) != 0 or get_currency(IAWOTHINC.SP8824) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAWOTHINC.SP8824){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPStudLoanDis) != 0 or get_currency(IAWOTHINC.SPStudLoanDis) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAWOTHINC.SPStudLoanDis){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TP4684) != 0 or get_currency(IAWOTHINC.SP4684) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAWOTHINC.SP4684){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TP3903) != 0 or get_currency(IAWOTHINC.SP3903) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAWOTHINC.SP3903){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPBusInt) != 0 or get_currency(IAWOTHINC.SPBusInt) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAWOTHINC.SPBusInt){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPEntExp) != 0 or get_currency(IAWOTHINC.SPEntExp) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAWOTHINC.SPEntExp){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TP2106) != 0 or get_currency(IAWOTHINC.SP2106) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAWOTHINC.SP2106){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPOthNC) != 0 or get_currency(IAWOTHINC.SPOthNC) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAWOTHINC.SPOthNC){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}return Hold{n}{n}
def SPBonus_Calculation():{n}{t}return get_currency(IAWOTHINC.TotBonus) - get_currency(IAWOTHINC.TPBonus){n}{n}
def SPCanceled_Calculation():{n}{t}if get_bool(USWResidency.F1040NR) == False:{n}{t}{t}return get_currency(USWOthInc.SPCanceled){n}{t}else:{n}{t}{t}return 0{n}{n}
def SPCoverdell_Calculation():{n}{t}if get_bool(USWResidency.F1040NR) == False:{n}{t}{t}return get_currency(USWOthInc.SPCoverdell){n}{t}else:{n}{t}{t}return 0{n}{n}
def SPCredAdj_Calculation():{n}{t}if get_bool(USWResidency.F1040NR) == False:{n}{t}{t}return get_currency(USWOthInc.SPCredAdj){n}{t}else:{n}{t}{t}return 0{n}{n}
def SPDefDist_Calculation():{n}{t}if get_bool(USWResidency.F1040NR) == False:{n}{t}{t}return get_currency(USWOthInc.SPDefDist){n}{t}else:{n}{t}{t}return 0{n}{n}
def SPDisaster_Calculation():{n}{t}if get_bool(USWResidency.F1040NR) == False:{n}{t}{t}return get_currency(USWOthInc.SPDisaster){n}{t}else:{n}{t}{t}return 0{n}{n}
def SPFoster_Calculation():{n}{t}if get_bool(USWResidency.F1040NR) == False:{n}{t}{t}return get_currency(USWOthInc.SPFoster){n}{t}else:{n}{t}{t}return 0{n}{n}
def SPHobby_Calculation():{n}{t}if get_bool(USWResidency.F1040NR) == False:{n}{t}{t}return get_currency(USWOthInc.SPHobby){n}{t}else:{n}{t}{t}return 0{n}{n}
def SPHSA_Calculation():{n}{t}if get_bool(USWResidency.F1040NR) == False:{n}{t}{t}return get_currency(USWOthInc.SPHSA){n}{t}else:{n}{t}{t}return 0{n}{n}
def SPJury_Calculation():{n}{t}if get_bool(USWResidency.F1040NR) == False:{n}{t}{t}return get_currency(USWOthInc.SPJury){n}{t}else:{n}{t}{t}return 0{n}{n}
def SPK1_Calculation():{n}{t}if get_bool(USWResidency.F1040NR) == False:{n}{t}{t}return max_value(0, get_currency(USWOthInc.SPK1)){n}{t}else:{n}{t}{t}return 0{n}{n}
def SPLTC_Calculation():{n}{t}if get_bool(USWResidency.F1040NR) == False:{n}{t}{t}return get_currency(USWOthInc.SPLTC){n}{t}else:{n}{t}{t}return 0{n}{n}
def SPMedMSA_Calculation():{n}{t}if get_bool(USWResidency.F1040NR) == False:{n}{t}{t}return get_currency(USWOthInc.SPMedMSA){n}{t}else:{n}{t}{t}return 0{n}{n}
def SPMisc_Calculation():{n}{t}if get_bool(USWResidency.F1040NR) == False:{n}{t}{t}return get_currency(USWOthInc.SPMisc) + get_currency(USWOthInc.SPIndianGaming) + get_currency(USWOthInc.SPTribDist) + get_currency(USWOthInc.SPNativeDist){n}{t}else:{n}{t}{t}return 0{n}{n}
def SPMSA_Calculation():{n}{t}if get_bool(USWResidency.F1040NR) == False:{n}{t}{t}return get_currency(USWOthInc.SP8853){n}{t}else:{n}{t}{t}return 0{n}{n}
def SPName_Calculation():{n}{t}return get_string(USWBasicInfo.SPCommon){n}{n}
def SPOth1_Calculation():{n}{t}if get_bool(USWResidency.F1040NR) == False:{n}{t}{t}return get_currency(USWOthInc.SPOth1){n}{t}else:{n}{t}{t}return 0{n}{n}
def SPOth2_Calculation():{n}{t}if get_bool(USWResidency.F1040NR) == False:{n}{t}{t}return get_currency(USWOthInc.SPOth2){n}{t}else:{n}{t}{t}return 0{n}{n}
def SPOthNC_Calculation():{n}{t}return get_currency(IAWNONCONFORMADJ.SPTotNonConformAdj){n}{n}
def SPPerRent_Calculation():{n}{t}if get_bool(USWResidency.F1040NR) == False:{n}{t}{t}return get_currency(USWOthInc.SPPerRent){n}{t}else:{n}{t}{t}return 0{n}{n}
def SPPshipCan_Calculation():{n}{t}if get_bool(USWResidency.F1040NR) == False:{n}{t}{t}return get_currency(USWOthInc.SPPshipCan){n}{t}else:{n}{t}{t}return 0{n}{n}
def SPRecapChar_Calculation():{n}{t}if get_bool(USWResidency.F1040NR) == False:{n}{t}{t}return get_currency(USWOthInc.SPRecapChContTax) + get_currency(USWOthInc.SPRecapChar){n}{t}else:{n}{t}{t}return 0{n}{n}
def SPRecapTuit_Calculation():{n}{t}if get_bool(USWResidency.F1040NR) == False:{n}{t}{t}return get_currency(USWOthInc.SPRecapTuit){n}{t}else:{n}{t}{t}return 0{n}{n}
def SPTot_Calculation():{n}{t}return get_currency(IAWOTHINC.SPOth1) + get_currency(IAWOTHINC.SPOth2) + get_currency(IAWOTHINC.SPBabySit) + get_currency(IAWOTHINC.SPBonus) + get_currency(IAWOTHINC.SPIAEd) + get_currency(IAWOTHINC.SPDirector) + get_currency(IAWOTHINC.SPIntangDrill) + get_currency(IAWOTHINC.SPExecutor) + get_currency(IAWOTHINC.SPFirstHmBuy) + get_currency(IAWOTHINC.SPK1) + get_currency(IAWOTHINC.SPRefundCr) + get_currency(IAWOTHINC.SPStRefund) + get_currency(IAWOTHINC.SPDepl) + get_currency(IAWOTHINC.SPJury) + get_currency(IAWOTHINC.SPPerRent) + get_currency(IAWOTHINC.SP8814) + get_currency(IAWOTHINC.SPMSA) + get_currency(IAWOTHINC.SPMedMSA) + get_currency(IAWOTHINC.SPLTC) + get_currency(IAWOTHINC.SPMisc) + get_currency(IAWOTHINC.SPAlaska) + get_currency(IAWOTHINC.SPCoverdell) + get_currency(IAWOTHINC.SPCanceled) + get_currency(IAWOTHINC.SPPshipCan) + get_currency(IAWOTHINC.SPHSA) + get_currency(IAWOTHINC.SPAltTrade) + get_currency(IAWOTHINC.SPRecapTuit) + get_currency(IAWOTHINC.SPRecapChar) + get_currency(IAWOTHINC.SP5471) + get_currency(IAWOTHINC.SPHobby) + get_currency(IAWOTHINC.SP8621) + get_currency(IAWOTHINC.SPDefDist) + get_currency(IAWOTHINC.SPDisaster) + get_currency(IAWOTHINC.SPFoster) + get_currency(IAWOTHINC.SPCredAdj) + get_currency(IAWOTHINC.SPPYNPTC) + get_currency(IAWOTHINC.SP1099QA) + get_currency(IAWOTHINC.SPIAABLE) + get_currency(IAWOTHINC.SPBusPass) + get_currency(IAWOTHINC.SPAirline) + get_currency(IAWOTHINC.SP1099B) + get_currency(IAWOTHINC.SPFarmLoss) + get_currency(IAWOTHINC.SP8824) + get_currency(IAWOTHINC.SPStudLoanDis) + get_currency(IAWOTHINC.SP4684) + get_currency(IAWOTHINC.SP3903) + get_currency(IAWOTHINC.SPBusInt) + get_currency(IAWOTHINC.SPEntExp) + get_currency(IAWOTHINC.SP2106) + get_currency(IAWOTHINC.SPOthNC){n}{n}
def SPTotNonConform_Calculation():{n}{t}return get_currency(IAWOTHINC.SPFarmLoss) + get_currency(IAWOTHINC.SP8824) + get_currency(IAWOTHINC.SPStudLoanDis) + get_currency(IAWOTHINC.SP4684) + get_currency(IAWOTHINC.SP3903) + get_currency(IAWOTHINC.SPBusInt) + get_currency(IAWOTHINC.SPEntExp) + get_currency(IAWOTHINC.SP2106) + get_currency(IAWOTHINC.SPOthNC){n}{n}
def SSN_Calculation():{n}{t}return get_string(IAF1040.SSN){n}{n}
def TotBonus_Calculation():{n}{t}return get_currency(IA4562.TotDepAdj) + get_currency(IA4562SP.TotDepAdj) + get_currency(IA4562A.TotDepAdj){n}{n}
def TotNonConform_Calculation():{n}{t}return get_currency(IAWOTHINC.SPTotNonConform) + get_currency(IAWOTHINC.TPTotNonConform){n}{n}
def TP1099B_Calculation():{n}{t}if get_bool(USWResidency.F1040NR) == False:{n}{t}{t}return get_currency(USWOthInc.TP1099B){n}{t}else:{n}{t}{t}return get_currency(USWOthIncNR.TP1099B){n}{n}
def TP1099QA_Calculation():{n}{t}if get_bool(USWResidency.F1040NR) == False:{n}{t}{t}return get_currency(USWOthInc.TP1099QA){n}{t}else:{n}{t}{t}return get_currency(USWOthIncNR.TP1099QA){n}{n}
def TP2106_Calculation():{n}{t}return get_currency(IA2106.IAWages, FieldCopies(IA2106.Taxpayer)){n}{n}
def TP3903_Calculation():{n}{t}return get_currency(IAREQUIRED.TIAExReimb){n}{n}
def TP4684_Calculation():{n}{t}return get_currency(IA4684.IANonConformAdj) - get_currency(IAWOTHINC.SP4684){n}{n}
def TP5471_Calculation():{n}{t}if get_bool(USWResidency.F1040NR) == False:{n}{t}{t}return get_currency(USWOthInc.TP5471){n}{t}else:{n}{t}{t}return get_currency(USWOthIncNR.TP5471){n}{n}
def TP8621_Calculation():{n}{t}if get_bool(USWResidency.F1040NR) == False:{n}{t}{t}return get_currency(USWOthInc.TP8621){n}{t}else:{n}{t}{t}return 0{n}{n}
def TP8814_Calculation():{n}{t}if get_bool(USWResidency.F1040NR) == False:{n}{t}{t}return get_currency(USWOthInc.TP8814){n}{t}else:{n}{t}{t}return get_currency(USWOthIncNR.TP8814){n}{n}
def TP8824_Calculation():{n}{t}return get_currency(IAREQUIRED.TP8824){n}{n}
def TPAirline_Calculation():{n}{t}if get_bool(USWResidency.F1040NR) == False:{n}{t}{t}return get_currency(USWOthInc.TPAirline){n}{t}else:{n}{t}{t}return 0{n}{n}
def TPAlaska_Calculation():{n}{t}if get_bool(USWResidency.F1040NR) == False:{n}{t}{t}return get_currency(USWOthInc.TPAlaska){n}{t}else:{n}{t}{t}return 0{n}{n}
def TPAltTrade_Calculation():{n}{t}if get_bool(USWResidency.F1040NR) == False:{n}{t}{t}return get_currency(USWOthInc.TPAltTrade){n}{t}else:{n}{t}{t}return get_currency(USWOthIncNR.TPAltTrade){n}{n}
def TPAmount_Calculation(Index):{n}{t}count = Integer(){n}{n}{t}Hold = Currency(){n}{t}count = 0{n}{t}Hold = 0{n}{t}if get_currency(IAWOTHINC.TPOth1) != 0 or get_currency(IAWOTHINC.SPOth1) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAWOTHINC.TPOth1){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPOth2) != 0 or get_currency(IAWOTHINC.SPOth2) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAWOTHINC.TPOth2){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPBabySit) != 0 or get_currency(IAWOTHINC.SPBabySit) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAWOTHINC.TPBabySit){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPBonus) != 0 or get_currency(IAWOTHINC.SPBonus) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAWOTHINC.TPBonus){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPIAEd) != 0 or get_currency(IAWOTHINC.SPIAEd) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAWOTHINC.TPIAEd){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPDirector) != 0 or get_currency(IAWOTHINC.SPDirector) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAWOTHINC.TPDirector){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPIntangDrill) != 0 or get_currency(IAWOTHINC.SPIntangDrill) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAWOTHINC.TPIntangDrill){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPExecutor) != 0 or get_currency(IAWOTHINC.SPExecutor) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAWOTHINC.TPExecutor){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPFirstHmBuy) != 0 or get_currency(IAWOTHINC.SPFirstHmBuy) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAWOTHINC.TPFirstHmBuy){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPK1) != 0 or get_currency(IAWOTHINC.SPK1) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAWOTHINC.TPK1){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPRefundCr) != 0 or get_currency(IAWOTHINC.SPRefundCr) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAWOTHINC.TPRefundCr){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPStRefund) != 0 or get_currency(IAWOTHINC.SPStRefund) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAWOTHINC.TPStRefund){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPDepl) != 0 or get_currency(IAWOTHINC.SPDepl) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAWOTHINC.TPDepl){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPJury) != 0 or get_currency(IAWOTHINC.SPJury) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAWOTHINC.TPJury){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPPerRent) != 0 or get_currency(IAWOTHINC.SPPerRent) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAWOTHINC.TPPerRent){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TP8814) != 0 or get_currency(IAWOTHINC.SP8814) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAWOTHINC.TP8814){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPMSA) != 0 or get_currency(IAWOTHINC.SPMSA) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAWOTHINC.TPMSA){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPMedMSA) != 0 or get_currency(IAWOTHINC.SPMedMSA) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAWOTHINC.TPMedMSA){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPLTC) != 0 or get_currency(IAWOTHINC.SPLTC) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAWOTHINC.TPLTC){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPMisc) != 0 or get_currency(IAWOTHINC.SPMisc) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAWOTHINC.TPMisc){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPAlaska) != 0 or get_currency(IAWOTHINC.SPAlaska) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAWOTHINC.TPAlaska){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPCoverdell) != 0 or get_currency(IAWOTHINC.SPCoverdell) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAWOTHINC.TPCoverdell){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPCanceled) != 0 or get_currency(IAWOTHINC.SPCanceled) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAWOTHINC.TPCanceled){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPPshipCan) != 0 or get_currency(IAWOTHINC.SPPshipCan) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAWOTHINC.TPPshipCan){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPHSA) != 0 or get_currency(IAWOTHINC.SPHSA) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAWOTHINC.TPHSA){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPAltTrade) != 0 or get_currency(IAWOTHINC.SPAltTrade) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAWOTHINC.TPAltTrade){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPRecapTuit) != 0 or get_currency(IAWOTHINC.SPRecapTuit) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAWOTHINC.TPRecapTuit){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPRecapChar) != 0 or get_currency(IAWOTHINC.SPRecapChar) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAWOTHINC.TPRecapChar){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TP5471) != 0 or get_currency(IAWOTHINC.SP5471) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAWOTHINC.TP5471){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPHobby) != 0 or get_currency(IAWOTHINC.SPHobby) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAWOTHINC.TPHobby){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TP8621) != 0 or get_currency(IAWOTHINC.SP8621) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAWOTHINC.TP8621){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPDefDist) != 0 or get_currency(IAWOTHINC.SPDefDist) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAWOTHINC.TPDefDist){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPDisaster) != 0 or get_currency(IAWOTHINC.SPDisaster) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAWOTHINC.TPDisaster){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPFoster) != 0 or get_currency(IAWOTHINC.SPFoster) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAWOTHINC.TPFoster){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPCredAdj) != 0 or get_currency(IAWOTHINC.SPCredAdj) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAWOTHINC.TPCredAdj){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPPYNPTC) != 0 or get_currency(IAWOTHINC.SPPYNPTC) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAWOTHINC.TPPYNPTC){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TP1099QA) != 0 or get_currency(IAWOTHINC.SP1099QA) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAWOTHINC.TP1099QA){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPAirline) != 0 or get_currency(IAWOTHINC.SPAirline) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAWOTHINC.TPAirline){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TP1099B) != 0 or get_currency(IAWOTHINC.SP1099B) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAWOTHINC.TP1099B){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPIAABLE) != 0 or get_currency(IAWOTHINC.SPIAABLE) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAWOTHINC.TPIAABLE){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPBusPass) != 0 or get_currency(IAWOTHINC.SPBusPass) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAWOTHINC.TPBusPass){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPFarmLoss) != 0 or get_currency(IAWOTHINC.SPFarmLoss) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAWOTHINC.TPFarmLoss){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TP8824) != 0 or get_currency(IAWOTHINC.SP8824) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAWOTHINC.TP8824){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPStudLoanDis) != 0 or get_currency(IAWOTHINC.SPStudLoanDis) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAWOTHINC.TPStudLoanDis){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TP4684) != 0 or get_currency(IAWOTHINC.SP4684) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAWOTHINC.TP4684){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TP3903) != 0 or get_currency(IAWOTHINC.SP3903) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAWOTHINC.TP3903){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPBusInt) != 0 or get_currency(IAWOTHINC.SPBusInt) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAWOTHINC.TPBusInt){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPEntExp) != 0 or get_currency(IAWOTHINC.SPEntExp) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAWOTHINC.TPEntExp){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TP2106) != 0 or get_currency(IAWOTHINC.SP2106) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAWOTHINC.TP2106){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}if get_currency(IAWOTHINC.TPOthNC) != 0 or get_currency(IAWOTHINC.SPOthNC) != 0:{n}{t}{t}if Index == count:{n}{t}{t}{t}Hold = get_currency(IAWOTHINC.TPOthNC){n}{t}{t}{t}count = 99{n}{t}{t}else:{n}{t}{t}{t}count = count + 1{n}{t}return Hold{n}{n}
def TPBonus_Calculation():{n}{t}JT = Currency(){n}{t}JT = c_dollar(CDbl(Round(get_currency(IAWDepr.TotAdj, FieldCopies(IAWDepr.Joint)))) * 0.5){n}{t}if get_bool(IAREQUIRED.AskSpouse) == True:{n}{t}{t}return JT + get_currency(IAWDepr.TotAdj, FieldCopies(IAWDepr.Taxpayer)) + get_currency(IA4562A.TotDepAdj, FieldCopies(IA4562A.Taxpayer)) + get_currency(IA4562PIV.TPTotAdj){n}{t}else:{n}{t}{t}return get_currency(IAWOTHINC.TotBonus){n}{n}
def TPBonusTrigger_Calculation():{n}{t}if IAFS() == 3:{n}{t}{t}return get_currency(IAWOTHINC.TPBonus){n}{t}else:{n}{t}{t}return get_currency(IAWOTHINC.TPBonus) + get_currency(IAWOTHINC.SPBonus){n}{n}
def TPCanceled_Calculation():{n}{t}if get_bool(USWResidency.F1040NR) == False:{n}{t}{t}return get_currency(USWOthInc.TPCanceled){n}{t}else:{n}{t}{t}return get_currency(USWOthIncNR.TPCanceled){n}{n}
def TPCoverdell_Calculation():{n}{t}if get_bool(USWResidency.F1040NR) == False:{n}{t}{t}return get_currency(USWOthInc.TPCoverdell){n}{t}else:{n}{t}{t}return get_currency(USWOthIncNR.TPCoverdell){n}{n}
def TPCredAdj_Calculation():{n}{t}if get_bool(USWResidency.F1040NR) == False:{n}{t}{t}return get_currency(USWOthInc.TPCredAdj){n}{t}else:{n}{t}{t}return get_currency(USWOthIncNR.TPCredAdj){n}{n}
def TPDefDist_Calculation():{n}{t}if get_bool(USWResidency.F1040NR) == False:{n}{t}{t}return get_currency(USWOthInc.TPDefDist){n}{t}else:{n}{t}{t}return get_currency(USWOthIncNR.TPDefDist){n}{n}
def TPDepl_Calculation():{n}{t}return max_value(0, get_currency(USF6251.Depl) - get_currency(IAWOTHINC.SPDepl)){n}{n}
def TPDisaster_Calculation():{n}{t}if get_bool(USWResidency.F1040NR) == False:{n}{t}{t}return get_currency(USWOthInc.TPDisaster){n}{t}else:{n}{t}{t}return get_currency(USWOthIncNR.TPDisaster){n}{n}
def TPFarmLoss_Calculation():{n}{t}return max_value(0, Abs(get_currency(IAWSchFLoss.ExcessLoss)) - get_currency(IAWOTHINC.SPFarmLoss)){n}{n}
def TPFoster_Calculation():{n}{t}if get_bool(USWResidency.F1040NR) == False:{n}{t}{t}return get_currency(USWOthInc.TPFoster){n}{t}else:{n}{t}{t}return get_currency(USWOthIncNR.TPFoster){n}{n}
def TPHobby_Calculation():{n}{t}if get_bool(USWResidency.F1040NR) == False:{n}{t}{t}return get_currency(USWOthInc.TPHobby){n}{t}else:{n}{t}{t}return 0{n}{n}
def TPHSA_Calculation():{n}{t}if get_bool(USWResidency.F1040NR) == False:{n}{t}{t}return get_currency(USWOthInc.TPHSA){n}{t}else:{n}{t}{t}return get_currency(USWOthIncNR.TPHSA){n}{n}
def TPIntangDrill_Calculation():{n}{t}return max_value(0, get_currency(USF6251.IntangDrill) - get_currency(IAWOTHINC.SPIntangDrill)){n}{n}
def TPJointAmount_Calculation(Index):{n}{t}if get_bool(IAF1040.CombMFS) == True:{n}{t}{t}return get_currency(IAWOTHINC.TPAmount(Index)){n}{t}else:{n}{t}{t}return get_currency(IAWOTHINC.TPAmount(Index)) + get_currency(IAWOTHINC.SPAmount(Index)){n}{n}
def TPJury_Calculation():{n}{t}if get_bool(USWResidency.F1040NR) == False:{n}{t}{t}return get_currency(USWOthInc.TPJury){n}{t}else:{n}{t}{t}return 0{n}{n}
def TPK1_Calculation():{n}{t}if get_bool(USWResidency.F1040NR) == False:{n}{t}{t}return max_value(0, get_currency(USWOthInc.TPK1)){n}{t}else:{n}{t}{t}return max_value(0, get_currency(USWOthIncNR.TPK1)){n}{n}
def TPLTC_Calculation():{n}{t}if get_bool(USWResidency.F1040NR) == False:{n}{t}{t}return get_currency(USWOthInc.TPLTC){n}{t}else:{n}{t}{t}return get_currency(USWOthIncNR.TPLTC){n}{n}
def TPMedMSA_Calculation():{n}{t}if get_bool(USWResidency.F1040NR) == False:{n}{t}{t}return get_currency(USWOthInc.TPMedMSA){n}{t}else:{n}{t}{t}return get_currency(USWOthIncNR.TPMedMSA){n}{n}
def TPMisc_Calculation():{n}{t}if get_bool(USWResidency.F1040NR) == False:{n}{t}{t}return get_currency(USWOthInc.TPMisc) + get_currency(USWOthInc.TPIndianGaming) + get_currency(USWOthInc.TPTribDist) + get_currency(USWOthInc.TPNativeDist){n}{t}else:{n}{t}{t}return get_currency(USWOthIncNR.TPMisc){n}{n}
def TPMSA_Calculation():{n}{t}if get_bool(USWResidency.F1040NR) == False:{n}{t}{t}return get_currency(USWOthInc.TP8853){n}{t}else:{n}{t}{t}return get_currency(USWOthIncNR.TP8853){n}{n}
def TPName_Calculation():{n}{t}return get_string(USWBasicInfo.TPCommon){n}{n}
def TPOth1_Calculation():{n}{t}if get_bool(USWResidency.F1040NR) == False:{n}{t}{t}return get_currency(USWOthInc.TPOth1){n}{t}else:{n}{t}{t}return get_currency(USWOthIncNR.TPOth1){n}{n}
def TPOth2_Calculation():{n}{t}if get_bool(USWResidency.F1040NR) == False:{n}{t}{t}return get_currency(USWOthInc.TPOth2){n}{t}else:{n}{t}{t}return get_currency(USWOthIncNR.TPOth2){n}{n}
def TPOthNC_Calculation():{n}{t}return get_currency(IAWNONCONFORMADJ.TPTotNonConformAdj){n}{n}
def TPPerRent_Calculation():{n}{t}if get_bool(USWResidency.F1040NR) == False:{n}{t}{t}return get_currency(USWOthInc.TPPerRent){n}{t}else:{n}{t}{t}return 0{n}{n}
def TPPshipCan_Calculation():{n}{t}if get_bool(USWResidency.F1040NR) == False:{n}{t}{t}return get_currency(USWOthInc.TPPshipCan){n}{t}else:{n}{t}{t}return get_currency(USWOthIncNR.TPPshipCan){n}{n}
def TPPYNPTC_Calculation():{n}{t}if get_bool(USWSpouse.NonRes) == True:{n}{t}{t}return max_value(0, get_currency(USWRec.PYNPTCNR) - get_currency(IAWOTHINC.SPPYNPTC)){n}{t}else:{n}{t}{t}return max_value(0, get_currency(USWRec.PYNPTC) - get_currency(IAWOTHINC.SPPYNPTC)){n}{n}
def TPRecapChar_Calculation():{n}{t}if get_bool(USWResidency.F1040NR) == False:{n}{t}{t}return get_currency(USWOthInc.TPRecapChContTax) + get_currency(USWOthInc.TPRecapChar){n}{t}else:{n}{t}{t}return get_currency(USWOthIncNR.TPRecapChContTax) + get_currency(USWOthIncNR.TPRecapChar){n}{n}
def TPRecapTuit_Calculation():{n}{t}if get_bool(USWResidency.F1040NR) == False:{n}{t}{t}return get_currency(USWOthInc.TPRecapTuit){n}{t}else:{n}{t}{t}return 0{n}{n}
def TPTot_Calculation():{n}{t}return get_currency(IAWOTHINC.TPOth1) + get_currency(IAWOTHINC.TPOth2) + get_currency(IAWOTHINC.TPBabySit) + get_currency(IAWOTHINC.TPBonus) + get_currency(IAWOTHINC.TPIAEd) + get_currency(IAWOTHINC.TPDirector) + get_currency(IAWOTHINC.TPIntangDrill) + get_currency(IAWOTHINC.TPExecutor) + get_currency(IAWOTHINC.TPFirstHmBuy) + get_currency(IAWOTHINC.TPK1) + get_currency(IAWOTHINC.TPRefundCr) + get_currency(IAWOTHINC.TPStRefund) + get_currency(IAWOTHINC.TPDepl) + get_currency(IAWOTHINC.TPJury) + get_currency(IAWOTHINC.TPPerRent) + get_currency(IAWOTHINC.TP8814) + get_currency(IAWOTHINC.TPMSA) + get_currency(IAWOTHINC.TPMedMSA) + get_currency(IAWOTHINC.TPLTC) + get_currency(IAWOTHINC.TPMisc) + get_currency(IAWOTHINC.TPAlaska) + get_currency(IAWOTHINC.TPCoverdell) + get_currency(IAWOTHINC.TPCanceled) + get_currency(IAWOTHINC.TPPshipCan) + get_currency(IAWOTHINC.TPHSA) + get_currency(IAWOTHINC.TPAltTrade) + get_currency(IAWOTHINC.TPRecapTuit) + get_currency(IAWOTHINC.TPRecapChar) + get_currency(IAWOTHINC.TP5471) + get_currency(IAWOTHINC.TPHobby) + get_currency(IAWOTHINC.TP8621) + get_currency(IAWOTHINC.TPDefDist) + get_currency(IAWOTHINC.TPDisaster) + get_currency(IAWOTHINC.TPFoster) + get_currency(IAWOTHINC.TPCredAdj) + get_currency(IAWOTHINC.TPPYNPTC) + get_currency(IAWOTHINC.TP1099QA) + get_currency(IAWOTHINC.TPIAABLE) + get_currency(IAWOTHINC.TPBusPass) + get_currency(IAWOTHINC.TPAirline) + get_currency(IAWOTHINC.TP1099B) + get_currency(IAWOTHINC.TPFarmLoss) + get_currency(IAWOTHINC.TP8824) + get_currency(IAWOTHINC.TPStudLoanDis) + get_currency(IAWOTHINC.TP4684) + get_currency(IAWOTHINC.TP3903) + get_currency(IAWOTHINC.TPBusInt) + get_currency(IAWOTHINC.TPEntExp) + get_currency(IAWOTHINC.TP2106) + get_currency(IAWOTHINC.TPOthNC){n}{n}
def TPTotNonConform_Calculation():{n}{t}return get_currency(IAWOTHINC.TPFarmLoss) + get_currency(IAWOTHINC.TP8824) + get_currency(IAWOTHINC.TPStudLoanDis) + get_currency(IAWOTHINC.TP4684) + get_currency(IAWOTHINC.TP3903) + get_currency(IAWOTHINC.TPBusInt) + get_currency(IAWOTHINC.TPEntExp) + get_currency(IAWOTHINC.TP2106) + get_currency(IAWOTHINC.TPOthNC){n}{n}
def Txt1_Calculation():{n}{t}if get_bool(USWResidency.F1040NR) == False:{n}{t}{t}return get_string(USWOthInc.Txt1){n}{t}else:{n}{t}{t}return get_string(USWOthIncNR.Txt1){n}{n}
def Txt2_Calculation():{n}{t}if get_bool(USWResidency.F1040NR) == False:{n}{t}{t}return get_string(USWOthInc.Txt2){n}{t}else:{n}{t}{t}return get_string(USWOthIncNR.Txt2){n}{n}def Description_Calculation():{n}{t}Total = Currency(){n}{t}Total = get_currency(IAWPENEXC.TPPenExc) + get_currency(IAWPENEXC.SPPenExc){n}{t}return CStr(Total){n}{n}
def Eligible_Calculation():{n}{t}if IAFS() == 2 or IAFS() == 3:{n}{t}{t}if get_bool(IAWPENEXC.ExTP) == True or get_bool(IAWPENEXC.ExSp) == True:{n}{t}{t}{t}return 1{n}{t}{t}else:{n}{t}{t}{t}return 0{n}{t}elif get_bool(IAWPENEXC.ExTP) == True:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def ExSp_Calculation():{n}{t}if get_bool(IAREQUIRED.AskSpouse) == True:{n}{t}{t}if get_number(USWBasicInfo.SPAgeRec) > 54:{n}{t}{t}{t}return 1{n}{t}{t}else:{n}{t}{t}{t}return 0{n}{t}else:{n}{t}{t}return 0{n}{n}
def ExTP_Calculation():{n}{t}if get_number(USWBasicInfo.TPAgeRec) > 54:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def MaxExc_Calculation():{n}{t}if get_bool(IAWPENEXC.Eligible) == True:{n}{t}{t}if IAFS() == 4:{n}{t}{t}{t}if get_currency(IAF1040.SpPenExcl) == 0 and get_bool(IAF1040.NoSpPenExcl) == True:{n}{t}{t}{t}{t}return Decimal("12000"){n}{t}{t}{t}elif get_currency(IAF1040.SpPenExcl) > 0:{n}{t}{t}{t}{t}return max_value(0, Decimal("12000") - get_currency(IAF1040.SpPenExcl)){n}{t}{t}{t}else:{n}{t}{t}{t}{t}return Decimal("6000"){n}{t}{t}elif IAFS() == 2 or IAFS() == 3:{n}{t}{t}{t}return Decimal("12000"){n}{t}{t}else:{n}{t}{t}{t}return Decimal("6000"){n}{t}else:{n}{t}{t}return 0{n}{n}
def MinExc_Calculation():{n}{t}return min_value(get_currency(IAWPENEXC.TotRetire), get_currency(IAWPENEXC.MaxExc)){n}{n}
def MobDisQual_Calculation():{n}{t}if get_currency(IAWPENEXC.TPPenExc) + get_currency(IAWPENEXC.SPPenExc) > 0:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def Names_Calculation():{n}{t}return get_string(IAREQUIRED.CombNames){n}{n}
def NREligible_Calculation():{n}{t}if IAFS() == 2 or IAFS() == 3:{n}{t}{t}if get_bool(IAWPENEXC.NRExTP) == True or get_bool(IAWPENEXC.NRExSp) == True:{n}{t}{t}{t}return 1{n}{t}{t}else:{n}{t}{t}{t}return 0{n}{t}elif get_bool(IAWPENEXC.NRExTP) == True:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def NRExSp_Calculation():{n}{t}if get_bool(IAF126.SpPYRes) == True and get_bool(IAWPENEXC.ExSp) == True:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def NRExTP_Calculation():{n}{t}if get_bool(IAF126.TpPYRes) == True and get_bool(IAWPENEXC.ExTP) == True:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def NRMaxExc_Calculation():{n}{t}if get_bool(IAWPENEXC.NREligible) == True:{n}{t}{t}return get_currency(IAWPENEXC.MaxExc){n}{t}else:{n}{t}{t}return 0{n}{n}
def NRMinExc_Calculation():{n}{t}return min_value(get_currency(IAWPENEXC.NRTotRetire), get_currency(IAWPENEXC.NRMaxExc)){n}{n}
def NRSPIRA_Calculation():{n}{t}if get_bool(IAF126.SpPYRes) == True:{n}{t}{t}return get_currency(IAWPENEXC.SPIRA){n}{t}else:{n}{t}{t}return 0{n}{n}
def NRSPPenExc_Calculation():{n}{t}return max_value(0, get_currency(IAWPENEXC.NRMinExc) - get_currency(IAWPENEXC.NRTPPenExc)){n}{n}
def NRSPPensions_Calculation():{n}{t}if get_bool(IAF126.SpPYRes) == True:{n}{t}{t}return get_currency(IAWPENEXC.SPPensions){n}{t}else:{n}{t}{t}return 0{n}{n}
def NRSPRatio_Calculation():{n}{t}if get_currency(IAWPENEXC.NRTotRetire) == 0:{n}{t}{t}return 0{n}{t}elif get_bool(IAF126.SpPYRes) == True:{n}{t}{t}return max_value(0, 1 - get_float(IAWPENEXC.NRTPRatio)){n}{t}else:{n}{t}{t}return 0{n}{n}
def NRSPRetire_Calculation():{n}{t}if get_bool(IAREQUIRED.AskSpouse) == True and get_bool(IAWPENEXC.NRExSp) == True:{n}{t}{t}return get_currency(IAWPENEXC.NRSPIRA) + get_currency(IAWPENEXC.NRSPPensions){n}{t}else:{n}{t}{t}return 0{n}{n}
def NRTotRetire_Calculation():{n}{t}return get_currency(IAWPENEXC.NRTPRetire) + get_currency(IAWPENEXC.NRSPRetire){n}{n}
def NRTPIRA_Calculation():{n}{t}if get_bool(IAF126.TpPYRes) == True:{n}{t}{t}return get_currency(IAWPENEXC.TPIRA){n}{t}else:{n}{t}{t}return 0{n}{n}
def NRTPPenExc_Calculation():{n}{t}return c_dollar(get_float(IAWPENEXC.NRMinExc) * get_float(IAWPENEXC.NRTPRatio)){n}{n}
def NRTPPensions_Calculation():{n}{t}if get_bool(IAF126.TpPYRes) == True:{n}{t}{t}return get_currency(IAWPENEXC.TPPensions){n}{t}else:{n}{t}{t}return 0{n}{n}
def NRTPRatio_Calculation():{n}{t}if get_currency(IAWPENEXC.NRTotRetire) == 0:{n}{t}{t}return 0{n}{t}else:{n}{t}{t}return min_value(1, get_float(IAWPENEXC.NRTPRetire) / get_float(IAWPENEXC.NRTotRetire)){n}{n}
def NRTPRetire_Calculation():{n}{t}if get_bool(IAWPENEXC.NRExTP) == True:{n}{t}{t}return get_currency(IAWPENEXC.NRTPIRA) + get_currency(IAWPENEXC.NRTPPensions){n}{t}else:{n}{t}{t}return 0{n}{n}
def SPIRA_Calculation():{n}{t}#See Expanded instructions on Iowa website for 'Taxable IRA Distributions Step 5 Gross Income'. In 2016 QCD was to be added back to IA income and then were allowed a deduction on line 21{n}{t}#For 2018 the expanded instructions say Iowa has conformed, no addback needed{n}{t}#Extender: + get_currency(USWRetirement.SPAddQCD){n}{t}return get_currency(USWRec.SIRAInc){n}{n}
def SPMilPen_Calculation():{n}{t}Count1 = Long(){n}{n}{t}MilPen = Currency(){n}{t}Count1 = 1{n}{t}MilPen = 0{n}{t}while Count1 <= GetAllCopies(USD1099R):{n}{t}{t}if get_bool(USD1099R.MilPen, Count1) == True and get_bool(USD1099R.Spouse, Count1) == True:{n}{t}{t}{t}MilPen = MilPen + Round(get_currency(USD1099R.PenTax, Count1)){n}{t}{t}else:{n}{t}{t}{t}MilPen = MilPen{n}{t}{t}Count1 = Count1 + 1{n}{t}return Round(MilPen){n}{n}
def SPName_Calculation():{n}{t}return get_string(USWBasicInfo.SPCommon){n}{n}
def SPName2_Calculation():{n}{t}return get_string(USWBasicInfo.SPCommon){n}{n}
def SPPenExc_Calculation():{n}{t}return max_value(0, get_currency(IAWPENEXC.MinExc) - get_currency(IAWPENEXC.TPPenExc)){n}{n}
def SPPensions_Calculation():{n}{t}return max_value(0, get_currency(USWRec.SPension) - get_currency(IAWPENEXC.SPMilPen) - Round(get_currency(USDRRB1099R.PenTax, FieldCopies(USDRRB1099R.Spouse)))){n}{n}
def SPRatio_Calculation():{n}{t}if get_currency(IAWPENEXC.TotRetire) == 0:{n}{t}{t}return 0{n}{t}else:{n}{t}{t}return max_value(0, 1 - get_float(IAWPENEXC.TPRatio)){n}{n}
def SPRetire_Calculation():{n}{t}if get_bool(IAREQUIRED.AskSpouse) == True and get_bool(IAWPENEXC.ExSp) == True:{n}{t}{t}return get_currency(IAWPENEXC.SPIRA) + get_currency(IAWPENEXC.SPPensions){n}{t}else:{n}{t}{t}return 0{n}{n}
def SSN_Calculation():{n}{t}return get_string(IAF1040.SSN){n}{n}
def TotRetire_Calculation():{n}{t}return get_currency(IAWPENEXC.TPRetire) + get_currency(IAWPENEXC.SPRetire){n}{n}
def TPIRA_Calculation():{n}{t}#See Expanded instructions on Iowa website for 'Taxable IRA Distributions Step 5 Gross Income'. In 2016 QCD was to be added back to IA income and then were allowed a deduction on line 21{n}{t}#For 2018 the expanded instructions say Iowa has conformed, no addback needed{n}{t}#Extender: + get_currency(USWRetirement.TPAddQCD){n}{t}return get_currency(USWRec.TIRAInc){n}{n}
def TPMilPen_Calculation():{n}{t}Count1 = Long(){n}{n}{t}MilPen = Currency(){n}{t}Count1 = 1{n}{t}MilPen = 0{n}{t}while Count1 <= GetAllCopies(USD1099R):{n}{t}{t}if get_bool(USD1099R.MilPen, Count1) == True and get_bool(USD1099R.Taxpayer, Count1) == True:{n}{t}{t}{t}MilPen = MilPen + Round(get_currency(USD1099R.PenTax, Count1)){n}{t}{t}else:{n}{t}{t}{t}MilPen = MilPen{n}{t}{t}Count1 = Count1 + 1{n}{t}return Round(MilPen){n}{n}
def TPName_Calculation():{n}{t}return get_string(USWBasicInfo.TPCommon){n}{n}
def TPName2_Calculation():{n}{t}return get_string(USWBasicInfo.TPCommon){n}{n}
def TPPenExc_Calculation():{n}{t}return c_dollar(get_float(IAWPENEXC.MinExc) * get_float(IAWPENEXC.TPRatio)){n}{n}
def TPPensions_Calculation():{n}{t}return max_value(0, get_currency(USWRec.TPension) - get_currency(IAWPENEXC.TPMilPen) - Round(get_currency(USDRRB1099R.PenTax, FieldCopies(USDRRB1099R.Taxpayer)))){n}{n}
def TPRatio_Calculation():{n}{t}if get_currency(IAWPENEXC.TotRetire) == 0:{n}{t}{t}return 0{n}{t}else:{n}{t}{t}return min_value(1, get_float(IAWPENEXC.TPRetire) / get_float(IAWPENEXC.TotRetire)){n}{n}
def TPRetire_Calculation():{n}{t}if get_bool(IAWPENEXC.ExTP) == True:{n}{t}{t}return get_currency(IAWPENEXC.TPIRA) + get_currency(IAWPENEXC.TPPensions){n}{t}else:{n}{t}{t}return 0{n}{n}def CBF_Calculation():{n}{t}return get_bool(USWPrepBInv.StY){n}{n}
def CBF1040_Calculation():{n}{t}return get_currency(USZIAMasterCBF.CBF1040){n}{n}
def CBF1040ES_Calculation():{n}{t}return get_currency(USZIAMasterCBF.CBF1040ES){n}{n}
def CBF1040V_Calculation():{n}{t}return get_currency(USZIAMasterCBF.CBF1040V){n}{n}
def CBF1040X_Calculation():{n}{t}return get_currency(USZIAMasterCBF.CBF1040X){n}{n}
def CBF1040XV_Calculation():{n}{t}return get_currency(USZIAMasterCBF.CBF1040XV){n}{n}
def CBF2210_Calculation():{n}{t}return get_currency(USZIAMasterCBF.CBF2210){n}{n}
def CBF2210SchAI_Calculation():{n}{t}return get_currency(USZIAMasterCBF.CBF2210SchAI){n}{n}
def CBF4136_Calculation():{n}{t}return get_currency(USZIAMasterCBF.CBF4136){n}{n}
def CBF4562A_Calculation():{n}{t}return get_currency(USZIAMasterCBF.CBF4562A){n}{n}
def CBF4562B_Calculation():{n}{t}return get_currency(USZIAMasterCBF.CBF4562B){n}{n}
def CBF6251_Calculation():{n}{t}return get_currency(USZIAMasterCBF.CBF6251){n}{n}
def CBF8453_Calculation():{n}{t}return get_currency(USZIAMasterCBF.CBF8453){n}{n}
def CBF8801_Calculation():{n}{t}return get_currency(USZIAMasterCBF.CBF8801){n}{n}
def CBF8864_Calculation():{n}{t}return get_currency(USZIAMasterCBF.CBF8864){n}{n}
def CBFName_Calculation():{n}{t}return get_string(IAREQUIRED.CombNames){n}{n}
def CBFOthAmt_Calculation(Index):{n}{t}return get_currency(USZIAMasterCBF.CBFOthAmt(Index)){n}{n}
def CBFSch126_Calculation():{n}{t}return get_currency(USZIAMasterCBF.CBFSch126){n}{n}
def CBFSch128_Calculation():{n}{t}return get_currency(USZIAMasterCBF.CBFSch128){n}{n}
def CBFSch128S_Calculation():{n}{t}return get_currency(USZIAMasterCBF.CBFSch128S){n}{n}
def CBFSch130_Calculation():{n}{t}return get_currency(USZIAMasterCBF.CBFSch130){n}{n}
def CBFSch134_Calculation():{n}{t}return get_currency(USZIAMasterCBF.CBFSch134){n}{n}
def CBFSch135_Calculation():{n}{t}return get_currency(USZIAMasterCBF.CBFSch135){n}{n}
def CBFSch137_Calculation():{n}{t}return get_currency(USZIAMasterCBF.CBFSch137){n}{n}
def CBFSch138_Calculation():{n}{t}return get_currency(USZIAMasterCBF.CBFSch138){n}{n}
def CBFSch147_Calculation():{n}{t}return get_currency(USZIAMasterCBF.CBFSch147){n}{n}
def CBFSch148_Calculation():{n}{t}return get_currency(USZIAMasterCBF.CBFSch148){n}{n}
def CBFSch177_Calculation():{n}{t}return get_currency(USZIAMasterCBF.CBFSch177){n}{n}
def CBFSchA_Calculation():{n}{t}return get_currency(USZIAMasterCBF.CBFSchA){n}{n}
def CBFSchB_Calculation():{n}{t}return get_currency(USZIAMasterCBF.CBFSchB){n}{n}
def CF147_Calculation():{n}{t}return get_number(IA147.Print){n}{n}
def CF177_Calculation():{n}{t}return get_number(IA177.Print){n}{n}
def CF1040_Calculation():{n}{t}return 1{n}{n}
def CF126_Calculation():{n}{t}return get_number(IAF126.Print){n}{n}
def CF128_Calculation():{n}{t}return get_number(IA128.Print){n}{n}
def CF128S_Calculation():{n}{t}return get_number(IA128S.Print){n}{n}
def CF130_Calculation():{n}{t}return get_number(IA130.PrintMe){n}{n}
def CF134_Calculation():{n}{t}return get_number(IA134.Print) + get_number(IA134SP.Print){n}{n}
def CF135_Calculation():{n}{t}return get_number(IA135.Print){n}{n}
def CF137_Calculation():{n}{t}return get_number(IA137.Print){n}{n}
def CF138_Calculation():{n}{t}return get_number(IA138.Print){n}{n}
def CF148_Calculation():{n}{t}return get_number(IA148.Print) + get_number(IA148SP.Print){n}{n}
def CF1040V_Calculation():{n}{t}return get_number(IA1040V.PrVou){n}{n}
def CF1040XV_Calculation():{n}{t}return get_number(IA1040XV.PrVou){n}{n}
def CF2210_Calculation():{n}{t}return get_number(IA2210.Print) + get_number(IA2210SP.Print){n}{n}
def CF2210SchAI_Calculation():{n}{t}return get_number(IA2210AN.Print) + get_number(IA2210ANSP.Print){n}{n}
def CF4136_Calculation():{n}{t}return get_bool(IASch4136.TotCr, 1) + get_bool(IASch4136.TotCr, 2){n}{n}
def CF4562A_Calculation():{n}{t}return get_number(IA4562.PrIA4562) + get_number(IA4562SP.PrIA4562) + get_number(IA4562A.PrIA4562A){n}{n}
def CF4562B_Calculation():{n}{t}return get_number(IA4562B.Print) + get_number(IA4562BSP.Print){n}{n}
def CF6251_Calculation():{n}{t}return get_number(IA6251.Print) + get_number(IA6251SP.Print){n}{n}
def CF8801_Calculation():{n}{t}return get_number(IA8801.Print) + get_number(IA8801SP.Print){n}{n}
def CF8864_Calculation():{n}{t}return get_number(IA8864.Print){n}{n}
def CFA_Calculation():{n}{t}return get_number(IASCHA.PrintSchA){n}{n}
def CFB_Calculation():{n}{t}return get_number(IASCHB.PrintIAB){n}{n}
def CFES_Calculation():{n}{t}return get_number(IAESTIMATES.Print){n}{n}
def CFX_Calculation():{n}{t}return get_number(IA1040X.Exist){n}{n}
def CopFOthName_Calculation(Index):{n}{t}return get_string(USZIAMasterCBF.CBFOth1Name(Index)){n}{n}
def FOthAmt_Calculation(Index):{n}{t}return get_currency(IAWPREPCBF.CopFOth(Index)) * get_currency(IAWPREPCBF.CBFOthAmt(Index)){n}{n}
def FTotal1040_Calculation():{n}{t}return get_currency(IAWPREPCBF.CF1040) * get_currency(IAWPREPCBF.CBF1040){n}{n}
def FTotal1040ES_Calculation():{n}{t}return get_currency(IAWPREPCBF.CFES) * get_currency(IAWPREPCBF.CBF1040ES){n}{n}
def FTotal1040V_Calculation():{n}{t}return get_currency(IAWPREPCBF.CF1040V) * get_currency(IAWPREPCBF.CBF1040V){n}{n}
def FTotal1040X_Calculation():{n}{t}return get_currency(IAWPREPCBF.CFX) * get_currency(IAWPREPCBF.CBF1040X){n}{n}
def FTotal1040XV_Calculation():{n}{t}return get_currency(IAWPREPCBF.CF1040XV) * get_currency(IAWPREPCBF.CBF1040XV){n}{n}
def FTotal2210_Calculation():{n}{t}return get_currency(IAWPREPCBF.CF2210) * get_currency(IAWPREPCBF.CBF2210){n}{n}
def FTotal2210SchAI_Calculation():{n}{t}return get_currency(IAWPREPCBF.CF2210SchAI) * get_currency(IAWPREPCBF.CBF2210SchAI){n}{n}
def FTotal4136_Calculation():{n}{t}return get_currency(IAWPREPCBF.CF4136) * get_currency(IAWPREPCBF.CBF4136){n}{n}
def FTotal4562A_Calculation():{n}{t}return get_currency(IAWPREPCBF.CF4562A) * get_currency(IAWPREPCBF.CBF4562A){n}{n}
def FTotal4562B_Calculation():{n}{t}return get_currency(IAWPREPCBF.CF4562B) * get_currency(IAWPREPCBF.CBF4562B){n}{n}
def FTotal6251_Calculation():{n}{t}return get_currency(IAWPREPCBF.CF6251) * get_currency(IAWPREPCBF.CBF6251){n}{n}
def FTotal8453_Calculation():{n}{t}return get_currency(IAWPREPCBF.CF8453) * get_currency(IAWPREPCBF.CBF8453){n}{n}
def FTotal8801_Calculation():{n}{t}return get_currency(IAWPREPCBF.CF8801) * get_currency(IAWPREPCBF.CBF8801){n}{n}
def FTotal8864_Calculation():{n}{t}return get_currency(IAWPREPCBF.CF8864) * get_currency(IAWPREPCBF.CBF8864){n}{n}
def FTotalSch126_Calculation():{n}{t}return get_currency(IAWPREPCBF.CF126) * get_currency(IAWPREPCBF.CBFSch126){n}{n}
def FTotalSch128_Calculation():{n}{t}return get_currency(IAWPREPCBF.CF128) * get_currency(IAWPREPCBF.CBFSch128){n}{n}
def FTotalSch128S_Calculation():{n}{t}return get_currency(IAWPREPCBF.CF128S) * get_currency(IAWPREPCBF.CBFSch128S){n}{n}
def FTotalSch130_Calculation():{n}{t}return get_currency(IAWPREPCBF.CF130) * get_currency(IAWPREPCBF.CBFSch130){n}{n}
def FTotalSch134_Calculation():{n}{t}return get_currency(IAWPREPCBF.CF134) * get_currency(IAWPREPCBF.CBFSch134){n}{n}
def FTotalSch135_Calculation():{n}{t}return get_currency(IAWPREPCBF.CF135) * get_currency(IAWPREPCBF.CBFSch135){n}{n}
def FTotalSch137_Calculation():{n}{t}return get_currency(IAWPREPCBF.CF137) * get_currency(IAWPREPCBF.CBFSch137){n}{n}
def FTotalSch138_Calculation():{n}{t}return get_currency(IAWPREPCBF.CF138) * get_currency(IAWPREPCBF.CBFSch138){n}{n}
def FTotalSch147_Calculation():{n}{t}return get_currency(IAWPREPCBF.CF147) * get_currency(IAWPREPCBF.CBFSch147){n}{n}
def FTotalSch148_Calculation():{n}{t}return get_currency(IAWPREPCBF.CF148) * get_currency(IAWPREPCBF.CBFSch148){n}{n}
def FTotalSch177_Calculation():{n}{t}return get_currency(IAWPREPCBF.CF177) * get_currency(IAWPREPCBF.CBFSch177){n}{n}
def FTotalSchA_Calculation():{n}{t}return get_currency(IAWPREPCBF.CFA) * get_currency(IAWPREPCBF.CBFSchA){n}{n}
def FTotalSchB_Calculation():{n}{t}return get_currency(IAWPREPCBF.CFB) * get_currency(IAWPREPCBF.CBFSchB){n}{n}
def TotCharge_Calculation():{n}{t}TotCharge1 = Currency(){n}{n}{t}TotCharge2 = Currency(){n}{t}TotCharge1 = get_currency(IAWPREPCBF.FTotal1040) + get_currency(IAWPREPCBF.FTotal1040ES) + get_currency(IAWPREPCBF.FTotal1040V) + get_currency(IAWPREPCBF.FTotal1040X) + get_currency(IAWPREPCBF.FTotal1040XV) + get_currency(IAWPREPCBF.FTotalSchA) + get_currency(IAWPREPCBF.FTotalSchB) + get_currency(IAWPREPCBF.FTotalSch126) + get_currency(IAWPREPCBF.FTotalSch128) + get_currency(IAWPREPCBF.FTotalSch128S) + get_currency(IAWPREPCBF.FTotalSch130) + get_currency(IAWPREPCBF.FTotalSch134) + get_currency(IAWPREPCBF.FTotalSch135) + get_currency(IAWPREPCBF.FTotalSch137) + get_currency(IAWPREPCBF.FTotalSch138) + get_currency(IAWPREPCBF.FTotalSch147) + get_currency(IAWPREPCBF.FTotalSch148){n}{t}TotCharge2 = get_currency(IAWPREPCBF.FTotalSch177) + get_currency(IAWPREPCBF.FTotal2210) + get_currency(IAWPREPCBF.FTotal2210SchAI) + get_currency(IAWPREPCBF.FTotal4136) + get_currency(IAWPREPCBF.FTotal4562A) + get_currency(IAWPREPCBF.FTotal4562B) + get_currency(IAWPREPCBF.FTotal6251) + get_currency(IAWPREPCBF.FTotal8453) + get_currency(IAWPREPCBF.FTotal8801) + get_currency(IAWPREPCBF.FTotal8864) + get_currency(IAWPREPCBF.FOthAmt(0)) + get_currency(IAWPREPCBF.FOthAmt(1)) + get_currency(IAWPREPCBF.FOthAmt(2)) + get_currency(IAWPREPCBF.FOthAmt(3)) + get_currency(IAWPREPCBF.FOthAmt(4)){n}{t}return TotCharge1 + TotCharge2{n}{n}def AddComm1_Calculation():{n}{t}if trim(get_string(IAWPREPCLTR.Comm1)) != '':{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def AddComm2_Calculation():{n}{t}if trim(get_string(IAWPREPCLTR.Comm2)) != '':{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def AddComm3_Calculation():{n}{t}if trim(get_string(IAWPREPCLTR.Comm3)) != '':{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def AddComm4_Calculation():{n}{t}if trim(get_string(IAWPREPCLTR.Comm4)) != '':{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def AddComm5_Calculation():{n}{t}if trim(get_string(IAWPREPCLTR.Comm5)) != '':{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def AddComm6_Calculation():{n}{t}if trim(get_string(IAWPREPCLTR.Comm6)) != '':{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def C1EstInfo_Calculation():{n}{t}if get_bool(IAWPREPCLTR.NEst) == True:{n}{t}{t}return 0{n}{t}else:{n}{t}{t}return get_bool(IAFILINGINST.C1EstInfo){n}{n}
def C2EstInfo_Calculation():{n}{t}if get_bool(IAWPREPCLTR.NEst) == True:{n}{t}{t}return 0{n}{t}else:{n}{t}{t}return get_bool(IAFILINGINST.C2EstInfo){n}{n}
def Comm1_Calculation():{n}{t}return get_string(USWPrepMasterLet.StComm1){n}{n}
def Comm2_Calculation():{n}{t}return get_string(USWPrepMasterLet.StComm2){n}{n}
def Comm3_Calculation():{n}{t}return get_string(USWPrepMasterLet.StComm3){n}{n}
def Comm4_Calculation():{n}{t}return get_string(USWPrepMasterLet.StComm4){n}{n}
def Comm5_Calculation():{n}{t}return get_string(USWPrepMasterLet.StComm5){n}{n}
def Comm6_Calculation():{n}{t}return get_string(USWPrepMasterLet.StComm6){n}{n}
def Date_Calculation():{n}{t}return get_string(USWPrepCLtr.Date){n}{n}
def EFAccept_Calculation():{n}{t}if get_bool(IAWPREPCLTR.EFRet) == True:{n}{t}{t}if get_bool(USWPrepCLtr.Transmit) == True:{n}{t}{t}{t}return 0{n}{t}{t}elif get_bool(USWPrepCLtr.WasTran) == True:{n}{t}{t}{t}return 0{n}{t}{t}elif get_bool(USWPrepCLtr.F8879) == True:{n}{t}{t}{t}return 0{n}{t}{t}else:{n}{t}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def EFDate_Calculation():{n}{t}return get_string(IAWPREPCLTR.StSubmitDate){n}{n}
def EFRet_Calculation():{n}{t}if get_bool(IAWPREPCLTR.PaperRet) == True:{n}{t}{t}return 0{n}{t}else:{n}{t}{t}return 1{n}{n}
def EFTrans_Calculation():{n}{t}if get_bool(IAWPREPCLTR.EFRet) == True:{n}{t}{t}if get_bool(USWPrepCLtr.Transmit) == True:{n}{t}{t}{t}return 1{n}{t}{t}else:{n}{t}{t}{t}return 0{n}{t}else:{n}{t}{t}return 0{n}{n}
def EFWasTran_Calculation():{n}{t}if get_bool(IAWPREPCLTR.EFRet) == True:{n}{t}{t}if get_bool(USWPrepCLtr.WasTran) == True:{n}{t}{t}{t}return 1{n}{t}{t}else:{n}{t}{t}{t}return 0{n}{t}else:{n}{t}{t}return 0{n}{n}
def EstInfo_Calculation():{n}{t}if get_bool(IAWPREPCLTR.NEst) == True:{n}{t}{t}return 0{n}{t}else:{n}{t}{t}return get_bool(IAFILINGINST.EstInfo){n}{n}
def Exist_Calculation():{n}{t}return 1{n}{n}
def Names_Calculation():{n}{t}return get_string(USWPrepCLtr.Names){n}{n}
def NEst_Calculation():{n}{t}if get_bool(IAESTIMATES.Print, 1) == False and get_bool(IAESTIMATES.Print, 2) == False:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def PaperAdd1_Calculation():{n}{t}if get_bool(IAWPREPCLTR.PaperRet) == True:{n}{t}{t}return get_string(IAFILINGINST.IRSAdd1) + '<br>' + get_string(IAFILINGINST.IRSAdd2) + '<br>' + get_string(IAFILINGINST.IRSAdd3){n}{t}elif get_bool(IAWPREPCLTR.EFRet) == True and get_number(IA1040V.PrVou) == 1:{n}{t}{t}return get_string(IAFILINGINST.IRSAdd1) + '<br>' + get_string(IAFILINGINST.IRSAdd2) + '<br>' + get_string(IAFILINGINST.IRSAdd3){n}{t}else:{n}{t}{t}return ''{n}{n}
def PaperRet_Calculation():{n}{t}if get_bool(USWEFQual.QualifiesForEF) == False:{n}{t}{t}return 1{n}{t}elif get_bool(IAWEFQUAL.NotQualifyEF) == True:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def PrepPaymentDate_Calculation():{n}{t}return GetVerboseDate(GetDate(IAEFWKSHT.EFEFWDate)){n}{n}
def Refund_Calculation():{n}{t}return get_bool(USWPrepCLtr.Refund){n}{n}
def Ret1_Calculation():{n}{t}if get_bool(IAWPREPCLTR.EFRet) == True:{n}{t}{t}return 'Please find enclosed a copy of your ' + YearString + ' Iowa income tax return for your records.'{n}{t}else:{n}{t}{t}return 'Please find enclosed your ' + YearString + ' Iowa income tax return as well as a copy for your records.'{n}{n}
def Ret2_Calculation():{n}{t}if get_bool(IAWPREPCLTR.EFRet) == True and get_bool(USWPrepCLtr.NA) == True:{n}{t}{t}return 'Your Iowa return was electronically transmitted to the Iowa Department of Revenue;'{n}{t}elif get_bool(IAWPREPCLTR.EFWasTran) == True:{n}{t}{t}return 'Your Iowa return was electronically transmitted to the Iowa Department of Revenue on ' + get_string(IAWPREPCLTR.VerbEFDate) + ';'{n}{t}elif get_bool(IAWPREPCLTR.EFAccept) == True:{n}{t}{t}return 'Your Iowa return was electronically filed and accepted by the Iowa Department of Revenue on ' + get_string(IAWPREPCLTR.VerbEFDate) + ';'{n}{t}elif get_bool(IAWPREPCLTR.EFTrans) == True:{n}{t}{t}return 'Your Iowa return will be electronically transmitted to the Iowa Department of Revenue on ' + get_string(IAWPREPCLTR.VerbEFDate) + ';'{n}{t}elif get_bool(IAWPREPCLTR.EFRet) == True:{n}{t}{t}return 'Your Iowa return will be electronically transmitted to the Iowa Department of Revenue;'{n}{t}else:{n}{t}{t}return 'Your Iowa return is due ' + get_string(IAWPREPCLTR.VerbStDate) + '.'{n}{n}
def Ret3_Calculation():{n}{t}if get_bool(IAWPREPCLTR.EFRet) == True:{n}{t}{t}return 'therefore, do not mail your Iowa Form 1040 to the Iowa Department of Revenue.'{n}{t}else:{n}{t}{t}return 'Please sign and date your Iowa Form 1040.'{n}{n}
def Ret3a_Calculation():{n}{t}if get_bool(IAWPREPCLTR.PaperRet) == True and get_number(IA1040V.PrVou) == 1:{n}{t}{t}return 'Mail your Iowa Form 1040, Iowa payment voucher, payment and required attachments to:'{n}{t}elif get_bool(IAWPREPCLTR.PaperRet) == True:{n}{t}{t}return 'Mail your Iowa Form 1040 and required attachments to:'{n}{t}elif get_bool(IAWPREPCLTR.EFRet) == True and get_number(IA1040V.PrVou) == 1 and GetDate(IAWPREPCLTR.Date) > GetDate(IAWPREPCLTR.StDueDate):{n}{t}{t}return 'Mail your payment and Iowa payment voucher (Form IA 1040-V) to:'{n}{t}elif get_bool(IAWPREPCLTR.EFRet) == True and get_number(IA1040V.PrVou) == 1:{n}{t}{t}return 'Mail your payment and Iowa payment voucher (Form IA 1040-V) by ' + get_string(IAWPREPCLTR.VerbStDate) + ' to:'{n}{t}else:{n}{t}{t}return ''{n}{n}
def Ret4_Calculation():{n}{t}return get_string(IAWPREPCLTR.PaperAdd1){n}{n}
def Ret7_Calculation():{n}{t}if get_currency(IAF1040.RefBalDue) < 0:{n}{t}{t}return 'The amount you owe on your Iowa return is '{n}{t}else:{n}{t}{t}return 'The amount you overpaid on your Iowa return is '{n}{n}
def Ret7Amount_Calculation():{n}{t}if get_currency(IAF1040.RefBalDue) < 0:{n}{t}{t}return get_currency(IAF1040.TotDue){n}{t}else:{n}{t}{t}return get_currency(IAF1040.OVerPaid){n}{n}
def Ret8_Calculation():{n}{t}if get_bool(IAWPREPCLTR.EFRet) == True and get_currency(IAF1040.RefBalDue) < 0 and get_string(IAEFWKSHT.EFDDCode) == '2':{n}{t}{t}return 'Your payment is scheduled to be withdrawn from your bank account on ' + get_string(IAWPREPCLTR.PrepPaymentDate) + '.'{n}{t}elif get_currency(IAF1040.RefBalDue) < 0:{n}{t}{t}return 'Make your check or money order payable to \' Treasurer - State of Iowa \'.'{n}{t}else:{n}{t}{t}return 'The amount of overpayment applied to your ' + NextYearString + ' estimates is '{n}{n}
def Ret8Amount_Calculation():{n}{t}return get_currency(IAREQUIRED.TotApplied){n}{n}
def Ret8Trig_Calculation():{n}{t}if get_currency(IAF1040.RefBalDue) < 0:{n}{t}{t}return 0{n}{t}else:{n}{t}{t}return 1{n}{n}
def Ret9_Calculation():{n}{t}# balance due{n}{t}if get_bool(IAWPREPCLTR.EFRet) == True and get_string(IAEFWKSHT.EFDDCode) == '2':{n}{t}{t}return ''{n}{t}elif get_currency(IAF1040.RefBalDue) < 0:{n}{t}{t}return 'Write \'' + YearString + ' Form 1040\' on your check.'{n}{t}{t}# refund{n}{t}elif get_bool(IAWPREPCLTR.EFRet) == True and get_bool(IAWPREPCLTR.Refund) == True and get_bool(IAEFWKSHT.PrepBPTrans) == True:{n}{t}{t}return 'The amount to be refunded to you is '{n}{t}elif get_bool(IAWPREPCLTR.EFRet) == True and get_bool(IAWPREPCLTR.Refund) == True and get_string(IAEFWKSHT.EFDDCode) == '1':{n}{t}{t}return 'The amount to be refunded to you by direct deposit is '{n}{t}elif get_bool(IAWPREPCLTR.Refund) == True and get_currency(IAF1040.Refund) > 0 and trim(get_string(IAF1040.ActNum)) != '':{n}{t}{t}return 'The amount to be refunded to you by direct deposit is '{n}{t}elif get_bool(IAWPREPCLTR.Refund) == True and get_currency(IAF1040.Refund) > 0:{n}{t}{t}return 'The amount to be refunded to you by paper check is '{n}{t}else:{n}{t}{t}return 'The amount to be refunded to you is '{n}{n}
def Ret9Amount_Calculation():{n}{t}return get_currency(IAF1040.Refund){n}{n}
def StateEF_Calculation():{n}{t}TempStr = String(){n}{n}{t}TempCount = Long(){n}{n}{t}TempHold = Long(){n}{n}{t}Submission = String(){n}{t}TempStr = get_string(USWEFOptions.EFSubmissionHistory){n}{t}TempCount = 1{n}{t}TempHold = 0{n}{t}Submission = GetParam(TempStr, TempCount, '|'){n}{t}while Submission != '':{n}{t}{t}if GetParam(Submission, 1, ';') == 'IA' and GetParam(Submission, 2, ';') == '0':{n}{t}{t}{t}return 1{n}{t}{t}TempCount = TempCount + 1{n}{t}{t}Submission = GetParam(TempStr, TempCount, '|'){n}{t}return 0{n}{n}
def StDueDate_Calculation():{n}{t}return datetime.datetime(4, 30, 2019){n}{n}
def StSubmitDate_Calculation():{n}{t}TempStr = String(){n}{n}{t}TempCount = Long(){n}{n}{t}TempHold = Long(){n}{n}{t}Submission = String(){n}{t}TempStr = get_string(USWEFOptions.EFSubmissionHistory){n}{t}TempCount = 1{n}{t}TempHold = 0{n}{t}Submission = GetParam(TempStr, TempCount, '|'){n}{t}while Submission != '':{n}{t}{t}if GetParam(Submission, 1, ';') == 'IA' and GetParam(Submission, 2, ';') == '0':{n}{t}{t}{t}return GetParam(Submission, 4, ';'){n}{t}{t}TempCount = TempCount + 1{n}{t}{t}Submission = GetParam(TempStr, TempCount, '|'){n}{t}return ''{n}{n}
def VerbDate_Calculation():{n}{t}return GetVerboseDate(GetDate(IAWPREPCLTR.Date)){n}{n}
def VerbEFDate_Calculation():{n}{t}return GetVerboseDate(GetDate(IAWPREPCLTR.EFDate)){n}{n}
def VerbStDate_Calculation():{n}{t}return GetVerboseDate(GetDate(IAWPREPCLTR.StDueDate)){n}{n}
def YEst_Calculation():{n}{t}if get_bool(IAESTIMATES.Print, 1) == True or get_bool(IAESTIMATES.Print, 2) == True:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}def Alert10_Calculation():{n}{t}if get_number(IASCHA.PrintSchA) == 1:{n}{t}{t}if get_currency(IAWSCHAPRINT.OtherExp) != 0 and not IsValidEFileString(get_string(IAWSCHAPRINT.OtherMiscText)):{n}{t}{t}{t}return 1{n}{t}{t}elif get_currency(IAWSCHAPRINT.OtherExp2) != 0 and not IsValidEFileString(get_string(IAWSCHAPRINT.OtherMiscText2)):{n}{t}{t}{t}return 1{n}{t}{t}else:{n}{t}{t}{t}return 0{n}{t}else:{n}{t}{t}return 0{n}{n}
def Alert20_Calculation():{n}{t}if get_number(IASCHA.PrintSchA) == 1:{n}{t}{t}if get_currency(IAWSCHAPRINT.OthExp) != 0 and not IsValidEFileString(get_string(IAWSCHAPRINT.OtherText)):{n}{t}{t}{t}return 1{n}{t}{t}elif get_currency(IAWSCHAPRINT.OthExp2) != 0 and not IsValidEFileString(get_string(IAWSCHAPRINT.OtherText2)):{n}{t}{t}{t}return 1{n}{t}{t}else:{n}{t}{t}{t}return 0{n}{t}else:{n}{t}{t}return 0{n}{n}
def Alert30_Calculation():{n}{t}if get_number(IASCHA.PrintSchA) == 1:{n}{t}{t}if get_currency(IAWSCHAPRINT.Hobby) >  ( get_currency(IAWOTHINC.TPHobby) + get_currency(IAWOTHINC.SPHobby) ) :{n}{t}{t}{t}return 1{n}{t}{t}else:{n}{t}{t}{t}return 0{n}{t}else:{n}{t}{t}return 0{n}{n}
def Bond_Calculation():{n}{t}return get_currency(USWSchAPrint.Bond){n}{n}
def CasualtyLoss_Calculation():{n}{t}TOne = Currency(){n}{n}{t}TTwo = Currency(){n}{t}#believe current conditions being used to pull from 4684B ST and LT are not correct, the fed 4684 will not have amounts of an employee, just remove condition or use a different condition?{n}{t}#verify .Ln22Employee will still be calced on Fed Sch A{n}{t}#If get_currency(USF4684.STIncPro) > 0 Then{n}{t}TOne = get_currency(USF4684B.TotEmplST){n}{t}#Else{n}{t}#{t}TOne = 0{n}{t}#End If{n}{t}#If get_currency(USF4684.L35bii) > 0 Then{n}{t}TTwo = get_currency(USF4684B.TotEmplLT){n}{t}#Else{n}{t}#{t}TTwo = 0{n}{t}#End If{n}{t}return TOne + TTwo + get_currency(USSchA.Ln22Employee){n}{n}
def Debt_Calculation():{n}{t}return get_currency(USWSchAPrint.Debt){n}{n}
def Description_Calculation():{n}{t}if get_string(USWBasicInfo.FECombo) == '':{n}{t}{t}return 'Iowa Itemized Deductions'{n}{t}else:{n}{t}{t}return get_string(USWBasicInfo.FECombo){n}{n}
def ExcessDed_Calculation():{n}{t}return get_currency(USDEstK1.ExcDed){n}{n}
def Exist_Calculation():{n}{t}return 1{n}{n}
def F2106_Calculation():{n}{t}return get_currency(IA2106.SchAAMt){n}{n}
def Form4684_Calculation():{n}{t}return get_currency(USWSchAPrint.Form4684){n}{n}
def GamblingLoss_Calculation():{n}{t}return get_currency(USWSchAPrint.GamblingLoss){n}{n}
def ImpWrkExp_Calculation():{n}{t}return get_currency(USWSchAPrint.ImpWrkExp){n}{n}
def Indirect_Calculation():{n}{t}#how will these expenses now be reported by the entity? Seems they still need to be passed through. Will we have an entry point on fed at all?{n}{t}#return get_currency(USWPartK1Detail.PortfolioDed2) + get_currency(USWPartK1Detail.MiscItmDed) + get_currency(USWSCorpK1Detail.PortfolioDed2) + get_currency(USWSCorpK1Detail.MiscItmDed){n}{t}return 0{n}{n}
def Invest_Calculation():{n}{t}return Round(get_currency(USD1099DIV.InvExp) + get_currency(USD1099INT.InvExp) + get_currency(USD1099OID.InvExp)){n}{n}
def K1DedPort_Calculation():{n}{t}return get_currency(USWSchAPrint.K1DedPort){n}{n}
def Names_Calculation():{n}{t}return get_string(IAREQUIRED.CombNames){n}{n}
def Pension_Calculation():{n}{t}return get_currency(USWSchAPrint.Pension){n}{n}
def REMIC_Calculation():{n}{t}return get_currency(USSchEP2.RemicOtherInc){n}{n}
def Repay_Calculation():{n}{t}return get_currency(USWSchAPrint.Repay){n}{n}
def RepayInc_Calculation():{n}{t}if get_currency(USWUnempl.TPPrevUnemRepay) > Decimal("3000"):{n}{t}{t}return 0{n}{t}else:{n}{t}{t}return get_currency(USWUnempl.TPPrevUnemRepay){n}{n}
def SSN_Calculation():{n}{t}return get_string(IAF1040.SSN){n}{n}
def TotEstK1_Calculation():{n}{t}return get_currency(USWSchAPrint.TotEstK1){n}{n}
def TotExp_Calculation():{n}{t}if get_bool(USWResidency.F1040NR) == True:{n}{t}{t}return get_currency(IAWSCHAPRINT.Legal) + get_currency(IAWSCHAPRINT.OthLegal) + get_currency(IAWSCHAPRINT.Clerical) + get_currency(IAWSCHAPRINT.Custodial) + get_currency(IAWSCHAPRINT.Invest) + get_currency(IAWSCHAPRINT.InsolventLoss) + get_currency(IAWSCHAPRINT.CasualtyLoss) + get_currency(IAWSCHAPRINT.Appraisal) + get_currency(IAWSCHAPRINT.DeprTot) + get_currency(IAWSCHAPRINT.Amort) + get_currency(IAWSCHAPRINT.ExcessDed) + get_currency(IAWSCHAPRINT.Fees) + get_currency(IAWSCHAPRINT.Indirect) + get_currency(IAWSCHAPRINT.REMIC) + get_currency(IAWSCHAPRINT.IRALoss) + get_currency(IAWSCHAPRINT.RepayInc) + get_currency(IAWSCHAPRINT.SafeBox) + get_currency(IAWSCHAPRINT.ServiceCharge) + get_currency(IAWSCHAPRINT.TaxAdvice) + get_currency(IAWSCHAPRINT.Trustee) + get_currency(IAWSCHAPRINT.CreditFees) + get_currency(IAWSCHAPRINT.OthExp) + get_currency(IAWSCHAPRINT.OthExp2){n}{t}else:{n}{t}{t}return get_currency(IAWSCHAPRINT.Legal) + get_currency(IAWSCHAPRINT.OthLegal) + get_currency(IAWSCHAPRINT.Clerical) + get_currency(IAWSCHAPRINT.Custodial) + get_currency(IAWSCHAPRINT.Invest) + get_currency(IAWSCHAPRINT.InsolventLoss) + get_currency(IAWSCHAPRINT.CasualtyLoss) + get_currency(IAWSCHAPRINT.Appraisal) + get_currency(IAWSCHAPRINT.DeprTot) + get_currency(IAWSCHAPRINT.Amort) + get_currency(IAWSCHAPRINT.ExcessDed) + get_currency(IAWSCHAPRINT.Fees) + get_currency(IAWSCHAPRINT.Hobby) + get_currency(IAWSCHAPRINT.Indirect) + get_currency(IAWSCHAPRINT.REMIC) + get_currency(IAWSCHAPRINT.IRALoss) + get_currency(IAWSCHAPRINT.RepayInc) + get_currency(IAWSCHAPRINT.RepaySSB) + get_currency(IAWSCHAPRINT.SafeBox) + get_currency(IAWSCHAPRINT.ServiceCharge) + get_currency(IAWSCHAPRINT.TaxAdvice) + get_currency(IAWSCHAPRINT.Trustee) + get_currency(IAWSCHAPRINT.CreditFees) + get_currency(IAWSCHAPRINT.OthExp) + get_currency(IAWSCHAPRINT.OthExp2){n}{n}
def TotOthDed_Calculation():{n}{t}if get_bool(USWResidency.F1040NR) == True:{n}{t}{t}return get_currency(IAWSCHAPRINT.Form4684) + get_currency(IAWSCHAPRINT.K1DedPort) + get_currency(IAWSCHAPRINT.ImpWrkExp) + get_currency(IAWSCHAPRINT.Repay) + get_currency(IAWSCHAPRINT.Pension){n}{t}else:{n}{t}{t}return get_currency(IAWSCHAPRINT.Form4684) + get_currency(IAWSCHAPRINT.GamblingLoss) + get_currency(IAWSCHAPRINT.K1DedPort) + get_currency(IAWSCHAPRINT.ImpWrkExp) + get_currency(IAWSCHAPRINT.TotEstK1) + get_currency(IAWSCHAPRINT.Repay) + get_currency(IAWSCHAPRINT.Bond) + get_currency(IAWSCHAPRINT.Pension) + get_currency(IAWSCHAPRINT.Debt){n}{n}
def TotOtherExp_Calculation():{n}{t}return get_currency(IAWSCHAPRINT.F2106) + get_currency(IAWSCHAPRINT.BadDebt) + get_currency(IAWSCHAPRINT.LiabilityPrem) + get_currency(IAWSCHAPRINT.Breach) + get_currency(IAWSCHAPRINT.ChamberDues) + get_currency(IAWSCHAPRINT.ProffDues) + get_currency(IAWSCHAPRINT.JobSearch) + get_currency(IAWSCHAPRINT.LabFees) + get_currency(IAWSCHAPRINT.LegalFees) + get_currency(IAWSCHAPRINT.LicenseFees) + get_currency(IAWSCHAPRINT.Malpractice) + get_currency(IAWSCHAPRINT.MedExam) + get_currency(IAWSCHAPRINT.Occupational) + get_currency(IAWSCHAPRINT.Passport) + get_currency(IAWSCHAPRINT.RepayEmpInc) + get_currency(IAWSCHAPRINT.Research) + get_currency(IAWSCHAPRINT.Subscriptions) + get_currency(IAWSCHAPRINT.Tools) + get_currency(IAWSCHAPRINT.Union) + get_currency(IAWSCHAPRINT.Uniforms) + get_currency(IAWSCHAPRINT.WorkEdu) + get_currency(IAWSCHAPRINT.OtherExp) + get_currency(IAWSCHAPRINT.OtherExp2){n}{n}
def Union_Calculation():{n}{t}return Round(get_currency(USDW2.UnionDues)){n}{n}def ATax_Calculation():{n}{t}if get_number(IAWKALTTAX.ProRate) == 1:{n}{t}{t}return c_dollar(get_float(IAWKALTTAX.Lesser) * get_float(IAWKALTTAX.BProRate)){n}{t}else:{n}{t}{t}return 0{n}{n}
def BProRate_Calculation():{n}{t}if get_number(IAWKALTTAX.ProRate) == 1:{n}{t}{t}if get_currency(IAWKALTTAX.SPModNI) < 0 and get_currency(IAWKALTTAX.TPModNI) < 0:{n}{t}{t}{t}if get_currency(IAWKALTTAX.TPModNI) < get_currency(IAWKALTTAX.SPModNI):{n}{t}{t}{t}{t}return 0{n}{t}{t}{t}else:{n}{t}{t}{t}{t}return 1{n}{t}{t}elif get_currency(IAWKALTTAX.TPModNI) < 0:{n}{t}{t}{t}return 0{n}{t}{t}elif get_currency(IAWKALTTAX.TPModNI) > 0 and get_currency(IAWKALTTAX.TotAdjIANetInc) <= 0:{n}{t}{t}{t}return 1{n}{t}{t}elif get_currency(IAWKALTTAX.TotAdjIANetInc) == 0:{n}{t}{t}{t}return 0{n}{t}{t}else:{n}{t}{t}{t}return max_value(0, ( min_value(1, Round(get_float(IAWKALTTAX.TPModNI) / get_float(IAWKALTTAX.TotAdjIANetInc), 3)) )){n}{t}else:{n}{t}{t}return 0{n}{n}
def BTax_Calculation():{n}{t}if get_number(IAWKALTTAX.ProRate) == 1:{n}{t}{t}return get_currency(IAWKALTTAX.Lesser) - get_currency(IAWKALTTAX.ATax){n}{t}else:{n}{t}{t}return 0{n}{n}
def Description_Calculation():{n}{t}return CStr(get_currency(IAWKALTTAX.Lesser)){n}{n}
def IncLimit_Calculation():{n}{t}if get_bool(IAF1040.Over65) == True:{n}{t}{t}return Decimal("32000"){n}{t}else:{n}{t}{t}return Decimal("13500"){n}{n}
def Lesser_Calculation():{n}{t}if get_bool(IAWKALTTAX.Qualify) == True:{n}{t}{t}return min_value(get_currency(IAWKALTTAX.Mult), get_currency(IAWKALTTAX.Tables)){n}{t}else:{n}{t}{t}return get_currency(IAWKALTTAX.Tables){n}{n}
def Ln26_Calculation():{n}{t}return get_currency(IAWKALTTAX.TotSPLine1) + get_currency(IAWKALTTAX.TotLine1){n}{n}
def LumpSum_Calculation():{n}{t}return get_currency(USF4972.TPCapGain) + get_currency(USF4972.TPTaxAmt){n}{n}
def Mult_Calculation():{n}{t}return c_dollar(get_float(IAWKALTTAX.Sub1) * 0.0898){n}{n}
def Names_Calculation():{n}{t}return get_string(IAREQUIRED.CombNames){n}{n}
def NetInc_Calculation():{n}{t}return get_currency(IAF1040.ANet){n}{n}
def PenExcl_Calculation():{n}{t}return get_currency(IAF1040.APenExcl){n}{n}
def ProRate_Calculation():{n}{t}if IAFS() == 3 or IAFS() == 4:{n}{t}{t}if ( get_currency(IAWKALTTAX.Mult) < get_currency(IAWKALTTAX.Tables) )  and get_bool(IAWKALTTAX.Qualify) == True:{n}{t}{t}{t}return 1{n}{t}{t}else:{n}{t}{t}{t}return 0{n}{t}else:{n}{t}{t}return 0{n}{n}
def Qualify_Calculation():{n}{t}NoMFSQual = Long(){n}{t}if get_currency(IAF1040.SpIncome) == 0 and get_bool(IAF1040.NoMFSInc) == False:{n}{t}{t}NoMFSQual = 1{n}{t}else:{n}{t}{t}NoMFSQual = 0{n}{t}if IAFS() == 1:{n}{t}{t}return 0{n}{t}elif get_bool(IAREQUIRED.AskFilStat) == True and get_bool(IAWKALTTAX.NOL) == True:{n}{t}{t}return 0{n}{t}elif IAFS() == 4 and NoMFSQual == 1:{n}{t}{t}return 0{n}{t}else:{n}{t}{t}return 1{n}{n}
def SPLumpSum_Calculation():{n}{t}#probably should ask for the form 4972 amounts on the IA 1040 under the filing status 4 section, however for the number of users that will fall in this situation not going to add this year.{n}{t}if IAFS() == 4:{n}{t}{t}return 0{n}{t}else:{n}{t}{t}return get_currency(USF4972SPOUSE.TPCapGain) + get_currency(USF4972SPOUSE.TPTaxAmt){n}{n}
def SPModNI_Calculation():{n}{t}if get_number(IAWKALTTAX.ProRate) == 1:{n}{t}{t}return get_currency(IAWKALTTAX.TotSPLine1){n}{t}else:{n}{t}{t}return 0{n}{n}
def SPNetInc_Calculation():{n}{t}if IAFS() == 4:{n}{t}{t}return get_currency(IAF1040.SpIncome){n}{t}else:{n}{t}{t}return get_currency(IAF1040.BNet){n}{n}
def SPPenExcl_Calculation():{n}{t}if IAFS() == 4:{n}{t}{t}return get_currency(IAF1040.SpPenExcl){n}{t}else:{n}{t}{t}return get_currency(IAF1040.BPenExcl){n}{n}
def SPSSB_Calculation():{n}{t}if IAFS() == 4:{n}{t}{t}return get_currency(IAF1040.SpSSB){n}{t}else:{n}{t}{t}return get_currency(IAF1040.BRepSSB){n}{n}
def SSB_Calculation():{n}{t}return get_currency(IAF1040.ARepSSB){n}{n}
def SSN_Calculation():{n}{t}return get_string(IAF1040.SSN){n}{n}
def Sub1_Calculation():{n}{t}return max_value(0, get_currency(IAWKALTTAX.Ln26) - get_currency(IAWKALTTAX.IncLimit)){n}{n}
def Tables_Calculation():{n}{t}return get_currency(IAF1040.ARegTax) + get_currency(IAF1040.BRegTax){n}{n}
def TotAdjIANetInc_Calculation():{n}{t}return get_currency(IAWKALTTAX.SPModNI) + get_currency(IAWKALTTAX.TPModNI){n}{n}
def TotLine1_Calculation():{n}{t}return get_currency(IAWKALTTAX.NetInc) + get_currency(IAWKALTTAX.PenExcl) + get_currency(IAWKALTTAX.SSB) + get_currency(IAWKALTTAX.LumpSum){n}{n}
def TotSPLine1_Calculation():{n}{t}return get_currency(IAWKALTTAX.SPNetInc) + get_currency(IAWKALTTAX.SPPenExcl) + get_currency(IAWKALTTAX.SPSSB) + get_currency(IAWKALTTAX.SPLumpSum){n}{n}
def TPModNI_Calculation():{n}{t}if get_number(IAWKALTTAX.ProRate) == 1:{n}{t}{t}return get_currency(IAWKALTTAX.TotLine1){n}{t}else:{n}{t}{t}return 0{n}{n}def Box5_Calculation():{n}{t}if get_bool(USWResidency.F1040NR) == False:{n}{t}{t}return max_value(0, get_currency(USWSSBDetail.TotSS)){n}{t}else:{n}{t}{t}return max_value(0, get_currency(USWSSBDetailNR.TPSS)){n}{n}
def Description_Calculation():{n}{t}return CStr(get_currency(IAWKSSB.ReportSSB)) + ' Reportable Benefits'{n}{n}
def FilStat_Calculation():{n}{t}if FedFS() == 2:{n}{t}{t}return Decimal("32000"){n}{t}elif FedFS() == 3 and get_bool(USWBasicInfo.MFSAllYr) == False:{n}{t}{t}return 0{n}{t}else:{n}{t}{t}return Decimal("25000"){n}{n}
def Half10_Calculation():{n}{t}return c_dollar(get_float(IAWKSSB.Sub9) * 0.5){n}{n}
def Half2_Calculation():{n}{t}return c_dollar(get_float(IAWKSSB.Box5) * 0.5){n}{n}
def Line31_Calculation():{n}{t}return get_currency(USWRec.TotEdExp) + get_currency(USWRec.TotBusExp2106) + get_currency(USWRec.TotHealthSav) + get_currency(USWRec.TotMove) + get_currency(USWRec.TotHalfSE) + get_currency(USWRec.TotKeough) + get_currency(USWRec.TotSEHealth) + get_currency(USWRec.TotEarlyPen) + get_currency(USWRec.TotAlimonyAdj) + get_currency(USWRec.TotScholEx) + get_currency(USWRec.TotIRAAdj) + get_currency(USWRec.TotOthAdj){n}{n}
def Line8b_Calculation():{n}{t}if get_bool(USWResidency.F1040NR) == False:{n}{t}{t}return get_currency(USF1040.TEI){n}{t}else:{n}{t}{t}return get_currency(USF1040NR.TEI){n}{n}
def Names_Calculation():{n}{t}return get_string(IAREQUIRED.CombNames){n}{n}
def ReportSSB_Calculation():{n}{t}return min_value(get_currency(IAWKSSB.Half2), get_currency(IAWKSSB.Half10)){n}{n}
def SPRepSSB_Calculation():{n}{t}TotSSB = Currency(){n}{n}{t}SpSSB = Currency(){n}{t}TotSSB = get_currency(IAWKSSB.Box5){n}{t}SpSSB = get_currency(USWSSBDetail.SPSS){n}{t}if get_bool(USWResidency.F1040NR) == False:{n}{t}{t}if TotSSB > 0:{n}{t}{t}{t}return c_dollar(( CDbl(SpSSB) / CDbl(TotSSB) )  * get_float(IAWKSSB.ReportSSB)){n}{t}{t}else:{n}{t}{t}{t}return 0{n}{t}else:{n}{t}{t}return 0{n}{n}
def SSN_Calculation():{n}{t}return get_string(IAF1040.SSN){n}{n}
def Sub_Calculation():{n}{t}return get_currency(IAWKSSB.Sum5) - get_currency(IAWKSSB.Line31){n}{n}
def Sub9_Calculation():{n}{t}return max_value(0, ( get_currency(IAWKSSB.Sub) - get_currency(IAWKSSB.FilStat) )){n}{n}
def Sum3_Calculation():{n}{t}if get_bool(USWResidency.F1040NR) == False:{n}{t}{t}return get_currency(USWSSB.SSBInc) + get_currency(USWSSB.TotExempt) + get_currency(IAWOTHINC.TotBonus) + get_currency(IAWOTHINC.TotNonConform) - get_currency(IAREQUIRED.NCMove) - get_currency(IAREQUIRED.NCDomProd) + c_dollar(get_float(USWSSBDetail.TotRR) / 2){n}{t}else:{n}{t}{t}return get_currency(USF1040NR.TECI) + get_currency(USF8839.SumL22) + get_currency(IAWOTHINC.TotBonus) + get_currency(IAWOTHINC.TotNonConform) - get_currency(IAREQUIRED.NCMove) - get_currency(IAREQUIRED.NCDomProd) + c_dollar(get_float(USWSSBDetailNR.TPRR) / 2){n}{n}
def Sum5_Calculation():{n}{t}return get_currency(IAWKSSB.Half2) + get_currency(IAWKSSB.Sum3) + get_currency(IAWKSSB.Line8b){n}{n}
def TPRepSSB_Calculation():{n}{t}return max_value(0, get_currency(IAWKSSB.ReportSSB) - get_currency(IAWKSSB.SPRepSSB)){n}{n}def ActValue_Calculation():{n}{t}ActValue = Currency(){n}{n}{t}count = Integer(){n}{t}count = 1{n}{t}ActValue = 0{n}{t}while count <= GetAllCopies(USD1099R):{n}{t}{t}if get_bool(USD1099R.Qual4972, count) == True and get_bool(USD1099R.Spouse, count) == True:{n}{t}{t}{t}ActValue = ActValue + Round(get_currency(USD1099R.Other, count)){n}{t}{t}else:{n}{t}{t}{t}ActValue = ActValue{n}{t}{t}count = count + 1{n}{t}if get_bool(USF4972SPOUSE.UseForm) == True and get_bool(USF4972SPOUSE.Choose10Year) == True:{n}{t}{t}if get_bool(USF4972SPOUSE.MRD) == True and get_bool(USF4972SPOUSE.Box8Perc) != 0:{n}{t}{t}{t}return CCur(ActValue /  ( get_float(USF4972SPOUSE.Box8Perc) / 100 )){n}{t}{t}else:{n}{t}{t}{t}return ActValue{n}{t}else:{n}{t}{t}return 0{n}{n}
def AdjTotTaxable_Calculation():{n}{t}if get_bool(USF4972SPOUSE.UseForm) == True and get_bool(USF4972SPOUSE.Choose10Year) == True:{n}{t}{t}return get_currency(USF4972SPOUSE.TotTaxable) + get_currency(USF4972SPOUSE.ActValue){n}{t}else:{n}{t}{t}return 0{n}{n}
def Alert10_Calculation():{n}{t}count = Integer(){n}{n}{t}Hit = Long(){n}{t}count = 1{n}{t}Hit = 0{n}{t}while count <= GetAllCopies(USD1099R):{n}{t}{t}if get_bool(USD1099R.Spouse, count) == True and get_bool(USD1099R.Qual4972, count) == True:{n}{t}{t}{t}Hit = Hit + 1{n}{t}{t}else:{n}{t}{t}{t}Hit = Hit{n}{t}{t}count = count + 1{n}{t}if get_bool(USF4972SPOUSE.UseForm) == True and get_bool(USF4972SPOUSE.ChooseCapGain) == False and get_bool(USF4972SPOUSE.Choose10Year) == False and Hit != 0:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def Alert20_Calculation():{n}{t}count = Integer(){n}{n}{t}Hit = Long(){n}{t}count = 1{n}{t}Hit = 0{n}{t}while count <= GetAllCopies(USD1099R):{n}{t}{t}if get_bool(USD1099R.Spouse, count) == True and get_bool(USD1099R.Qual4972, count) == True:{n}{t}{t}{t}Hit = Hit + 1{n}{t}{t}else:{n}{t}{t}{t}Hit = Hit{n}{t}{t}count = count + 1{n}{t}if get_number(USF4972SPOUSE.Print) == 1 and Hit > 1:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def Alert30_Calculation():{n}{t}return 0{n}{n}
def Alert40_Calculation():{n}{t}return 0{n}{n}
def Alert5_Calculation():{n}{t}if get_number(USWRetirement.SP4972) == 1 and GetStatus(UserModifiedStatus) == False:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def Alert50_Calculation():{n}{t}if get_bool(USF4972SPOUSE.MRD) == True and get_bool(USF4972SPOUSE.Choose10Year) == True and get_bool(USF4972SPOUSE.UseForm) == True and get_float(USF4972SPOUSE.Box9aPerc) == 0:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def Alert60_Calculation():{n}{t}count = Integer(){n}{n}{t}Hit = Long(){n}{t}count = 1{n}{t}Hit = 0{n}{t}while count <= GetAllCopies(USD1099R):{n}{t}{t}if get_currency(USD1099R.Other, count) > 0 and get_bool(USD1099R.Spouse, count) == True and get_bool(USD1099R.Qual4972, count) == True:{n}{t}{t}{t}Hit = Hit + 1{n}{t}{t}else:{n}{t}{t}{t}Hit = Hit{n}{t}{t}count = count + 1{n}{t}if get_bool(USF4972SPOUSE.MRD) == True and get_bool(USF4972SPOUSE.Choose10Year) == True and get_bool(USF4972SPOUSE.UseForm) == True:{n}{t}{t}if Hit != 0 and get_float(USF4972SPOUSE.Box8Perc) == 0:{n}{t}{t}{t}return 1{n}{t}{t}else:{n}{t}{t}{t}return 0{n}{t}else:{n}{t}{t}return 0{n}{n}
def Alert70_Calculation():{n}{t}return 0{n}{n}
def CapGain_Calculation():{n}{t}Estate = Currency(){n}{t}Estate = c_dollar(get_currency(USF4972SPOUSE.EstateTax) * get_float(USF4972SPOUSE.DBWC)){n}{t}if get_bool(USF4972SPOUSE.UseForm) == True and get_bool(USF4972SPOUSE.ChooseCapGain) == True:{n}{t}{t}return max_value(0, get_currency(USF4972SPOUSE.DBWF) - Estate){n}{t}else:{n}{t}{t}return 0{n}{n}
def CapGainTax_Calculation():{n}{t}return c_dollar(get_currency(USF4972SPOUSE.CapGain) * 0.2){n}{n}
def Common_Calculation():{n}{t}return get_string(USWBasicInfo.SPCommon){n}{n}
def DBWA_Calculation():{n}{t}return get_currency(USF4972SPOUSE.NUAG){n}{n}
def DBWB_Calculation():{n}{t}if get_bool(USF4972SPOUSE.NUA) == True:{n}{t}{t}return get_currency(USF4972SPOUSE.NUAB) + get_currency(USF4972SPOUSE.NUAD){n}{t}else:{n}{t}{t}return get_currency(USF4972SPOUSE.NUAB){n}{n}
def DBWC_Calculation():{n}{t}if get_currency(USF4972SPOUSE.DBWB) == 0:{n}{t}{t}return 0{n}{t}else:{n}{t}{t}return get_float(USF4972SPOUSE.DBWA) / get_float(USF4972SPOUSE.DBWB){n}{n}
def DBWD_Calculation():{n}{t}return get_currency(USF4972SPOUSE.DeathExcl){n}{n}
def DBWE_Calculation():{n}{t}return c_dollar(get_currency(USF4972SPOUSE.DBWD) * get_float(USF4972SPOUSE.DBWC)){n}{n}
def DBWF_Calculation():{n}{t}return get_currency(USF4972SPOUSE.DBWA) - get_currency(USF4972SPOUSE.DBWE){n}{n}
def Death_Calculation():{n}{t}TPShare = Currency(){n}{t}if get_bool(USF4972SPOUSE.CapGain) == True:{n}{t}{t}TPShare = get_currency(USF4972SPOUSE.DBWD) - get_currency(USF4972SPOUSE.DBWE){n}{t}else:{n}{t}{t}TPShare = get_currency(USF4972SPOUSE.DeathExcl){n}{t}if get_bool(USF4972SPOUSE.UseForm) == True and get_bool(USF4972SPOUSE.Choose10Year) == True:{n}{t}{t}if get_bool(USF4972SPOUSE.MRD) == True and get_float(USF4972SPOUSE.Box9aPerc) != 0:{n}{t}{t}{t}return CCur(TPShare /  ( get_float(USF4972SPOUSE.Box9aPerc) / 100 )){n}{t}{t}else:{n}{t}{t}{t}return TPShare{n}{t}else:{n}{t}{t}return 0{n}{n}
def Desc_Calculation():{n}{t}return get_string(USF4972SPOUSE.Common){n}{n}
def Estate_Calculation():{n}{t}CapGainEstate = Currency(){n}{t}if get_bool(USF4972SPOUSE.ChooseCapGain) == True:{n}{t}{t}CapGainEstate = c_dollar(get_currency(USF4972SPOUSE.EstateTax) * get_float(USF4972SPOUSE.DBWC)){n}{t}else:{n}{t}{t}CapGainEstate = 0{n}{t}if get_bool(USF4972SPOUSE.UseForm) == True and get_bool(USF4972SPOUSE.Choose10Year) == True:{n}{t}{t}if get_bool(USF4972SPOUSE.MRD) == True and get_float(USF4972SPOUSE.Box9aPerc) != 0:{n}{t}{t}{t}return CCur(( get_currency(USF4972SPOUSE.EstateTax) - CapGainEstate )  /  ( get_float(USF4972SPOUSE.Box9aPerc) / 100 )){n}{t}{t}else:{n}{t}{t}{t}return get_currency(USF4972SPOUSE.EstateTax) - CapGainEstate{n}{t}else:{n}{t}{t}return 0{n}{n}
def Exist_Calculation():{n}{t}return 1{n}{n}
def Ln13_Calculation():{n}{t}if get_currency(USF4972SPOUSE.AdjTotTaxable) > Decimal("69999"):{n}{t}{t}return 0{n}{t}else:{n}{t}{t}return min_value(Decimal("10000"), c_dollar(get_currency(USF4972SPOUSE.AdjTotTaxable) * 0.5)){n}{n}
def Ln14_Calculation():{n}{t}if get_currency(USF4972SPOUSE.AdjTotTaxable) > Decimal("69999"):{n}{t}{t}return 0{n}{t}else:{n}{t}{t}return max_value(0, get_currency(USF4972SPOUSE.AdjTotTaxable) - Decimal("20000")){n}{n}
def Ln15_Calculation():{n}{t}return c_dollar(get_currency(USF4972SPOUSE.Ln14) * 0.2){n}{n}
def Ln17_Calculation():{n}{t}return get_currency(USF4972SPOUSE.AdjTotTaxable) - get_currency(USF4972SPOUSE.MinDisAllow){n}{n}
def Ln19_Calculation():{n}{t}if get_bool(USF4972SPOUSE.UseForm) == True and get_bool(USF4972SPOUSE.Choose10Year) == True:{n}{t}{t}return max_value(0, get_currency(USF4972SPOUSE.Ln17) - get_currency(USF4972SPOUSE.Estate)){n}{t}else:{n}{t}{t}return 0{n}{n}
def Ln20_Calculation():{n}{t}if get_bool(USF4972SPOUSE.UseForm) == True and get_bool(USF4972SPOUSE.Choose10Year) == True:{n}{t}{t}if get_currency(USF4972SPOUSE.ActValue) > 0:{n}{t}{t}{t}if get_currency(USF4972SPOUSE.AdjTotTaxable) == 0:{n}{t}{t}{t}{t}return 0{n}{t}{t}{t}else:{n}{t}{t}{t}{t}return get_float(USF4972SPOUSE.ActValue) / get_float(USF4972SPOUSE.AdjTotTaxable){n}{t}{t}else:{n}{t}{t}{t}return 0{n}{t}else:{n}{t}{t}return 0{n}{n}
def Ln21_Calculation():{n}{t}return c_dollar(get_currency(USF4972SPOUSE.MinDisAllow) * get_float(USF4972SPOUSE.Ln20)){n}{n}
def Ln22_Calculation():{n}{t}if get_bool(USF4972SPOUSE.UseForm) == True and get_bool(USF4972SPOUSE.Choose10Year) == True:{n}{t}{t}return max_value(0, get_currency(USF4972SPOUSE.ActValue) - get_currency(USF4972SPOUSE.Ln21)){n}{t}else:{n}{t}{t}return 0{n}{n}
def Ln23_Calculation():{n}{t}return c_dollar(get_currency(USF4972SPOUSE.Ln19) * 0.1){n}{n}
def Ln26_Calculation():{n}{t}return c_dollar(get_currency(USF4972SPOUSE.Ln22) * 0.1){n}{n}
def MinDisAllow_Calculation():{n}{t}return get_currency(USF4972SPOUSE.Ln13) - get_currency(USF4972SPOUSE.Ln15){n}{n}
def MobDisQual_Calculation():{n}{t}if get_bool(USF4972SPOUSE.Print) == True:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def MRDText_Calculation():{n}{t}if get_number(USF4972SPOUSE.Print) == 1 and get_bool(USF4972SPOUSE.Choose10Year) == True and get_bool(USF4972SPOUSE.MRD) == True:{n}{t}{t}return 'MRD'{n}{t}else:{n}{t}{t}return ''{n}{n}
def Names_Calculation():{n}{t}return get_string(USWBasicInfo.SPCombName){n}{n}
def NUAA_Calculation():{n}{t}CapGain = Currency(){n}{n}{t}count = Integer(){n}{t}count = 1{n}{t}CapGain = 0{n}{t}while count <= GetAllCopies(USD1099R):{n}{t}{t}if get_bool(USD1099R.Qual4972, count) == True and get_bool(USD1099R.Spouse, count) == True:{n}{t}{t}{t}CapGain = CapGain + Round(get_currency(USD1099R.CapGain, count)){n}{t}{t}else:{n}{t}{t}{t}CapGain = CapGain{n}{t}{t}count = count + 1{n}{t}return CapGain{n}{n}
def NUAAmt_Calculation():{n}{t}if get_number(USF4972SPOUSE.Print) == 1 and get_bool(USF4972SPOUSE.NUA) == True and get_bool(USF4972SPOUSE.ChooseCapGain) == True and get_currency(USF4972SPOUSE.NUAD) > 0:{n}{t}{t}return get_currency(USF4972SPOUSE.NUAE){n}{t}else:{n}{t}{t}return 0{n}{n}
def NUAAmt2_Calculation():{n}{t}if get_number(USF4972SPOUSE.Print) == 1 and get_bool(USF4972SPOUSE.NUA) == True and get_bool(USF4972SPOUSE.ChooseCapGain) == False and get_currency(USF4972SPOUSE.NUAD) > 0:{n}{t}{t}return get_currency(USF4972SPOUSE.NUAD){n}{t}else:{n}{t}{t}return 0{n}{n}
def NUAB_Calculation():{n}{t}Taxable = Currency(){n}{n}{t}count = Integer(){n}{t}count = 1{n}{t}Taxable = 0{n}{t}while count <= GetAllCopies(USD1099R):{n}{t}{t}if get_bool(USD1099R.Qual4972, count) == True and get_bool(USD1099R.Spouse, count) == True:{n}{t}{t}{t}Taxable = Taxable + Round(get_currency(USD1099R.LumpSum, count)){n}{t}{t}else:{n}{t}{t}{t}Taxable = Taxable{n}{t}{t}count = count + 1{n}{t}return Taxable{n}{n}
def NUAC_Calculation():{n}{t}if get_currency(USF4972SPOUSE.NUAB) == 0:{n}{t}{t}return 0{n}{t}else:{n}{t}{t}return get_float(USF4972SPOUSE.NUAA) / get_float(USF4972SPOUSE.NUAB){n}{n}
def NUAD_Calculation():{n}{t}NUA = Currency(){n}{n}{t}count = Integer(){n}{t}count = 1{n}{t}NUA = 0{n}{t}while count <= GetAllCopies(USD1099R):{n}{t}{t}if get_bool(USD1099R.Qual4972, count) == True and get_bool(USD1099R.Spouse, count) == True:{n}{t}{t}{t}NUA = NUA + Round(get_currency(USD1099R.UnRealApp, count)){n}{t}{t}else:{n}{t}{t}{t}NUA = NUA{n}{t}{t}count = count + 1{n}{t}return NUA{n}{n}
def NUAE_Calculation():{n}{t}NUA = Currency(){n}{n}{t}count = Integer(){n}{t}#pulls from each R instead of computing the amount in total{n}{t}count = 1{n}{t}NUA = 0{n}{t}while count <= GetAllCopies(USD1099R):{n}{t}{t}if get_bool(USD1099R.Qual4972, count) == True and get_bool(USD1099R.Spouse, count) == True:{n}{t}{t}{t}NUA = NUA + Round(get_currency(USD1099R.F4972NUA, count)){n}{t}{t}else:{n}{t}{t}{t}NUA = NUA{n}{t}{t}count = count + 1{n}{t}return NUA{n}{n}
def NUAF_Calculation():{n}{t}return get_currency(USF4972SPOUSE.NUAD) - get_currency(USF4972SPOUSE.NUAE){n}{n}
def NUAG_Calculation():{n}{t}if get_bool(USF4972SPOUSE.NUA) == True:{n}{t}{t}return get_currency(USF4972SPOUSE.NUAA) + get_currency(USF4972SPOUSE.NUAE){n}{t}else:{n}{t}{t}return get_currency(USF4972SPOUSE.NUAA){n}{n}
def NUALn6_Calculation():{n}{t}if get_string(USF4972SPOUSE.NUAText) != '':{n}{t}{t}return get_string(USF4972SPOUSE.NUAText) + ' ' + get_string(USF4972SPOUSE.NUAAmt){n}{t}else:{n}{t}{t}return ''{n}{n}
def NUALn8_Calculation():{n}{t}if get_string(USF4972SPOUSE.NUAText2) != '':{n}{t}{t}return get_string(USF4972SPOUSE.NUAText2) + ' ' + get_string(USF4972SPOUSE.NUAAmt2){n}{t}else:{n}{t}{t}return ''{n}{n}
def NUAText_Calculation():{n}{t}if get_number(USF4972SPOUSE.Print) == 1 and get_bool(USF4972SPOUSE.NUA) == True and get_bool(USF4972SPOUSE.ChooseCapGain) == True and get_currency(USF4972SPOUSE.NUAD) > 0:{n}{t}{t}return 'NUA'{n}{t}else:{n}{t}{t}return ''{n}{n}
def NUAText2_Calculation():{n}{t}if get_number(USF4972SPOUSE.Print) == 1 and get_bool(USF4972SPOUSE.NUA) == True and get_bool(USF4972SPOUSE.ChooseCapGain) == False and get_currency(USF4972SPOUSE.NUAD) > 0:{n}{t}{t}return 'NUA'{n}{t}else:{n}{t}{t}return ''{n}{n}
def OrdInc_Calculation():{n}{t}OrdInc = Currency(){n}{n}{t}Taxable = Currency(){n}{n}{t}CapGain = Currency(){n}{t}Taxable = get_currency(USF4972SPOUSE.NUAB){n}{t}CapGain = get_currency(USF4972SPOUSE.NUAA){n}{t}if get_bool(USF4972SPOUSE.NUA) == True and get_bool(USF4972SPOUSE.CapGain) == True:{n}{t}{t}OrdInc = max_value(0, Taxable - CapGain) + get_currency(USF4972SPOUSE.NUAF){n}{t}elif get_bool(USF4972SPOUSE.NUA) == True and get_bool(USF4972SPOUSE.CapGain) == False:{n}{t}{t}OrdInc = Taxable + get_currency(USF4972SPOUSE.NUAD){n}{t}elif get_bool(USF4972SPOUSE.NUA) == False and get_bool(USF4972SPOUSE.CapGain) == True:{n}{t}{t}OrdInc = max_value(0, Taxable - CapGain){n}{t}else:{n}{t}{t}OrdInc = Taxable{n}{t}if get_bool(USF4972SPOUSE.UseForm) == True and get_bool(USF4972SPOUSE.Choose10Year) == True:{n}{t}{t}if get_bool(USF4972SPOUSE.MRD) == True:{n}{t}{t}{t}if get_float(USF4972SPOUSE.Box9aPerc) != 0:{n}{t}{t}{t}{t}return CCur(OrdInc /  ( get_float(USF4972SPOUSE.Box9aPerc) / 100 )){n}{t}{t}{t}else:{n}{t}{t}{t}{t}return OrdInc{n}{t}{t}else:{n}{t}{t}{t}return OrdInc{n}{t}else:{n}{t}{t}return 0{n}{n}
def Print_Calculation():{n}{t}if get_currency(USF4972SPOUSE.Tax) > 0 and FS() == 2:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def SSN_Calculation():{n}{t}return get_string(USWBasicInfo.SpouseSSN){n}{n}
def StopR_Calculation():{n}{t}#to stop the calculation of pensions on 1099-R{n}{t}if get_bool(USF4972SPOUSE.UseForm) == True and get_bool(USF4972SPOUSE.Choose10Year) == True:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
def Tax_Calculation():{n}{t}return get_currency(USF4972SPOUSE.CapGainTax) + get_currency(USF4972SPOUSE.Tax1MTax2){n}{n}
def Tax1_Calculation():{n}{t}return LumpSumTax(get_currency(USF4972SPOUSE.Ln23)){n}{n}
def Tax1By10_Calculation():{n}{t}return c_dollar(get_currency(USF4972SPOUSE.Tax1) * 10){n}{n}
def Tax1MTax2_Calculation():{n}{t}Line29 = Currency(){n}{t}Line29 = max_value(0, get_currency(USF4972SPOUSE.Tax1By10) - get_currency(USF4972SPOUSE.Tax2By10)){n}{t}if get_bool(USF4972SPOUSE.MRD) == True and get_float(USF4972SPOUSE.Box9aPerc) != 0:{n}{t}{t}return c_dollar(Line29 *  ( get_float(USF4972SPOUSE.Box9aPerc) / 100 )){n}{t}else:{n}{t}{t}return Line29{n}{n}
def Tax2_Calculation():{n}{t}return LumpSumTax(get_currency(USF4972SPOUSE.Ln26)){n}{n}
def Tax2By10_Calculation():{n}{t}return c_dollar(get_currency(USF4972SPOUSE.Tax2) * 10){n}{n}
def TotTaxable_Calculation():{n}{t}if get_bool(USF4972SPOUSE.UseForm) == True:{n}{t}{t}return max_value(0, get_currency(USF4972SPOUSE.OrdInc) - get_currency(USF4972SPOUSE.Death)){n}{t}else:{n}{t}{t}return 0{n}{n}
def TPAddback_Calculation():{n}{t}return max_value(0, get_currency(USF4972SPOUSE.TPCapGain) + get_currency(USF4972SPOUSE.TPTaxAmt) - get_currency(USF4972SPOUSE.TPEstate)){n}{n}
def TPAddbackNoEx_Calculation():{n}{t}return get_currency(USF4972SPOUSE.TPCapGainNoEx) + get_currency(USF4972SPOUSE.TPOrdInc){n}{n}
def TPCapGain_Calculation():{n}{t}return get_currency(USF4972SPOUSE.CapGain){n}{n}
def TPCapGainNoEx_Calculation():{n}{t}Estate = Currency(){n}{t}Estate = c_dollar(get_currency(USF4972SPOUSE.EstateTax) * get_float(USF4972SPOUSE.DBWC)){n}{t}if get_bool(USF4972SPOUSE.ChooseCapGain) == True and get_bool(USF4972SPOUSE.UseForm) == True:{n}{t}{t}return get_currency(USF4972SPOUSE.CapGain) + get_currency(USF4972SPOUSE.DBWE) + Estate{n}{t}else:{n}{t}{t}return 0{n}{n}
def TPDBE_Calculation():{n}{t}CapGainDBE = Currency(){n}{t}if get_bool(USF4972SPOUSE.ChooseCapGain) == True:{n}{t}{t}CapGainDBE = get_currency(USF4972SPOUSE.DBWE){n}{t}else:{n}{t}{t}CapGainDBE = 0{n}{t}if get_bool(USF4972SPOUSE.UseForm) == True and get_bool(USF4972SPOUSE.Choose10Year) == True:{n}{t}{t}return get_currency(USF4972SPOUSE.DeathExcl) - CapGainDBE{n}{t}else:{n}{t}{t}return 0{n}{n}
def TPEstate_Calculation():{n}{t}CapGainEstate = Currency(){n}{t}#to reduce line 10{n}{t}if get_bool(USF4972SPOUSE.ChooseCapGain) == True:{n}{t}{t}CapGainEstate = c_dollar(get_currency(USF4972SPOUSE.EstateTax) * get_float(USF4972SPOUSE.DBWC)){n}{t}else:{n}{t}{t}CapGainEstate = 0{n}{t}if get_bool(USF4972SPOUSE.UseForm) == True and get_bool(USF4972SPOUSE.Choose10Year) == True:{n}{t}{t}return get_currency(USF4972SPOUSE.EstateTax) - CapGainEstate{n}{t}else:{n}{t}{t}return 0{n}{n}
def TPOrdInc_Calculation():{n}{t}Taxable = Currency(){n}{n}{t}CapGain = Currency(){n}{t}Taxable = get_currency(USF4972SPOUSE.NUAB){n}{t}CapGain = get_currency(USF4972SPOUSE.NUAA){n}{t}if get_bool(USF4972SPOUSE.UseForm) == True and get_bool(USF4972SPOUSE.Choose10Year) == True:{n}{t}{t}if get_bool(USF4972SPOUSE.NUA) == True and get_bool(USF4972SPOUSE.CapGain) == True:{n}{t}{t}{t}return max_value(0, Taxable - CapGain) + get_currency(USF4972SPOUSE.NUAF){n}{t}{t}elif get_bool(USF4972SPOUSE.NUA) == True and get_bool(USF4972SPOUSE.CapGain) == False:{n}{t}{t}{t}return Taxable + get_currency(USF4972SPOUSE.NUAD){n}{t}{t}elif get_bool(USF4972SPOUSE.NUA) == False and get_bool(USF4972SPOUSE.CapGain) == True:{n}{t}{t}{t}return max_value(0, Taxable - CapGain){n}{t}{t}else:{n}{t}{t}{t}return Taxable{n}{t}else:{n}{t}{t}return 0{n}{n}
def TPTaxAmt_Calculation():{n}{t}if get_bool(USF4972SPOUSE.UseForm) == True and get_bool(USF4972SPOUSE.Choose10Year) == True:{n}{t}{t}if get_bool(USF4972SPOUSE.MRD) == True and get_float(USF4972SPOUSE.Box9aPerc) != 0:{n}{t}{t}{t}return CCur(get_currency(USF4972SPOUSE.TotTaxable) *  ( get_float(USF4972SPOUSE.Box9aPerc) / 100 )){n}{t}{t}else:{n}{t}{t}{t}return get_currency(USF4972SPOUSE.TotTaxable){n}{t}else:{n}{t}{t}return 0{n}{n}
def UseForm_Calculation():{n}{t}Ln1 = Long(){n}{n}{t}Ln2 = Long(){n}{n}{t}Ln3and4 = Long(){n}{n}{t}Ln5a = Long(){n}{n}{t}Ln5b = Long(){n}{t}if get_bool(USF4972SPOUSE.Ln1Yes) == True:{n}{t}{t}Ln1 = 0{n}{t}else:{n}{t}{t}Ln1 = 1{n}{t}if get_bool(USF4972SPOUSE.Ln2No) == True:{n}{t}{t}Ln2 = 0{n}{t}else:{n}{t}{t}Ln2 = 1{n}{t}if get_bool(USF4972SPOUSE.Ln3Yes) == True and get_bool(USF4972SPOUSE.Ln4Yes) == True:{n}{t}{t}Ln3and4 = 0{n}{t}elif get_bool(USF4972SPOUSE.Ln3Yes) == True and get_bool(USF4972SPOUSE.Ln4No) == True:{n}{t}{t}Ln3and4 = 0{n}{t}elif get_bool(USF4972SPOUSE.Ln3No) == True and get_bool(USF4972SPOUSE.Ln4Yes) == True:{n}{t}{t}Ln3and4 = 0{n}{t}else:{n}{t}{t}Ln3and4 = 1{n}{t}if get_bool(USF4972SPOUSE.Ln5aNo) == True:{n}{t}{t}Ln5a = 0{n}{t}else:{n}{t}{t}Ln5a = 1{n}{t}if get_bool(USF4972SPOUSE.Ln5bYes) == True:{n}{t}{t}Ln5b = 1{n}{t}else:{n}{t}{t}Ln5b = 0{n}{t}#condition above reversed since it applies only if rec'd as beneficiary{n}{t}if Ln1 + Ln2 + Ln3and4 + Ln5a + Ln5b == 0 and FS() == 2:{n}{t}{t}return 1{n}{t}else:{n}{t}{t}return 0{n}{n}
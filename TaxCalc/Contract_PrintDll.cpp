#include "StdAfx.h"
#include "TaxAct.CalcDll/Contract_Printdll.h"
#include "TaxAct.CalcDll/DllDataBuffer.h"
#include "TaxAct.CalcDll/DllDataBufferImpl.h"

#include "Prntmgr.h"
#include "Prntjob.h"
#include "Prntitem.h"

#include <map>
#include <string>

#define STR_CONST_PAIR(Name) {#Name, Name}

DLL_EXPORT printjobtype_t DLL_CALL PrintDll_GetPrintJobTypeConstant(const char *name)
{
    static const std::map<std::string, WORD> g_printJobTypeConstants = {
        STR_CONST_PAIR(PRINTJOBTYPE_NELCOFORM),
        STR_CONST_PAIR(PRINTJOBTYPE_VBFORM),
        STR_CONST_PAIR(PRINTJOBTYPE_FORMDETAILS),
        STR_CONST_PAIR(PRINTJOBTYPE_HTML),
        STR_CONST_PAIR(PRINTJOBTYPE_EFILEFORM),
        STR_CONST_PAIR(PRINTJOBTYPE_XMLRETURN),
        STR_CONST_PAIR(PRINTJOBTYPE_HTMLWND),
    };

    auto find = g_printJobTypeConstants.find(name);
    if (find != g_printJobTypeConstants.end())
    {
        return find->second;
    }
    else
    {
        return 0;
    }
}

DLL_EXPORT printjobflag_t DLL_CALL PrintDll_GetPrintJobFlagConstant(const char *name)
{
    static const std::map<std::string, DWORD> g_printJobFlagConstants = {
        STR_CONST_PAIR(PRINTJOBFLAG_EFSTATEMENT),
        STR_CONST_PAIR(PRINTJOBFLAG_DONOTFILE),
        STR_CONST_PAIR(PRINTJOBFLAG_EFSUMMARY),
        STR_CONST_PAIR(PRINTJOBFLAG_EFUNFORMATTED),
        STR_CONST_PAIR(PRINTJOBFLAG_EFFIXEDFORMAT),
        STR_CONST_PAIR(PRINTJOBFLAG_NODATETIME),
        STR_CONST_PAIR(PRINTJOBFLAG_EFPROPTAXRETURN),
        STR_CONST_PAIR(PRINTJOBFLAG_EFSTRINGRECORD),
        STR_CONST_PAIR(PRINTJOBFLAG_ALLUPPERCASE),
        STR_CONST_PAIR(PRINTJOBFLAG_OHIOPRINTRULES),
        STR_CONST_PAIR(PRINTJOBFLAG_DONOTFILEALIGNTOP),
        STR_CONST_PAIR(PRINTJOBFLAG_DONOTFILEALIGNBOTTOM),
        STR_CONST_PAIR(PRINTJOBFLAG_NEGVALSINPARENS),
        STR_CONST_PAIR(PRINTJOBFLAG_LANDSCAPE),
        STR_CONST_PAIR(PRINTJOBFLAG_PRINTPAGENUMBERS),
        STR_CONST_PAIR(PRINTJOBFLAG_MASKNUMBERS),
        STR_CONST_PAIR(PRINTJOBFLAG_DOINSERTBLANKPAGECHECK),
    };

    auto find = g_printJobFlagConstants.find(name);
    if (find != g_printJobFlagConstants.end())
    {
        return find->second;
    }
    else
    {
        return 0;
    }
}

DLL_EXPORT printitemtype_t DLL_CALL PrintDll_GetPrintItemTypeConstant(const char *name)
{
    static const std::map<std::string, WORD> g_printItemTypeConstants = {
        STR_CONST_PAIR(PRINTITEMTYPE_FORMTEXT),
        STR_CONST_PAIR(PRINTITEMTYPE_METAFILE),
        STR_CONST_PAIR(PRINTITEMTYPE_OCRFORMTEXT),
        STR_CONST_PAIR(PRINTITEMTYPE_NOTBOLDFORMTEXT),
        STR_CONST_PAIR(PRINTITEMTYPE_FORM8TEXT),
        STR_CONST_PAIR(PRINTITEMTYPE_DATETIME),
        STR_CONST_PAIR(PRINTITEMTYPE_FORM10TEXT),
        STR_CONST_PAIR(PRINTITEMTYPE_COURIER10TEXT),
        STR_CONST_PAIR(PRINTITEMTYPE_COURIER12TEXT),
        STR_CONST_PAIR(PRINTITEMTYPE_COURIER14TEXT),
        STR_CONST_PAIR(PRINTITEMTYPE_COURIER16TEXT),
        STR_CONST_PAIR(PRINTITEMTYPE_COURIER8TEXT),
        STR_CONST_PAIR(PRINTITEMTYPE_COURIER6TEXT),
        STR_CONST_PAIR(PRINTITEMTYPE_ARIAL10TEXT),
        STR_CONST_PAIR(PRINTITEMTYPE_ARIAL12TEXT),
        STR_CONST_PAIR(PRINTITEMTYPE_ARIAL14TEXT),
        STR_CONST_PAIR(PRINTITEMTYPE_ARIAL16TEXT),
        STR_CONST_PAIR(PRINTITEMTYPE_ARIAL48TEXT),
        STR_CONST_PAIR(PRINTITEMTYPE_ARIAL8TEXT),
        STR_CONST_PAIR(PRINTITEMTYPE_ARIAL6TEXT),
        STR_CONST_PAIR(PRINTITEMTYPE_ARIAL24TEXT),
        STR_CONST_PAIR(PRINTITEMTYPE_EFILEHEADER),
        STR_CONST_PAIR(PRINTITEMTYPE_EFILETEXT),
        STR_CONST_PAIR(PRINTITEMTYPE_EFILEFEDDATA),
        STR_CONST_PAIR(PRINTITEMTYPE_BARCODESTART),
        STR_CONST_PAIR(PRINTITEMTYPE_BARCODEPDF417),
        STR_CONST_PAIR(PRINTITEMTYPE_BARCODETEXT),
        STR_CONST_PAIR(PRINTITEMTYPE_BARCODEFILE),
        STR_CONST_PAIR(PRINTITEMTYPE_DATETIMETEXT),
        STR_CONST_PAIR(PRINTITEMTYPE_BARCODE3OF9),
        STR_CONST_PAIR(PRINTITEMTYPE_BARCODE2OF5),
        STR_CONST_PAIR(PRINTITEMTYPE_BARCODEDATAMATRIX),
        STR_CONST_PAIR(PRINTITEMTYPE_XMLTEXT),
        STR_CONST_PAIR(PRINTITEMTYPE_XMLTAG),
        STR_CONST_PAIR(PRINTITEMTYPE_XMLENDTAG),
        STR_CONST_PAIR(PRINTITEMTYPE_XMLATTRIB),
        STR_CONST_PAIR(PRINTITEMTYPE_XMLATTRIBDOCID),
        STR_CONST_PAIR(PRINTITEMTYPE_XMLATTRIBREFDOCID),
        STR_CONST_PAIR(PRINTITEMTYPE_XMLSIMPLETAG),
        STR_CONST_PAIR(PRINTITEMTYPE_XMLSCHEMAPATH),
        STR_CONST_PAIR(PRINTITEMTYPE_XMLFEDFORM),
        STR_CONST_PAIR(PRINTITEMTYPE_XMLSETFEDFORMREPLACETAG),
        STR_CONST_PAIR(PRINTITEMTYPE_XMLSETFEDFORMREPLACEATTRIBUTE),
    };

    auto find = g_printItemTypeConstants.find(name);
    if (find != g_printItemTypeConstants.end())
    {
        return find->second;
    }
    else
    {
        return 0;
    }
}

DLL_EXPORT printitemflag_t DLL_CALL PrintDll_GetPrintItemFlagConstant(const char *name)
{
    static const std::map<std::string, DWORD> g_printItemFlagConstants = {
        STR_CONST_PAIR(PRINTITEMFLAG_LEFTJUSTIFY),
        STR_CONST_PAIR(PRINTITEMFLAG_RIGHTJUSTIFY),
        STR_CONST_PAIR(PRINTITEMFLAG_CENTERJUSTIFY),
        STR_CONST_PAIR(PRINTITEMFLAG_BOLD),
        STR_CONST_PAIR(PRINTITEMFLAG_ITALIC),
        STR_CONST_PAIR(PRINTITEMFLAG_UNDERLINE),
        STR_CONST_PAIR(PRINTITEMFLAG_STRIKEOUT),
        STR_CONST_PAIR(PRINTITEMFLAG_FORCEVALUE),
        STR_CONST_PAIR(PRINTITEMFLAG_STMREF),
        STR_CONST_PAIR(PRINTITEMFLAG_EFTRANSDATE),
        STR_CONST_PAIR(PRINTITEMFLAG_EFEFIN),
        STR_CONST_PAIR(PRINTITEMFLAG_EFETIN),
        STR_CONST_PAIR(PRINTITEMFLAG_EFTRANSDATEYYYYMMDD),
        STR_CONST_PAIR(PRINTITEMFLAG_EFIPDATA),
        STR_CONST_PAIR(PRINTITEMFLAG_EFPOSTMARKTIME),
        STR_CONST_PAIR(PRINTITEMFLAG_EFCONSORTIUMINDICATOR),
        STR_CONST_PAIR(PRINTITEMFLAG_DYNASIZEFONT),
        STR_CONST_PAIR(PRINTITEMFLAG_EFBANKRTN),
        STR_CONST_PAIR(PRINTITEMFLAG_EFBANKDAN),
        STR_CONST_PAIR(PRINTITEMFLAG_EFBANKCHECKING),
        STR_CONST_PAIR(PRINTITEMFLAG_EFBANKSAVINGS),
        STR_CONST_PAIR(PRINTITEMFLAG_EFSTATEPOSTMARKDATE),
        STR_CONST_PAIR(PRINTITEMFLAG_EFSTATEPOSTMARKTIME),
        STR_CONST_PAIR(PRINTITEMFLAG_EFPRESERVECASE),
        STR_CONST_PAIR(PRINTITEMFLAG_YOFFSETHALFSPACE),
        STR_CONST_PAIR(PRINTITEMFLAG_OFFSETHALFSPACE),
        STR_CONST_PAIR(PRINTITEMFLAG_HASOFFSETVALUES),
    };

    auto find = g_printItemFlagConstants.find(name);
    if (find != g_printItemFlagConstants.end())
    {
        return find->second;
    }
    else
    {
        return 0;
    }
}

DLL_EXPORT int DLL_CALL PrintDll_GetPrinterConstant(const char *name)
{
    static const std::map<std::string, int> g_printerConstants = {
        STR_CONST_PAIR(PRINTER_FORMDPI),
        STR_CONST_PAIR(PRINTER_FORMWIDTH),
        STR_CONST_PAIR(PRINTER_FORMHEIGHT),
        STR_CONST_PAIR(PRINTER_FORMPAGEWIDTH),
        STR_CONST_PAIR(PRINTER_FORMPAGEHEIGHT),
        STR_CONST_PAIR(PRINTER_FORMOFFSETX),
        STR_CONST_PAIR(PRINTER_FORMOFFSETY),
        STR_CONST_PAIR(PRINTER_FORMREDUCTION),
        STR_CONST_PAIR(PRINTER_FORMCHARWIDTH),
        STR_CONST_PAIR(PRINTER_FORMCHARHEIGHT),
        STR_CONST_PAIR(PRINTER_FORMTEXTADJUSTX),
        STR_CONST_PAIR(PRINTER_FORMTEXTADJUSTY),
    };

    auto find = g_printerConstants.find(name);
    if (find != g_printerConstants.end())
    {
        return find->second;
    }
    else
    {
        return 0;
    }
}

void PrintDll_ExportDllDataBuffer()
{
    // placeholder so the linker includes DllDataBuffer callbacks
    DllDataBufferImpl impl;
}
